'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 18 April 2011 at 3:22 pm'!!ProcessBrowser commentStamp: '<historical>' prior: 0!!!classDefinition: #ProcessBrowserWindow category: #'Morphic-Tools'!SystemWindow subclass: #ProcessBrowserWindow	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Tools'!!Model methodsFor: 'dependents' stamp: 'jmv 4/16/2011 23:09'!containingWindow	"Answer the window that holds the receiver.  The dependents technique is odious and may not be airtight, if multiple windows have the same model."self flag: #ojo.	"Patetico. Matar esto, y mirar con sospecha cualquier ref a SystemWindow, senders of #dependents y porquerias similares"	^self dependents detect: 			[:d | 			(d isKindOf: SystemWindow) 				and: [d model == self]]		ifNone: nil! !!Model methodsFor: 'dependents' stamp: 'jmv 4/16/2011 23:10'!topView	"Find the first top view on me. Is there any danger of their being two with the same model?  Any danger from ungarbage collected old views?  Ask if schedulled?"self flag: #ojo.	"Patetico. Matar esto, y mirar con sospecha cualquier ref a SystemWindow, senders of #dependents y porquerias similares (como referencias a dependents...)"	dependents ifNil: [^nil].	dependents 				do: [:v | ((v is: #SystemWindow) and: [ v isInWorld ]) ifTrue: [^v]].		^nil! !!FileList methodsFor: 'initialization' stamp: 'jmv 4/16/2011 23:12'!updateButtonRow	"Dynamically update the contents of the button row, if any."	| window row |self flag: #ojo.	"Patetico. Matar esto, y mirar con sospecha cualquier ref a SystemWindow, senders of #dependents y porquerias similares"	window _ self dependents 				detect: [:m | (m is: #SystemWindow) and: [ m model == self ]]				ifNone: [^self].	row _ window 		findDeepSubmorphThat: [:m | m hasProperty: #buttonRow]		ifAbsent: [^self].			window updateButtonRow: row! !!ProcessBrowser methodsFor: 'accessing' stamp: 'jmv 4/16/2011 22:48'!startedCPUWatcher	^startedCPUWatcher! !!ProcessBrowser methodsFor: 'updating' stamp: 'jmv 4/16/2011 20:54'!setUpdateCallbackAfter: seconds	[		(Delay forSeconds: seconds) wait.		WorldState addDeferredUIMessage: [ self updateProcessList ]] fork! !!ProcessBrowser methodsFor: 'updating' stamp: 'jmv 4/16/2011 20:55'!startAutoUpdate	self isAutoUpdatingPaused ifTrue: [ ^ autoUpdateProcess resume ].	self isAutoUpdating ifFalse: [ | delay |		delay _ Delay forSeconds: 2.		autoUpdateProcess _ [		[ self hasView ] whileTrue: [			delay wait.			WorldState addDeferredUIMessage: [ self updateProcessList ]].		autoUpdateProcess _ nil ] newProcess.		autoUpdateProcess resume ].	self updateProcessList.! !!ProcessBrowser class methodsFor: 'instance creation' stamp: 'jmv 4/16/2011 22:53'!open	"	ProcessBrowser open	"	"Create and schedule a ProcessBrowser."	Smalltalk garbageCollect.	ProcessBrowserWindow open: self new label: nil! !!ProcessBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 22:52'!buildMorphicWindow	"Create a pluggable version of me, answer a window"	| aTextMorph list1 list2 upperRow |	list1 _ (PluggableListMorph				model: model				listGetter: #processNameList				indexGetter: #processListIndex				indexSetter: #processListIndex:				menuGetter: #processListMenu				keystrokeAction: #processListKey:from:)			enableDragNDrop: false.	list2 _ (PluggableListMorph				model: model				listGetter: #stackNameList				indexGetter: #stackListIndex				indexSetter: #stackListIndex:				menuGetter: #stackListMenu				keystrokeAction: #stackListKey:from:)			enableDragNDrop: false.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: list1 proportionalWidth: 0.5;		addAdjusterAndMorph: list2 proportionalWidth: 0.5.	aTextMorph _ TextModelMorph				textProvider: model				textGetter: #selectedMethod.	aTextMorph askBeforeDiscardingEdits: false.	self layoutMorph		addMorph: upperRow proportionalHeight: 0.5;		addAdjusterAndMorph: aTextMorph proportionalHeight: 0.5.	self setUpdatablePanesFrom: #(#processNameList #stackNameList ).	self setLabel: 'Process Browser'.	model startedCPUWatcher ifTrue: [ self setUpdateCallbackAfter: 7 ]! !!ProcessBrowserWindow methodsFor: 'updating' stamp: 'jmv 4/16/2011 22:54'!setUpdateCallbackAfter: seconds	self flag: #ojo.	"duplicated in model..."	[		(Delay forSeconds: seconds) wait.		WorldState addDeferredUIMessage: [ model updateProcessList ]] fork! !!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 4/16/2011 23:15'!browseViewReferencesFromNonViews	"	Smalltalk browseViewReferencesFromNonViews	"	| aList aLiteral aCollection |	aCollection _ OrderedCollection new.	"Tweak to look just for pluggables or also for menus (or maybe for all morphs)""	PopUpMenu withAllSubclasses , MenuMorph withAllSubclasses , PluggableMorph withAllSubclasses do: [ :view |"	PluggableMorph withAllSubclassesDo: [ :view |				aLiteral _ view name.				"tweak to look for refs to SysWindow subhierarchy or not"		(view includesBehavior: SystemWindow) ifFalse: [					Smalltalk allBehaviorsDo: [ :class |				((class includesBehavior: Morph) or: [ class includesBehavior: Morph class ]) ifFalse: [					aList _ class						whichSelectorsReferTo: aLiteral						special: false						byte: nil.					aList do: [ :sel |						sel == #DoIt ifFalse: [							"For special selectors, look for the literal in the source code.							Otherwise, for example, searching for senders of #== will include senders of #ifNil:"							((class sourceCodeAt: sel) findString: aLiteral) > 0  ifTrue: [								aCollection add:									(MethodReference new										setStandardClass: class										methodSymbol: sel) ]]]]]]].	Smalltalk		browseMessageList: aCollection asSet asArray sort		name: 'References to Views from non-Views'		autoSelect: ''.! !ProcessBrowser removeSelector: #openAsMorph!ChangeList removeSelector: #buildMorphicCodePane!