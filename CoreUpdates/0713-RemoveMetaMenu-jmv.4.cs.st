'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 16 December 2010 at 2:45:36 pm'!!Browser methodsFor: 'message functions' stamp: 'jmv 12/16/2010 14:41'!messageListMenu: aMenu shifted: shifted	"Answer the message-list menu"	"Changed by emm to include menu-item for breakpoints"	shifted ifTrue: [^ self shiftedMessageListMenu: aMenu].	aMenu addList:#(			('what to show...'				offerWhatToShowMenu)                	('toggle break on entry'		toggleBreakOnEntry)            		-			('browse full (b)' 				browseMethodFull)			('browse hierarchy (h)'			classHierarchy)			('browse method (O)'			openSingleMessageBrowser)			('browse protocol (p)'			browseFullProtocol)			-			('fileOut'						fileOutMessage)			-			('senders of... (n)'				browseSendersOfMessages)			('implementors of... (m)'			browseMessages)			('inheritance (i)'					methodHierarchy)			('versions (v)'					browseVersions)			-			('inst var refs...'					browseInstVarRefs)			('inst var defs...'				browseInstVarDefs)			('class var refs...'				browseClassVarRefs)			('class variables'				browseClassVariables)			('class refs (N)'					browseClassRefs)			-			('remove method (x)'			removeMessage)			-			('more...'						shiftedYellowButtonActivity)).	^ aMenu! !!LightWidget methodsFor: 'debug and other' stamp: 'jmv 12/16/2010 14:02'!buildDebugMenu: aHand 	"Answer a debugging menu for the receiver.  The hand argument is seemingly historical and plays no role presently"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addStayUpIcons.	self isKnownFailing		ifTrue: 			[aMenu add: 'start drawing again' translated action: #resumeAfterDrawError.			aMenu addLine].	(self hasProperty: #errorOnStep) 		ifTrue: 			[aMenu add: 'start stepping again' translated action: #resumeAfterStepError.			aMenu addLine].	aMenu add: 'inspect morph' translated action: #inspectInMorphic:.	aMenu add: 'inspect owner chain' translated action: #inspectOwnerChain.	aMenu 		add: 'explore morph' translated		target: self		selector: #explore.	aMenu addLine.	aMenu 		add: 'browse morph class' translated		target: self		selector: #browseHierarchy.	aMenu addLine.	aMenu		add: 'edit balloon help' translated action: #editBalloonHelpText.	^aMenu! !!LightWidget methodsFor: 'events-processing' stamp: 'jmv 12/16/2010 14:00'!handleMouseDown: anEvent	"System level event handling."	anEvent wasHandled ifTrue:[^self]. "not interested"	anEvent hand removePendingBalloonFor: self.	anEvent wasHandled: true.	self activateWindow.	"Make me modal during mouse transitions"	anEvent hand newMouseFocus: self event: anEvent.	anEvent blueButtonChanged ifTrue:[^self blueButtonDown: anEvent].	self mouseDown: anEvent.	anEvent hand removeHaloFromClick: anEvent on: self.	(self handlesMouseStillDown: anEvent) ifTrue:[		self startStepping: #handleMouseStillDown: 			at: Time millisecondClockValue + self mouseStillDownThreshold			arguments: {anEvent copy resetHandlerFields}			stepTime: self mouseStillDownStepRate ].! !!Morph methodsFor: 'debug and other' stamp: 'jmv 12/16/2010 14:02'!buildDebugMenu: aHand 	"Answer a debugging menu for the receiver.  The hand argument is seemingly historical and plays no role presently"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addStayUpIcons.	self isKnownFailing		ifTrue: 			[aMenu add: 'start drawing again' translated action: #resumeAfterDrawError.			aMenu addLine].	(self hasProperty: #errorOnStep) 		ifTrue: 			[aMenu add: 'start stepping again' translated action: #resumeAfterStepError.			aMenu addLine].	aMenu add: 'inspect morph' translated action: #inspectInMorphic:.	aMenu add: 'inspect owner chain' translated action: #inspectOwnerChain.	self hasModel 		ifTrue: 			[aMenu 				add: 'inspect model' translated				target: self model				action: #inspect].	aMenu 		add: 'explore morph' translated		target: self		selector: #explore.	aMenu addLine.	aMenu 		add: 'browse morph class' translated		target: self		selector: #browseHierarchy.	self hasModel 		ifTrue: 			[aMenu 				add: 'browse model class'				target: self model				selector: #browseHierarchy].	aMenu addLine.	aMenu		add: 'edit balloon help' translated action: #editBalloonHelpText.	^aMenu! !!Morph methodsFor: 'event handling' stamp: 'jmv 12/16/2010 14:00'!handleMouseDown: anEvent	"System level event handling."	anEvent wasHandled ifTrue:[^self]. "not interested"	anEvent hand removePendingBalloonFor: self.	anEvent wasHandled: true.	self activateWindow.	"Make me modal during mouse transitions"	anEvent hand newMouseFocus: self event: anEvent.	anEvent blueButtonChanged ifTrue:[^self blueButtonDown: anEvent].	self mouseDown: anEvent.	anEvent hand removeHaloFromClick: anEvent on: self.	(self handlesMouseStillDown: anEvent) ifTrue:[		self startStepping: #handleMouseStillDown: 			at: Time millisecondClockValue + self mouseStillDownThreshold			arguments: {anEvent copy resetHandlerFields}			stepTime: self mouseStillDownStepRate ].! !!PluggableTextModel methodsFor: 'pane menu' stamp: 'jmv 12/16/2010 14:35'!perform: selector orSendTo: otherTarget	"Selector was just chosen from a menu by a user.  If can respond, thenperform it on myself. If not, send it to otherTarget, presumably theeditPane from which the menu was invoked."	^ (self respondsTo: selector)		ifTrue: [ self perform: selector ]		ifFalse: [			(textProvider respondsTo: selector)				ifTrue: [ textProvider perform: selector ]				ifFalse: [ otherTarget perform: selector ]].! !!Preferences class methodsFor: 'personalization' stamp: 'jmv 12/16/2010 14:01'!disableProgrammerFacilities	"Warning: do not call this lightly!!  It disables all access to menus, debuggers, halos.  There is no guaranteed return from this, which is to say, you cannot necessarily reenable these things once they are disabled -- you can only use whatever the UI of the current project affords, and you cannot even snapshot -- you can only quit.      You can completely reverse the work of this method by calling the dual Preferences method enableProgrammerFacilities, provided you have left yourself leeway to bring about a call to that method.	To set up a system that will come up in such a state, you have to request the snapshot in the same breath as you disable the programmer facilities.  To do this, put the following line into the 'do' menu and then evaluate it from that 'do' menu:         Preferences disableProgrammerFacilities.You will be prompted for a new image name under which to save the resulting image."	Beeper beep.	(self confirm: 'CAUTION!!!!This is a drastic step!!Do you really want to do this?')		ifFalse:			[self beep.  ^ self inform: 'whew!!'].	self disable: #cmdDotEnabled.       "No user-interrupt-into-debugger"	"self enable: #noviceMode."           "No control-menu"	self disable: #warnIfNoSourcesFile.	self disable: #warnIfNoChangesFile.	Smalltalk saveAs! !!Preferences class methodsFor: 'personalization' stamp: 'jmv 12/16/2010 14:01'!enableProgrammerFacilities	"Meant as a one-touch recovery from a #disableProgrammerFacilities call."	"Preferences enableProgrammerFacilities"	self enable: #cmdDotEnabled."	self disable: #noviceMode."	self enable: #warnIfNoSourcesFile.	self enable: #warnIfNoChangesFile.! !!TextEditor methodsFor: 'typing support' stamp: 'jmv 12/16/2010 14:02'!dispatchOn: aKeyboardEvent	"Carry out the action associated with this character, if any."	| asciiValue |	self clearParens.  	asciiValue _ aKeyboardEvent keyValue.	"Control keys are handled by KeystrokeActions even if they have any modifiers"	(asciiValue >= 32 and: [		aKeyboardEvent commandAltKeyPressed ]) ifTrue: [		^self perform: (self class cmdActions at: asciiValue + 1) with: aKeyboardEvent ].	(')]}' includes: aKeyboardEvent keyCharacter)		ifTrue: [ self blinkPrevParen: aKeyboardEvent ].	^ self perform: (KeystrokeActions at: asciiValue + 1) with: aKeyboardEvent! !!TextEditor class methodsFor: 'menu' stamp: 'jmv 12/2/2010 09:56'!paneMenu: aMenu shifted: shifted	| donorMenu |	donorMenu _ shifted		ifTrue: [			self shiftedYellowButtonMenu]		ifFalse: [			self yellowButtonMenu].	aMenu labels: donorMenu labelString lines: donorMenu lineArray selections: donorMenu selections.	aMenu addTitle: 'Text Editor'; addStayUpIcons.	^aMenu! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 12/16/2010 14:24'!initializeCmdKeyShortcuts	"Initialize the (unshifted) command-key (or alt-key) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor kbdTest"	"SmalltalkEditor initialize"	| cmds |	self initializeBasicCmdKeyShortcuts.		cmds := #(		$b	#browseIt: 		$d	#doIt: 		$i	#inspectIt: 		$j	#doAgainOnce: 		$l	#cancel: 		$m	#implementorsOfIt: 		$n	#sendersOfIt: 		$p	#printIt: 		$q	#querySymbol: 		$s	#save: 		$A	#argAdvance:		$B	#browseItHere:		$F	#displayIfFalse:		$G	#fileItIn:		$I	#exploreIt:		$N	#referencesToIt:		$T	#displayIfTrue:		$V	#pasteInitials:	).	1 to: cmds size		by: 2		do: [ :i | cmdActions at: (cmds at: i) asciiValue + 1 put: (cmds at: i + 1)]! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 12/16/2010 14:17'!initializeShiftedYellowButtonMenu	"Initialize the yellow button pop-up menu and corresponding messages."	"SmalltalkEditor initialize"	shiftedYellowButtonMenu _ SelectionMenu fromArray: {		{'explain' translated.						#explain}.		{'pretty print' translated.					#prettyPrint}.		#-.		{'browse it (b)' translated.					#browseIt}.		{'senders of it (n)' translated.				#sendersOfIt}.		{'implementors of it (m)' translated.		#implementorsOfIt}.		{'references to it (N)' translated.			#referencesToIt}.		#-.		{'method strings with it (E)' translated.		#methodStringsContainingit}.		{'method source with it' translated.		#methodSourceContainingIt}.		{'class comments with it' translated.		#classCommentsContainingIt}.		{'change sets with it' translated.			#browseChangeSetsWithSelector}.		#-.		{'more...' translated.						#yellowButtonActivity}.	}! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 12/16/2010 14:21'!initializeYellowButtonMenu	"Initialize the yellow button pop-up menu and corresponding messages."	"SmalltalkEditor initialize"	yellowButtonMenu _ SelectionMenu fromArray: {		{'find...(f)' translated.				#find}.		{'find again (g)' translated.			#findAgain}.		{'set search string (h)' translated.	#setSearchString}.		#-.		{'do again (j)' translated.			#again}.		{'undo (z)' translated.				#undo}.		#-.		{'copy (c)' translated.				#copySelection}.		{'cut (x)' translated.				#cut}.		{'paste (v)' translated.				#paste}.		{'paste...' translated.				#pasteRecent}.		#-.		{'do it (d)' translated.				#doIt}.		{'print it (p)' translated.				#printIt}.		{'inspect it (i)' translated.			#inspectIt}.		{'explore it (I)' translated.			#exploreIt}.		{'debug it' translated.				#debugIt}.		#-.		{'accept (s)' translated.				#accept}.		{'cancel (l)' translated.				#cancel}.		#-.		{'show bytecodes' translated.		#showBytecodes}.		#-.		{'more...' translated.				#shiftedTextPaneMenuRequest}.	}! !!FileContentsEditor class methodsFor: 'menu' stamp: 'jmv 12/16/2010 14:45'!paneMenu: aMenu shifted: shifted	"Construct aMenu to have items appropriate for the file browser's code pane, given the shift state provided"	| shiftMenu services maybeLine extraLines brevityState fileName theModel |	shifted ifTrue: [		shiftMenu _ self shiftedYellowButtonMenu.		^ aMenu 			labels: shiftMenu labelString 			lines: shiftMenu lineArray			selections: shiftMenu selections].	theModel _ aMenu defaultTarget textProvider.	fileName _ theModel fileName.	fileName ifNotNil: [		brevityState _ theModel brevityState.		services _ OrderedCollection new.		(#(briefHex briefFile needToGetBriefHex needToGetBrief) includes: brevityState) ifTrue: [			services add: theModel serviceGet].		(#(fullHex briefHex needToGetFullHex needToGetBriefHex) includes: brevityState) ifFalse: [			services add: theModel serviceGetHex].		maybeLine _ services size.		(#('st' 'cs') includes: theModel suffixOfSelectedFile) ifTrue: [			services addAll:				(theModel servicesFromSelectorSpecs:					#(fileIntoNewChangeSet: fileIn: browseChangesFile: browseFile:))].		extraLines _ OrderedCollection new.		maybeLine > 0 ifTrue: [extraLines add: maybeLine].		services size > maybeLine ifTrue: [extraLines add: services size].		aMenu 			addServices: services			for: theModel fullName			extraLines: extraLines].	aMenu addList: {			{'find...(f)' translated.				#find}.			{'find again (g)' translated.			#findAgain}.			{'set search string (h)' translated.	#setSearchString}.			#-.			{'do again (j)' translated.			#again}.			{'undo (z)' translated.				#undo}.			#-.			{'copy (c)' translated.				#copySelection}.			{'cut (x)' translated.				#cut}.			{'paste (v)' translated.				#paste}.			{'paste...' translated.				#pasteRecent}.			#-.			{'do it (d)' translated.				#doIt}.			{'print it (p)' translated.				#printIt}.			{'inspect it (i)' translated.			#inspectIt}.			{'fileIn selection (G)' translated.	#fileItIn}.			#-.			{'accept (s)' translated.				#accept}.			{'cancel (l)' translated.				#cancel}}.	^ aMenu! !!TextModelMorph methodsFor: 'menu' stamp: 'jmv 12/2/2010 09:58'!getMenu: shiftKeyState	| menu |	menu _ MenuMorph new defaultTarget: model.	^editorClass paneMenu: menu shifted: shiftKeyState! !TextModelMorph removeSelector: #classNamesContainingIt!TextModelMorph removeSelector: #methodNamesContainingIt!TextModelMorph removeSelector: #saveContentsInFile!SmalltalkEditor removeSelector: #classNamesContainingIt!SmalltalkEditor removeSelector: #methodNamesContainingIt!SmalltalkEditor removeSelector: #methodNamesContainingIt:!SmalltalkEditor removeSelector: #methodStringsContainingIt:!TextEditor removeSelector: #saveContentsInFile!Preferences class removeSelector: #cmdGesturesEnabled!Preferences class removeSelector: #cmdKeysInText!MenuMorph removeSelector: #invokeMetaMenu:!Morph removeSelector: #buildMetaMenu:!Morph removeSelector: #invokeMetaMenu:!Morph removeSelector: #invokeMetaMenuAt:event:!FileList removeSelector: #shiftedYellowButtonActivity!!FileList reorganize!('file list' fileList fileListIndex fileListIndex: fileName readOnlyStream)('file list menu' compressFile editorClass fileListMenu: fileSelectedMenu: fullFileListMenu:shifted: itemsForAnyFile itemsForFile: itemsForNoFile myServicesForFile:suffix: noFileSelectedMenu: offerAllFileOptions suffixOfSelectedFile)('file menu action' addNew:byEvaluating: addNewDirectory addNewFile deleteFile get getHex renameFile sortByDate sortByName sortBySize)('initialization' buttonSelectorsToSuppress directory: dynamicButtonServices initialize labelString modelSleep optionalButtonRow optionalButtonSpecs setFileStream: universalButtonServices updateButtonRow updateButtonRow:)('menu messages' copyName)('own services' serviceAddNewDirectory serviceAddNewFile serviceAllFileOptions serviceBrowseCodeFiles serviceCompressFile serviceCopyName serviceDeleteFile serviceGet serviceGetHex serviceRenameFile serviceSortByDate serviceSortByName serviceSortBySize serviceViewContentsInWorkspace servicesFromSelectorSpecs: viewContentsInWorkspace)('to be transformed in registration' volumeMenu:)('updating' update:)('volume list and pattern' deleteDirectory directory fileNameFormattedFrom:namePad:sizePad:sizeWithCommasPad: pattern pattern: veryDeepFixupWith: volumeList volumeListIndex volumeListIndex:)('private' acceptedStringOrText addPath: defaultContents entriesMatching: fileNameFromFormattedItem: folderString fullName isFileSelected listForPatterns: put: readContentsBrief: readContentsHex: recentDirs registeredFileReaderClasses resort: sortBlock sortingByDate sortingByName sortingBySize updateFileList)('optional panes' wantsOptionalButtons)('accessing' brevityState)('commands')!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."SmalltalkEditor initialize!