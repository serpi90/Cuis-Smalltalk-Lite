'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 29 December 2011 at 10:52:34 am'!!KeyboardEvent methodsFor: 'platform peculiarities' stamp: 'jmv 12/29/2011 10:52'!             isCmdAltGreaterThan	"Answer true if the user pressed cmd/Alt + $>	We need this special method because of platform differences, especially the weird way the Mac VM reports keystrokes if cmd or control are held down (the character answered is usually the unshifted one, even if shift is pressed, depending on keyboard layout!!)	Note: On the Mac, this code handles US, German and Spanish layouts. Add more as needed...	Tweak both #isCmdAltLessThan and #isCmdAltGreaterThan !!"	| char shifted |	self commandAltKeyPressed ifFalse: [ ^false ].	char _ self keyCharacter.	"Do the easy test for non macOS"	Smalltalk platformName = 'Mac OS' ifFalse: [		^char = $> ].	shifted _ self shiftPressed.		"For Mac keyboard layouts where $> is unshifted (Is there such a layout?)"	(shifted not and: [ char = $> ])		ifTrue: [ ^true ].	"For Mac keyboard layouts where $> is shift + $. (for example US).	As cmd is pressed, the Mac VM gives us the unshifted character, i.e. $."	(shifted and: [ char = $. ])		ifTrue: [ ^true ].	"For Mac keyboard layouts where $> is shift + $<.	In this case, in the German layout, the Mac VM gives us $> (surprising!!)"	(shifted and: [ char = $> ])		ifTrue: [ ^true ].	"For Mac keyboard layouts where $> is shift + $<	In the Spanish layout, as cmd is pressed, the Mac VM gives us the unshifted character, i.e. $<"	(shifted and: [ char = $< ])		ifTrue: [ ^true ].	"We guess it is not cmd + $> then..."	^false! !!KeyboardEvent methodsFor: 'platform peculiarities' stamp: 'jmv 12/29/2011 10:52'!                            isCmdAltLessThan	"Answer true if the user pressed cmd/Alt + $<	We need this special method because of platform differences, especially the weird way the Mac VM reports keystrokes if cmd or control are held down (the character answered is usually the unshifted one, even if shift is pressed, depending on keyboard layout!!)	Note: On the Mac, this code handles US, German and Spanish layouts. Add more as needed...	Tweak both #isCmdAltLessThan and #isCmdAltGreaterThan !!"	| char shifted |	self commandAltKeyPressed ifFalse: [ ^false ].	char _ self keyCharacter.	"Do the easy test for non macOS"	Smalltalk platformName = 'Mac OS' ifFalse: [		^char = $< ].	shifted _ self shiftPressed.		"For Mac keyboard layouts where $< is unshifted (for example, German and Spanish)"	(shifted not and: [ char = $< ])		ifTrue: [ ^true ].	"For Mac keyboard layouts where $< is shift + $, (for example US).	As cmd is pressed, the Mac VM gives us the unshifted character, i.e. $,"	(shifted and: [ char = $, ])		ifTrue: [ ^true ].	"We guess it is not cmd + $< then..."	^false! !!Morph methodsFor: 'events-processing' stamp: 'jmv 12/29/2011 10:40'!                             focusKeyboardFor: aKeyboardEvent	"If aKeyboardEvent ctrl-tab or shift-ctrl-tab use it to navigate keyboard focus"	(aKeyboardEvent keyValue = 9 and: [ aKeyboardEvent controlKeyPressed ])		ifTrue: [			aKeyboardEvent shiftPressed				ifFalse: [ aKeyboardEvent hand keyboardFocusNext ]				ifTrue: [ aKeyboardEvent hand keyboardFocusPrevious ].			^ true ].	"Cycle through windows with cmdAlt + < and cmdAlt + >.	VM and platform peculiarities are hidden in #isCmdAltLessThan and #isCmdAltGreaterThan"	aKeyboardEvent isCmdAltLessThan ifTrue: [		aKeyboardEvent hand activatePreviousWindow.		^true ].	aKeyboardEvent isCmdAltGreaterThan ifTrue: [		aKeyboardEvent hand activateNextWindow.		^true ].	^false! !!Morph methodsFor: 'iteration of all morphs' stamp: 'jmv 12/29/2011 09:56'!        nextMorphThat: aBlock	"Keep looking for some morph that satisfies aBlock"	| candidate |	candidate _ self.	[		candidate _ candidate nextMorph.		(aBlock value: candidate) not			"But stop after a whole turn."			and: [ candidate ~~ self ] ] whileTrue.	^candidate! !!Morph methodsFor: 'iteration of all morphs' stamp: 'jmv 12/29/2011 09:57'!  previousMorphThat: aBlock	"Keep looking for some morph that satisfies aBlock"	| candidate |	candidate _ self.	[		candidate _ candidate previousMorph.		(aBlock value: candidate) not			"But stop after a whole turn."			and: [ candidate ~~ self ] ] whileTrue.	^candidate! !!HandMorph methodsFor: 'focus handling' stamp: 'jmv 12/28/2011 23:50'!                              activateNextWindow	| w |	w _ self nextFocusWindow.	w isTopWindow ifFalse: [		w activateAndSendTopToBack: true].! !!HandMorph methodsFor: 'focus handling' stamp: 'jmv 12/28/2011 23:50'!activatePreviousWindow	| w |	w _ self previousFocusWindow.	w isTopWindow ifFalse: [.		w activateAndSendTopToBack: false]! !!HandMorph methodsFor: 'focus handling' stamp: 'jmv 12/28/2011 22:21'!                       keyboardFocusNext	| m |	m _ self nextFocusMorph.	m activateWindowAndSendTopToBack: false.	self newKeyboardFocus: m! !!HandMorph methodsFor: 'focus handling' stamp: 'jmv 12/28/2011 22:20'!                             keyboardFocusPrevious	| m |	m _ self previousFocusMorph.	m activateWindowAndSendTopToBack: true.	self newKeyboardFocus: m! !!HandMorph methodsFor: 'focus handling' stamp: 'jmv 12/28/2011 23:51'!                      nextFocusMorph	^(keyboardFocus ifNil: [ World ])		previousMorphThat: [ :m |			m handlesKeyboard and: [ m isReallyVisible ]]! !!HandMorph methodsFor: 'focus handling' stamp: 'jmv 12/28/2011 23:52'!                     nextFocusWindow	^(SystemWindow topWindow ifNil: [ World ])		nextMorphThat: [ :m | 			(m is: #SystemWindow) and: [ m isReallyVisible ]]! !!HandMorph methodsFor: 'focus handling' stamp: 'jmv 12/28/2011 23:52'!          previousFocusMorph	^ (keyboardFocus ifNil: [ World ])		nextMorphThat: [ :m | 			m handlesKeyboard and: [ m isReallyVisible ]]! !!HandMorph methodsFor: 'focus handling' stamp: 'jmv 12/28/2011 23:52'!                    previousFocusWindow	^ (SystemWindow topWindow ifNil: [ World ])		previousMorphThat: [ :m |			(m is: #SystemWindow) and: [ m isReallyVisible ]]! !!OneLineEditorMorph methodsFor: 'events-processing' stamp: 'jmv 12/28/2011 22:45'!                     focusKeyboardFor: aKeyboardEvent	"If aKeyboardEvent tab or shift-tab use it to navigate keyboard focus.	ctrl key ignored."	aKeyboardEvent keyValue = 9		ifTrue: [			aKeyboardEvent shiftPressed				ifFalse: [ aKeyboardEvent hand keyboardFocusNext ]				ifTrue: [ aKeyboardEvent hand keyboardFocusPrevious ].			^ true ].	^super focusKeyboardFor: aKeyboardEvent! !!SystemWindow methodsFor: 'top window' stamp: 'jmv 12/28/2011 23:49'!        activate	"Bring me to the front and make me able to respond to mouse and keyboard"	| |	self activateAndSendTopToBack: false! !!SystemWindow methodsFor: 'top window' stamp: 'jmv 12/29/2011 00:35'!                      activateAndSendTopToBack: aBoolean	"Bring me to the front and make me able to respond to mouse and keyboard"	| oldTop candidate |	self owner 		ifNil: [^self	"avoid spurious activate when drop in trash"].	oldTop _TopWindow.	TopWindow _ self.	oldTop ifNotNil: [		oldTop passivate.		aBoolean ifTrue: [			oldTop owner addMorphBack: oldTop ]].	self owner firstSubmorph == self 		ifFalse: [			"Bring me to the top if not already"			self owner addMorphFront: self].	self redrawNeeded.	"Set keyboard focus"	candidate _ self		nextMorphThat: [ :m |  m handlesKeyboard ].	candidate isReallyVisible ifFalse: [		candidate _ candidate			nextMorphThat: [ :m |  m handlesKeyboard and: [ m isReallyVisible ]]].	candidate handlesKeyboard ifTrue: [		self world ifNotNil: [ :w | w activeHand newKeyboardFocus: candidate ]]! !!SystemWindow class methodsFor: 'top window' stamp: 'jmv 12/28/2011 23:46'!                 topWindow	^TopWindow! !!KeyboardEvent reorganize!('comparing' = hash)('dispatching' sentTo:)('initialize' type:readFrom:)('keyboard' keyCharacter keyValue)('printing' printOn: storeOn:)('testing' isKeyDown isKeyUp isKeyboard isKeystroke isMouseMove)('private' setType:buttons:position:keyValue:hand:stamp:)('platform peculiarities' isCmdAltGreaterThan isCmdAltLessThan)!