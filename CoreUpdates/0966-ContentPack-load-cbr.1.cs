'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 18 May 2011 at 4:02:54 am'!"Change Set:		0X+1-ContentPack-load-cbrDate:			18 May 2011Author:			Casey RansbergerA class which handles import, export of various media types, currently only BMP and PNG. ContentPack can also store media objects in it's subclasses, which provides a bootstrapping mechanism for getting media objects into the Cuis update stream. Class comment coming in the next batch of change sets. Class comment will likely look a lot like this preamble, but with usage examples."!!classDefinition: #ContentPack category: #'Theme-Core'!Dictionary variableSubclass: #ContentPack	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Theme-Core'!!ContentPack commentStamp: 'cbr 5/14/2011 07:07' prior: 0!#todo --cbr!!classDefinition: 'ContentPack class' category: #'Theme-Core'!ContentPack class	instanceVariableNames: 'payload count'!!ContentPack methodsFor: 'importing' stamp: 'cbr 5/18/2011 01:47'!decodeContentFrom: associationList	| associations | 		associations _ associationList collect: [ :assoc |		(assoc at: 2) class = Array			ifTrue: [ (assoc at: 1) -> (self decodeContentFrom: (assoc at: 2)) ]			ifFalse: [ 				(assoc at: 1) -> (Compiler 					evaluate: (self 						perform: 							('object' , (assoc at: 2) 								asString) asSymbol) base64Decoded)			]	].	^ associations as: Dictionary! !!ContentPack methodsFor: 'importing' stamp: 'cbr 5/14/2011 13:15'!import: aBlock	^ aBlock value! !!ContentPack methodsFor: 'importing' stamp: 'cbr 5/16/2011 07:41'!path: aString 		| directory contentPacks |	self flag: #todo. "Consider renaming this method. --cbr"	directory _ FileDirectory on: 		(FileDirectory default fullNameFor: aString).	(self supportedFilesIn: directory) do: [ :i |		| filename | filename _ directory 			pathName , 			directory pathNameDelimiter asString , 			(i at: 1).					self flag: #todo. "Add hook for other media types here. Also consider renaming this method. --cbr"		self at: i name 			put: (self import: [ Form fromFileNamed: filename ]) "This may yet be a cross-cutting concern, and need to be refactored when other media types become present. --cbr"	].	contentPacks _ directory directoryNames collect: [ :i |			i ->  (ContentPack new path: (directory fullNameFor: i))	].		^ self union: (contentPacks as: Dictionary)! !!ContentPack methodsFor: 'exporting' stamp: 'cbr 5/16/2011 12:57'!export	"Answer true on success."	"self break."	(self exportDirectory containingDirectory directoryExists: self exportDirectory localName)		ifTrue: [ Utilities inform: 			'Before you can export, you must move, rename or delete this directory: ' ,			self exportDirectory fullName.						^ false.		].		self exportInto: self exportDirectory.		^ true! !!ContentPack methodsFor: 'exporting' stamp: 'cbr 5/16/2011 06:07'!exportInto: aDirectory	aDirectory assureExistence.	self associations do: [ :assoc |		| klass thisDirectory fullPath | 			klass _ assoc value class.			thisDirectory _ aDirectory directoryNamed: assoc key.			fullPath _  aDirectory fullName , 						aDirectory pathNameDelimiter asString ,						assoc key.		self flag: #note. "Add support for new file export type mappings here. --cbr"		klass = ContentPack			ifTrue: [ assoc value exportInto: thisDirectory ].				klass = ColorForm			ifTrue: [ assoc value writeBMPfileNamed: fullPath ].					klass = Form			ifTrue: [ assoc value writePNGfileNamed: fullPath ]	]! !!ContentPack methodsFor: 'private' stamp: 'cbr 5/14/2011 07:03'!exportDirectory		^ (FileDirectory default directoryNamed: self class defaultContentDirectory)		directoryNamed: 'Exported'! !!ContentPack methodsFor: 'private' stamp: 'cbr 5/14/2011 14:26'!supportedFilesIn: aDirectory	| fileTypes supportedFiles |		fileTypes _ (self class mapping as: Dictionary) values.		supportedFiles _ Set new.		fileTypes do: [ :type | 		supportedFiles _ supportedFiles			union: (aDirectory entries select: 				[ :entry | '*.' , type match: entry name ])	].	^ supportedFiles! !!ContentPack methodsFor: 'accessing' stamp: 'cbr 5/16/2011 06:09'!get: anArray "	Theme content get: #( 'Theme' '16x16' 'actions' 'view-refresh.png' )	Answer nil when the object isn't found.		--cbr	"			| object | object _ self.		anArray do: [ :i | object _ object at: i ifAbsent: [ ^ nil ]].		^ object! !!ContentPack methodsFor: 'converting' stamp: 'cbr 5/18/2011 02:28'!asDictionary	"Recursively make Dictionaries of all objects which include behavior from ContentPack."	| associations |	associations _ self keys collect: [ :key | 		((self at: key) class includesBehavior: ContentPack)			ifTrue: [ key -> (self at: key) asDictionary ]			ifFalse: [ key -> (self at: key) ]		].	^ associations as: Dictionary! !!ContentPack class methodsFor: 'instance creation' stamp: 'cbr 5/14/2011 03:29'!default	^ self new path: self defaultContentDirectory! !!ContentPack class methodsFor: 'code pack' stamp: 'cbr 5/18/2011 01:41'!compilePayloadWith: contentMap	self compile: 'contentMap' , Character cr asString , '	^ ' , contentMap asString.	self compile: 'objectCount ^ ' , payload size asString.	^ payload withIndexDo: [ :blob :index |		self compile:			'object' ,			index asString ,			 Character cr asString ,			'	^ ' ,			blob surroundedBySingleQuotes 	]! !!ContentPack class methodsFor: 'code pack' stamp: 'cbr 5/18/2011 01:41'!encodeContentFrom: aDictionary	| encodedTree |		encodedTree _ Dictionary new.		aDictionary associations		do: [ :assoc |			assoc value class = Dictionary				ifTrue: [ 					encodedTree 						at: assoc key 						put: (self encodeContentFrom: assoc value) 				]				ifFalse: [ 					encodedTree 						at: assoc key						put: count.					count _ count + 1.					payload add: assoc value storeString base64Encoded				]		].	^ encodedTree associations collect: [ :assoc | 		{ assoc key . assoc value }	]! !!ContentPack class methodsFor: 'code pack' stamp: 'cbr 5/18/2011 01:41'!resetImporter	count _ 1.	payload _ OrderedCollection new! !!ContentPack class methodsFor: 'code pack' stamp: 'cbr 5/18/2011 01:44'!withDictionary: aDictionary	| contentMap |	self resetImporter.		contentMap _ self encodeContentFrom: aDictionary.		self compilePayloadWith: contentMap.		self resetImporter.! !!ContentPack class methodsFor: 'configuration' stamp: 'cbr 5/14/2011 03:29'!defaultContentDirectory	^ 'Content'! !!ContentPack class methodsFor: 'configuration' stamp: 'cbr 5/16/2011 06:12'!mapping	^ {		ColorForm -> #bmp .		Form -> #png	}! !