'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 2 June 2011 at 9:05:32 am'!!TextEditor methodsFor: 'private' stamp: 'jmv 6/2/2011 09:01'!againOnce: indices	"Find the next occurrence of FindText.  If none, answer false.	Append the start index of the occurrence to the stream indices, and, if	ChangeText is not the same object as FindText, replace the occurrence by it.	Note that the search is case-sensitive for replacements, otherwise not."	| where |	where _ self text				findString: FindText				startingAt: self stopIndex				caseSensitive: ((ChangeText ~~ FindText) or: [Preferences caseSensitiveFinds]).	where = 0 ifTrue: [^ false].	selectionStartBlocks add: (paragraph characterBlockForIndex: where).	selectionStopBlocks add: (paragraph characterBlockForIndex: where + FindText size).	self selectInvisiblyFrom: where to: where + FindText size - 1.	"Repeat it here. Senders beware: only one of these should last"	ChangeText ~~ FindText ifTrue: [ self zapSelectionWith: ChangeText ].	indices nextPut: where.	^ true! !!TextEditor methodsFor: 'private' stamp: 'jmv 6/2/2011 08:20'!againOrSame: useOldKeys many: many	"Subroutine of search: and again.  If useOldKeys, use same FindText and ChangeText as before.  If many is true, do it repeatedly.  Created 1/26/96 sw by adding the many argument to #againOrSame."	|  home indices wasTypedKey |	home _ self selectionInterval.  "what was selected when 'again' was invoked"	"If new keys are to be picked..."	useOldKeys ifFalse: [ "Choose as FindText..."		FindText _ UndoSelection.  "... the last thing replaced."		"If the last command was in another paragraph, ChangeText is set..."		paragraph == UndoParagraph ifTrue: [ "... else set it now as follows."			UndoInterval ~= home ifTrue: [self selectInterval: UndoInterval]. "blink"			ChangeText _ ((UndoMessage sends: #undoCutCopy:) and: [self hasSelection])				ifTrue: [FindText] "== objects signal no model-locking by 'undo copy'"				ifFalse: [self selection]]]. "otherwise, change text is last-replaced text"	(wasTypedKey _ FindText size = 0)		ifTrue: [ "just inserted at a caret"			home _ self selectionInterval.			self replaceSelectionWith: self nullText.  "delete search key..."			FindText _ ChangeText] "... and search for it, without replacing"		ifFalse: [ "Show where the search will start"			home last = self selectionInterval last ifFalse: [				self selectInterval: home]].	"Find and Change, recording start indices in the array"	indices _ WriteStream on: (Array new: 20). "an array to store change locs"	selectionStartBlocks _ OrderedCollection new.	selectionStopBlocks _ OrderedCollection new.	[(self againOnce: indices) & many] whileTrue. "<-- this does the work"	"Last find was also stored in markBlock / pointBlock"	selectionStartBlocks notEmpty ifTrue: [		selectionStartBlocks removeLast.		selectionStopBlocks removeLast ].	indices isEmpty ifTrue: [  "none found"		self flash.		wasTypedKey ifFalse: [^self]].	(many | wasTypedKey) ifFalse: [ "after undo, select this replacement"		home _ self startIndex to:			self startIndex + UndoSelection size - 1].	self undoer: #undoAgain:andReselect:typedKey: with: indices contents with: home with: wasTypedKey! !!TextEditor methodsFor: 'private' stamp: 'jmv 6/2/2011 09:03'!zapSelectionWith: replacement	| start stop rep |	start _ self startIndex.	stop _ self stopIndex.	(replacement isEmpty and: [stop > start]) ifTrue: [		"If deleting, then set emphasisHere from 1st character of the deletion"		emphasisHere _ (self text attributesAt: start) select: [:att | att mayBeExtended]].	(start = stop and: [ replacement isEmpty ]) ifFalse: [		(replacement is: #Text)			ifTrue: [				"If we are pasting a text that doesn't bring a ParagraphStyleReference in the past paragraph, and we need it,				but it won't be provided by our text, as we are at the end, then add any paragraph attribute from emphasisHere"				(replacement notEmpty and: [ (replacement last = Character cr) not and: [ stop > self text size ]])					ifTrue: [						rep _ (replacement, (Text string: String cr attributes: emphasisHere)) copyFrom: 1 to: replacement size ]					ifFalse: [ rep _ replacement ]]			ifFalse: [ rep _ Text string: replacement attributes: emphasisHere ].		self text replaceFrom: start to: stop - 1 with: rep.		paragraph			recomposeFrom: start			to:  start + rep size - 1			delta: rep size - (stop-start).		self markIndex: start pointIndex: start + rep size.		selectionStartBlocks _ {}.		selectionStopBlocks _ {}.		UndoInterval _ self selectionInterval.		self userHasEdited  " -- note text now dirty" ].	morph possiblyChanged! !