'From Cuis 3.0 of 31 January 2011 [latest update: #790] on 25 February 2011 at 12:31:12 pm'!!MorphExtension methodsFor: 'accessing - basic properties' stamp: 'jmv 2/25/2011 12:21'!layoutSpec	^ layoutSpec! !!ScrollPane methodsFor: 'event handling' stamp: 'jmv 2/25/2011 12:30'!handlesMouseOver: evt	"subclasses implement #mouseEnter: and/or #mouseLeave:"	^true! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'jmv 2/25/2011 12:23'!spawnReframeHandle: event	"The mouse has crossed a pane border.  Spawn a reframe handle."	| resizer localPt pt ptName newBounds cursor |	owner ifNil: [^self	"Spurious mouseLeave due to delete"].	self isCollapsed ifTrue: [^self].	((self world ifNil: [^self]) firstSubmorph isKindOf: NewHandleMorph) 		ifTrue: [^self	"Prevent multiple handles"].	pt _ event cursorPoint.	"prevent spurios mouse leave when dropping morphs"	owner 		morphsInFrontOf: self		overlapping: (pt - 2 extent: 4 @ 4)		do: [:m | (m is: #HandMorph) ifFalse: [(m fullContainsPoint: pt) ifTrue: [^self]]].	bounds forPoint: pt		closestSideDistLen: [ :side :dist :len | 			"Check for window side adjust"			dist <= 2 ifTrue: [ptName _ side]].	ptName ifNil: ["Check for pane border adjust"			^self ].	#(#topLeft #bottomRight #bottomLeft #topRight) do: [ :corner | 			"Check for window corner adjust"			(pt dist: (bounds perform: corner)) < 20 ifTrue: [ptName _ corner]].	cursor _ Cursor resizeForEdge: ptName.	resizer _ NewHandleMorph new				followHand: event hand					forEachPointDo: [ :p | 						localPt _ self internalizePositionFromWorld: p.						newBounds _ bounds 									withSideOrCorner: ptName									setToPoint: localPt									minExtent: self minimumExtent.						self bounds: newBounds]					lastPointDo: [ :p | ]					withCursor: cursor.	event hand world addMorphInLayer: resizer.	resizer startStepping! !!SystemWindow methodsFor: 'layout' stamp: 'jmv 2/25/2011 12:17'!layoutAndComputeFullBounds	"Compute a new layout of submorphs based on the given layout bounds."	submorphs isEmpty ifTrue: [		^fullBounds _ bounds].	layoutMorph ifNotNil: [		layoutMorph bounds: self layoutBounds ].	fullBounds _ self computeFullBounds! !SystemWindow class removeSelector: #labelled:!SystemWindow removeSelector: #addMorph:frame:!SystemWindow removeSelector: #addMorph:fullFrame:!SystemWindow removeSelector: #paneTransition:!SystemWindow removeSelector: #paneWithLongestSide:near:!SystemWindow removeSelector: #reframePanesAdjoining:along:to:!SystemWindow removeSelector: #secondaryPaneTransition:divider:!SystemWindow removeSelector: #setPaneRectsFromBounds!SystemWindow removeSelector: #spawnOffsetReframeHandle:divider:!SystemWindow removeSelector: #spawnPaneFrameHandle:!ScrollPane removeSelector: #mouseEnter:!ScrollPane removeSelector: #mouseLeave:!MorphExtension removeSelector: #layoutFrame!MorphExtension removeSelector: #layoutFrame:!Morph removeSelector: #addMorph:fullFrame:!Morph removeSelector: #applyLayoutFrameIn:!Morph removeSelector: #doesLayout!Morph removeSelector: #layoutFrame!Morph removeSelector: #layoutFrame:!LightWidget removeSelector: #doesLayout!LayoutSpec removeSelector: #is:!Smalltalk removeClassNamed: #BorderedSubpaneDividerMorph!Smalltalk removeClassNamed: #LayoutFrame!