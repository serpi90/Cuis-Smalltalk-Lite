'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 14 November 2011 at 3:27:49 pm'!!Clipboard methodsFor: 'accessing' stamp: 'jmv 10/25/2011 17:27'!    retrieveMorph	"Answer a Morph or nil."	| answer |		answer _ self retrieveObject.		"If clipboard contents is already a Text or String, answer it."	(answer is: #Morph) ifTrue: [		^ answer ].	"If clipboard contains a Form, prepare a Morph including it."	(answer is: #Form) ifTrue: [		^ ImageMorph new image: answer ].	"If clipboard contents is already a Text or String, answer it."	(answer isString or: [ answer is: #Text ]) ifTrue: [		^ (TextModelMorph classToUse withText: answer asText)			embeddedInMorphicWindowLabeled: 'Text editor' ].		"No useful contents"	^nil! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 10/25/2011 17:28'! createTextPaneExtent: answerExtent acceptBoolean: acceptBoolean	"create the textPane"	| result |	result := TextModelMorph classToUse				textProvider: self				textGetter: #response				textSetter: #response:				selectionGetter: #selectionInterval.	result extent: answerExtent.	result borderWidth: 1; borderColor: Color lightGray.	result hasUnacceptedEdits: true.	result acceptOnCR: acceptBoolean.	result bounds: (14@25 corner: 257@84).	self addMorph: result.	^ result! !!PackageList methodsFor: 'morphic' stamp: 'jmv 11/9/2011 18:17'!                          buildWindow	| window |	window := SystemWindow new.	window setLabel: self label.	window model: self.	window layoutMorph addMorphUseAll: (		PluggableListMorph classToUse			model: self			listGetter: #packageList			indexGetter: #packageSelection			indexSetter: #packageSelection:			mainView: window			menuGetter: #packageMenu			keystrokeAction: nil).	^ window! !!ScrollPane class methodsFor: 'as yet unclassified' stamp: 'jmv 11/14/2011 15:27'!                      classToUse	self useNewClass ifTrue: [ ^PluggableScrollPane ].	^self! !!ScrollPane class methodsFor: 'as yet unclassified' stamp: 'jmv 11/14/2011 15:25'!   useNewClass	self flag: #jmvVer.	^true not! !!PluggableListMorph class methodsFor: 'as yet unclassified' stamp: 'jmv 11/14/2011 15:27'!                    classToUse	self useNewClass ifTrue: [ ^PluggableListMorph2 ].	^self! !!PluggableListMorphByItem class methodsFor: 'as yet unclassified' stamp: 'jmv 11/14/2011 15:27'!                    classToUse	self useNewClass ifTrue: [ ^PluggableListMorphByItem2 ].	^self! !!PluggableListMorphOfMany class methodsFor: 'as yet unclassified' stamp: 'jmv 11/14/2011 15:27'!              classToUse	self useNewClass ifTrue: [ ^PluggableListMorphOfMany2 ].	^self! !!PluggableMessageCategoryListMorph class methodsFor: 'as yet unclassified' stamp: 'jmv 11/14/2011 15:27'!     classToUse	self useNewClass ifTrue: [ ^PluggableMessageCategoryListMorph2 ].	^self! !!SimpleHierarchicalListMorph class methodsFor: 'as yet unclassified' stamp: 'jmv 11/14/2011 10:40'!  classToUse	self useNewClass ifTrue: [ ^HierarchicalListMorph ].	^self! !!SystemWindow methodsFor: 'panes' stamp: 'jmv 10/25/2011 17:25'!                  setUpdatablePanesFrom: getSelectors	| aList aPane possibles |	"Set my updatablePanes inst var to the list of panes which are list panes with the given get-list selectors.  Order is important here!!  Note that the method is robust in the face of panes not found, but a warning is printed in the transcript in each such case"	aList _ OrderedCollection new.	possibles _ OrderedCollection new.	self allMorphsDo: [ :pane | 		(pane isKindOf: PluggableListMorph) | (pane isKindOf: PluggableListMorph2) ifTrue: [			possibles add: pane.		].	].	getSelectors do: [:sel | 		aPane _ possibles detect: [ :pane | pane getListSelector == sel] ifNone: nil.		aPane			ifNotNil:				[aList add: aPane]			ifNil:				[Transcript cr; show: 'Warning: pane ', sel, ' not found.']].	updatablePanes _ aList asArray! !!CodeWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:27'!                buildMorphicAnnotationsPane	| aTextMorph |	aTextMorph _ TextModelMorph classToUse		textProvider: model		textGetter: #annotation.	aTextMorph		askBeforeDiscardingEdits: false;		hideScrollBarsIndefinitely.	^aTextMorph! !!CodeWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:27'!                      buildMorphicCodePane	"Construct the pane that shows the code.	Respect the Preference for standardCodeFont.".	^TextModelMorph classToUse		textProvider: model		textGetter: #acceptedContents		textSetter: #contents:notifying:		selectionGetter: #contentsSelection! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:23'!       buildMorphicClassList	| myClassList |	myClassList _ PluggableListMorph classToUse		model: model		listGetter: #classList		indexGetter: #classListIndex		indexSetter: #classListIndex:		mainView: self		menuGetter: #classListMenu		keystrokeAction: #classListKey:from:.	myClassList enableDragNDrop: false.	^myClassList! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 11/10/2011 09:31'!               buildMorphicCommentPane	"Construct the pane that shows the class comment.	Respect the Preference for standardCodeFont."	| commentPane |	commentPane := BrowserCommentTextMorph classToUse				textProvider: model				textGetter: #classCommentText				textSetter: #newClassComment:.	commentPane styler: nil.	^ commentPane! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:26'!              buildMorphicMessageCatList	| myMessageCatList |	myMessageCatList _ PluggableMessageCategoryListMorph classToUse		model: model		listGetter: #messageCategoryList		indexGetter: #messageCategoryListIndex		indexSetter: #messageCategoryListIndex:		mainView: self		menuGetter: #messageCategoryMenu		keystrokeAction: nil		rawListGetter: #rawMessageCategoryList.	myMessageCatList enableDragNDrop: false.	^myMessageCatList! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:23'!          buildMorphicMessageList	"Build a morphic message list, with #messageList as its list-getter"	| aListMorph |	aListMorph _ PluggableListMorph classToUse		model: model		listGetter: #messageList		indexGetter: #messageListIndex		indexSetter: #messageListIndex:		mainView: self		menuGetter: #messageListMenu		keystrokeAction: #messageListKey:from:.	aListMorph enableDragNDrop: false.	^aListMorph! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:23'!buildMorphicSystemCatList	| dragNDropFlag myCatList |	dragNDropFlag _ false.	myCatList _ PluggableListMorph classToUse		model: model		listGetter: #systemCategoryList		indexGetter: #systemCategoryListIndex		indexSetter: #systemCategoryListIndex:		mainView: self		menuGetter: #systemCategoryMenu		keystrokeAction: #systemCatListKey:from:.	myCatList enableDragNDrop: dragNDropFlag.	^myCatList! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:23'! buildNoSysCatMorphicWindow	"A Browser without the class categories list"	| mySingletonList upperPanes |	mySingletonList _ PluggableListMorph  classToUse				model: model				listGetter: #systemCategorySingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				mainView: self				menuGetter: #systemCatSingletonMenu				keystrokeAction: #systemCatSingletonKey:from:.	mySingletonList enableDragNDrop: false.	mySingletonList hideScrollBarsIndefinitely.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: self buildMorphicClassColumn proportionalWidth: 0.3;		addAdjusterAndMorph: self buildMorphicMessageCatList proportionalWidth: 0.3;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.4.	self layoutMorph		addMorph: mySingletonList fixedHeight: Preferences standardCodeFont height + 10;		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.	self setUpdatablePanesFrom: #(classList messageCategoryList messageList).	model changed: #editSelection! !!ChangeListWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:27'!                             buildMorphicCodePane	^TextModelMorph classToUse		textProvider: model		textGetter: #acceptedContents! !!ChangeListWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:26'!        buildMorphicWindow	"Open a morphic view for the messageSet, whose label is labelString. 	The listView may be either single or multiple selection type"	| listPane |	listPane _ PluggableListMorphOfMany classToUse		model: model		listGetter: #list		primarySelectionGetter: #listIndex		primarySelectionSetter: #toggleListIndex:		listSelectionGetter: #listSelectionAt:		listSelectionSetter: #listSelectionAt:put:		mainView: self		menuGetter: #listMenu		keystrokeAction: #changeListKey:from:.		self layoutMorph		addMorph: listPane proportionalHeight: 0.4;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6! !!ChangeSorterWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:26'!                    buildMorphicWindow	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."	| list1 list2 list3 upperPanes |	model myChangeSet ifNil: [ model myChangeSet: ChangeSet current ].	list1 _ (PluggableListMorphByItem classToUse				model: model				listGetter: #changeSetList				indexGetter: #currentCngSet				indexSetter: #showChangeSetNamed:				mainView: self				menuGetter: #changeSetMenu				keystrokeAction: #changeSetListKey:from:)			autoDeselect: false.	list2 _ PluggableListMorphByItem classToUse				model: model				listGetter: #classList				indexGetter: #currentClassName				indexSetter: #currentClassName:				mainView: self				menuGetter: #classListMenu				keystrokeAction: #classListKey:from:.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: list1 proportionalWidth: 0.5;		addAdjusterAndMorph: list2 proportionalWidth: 0.5.	list3 _ PluggableListMorphByItem classToUse				model: model				listGetter: #messageList				indexGetter: #currentSelector				indexSetter: #currentSelector:				mainView: self				menuGetter: #messageMenu				keystrokeAction: #messageListKey:from:.	self layoutMorph		addMorph: upperPanes proportionalHeight: 0.25;		addAdjusterAndMorph: list3 proportionalHeight: 0.25;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.5.	self setLabel: model labelString! !!CodeFileBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 11/9/2011 18:17'!                              buildMorphicWindow	"Create a pluggable version of all the views for a Browser, including views and controllers."	| list1 list2 upperPanes |	model systemCategoryListIndex: 1.	list1 _ PluggableListMorph classToUse			model: model 			listGetter: #systemCategorySingleton			indexGetter: #indexIsOne 			indexSetter: #indexIsOne:			mainView: self			menuGetter: #codeFileListMenu			keystrokeAction: #codeFileListKey:from:.	list1 hideScrollBarsIndefinitely.		list2 _ PluggableListMorph classToUse			model: model 			listGetter: #messageCategoryList			indexGetter: #messageCategoryListIndex 			indexSetter: #messageCategoryListIndex:			mainView: self			menuGetter: #messageCategoryMenu			keystrokeAction: nil.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: self buildMorphicClassColumn proportionalWidth: 0.3;		addAdjusterAndMorph: list2 proportionalWidth: 0.3;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.4.	self layoutMorph		addMorph: list1 fixedHeight: Preferences standardCodeFont height + 10;		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.	model changed: #editSelection! !!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:23'!                    buildMorphicWindow	"Open a full morphic debugger with the given label"	| upperMorph bottomMorph1 bottomMorph2 bottomMorph3 bottomMorph4 bottomMorph |	upperMorph _ PluggableListMorph classToUse		model: model 		listGetter: #contextStackList		indexGetter: #contextStackIndex		indexSetter: #toggleContextStackIndex:		mainView: self		menuGetter: #contextStackMenu		keystrokeAction: #contextStackKey:from:.	bottomMorph1 _ PluggableListMorph classToUse			model: model receiverInspector			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			mainView: self			menuGetter: #receiverFieldListMenu			keystrokeAction: #inspectorKey:from:.	bottomMorph2 _ TextModelMorph  classToUse			textProvider: model receiverInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection.	bottomMorph3 _ PluggableListMorph classToUse			model: model contextVariablesInspector 			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			mainView: self			menuGetter: #contextFieldListMenu			keystrokeAction: #inspectorKey:from:.	bottomMorph4 _ TextModelMorph  classToUse			textProvider: model contextVariablesInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection.	bottomMorph _ LayoutMorph newRow.	bottomMorph		addMorph: bottomMorph1 proportionalWidth: 0.2;		addAdjusterAndMorph: bottomMorph2 proportionalWidth: 0.3;		addAdjusterAndMorph: bottomMorph3 proportionalWidth: 0.2;		addAdjusterAndMorph: bottomMorph4 proportionalWidth: 0.3.	self layoutMorph		addMorph: upperMorph proportionalHeight: 0.25;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.55;		addAdjusterAndMorph: bottomMorph proportionalHeight: 0.2! !!DualChangeSorterWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:26'!buildMorphicUIIn: aLayoutMorph for: aChangeSorter	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0.""Aca hay cosas que deben ir a la mitad correcta... Y no quiero duplicar con la otra ventana....pensar"	| list1 list2 list3 upperPanes realModel |	list1 _ (PluggableListMorphByItem classToUse				model: aChangeSorter				listGetter: #changeSetList				indexGetter: #currentCngSet				indexSetter: #showChangeSetNamed:				mainView: self				menuGetter: (MessageSend receiver: self selector: #changeSetMenuFor: argument: aChangeSorter)				keystrokeAction: #changeSetListKey:from:)			autoDeselect: false.	list2 _ PluggableListMorphByItem classToUse				model: aChangeSorter				listGetter: #classList				indexGetter: #currentClassName				indexSetter: #currentClassName:				mainView: self				menuGetter: (MessageSend receiver: self selector: #classListMenuFor: argument: aChangeSorter)				keystrokeAction: #classListKey:from:.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: list1 proportionalWidth: 0.5;		addAdjusterAndMorph: list2 proportionalWidth: 0.5.	list3 _ PluggableListMorphByItem classToUse				model: aChangeSorter				listGetter: #messageList				indexGetter: #currentSelector				indexSetter: #currentSelector:				mainView: self				menuGetter: (MessageSend receiver: self selector: #messageMenuFor: argument: aChangeSorter)				keystrokeAction: #messageListKey:from:.	aLayoutMorph addMorph: upperPanes proportionalHeight: 0.25.	aLayoutMorph addAdjusterAndMorph: list3 proportionalHeight: 0.25.	"set aChangeSorter as the model during #buildLowerPanes, as the inherited methods assume a simple model that is a CodeProvider."	realModel _ model.	model _ aChangeSorter.	aLayoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.5.	model _ realModel! !!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:27'!       morphicDirectoryTreePane	^(SimpleHierarchicalListMorph classToUse		model: model		listGetter: #initialDirectoryList		indexGetter: #currentDirectorySelected		indexSetter: #setSelectedDirectoryTo:		mainView: self		menuGetter: #volumeMenu		keystrokeAction: nil)			autoDeselect: false;			enableDrag: false;			enableDrop: true;			yourself! !!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:27'!                        morphicFileContentsPane	^TextModelMorph classToUse		textProvider: model		textGetter: #acceptedContents 		textSetter: #put:		selectionGetter: #contentsSelection! !!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:24'!            morphicFileListPane	^(PluggableListMorph classToUse		model: model 		listGetter: #fileList 		indexGetter: #fileListIndex		indexSetter: #fileListIndex: 		mainView: self		menuGetter: #fileListMenu		keystrokeAction: nil)			enableDrag: true;			enableDrop: false;			yourself! !!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:27'!                         morphicPatternPane	^TextModelMorph classToUse		textProvider: model		textGetter: #pattern 		textSetter: #pattern:! !!InspectorWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:24'!                          buildMorphicWindow	" Inspector openAsMorphOn: SystemOrganization "	| contentsText list upperRow evaluatorText |	list _ PluggableListMorph classToUse			model: model 			listGetter: #fieldList			indexGetter: #selectionIndex			indexSetter: #toggleIndex:			mainView: self			menuGetter: #fieldListMenu			keystrokeAction: #inspectorKey:from:.	contentsText _ TextModelMorph classToUse			textProvider: model			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection.	evaluatorText _ (TextModelMorph classToUse textProvider: model)			askBeforeDiscardingEdits: false.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: list proportionalWidth: 0.3;		addAdjusterAndMorph: contentsText proportionalWidth: 0.7.	self layoutMorph		addMorph: upperRow proportionalHeight: 0.7;		addAdjusterAndMorph: evaluatorText proportionalHeight: 0.3.	self setLabel: ([model object printStringLimitedTo: 64] on: Error do: [ model object class name, ' (printing failed)']).	self setUpdatablePanesFrom: #(fieldList)! !!MessageNamesWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:24'!                          buildMorphicWindow	"Answer a morphic window with the given initial search string, nil if none""MessageNames openMessageNames"	| selectorListView firstRow searchButton textMorph secondRow |	textMorph _ TextModelMorph classToUse		textProvider: model		textGetter: #searchString 		textSetter: #searchString:.	textMorph setProperty: #alwaysAccept toValue: true.	textMorph askBeforeDiscardingEdits: false.	textMorph acceptOnCR: true.	textMorph setTextColor: Color brown.	textMorph hideScrollBarsIndefinitely.	textMorph textMorph		on: #mouseEnter send: #selectAll to: textMorph textMorph.	searchButton _ PluggableButtonMorph new 		model: textMorph;		label: 'Search';		action: #accept.	searchButton setBalloonText: 'Type some letters into the pane at right, and then press this Search button (or hit RETURN) and all method selectors that match what you typed will appear in the list pane below.  Click on any one of them, and all the implementors of that selector will be shown in the right-hand pane, and you can view and edit their code without leaving this tool.'.	firstRow _ LayoutMorph newRow.	firstRow		addMorph: searchButton proportionalWidth: 0.25;		addMorph: textMorph proportionalWidth: 0.75.	selectorListView _ PluggableListMorph classToUse		model: model		listGetter: #selectorList		indexGetter: #selectorListIndex		indexSetter: #selectorListIndex:		mainView: self		menuGetter: #selectorListMenu		keystrokeAction: #selectorListKey:from:.	secondRow _  LayoutMorph newRow.	secondRow		addMorph: selectorListView proportionalWidth: 0.5;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.5.	self layoutMorph		addMorph: firstRow fixedHeight: self defaultButtonPaneHeight+4;		addAdjusterAndMorph: secondRow proportionalHeight: 0.5;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.5.	model changed: #editSelection! !!ObjectExplorerWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:27'!     buildMorphicWindow	| listMorph textMorph |	.listMorph _ SimpleHierarchicalListMorph classToUse			model: model			listGetter: #getList			indexGetter: #getCurrentSelection			indexSetter: #noteNewSelection:			mainView: self			menuGetter: #genericMenu			keystrokeAction: #explorerKey:from:.	listMorph autoDeselect: false.	textMorph _ (TextModelMorph classToUse textProvider: model)			askBeforeDiscardingEdits: false.	self layoutMorph		addMorph: listMorph proportionalHeight: 0.8;		addAdjusterAndMorph: textMorph proportionalHeight: 0.2.	self setLabel: (model rootObject printStringLimitedTo: 64)! !!PreDebugWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:25'!                  buildMorphicWindowMessage: messageString	| notifyPane |	model expandStack.	messageString		ifNil: [			notifyPane _ PluggableListMorph classToUse				model: model				listGetter: #contextStackList				indexGetter: #contextStackIndex				indexSetter: nil				mainView: self				menuGetter: nil				keystrokeAction: nil ]		ifNotNil: [			notifyPane _ TextModelMorph classToUse withText: messageString.			notifyPane askBeforeDiscardingEdits: false ].	self layoutMorph		addMorph: (self buttonRowForPreDebugWindow: model) proportionalHeight: 0.2;		addAdjusterAndMorph: notifyPane proportionalHeight: 0.8.	self widgetsColor: Theme current debugger! !!ProcessBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:25'!buildMorphicWindow	"Create a pluggable version of me, answer a window"	| aTextMorph list1 list2 upperRow |	list1 _ (PluggableListMorph classToUse				model: model				listGetter: #processNameList				indexGetter: #processListIndex				indexSetter: #processListIndex:				mainView: self				menuGetter: #processListMenu				keystrokeAction: #processListKey:from:)			enableDragNDrop: false.	list2 _ (PluggableListMorph classToUse				model: model				listGetter: #stackNameList				indexGetter: #stackListIndex				indexSetter: #stackListIndex:				mainView: self				menuGetter: #stackListMenu				keystrokeAction: #stackListKey:from:)			enableDragNDrop: false.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: list1 proportionalWidth: 0.5;		addAdjusterAndMorph: list2 proportionalWidth: 0.5.	aTextMorph _ TextModelMorph classToUse				textProvider: model				textGetter: #selectedMethod.	aTextMorph askBeforeDiscardingEdits: false.	self layoutMorph		addMorph: upperRow proportionalHeight: 0.5;		addAdjusterAndMorph: aTextMorph proportionalHeight: 0.5.	self setUpdatablePanesFrom: #(#processNameList #stackNameList ).	self setLabel: 'Process Browser'! !!SystemWindow class methodsFor: 'instance creation' stamp: 'jmv 10/25/2011 17:28'!                       editText: aTextModel label: labelString wrap: aBoolean	| window |	window _ self new model: aTextModel.	window setLabel: labelString.	window layoutMorph		addMorph: ((TextModelMorph classToUse withModel: aTextModel)			wrapFlag: aBoolean)		proportionalHeight: 1.	^ window openInWorld! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:28'!              buildDetailsText	detailsText _ TextModelMorph classToUse		textProvider: model		textGetter: #details.	detailsText hideScrollBarsIndefinitely.	^detailsText! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:25'!                 buildErrorsList	^ PluggableListMorph classToUse		model: model		listGetter: #errorsList		indexGetter: #selectedErrorTest		indexSetter: #debugErrorTest:		mainView: self		menuGetter: nil		keystrokeAction: nil! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:25'!                          buildFailuresList	^ PluggableListMorph classToUse		model: model		listGetter: #failuresList		indexGetter: #selectedFailureTest		indexSetter: #debugFailureTest:		mainView: self		menuGetter: nil		keystrokeAction: nil! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:28'!                  buildPassFailText	passFailText _ TextModelMorph classToUse		textProvider: model		textGetter: #passFail.	passFailText hideScrollBarsIndefinitely.	^ passFailText! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:26'!           buildUpperControls	| refreshButton filterButton stopButton runOneButton runButton row column1 column2 column3 theTestsList |	refreshButton _ self buildRefreshButton.	filterButton _ self buildFilterButton.	stopButton _ self buildStopButton.	column1 _ LayoutMorph newColumn.	column1 addMorphs: { refreshButton . filterButton . stopButton }.	theTestsList _ PluggableListMorphOfMany classToUse				model: model				listGetter: #tests				primarySelectionGetter: #selectedSuite				primarySelectionSetter: #selectedSuite:				listSelectionGetter: #listSelectionAt:				listSelectionSetter: #listSelectionAt:put:				mainView: self				menuGetter: #listMenu				keystrokeAction: nil.	theTestsList autoDeselect: false.	theTestsList color: Color veryVeryLightGray.	column2 _ LayoutMorph newColumn.	column2		addMorph: theTestsList proportionalHeight: 1;		addMorph: self optionalButtonRow fixedHeight: self defaultButtonPaneHeight.	runOneButton _ self buildRunOneButton.	runButton _ self buildRunButton.		column3 _ LayoutMorph newColumn.	column3 addMorphs: { runOneButton . runButton }.		row _ LayoutMorph newRow.	row		addMorph: column1 fixedWidth: 80;		addMorph: column2 proportionalWidth: 1;		addMorph: column3 fixedWidth: 120.	^row! !!TextEditorTest methodsFor: 'testing' stamp: 'jmv 10/25/2011 17:28'!                 testUndoRedo	"	TextEditorTest new testUndoRedo	"	| editor model paragraph m text1 text0 text2 |	text0 _ ''.	model _ TextModel withText: text0 copy.	editor _ TextEditor new.	m _ BareTextMorph new.	m setEditView: TextModelMorph classToUse new.	editor morph: m.	editor instVarNamed: 'emphasisHere' put: Array new.	editor model: model.	paragraph _ Paragraph new.	paragraph setModel: model extentForComposing: 300@300.	editor changeParagraph: paragraph.	paragraph composeAll.	text1 _ 'some words' asText.	editor addString: text1.	self assert: model actualContents = text1.	editor undo.	self assert: model actualContents = text0.	editor redo.	self assert: model actualContents = text1.	text2 _ ' additional inserted stuff' asText.	editor addString: text2.	self assert: model actualContents = (text1, text2).	editor undo.	self assert: model actualContents = text1.	editor undo.	self assert: model actualContents = text0.	editor redo.	self assert: model actualContents = text1.	editor redo.	self assert: model actualContents = (text1, text2).! !!TextModelMorph methodsFor: 'testing' stamp: 'jmv 10/25/2011 17:29'!       is: aSymbol	self flag: #jmvVer.	^ aSymbol == #TextModelMorph or: [ super is: aSymbol ]! !!TextModelMorph class methodsFor: 'as yet unclassified' stamp: 'jmv 11/9/2011 22:56'!            classToUse	self useNewClass ifTrue: [ ^TextModelMorph2 ].	^self! !!BrowserCommentTextMorph class methodsFor: 'as yet unclassified' stamp: 'jmv 11/9/2011 22:56'!                          classToUse	self useNewClass ifTrue: [ ^BrowserCommentTextMorph2 ].	^self! !!LimitedHeightTextMorph class methodsFor: 'as yet unclassified' stamp: 'jmv 11/9/2011 22:56'!                  classToUse	self useNewClass ifTrue: [ ^LimitedHeightTextMorph2 ].	^self! !!VersionsBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 10/25/2011 17:25'!buildMorphicWindow	"Open a morphic view for the messageSet, whose label is labelString. 	The listView may be either single or multiple selection type"	| listPane |	listPane _ PluggableListMorph classToUse		model: model		listGetter: #list		indexGetter: #listIndex		indexSetter: #toggleListIndex:		mainView: self		menuGetter: #listMenu		keystrokeAction: #changeListKey:from:.		self layoutMorph		addMorph: listPane proportionalHeight: 0.4;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6! !