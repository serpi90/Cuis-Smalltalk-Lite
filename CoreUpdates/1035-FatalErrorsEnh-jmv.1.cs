'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 16 June 2011 at 3:07:37 pm'!!Object methodsFor: 'private' stamp: 'jmv 6/16/2011 15:05'!primitiveError: aString 	"This method is called when the error handling results in a recursion in 	calling on error: or halt or halt:."	| context emergencyEvaluator lines r |	r _ 10@10 extent: (Display extent -20 min: 700@1000).	lines _ r height // StrikeFont default height.	emergencyEvaluator _ Transcripter newInFrame: r.	emergencyEvaluator		nextPutAll: '***System error handling failed***'; cr;		nextPutAll: aString; cr;		nextPutAll: '-------------------------------'; cr.	context _ thisContext sender sender.	(30 min: lines - 10) timesRepeat: [context ifNotNil: [emergencyEvaluator print: (context _ context sender); cr]].	emergencyEvaluator		nextPutAll: '-------------------------------'; cr;		nextPutAll: 'Type ''revert'' to revert your last method change.'; cr;		nextPutAll: 'Type ''exit'' to exit the emergency evaluator.'; cr.	emergencyEvaluator readEvalPrint.	World install "init hands and redisplay"! !!Debugger class methodsFor: 'class initialization' stamp: 'jmv 6/16/2011 14:55'!openContext: aContext label: aString contents: contentsStringOrNil	"Open a notifier in response to an error, halt, or notify. A notifier view just shows a short view of the sender stack and provides a menu that lets the user open a full debugger."	<primitive: 19> "Simulation guard"	ErrorRecursion not & Preferences logDebuggerStackToFile ifTrue:		[Smalltalk logError: aString inContext: aContext to: 'CuisDebug.log'].	ErrorRecursion ifTrue: [		ErrorRecursion _ false.		contentsStringOrNil			ifNil: [				self primitiveError: 'Can not open debugger due to recursion error.', 				String cr, aString]			ifNotNil: [				self primitiveError: 'Can not open debugger due to recursion error.', 					String cr, aString, String cr, contentsStringOrNil ]].	ErrorRecursion _ true.	self informExistingDebugger: aContext label: aString.	(Debugger context: aContext)		openNotifierContents: contentsStringOrNil		label: aString.	ErrorRecursion _ false.	Processor activeProcess suspend.! !!Debugger class methodsFor: 'opening' stamp: 'jmv 6/16/2011 14:58'!openOn: process context: context label: title contents: contentsStringOrNil fullView: bool	"Open a notifier in response to an error, halt, or notify. A notifier view just shows a short view of the sender stack and provides a menu that lets the user open a full debugger."	| errorWasInUIProcess |	errorWasInUIProcess _ ProjectX newProcessIfUIX: process.	WorldState addDeferredUIMessage: [ 		[	| debugger |			debugger _ self new process: process controller: nil context: context.			"schedule debugger in deferred UI message to address redraw			problems after opening a debugger e.g. from the testrunner."			"WorldState addDeferredUIMessage: ["			bool				ifTrue: [debugger openFullNoSuspendLabel: title]				ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].			debugger errorWasInUIProcess: errorWasInUIProcess.			Preferences logDebuggerStackToFile ifTrue: [				Smalltalk logError: title inContext: context to: 'CuisDebug.log'].		] on: Error do: [ :ex |			self primitiveError:				'Error while trying to open Debugger', String cr,				'Orginal error: ', 				title asString, '.', String cr,				'	Debugger error: ', 				([ex description] on: Error do: ['a ', ex class printString]), ':'		]	].	process suspend! !!Transcripter class methodsFor: 'utilities' stamp: 'di 11/3/2000 18:47'!emergencyEvaluator	(Transcripter newInFrame: (0@0 corner: 320@200))		show: 'Type ''revert'' to revert your last method change.Type ''exit'' to exit the emergency evaluator.';		readEvalPrint! !!Warning methodsFor: 'exceptionDescription' stamp: 'jmv 6/16/2011 14:52'!defaultAction	"The user should be notified of the occurrence of an exceptional occurrence and given an option of continuing or aborting the computation. The description of the occurrence should include any text specified as the argument of the #signal: message."	Debugger		openContext: thisContext		label: 'Warning'		contents: self messageText.	self resume! !!WorldState methodsFor: 'update cycle' stamp: 'jmv 6/16/2011 15:00'!handleFatalDrawingError: errMsg	"Handle a fatal drawing error."		Display deferUpdates: false. "Just in case"	self primitiveError: 		'Fatal Morphic drawing error', String cr,		errMsg.	"Hm... we should jump into a 'safe' worldState here, but how do we find it?!!"! !Transcripter class removeSelector: #emergencyEvaluator:!PasteUpMorph removeSelector: #handleFatalDrawingError:!