'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 20 April 2011 at 8:39:53 am'!!classDefinition: #RecentMessageSetWindow category: #'Morphic-Tools'!MessageSetWindow subclass: #RecentMessageSetWindow	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Tools'!!Object methodsFor: '*tools-browser' stamp: 'jmv 4/19/2011 16:11'!browseClassHierarchy	| targetClass |	targetClass := self class isMeta				ifTrue: [self class theNonMetaClass]				ifFalse: [self class ].	HierarchyBrowser newFor: targetClass! !!Object methodsFor: 'Breakpoint' stamp: 'bkv 7/1/2003 12:33'!break	"This is a simple message to use for inserting breakpoints during debugging.	The debugger is opened by sending a signal. This gives a chance to restore	invariants related to multiple processes."	BreakPoint signal.	"nil break."! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 4/19/2011 20:28'!hierarchyBrowser	"Create and schedule a new hierarchy browser on the currently selected class or meta."	| newBrowser aSymbol aBehavior messageCatIndex selectedClassOrMetaClass |	(selectedClassOrMetaClass _ self selectedClassOrMetaClass)		ifNil: [^ nil].	newBrowser _ HierarchyBrowser new initHierarchyForClass: selectedClassOrMetaClass.	((aSymbol _ self selectedMessageName) notNil and: [(MessageSet isPseudoSelector: aSymbol) not])		ifTrue: [			aBehavior _ selectedClassOrMetaClass.			messageCatIndex _ aBehavior organization numberOfCategoryOfElement: aSymbol.			newBrowser messageCategoryListIndex: messageCatIndex + 1.			newBrowser messageListIndex:				((aBehavior organization listAtCategoryNumber: messageCatIndex) indexOf: aSymbol)].	^newBrowser! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 4/19/2011 21:48'!makeSampleInstance	| aClass nonMetaClass anInstance |	(aClass _ self selectedClassOrMetaClass) ifNil: [^ self].	nonMetaClass _ aClass theNonMetaClass.	anInstance _ nonMetaClass initializedInstance.	(anInstance isNil and: [nonMetaClass ~~ UndefinedObject]) ifTrue: 		[^ self inform: 'Sorry, cannot make an instance of ', nonMetaClass name].	(anInstance is: #Morph)		ifTrue: [			self currentHand attachMorph: anInstance]		ifFalse: [			anInstance inspectWithLabel: 'An instance of ', nonMetaClass name]! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 4/19/2011 22:18'!openMessageListMenu	"Offer the unshifted selector-list menu"	^ self messageListMenu popUpInWorld! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 4/19/2011 22:20'!openShiftedMessageListMenu	"Offer the shifted selector-list menu"	^ self shiftedMessageListMenu popUpInWorld! !!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 4/19/2011 16:04'!browseMethodFull	"Create and schedule a full Browser and then select the current class and message."	| myClass |	(myClass _ self selectedClassOrMetaClass) ifNotNil:		[BrowserWindow fullOnClass: myClass selector: self selectedMessageName]! !!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 4/19/2011 20:30'!browseUnusedMethods	| cls list |	(cls _ self selectedClass) ifNil: [^ self].	list _ self unusedMethods ifNil: [ ^self ].	Smalltalk browseMessageList: list name: 'Unsent Methods in ', cls name! !!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 4/19/2011 22:34'!classHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."self flag: #ojo. "borrar"	Utilities spawnHierarchyForClass: self selectedClassOrMetaClass "OK if nil"		selector: self selectedMessageName! !!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 4/19/2011 16:04'!messageListKey: aChar from: view	"Respond to a Command key.  I am a model with a code pane, and I also	have a listView that has a list of methods.  The view knows how to get	the list and selection."	| sel class |	aChar == $D ifTrue: [^ self toggleDiffing].	sel _ self selectedMessageName.	aChar == $m ifTrue:  "These next two put up a type in if no message selected"		[^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk].	aChar == $n ifTrue: 		[^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllCallsOn: to: Smalltalk].	"The following require a class selection"	(class _ self selectedClassOrMetaClass) ifNil: [^ self arrowKey: aChar from: view].	aChar == $b ifTrue: [^ BrowserWindow fullOnClass: class selector: sel].	aChar == $N ifTrue: [^ self browseClassRefs].	aChar == $i ifTrue: [^ self methodHierarchy].	aChar == $h ifTrue: [^ self classHierarchy].	aChar == $p ifTrue: [^ self browseFullProtocol].	"The following require a method selection"	sel ifNotNil: 		[aChar == $o ifTrue: [^ self fileOutMessage].		aChar == $c ifTrue: [^ self copySelector].		aChar == $v ifTrue: [^ self browseVersions].		aChar == $O ifTrue: [^ self openSingleMessageBrowser].		aChar == $x ifTrue: [^ self removeMessage]].	^ self arrowKey: aChar from: view! !!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 4/19/2011 20:29'!unusedMethods	| classes unsent messageList cls |	(cls _ self selectedClass) ifNil: [^ nil].	classes _ Array with: cls with: cls class.	unsent _ Set new.	classes do: [:c | unsent addAll: c selectors].	unsent _ Smalltalk allUnSentMessagesIn: unsent.	messageList _ OrderedCollection new.	classes do: [:c | (c selectors select: [:s | unsent includes: s]) asArray sort					do: [:sel | messageList add: c name , ' ' , sel]].	^messageList! !!Browser methodsFor: 'class functions' stamp: 'jmv 4/19/2011 20:20'!shiftedClassListMenu	"Set up the menu to apply to the receiver's class list when the shift key is down"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: #(			-			('unsent methods'					browseUnusedMethods				'browse all methods defined by this class that have no senders')			('unreferenced inst vars'			showUnreferencedInstVars				'show a list of all instance variables that are not referenced in methods')			('unreferenced class vars'			showUnreferencedClassVars				'show a list of all class variables that are not referenced in methods')			('subclass template'				makeNewSubclass				'put a template into the code pane for defining of a subclass of this class')			-			('sample instance'					makeSampleInstance				'give me a sample instance of this class, if possible')			('inspect instances'					inspectInstances				'open an inspector on all the extant instances of this class')			('inspect subinstances'				inspectSubInstances				'open an inspector on all the extant instances of this class and of all of its subclasses')			-			('add all meths to current chgs'		addAllMethodsToCurrentChangeSet				'place all the methods defined by this class into the current change set')			('create inst var accessors'			createInstVarAccessors				'compile instance-variable access methods for any instance variables that do not yet have them')			-			('more...'							offerUnshiftedClassListMenu				'return to the standard class-list menu')).	^ aMenu! !!Browser methodsFor: 'message category functions' stamp: 'jmv 4/19/2011 22:03'!messageCategoryMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('fileOut'							fileOutMessageCategories)		-		('reorganize'						editMessageCategories)		('alphabetize'						alphabetizeMessageCategories)		('remove empty categories'		removeEmptyCategories)		('categorize all uncategorized'		categorizeAllUncategorizedMethods)		('new category...'					addCategory)		-		('rename...'							renameCategory)		('remove'							removeMessageCategory)).	^aMenu! !!Browser methodsFor: 'message functions' stamp: 'jmv 4/19/2011 22:20'!messageListMenu	"Answer the message-list menu"	"Changed by emm to include menu-item for breakpoints"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList:#(			('what to show...'				offerWhatToShowMenu)                	('toggle break on entry'		toggleBreakOnEntry)            	-			('browse full (b)' 				browseMethodFull)			('browse hierarchy (h)'			classHierarchy)			('browse method (O)'			openSingleMessageBrowser)			('browse protocol (p)'			browseFullProtocol)			-			('fileOut'						fileOutMessage)			-			('senders of... (n)'				browseSendersOfMessages)			('implementors of... (m)'			browseMessages)			('inheritance (i)'					methodHierarchy)			('versions (v)'					browseVersions)			-			('inst var refs...'					browseInstVarRefs)			('inst var defs...'				browseInstVarDefs)			('class var refs...'				browseClassVarRefs)			('class variables'				browseClassVariables)			('class refs (N)'					browseClassRefs)			-			('remove method (x)'			removeMessage)			-			('more...'						openShiftedMessageListMenu)).	^ aMenu! !!Browser methodsFor: 'message functions' stamp: 'jmv 4/19/2011 22:18'!shiftedMessageListMenu	"Fill aMenu with the items appropriate when the shift key is held down"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addStayUpIcons.	aMenu addList: #(		('toggle diffing (D)'						toggleDiffing)		('implementors of sent messages'		browseAllMessages)		-		('local senders of...'						browseLocalSendersOfMessages)		('local implementors of...'				browseLocalImplementors)		-		('spawn sub-protocol'					browseProtocol)		('spawn full protocol'					browseFullProtocol)		-		('sample instance'						makeSampleInstance)		('inspect instances'						inspectInstances)		('inspect subinstances'					inspectSubInstances)).	self addExtraShiftedItemsTo: aMenu.	aMenu addList: #(		-		('change category...'					changeCategory)).	self canShowMultipleMessageCategories ifTrue: [ aMenu addList:		 #(('show category (C)'					showHomeCategory))].	aMenu addList: #(		-		('change sets with this method'			findMethodInChangeSets)		('revert to previous version'			revertToPreviousVersion)		('remove from current change set'		removeFromCurrentChanges)		('revert & remove from changes'		revertAndForget)		('add to current change set'			adoptMessageInCurrentChangeset)		-		('more...' 								openMessageListMenu)).	^ aMenu! !!Browser methodsFor: 'system category functions' stamp: 'jmv 4/20/2011 08:31'!systemCategoryBrowser	"Create a new system category browser with initial textual 	contents set to aString."	| newBrowser |	systemCategoryListIndex > 0		ifTrue: [			newBrowser _ Browser new.			newBrowser systemCategoryListIndex: systemCategoryListIndex.			newBrowser setClass: self selectedClassOrMetaClass selector: self selectedMessageName.			^newBrowser].	^nil! !!ChangeList methodsFor: 'menu actions' stamp: 'jmv 4/19/2011 22:48'!xtraVersion	| change class |	listIndex = 0		ifTrue: [^ nil ].	change _ changeList at: listIndex.	((class _ change methodClass) notNil			and: [class includesSelector: change methodSelector])		ifFalse: [ ^nil ].	^change! !!ChangeSorter methodsFor: 'access' stamp: 'jmv 4/19/2011 22:50'!methodInfoFromRemoval: classAndSelector	^myChangeSet methodInfoFromRemoval: classAndSelector! !!ChangeSorter methodsFor: 'message list' stamp: 'jmv 4/19/2011 22:20'!messageMenu	"Fill aMenu with items appropriate for the message list; could be for a single or double changeSorter"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'message list'.	aMenu addStayUpIcons.	parent ifNotNil:		[aMenu addList: #(			('copy method to other side'			copyMethodToOther)			('move method to other side'			moveMethodToOther))].	aMenu addList: #(			('delete method from changeSet (d)'	forget)			-			('remove method from system (x)'		removeMessage)				-			('browse full (b)'						browseMethodFull)			('browse hierarchy (h)'					spawnHierarchy)			('browse method (O)'					openSingleMessageBrowser)			('browse protocol (p)'					browseFullProtocol)			-			('fileOut'								fileOutMessage)			-			('senders of... (n)'						browseSendersOfMessages)			('implementors of... (m)'					browseMessages)			('inheritance (i)'							methodHierarchy)			('versions (v)'							browseVersions)			-			('more...'								openShiftedMessageListMenu)).	^ aMenu! !!ChangeSorter methodsFor: 'message list' stamp: 'jmv 4/19/2011 22:18'!shiftedMessageMenu	"Arm the menu so that it holds items appropriate to the message-list while the shift key is down.  Answer the menu."	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: #(		-		('toggle diffing (D)'					toggleDiffing)		('implementors of sent messages'	browseAllMessages)		('change category...'				changeCategory)			-		('sample instance'					makeSampleInstance)		('inspect instances'					inspectInstances)		('inspect subinstances'				inspectSubInstances)		-		('change sets with this method'		findMethodInChangeSets)		('revert to previous version'		revertToPreviousVersion)		('revert & remove from changes'	revertAndForget)		-		('more...'							openMessageListMenu)).	^aMenu! !!ClassCommentVersionsBrowser methodsFor: 'menu' stamp: 'jmv 4/19/2011 22:37'!versionsMenu	"Fill aMenu with menu items appropriate to the receiver"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'versions'.	aMenu addStayUpIcons.	^ aMenu addList: #(		('compare to current'		compareToCurrentVersion		'compare selected version to the current version')		('revert to selected version'	fileInSelections					'resubmit the selected version, so that it becomes the current version')		('remove from changes'		removeMethodFromChanges		'remove this method from the current change set, if present')			-		('toggle diffing (D)'			toggleDiffing					'toggle whether or not diffs should be shown here')		('update list'				reformulateList					'reformulate the list of versions, in case it somehow got out of synch with reality')		-		('help...'					offerVersionsHelp				'provide an explanation of the use of this tool'))! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/19/2011 22:20'!contextStackMenu	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: {			{'fullStack (f)'.				#fullStack}.			{'restart (r)'.				#restart}.			{'proceed (p)'.				#proceed}.			{'step (t)'.					#doStep}.			{'step through (T)'.			#stepIntoBlock}.			{'send (e)'.					#send}.			{'where (w)'.				#where}.			{'peel to first like this'.		#peelToFirst}.			#-.			{'return entered value'.		#returnValue}.			#-.			{'toggle break on entry'.	#toggleBreakOnEntry}.			{'senders of... (n)'.			#browseSendersOfMessages}.			{'implementors of... (m)'.	#browseMessages}.			{'inheritance (i)'.			#methodHierarchy}.			#-.			{'versions (v)'.				#browseVersions}.			{'inst var refs...'.			#browseInstVarRefs}.			#-.			{'inst var defs...'.			#browseInstVarDefs}.			{'class var refs...'.			#browseClassVarRefs}.			{'class variables'.			#browseClassVariables}.			#-.			{'class refs (N)'.			#browseClassRefs}.			{'browse full (b)'.			#browseMethodFull}.			{'file out '.					#fileOutMessage}.			#-.			{'more...'.					#openShiftedMessageListMenu}.		}.	^aMenu! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/19/2011 22:19'!shiftedContextStackMenu	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: {			{'browse class hierarchy'.				#classHierarchy}.			{'browse method (O)'.					#openSingleMessageBrowser}.			{'implementors of sent messages'.		#browseAllMessages}.			{'change sets with this method'.		#findMethodInChangeSets}.			#-.			{'inspect instances'.					#inspectInstances}.			{'inspect subinstances'.				#inspectSubInstances}.			#-.			{'revert to previous version'.			#revertToPreviousVersion}.			{'remove from current change set'.	#removeFromCurrentChanges}.			{'revert & remove from changes'.		#revertAndForget}.			#-.			{'more...'.								#openMessageListMenu}. 		}.	^aMenu! !!DeepCopier methodsFor: 'like fullCopy' stamp: 'jmv 4/19/2011 16:04'!warnIverNotCopiedIn: aClass sel: sel	"Warn the user to update veryDeepCopyWith: or veryDeepInner:"	self inform: ('An instance variable was added to to class ', aClass name, ',\and it is not copied in the method ', sel, '.\Please rewrite it to handle all instance variables.\See DeepCopier class comment.') withCRs.	BrowserWindow fullOnClass: aClass selector: sel! !!FileContentsBrowser methodsFor: 'class list' stamp: 'jmv 4/19/2011 16:04'!browseMethodFull	| myClass |	(myClass _ self selectedClassOrMetaClass) ifNotNil:		[BrowserWindow fullOnClass: myClass realClass selector: self selectedMessageName]! !!FileContentsBrowser methodsFor: 'menus' stamp: 'jmv 4/19/2011 22:08'!messageCategoryMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('fileIn'								fileInMessageCategories)		('fileOut'							fileOutMessageCategories		''		model)		-		('reorganize'						editMessageCategories)		('add item...'						addCategory)		('rename...'							renameCategory)		('remove'							removeMessageCategory)		('remove existing'					removeUnmodifiedMethods)).	^aMenu! !!FileContentsBrowser methodsFor: 'menus' stamp: 'jmv 4/19/2011 22:17'!messageListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList:#(			('fileIn'							fileInMessage)			('fileOut'						fileOutMessage)			-			('senders (n)'					browseSenders)			('implementors (m)'				browseImplementors)			('method inheritance (h)'		methodHierarchy)			('versions (v)'					browseVersions)			-			('remove method (x)'			removeMessage)).	^ aMenu! !!Inspector methodsFor: 'message list menu' stamp: 'jmv 4/19/2011 16:05'!browseMethodFull	"Create and schedule a full Browser and then select the current class and message."	| myClass |	(myClass _ self selectedClassOrMetaClass) ifNotNil:		[BrowserWindow fullOnClass: myClass selector: nil]! !!LightWidget methodsFor: 'debug and other' stamp: 'jmv 4/19/2011 16:11'!buildDebugMenu: aHand 	"Answer a debugging menu for the receiver.  The hand argument is seemingly historical and plays no role presently"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addStayUpIcons.	self isKnownFailing		ifTrue: [			aMenu add: 'start drawing again' action: #resumeAfterDrawError.			aMenu addLine].	(self hasProperty: #errorOnStep) 		ifTrue: [			aMenu add: 'start stepping again' action: #resumeAfterStepError.			aMenu addLine].	aMenu add: 'inspect morph' action: #inspect.	aMenu add: 'inspect owner chain' action: #inspectOwnerChain.	aMenu 		add: 'explore morph'		target: self		selector: #explore.	aMenu addLine.	aMenu 		add: 'browse morph class'		target: self		selector: #browseClassHierarchy.	aMenu addLine.	aMenu		add: 'edit balloon help' action: #editBalloonHelpText.	^aMenu! !!MessageSet methodsFor: 'message list' stamp: 'jmv 4/20/2011 08:10'!addExtraShiftedItemsTo: aMenu	"The shifted selector-list menu is being built.  Add items specific to MessageSet"	self growable ifTrue:		[aMenu addList: #(			-			('remove from this browser'		removeMessageFromBrowser)			('filter message list...'			filterMessageList))].	aMenu add: 'sort by date' action: #sortByDate! !!Morph methodsFor: 'debug and other' stamp: 'jmv 4/19/2011 16:11'!buildDebugMenu: aHand 	"Answer a debugging menu for the receiver.  The hand argument is seemingly historical and plays no role presently"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addStayUpIcons.	self isKnownFailing		ifTrue: [			aMenu add: 'start drawing again' action: #resumeAfterDrawError.			aMenu addLine].	(self hasProperty: #errorOnStep) 		ifTrue: [			aMenu add: 'start stepping again' action: #resumeAfterStepError.			aMenu addLine].	aMenu add: 'inspect morph' action: #inspect.	aMenu add: 'inspect owner chain' action: #inspectOwnerChain.	self hasModel 		ifTrue: [			aMenu 				add: 'inspect model'				target: self model				action: #inspect].	aMenu 		add: 'explore morph'		target: self		selector: #explore.	aMenu addLine.	aMenu 		add: 'browse morph class'		target: self		selector: #browseClassHierarchy.	self hasModel 		ifTrue: [			aMenu 				add: 'browse model class'				target: self model				selector: #browseClassHierarchy].	aMenu addLine.	aMenu		add: 'edit balloon help' action: #editBalloonHelpText.	^aMenu! !!Morph methodsFor: 'initialization' stamp: 'jmv 4/19/2011 16:29'!initialize	"initialize the state of the receiver"	owner _ nil.	submorphs _ #().	bounds _ self defaultBounds.	color _ self defaultColor! !!Morph methodsFor: 'submorphs-add/remove' stamp: 'jmv 4/19/2011 16:29'!removeAllMorphs	| oldMorphs myWorld |	submorphs isEmpty ifTrue: [ ^self ].	myWorld _ self world.	(fullBounds notNil or: [ myWorld notNil ]) ifTrue: [ self doLayoutIfNeeded; redrawNeeded ].	submorphs do: [ :m |		m privateOwner: nil ].	oldMorphs _ submorphs.	submorphs _ #().	oldMorphs do: [ :m |		self removedMorph: m ].	self layoutChanged! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:06'!browseAllMessages	"Create and schedule a message set browser on all implementors of all the messages sent by the current method."	| aClass aName method filteredList |	(aName _ model selectedMessageName) ifNotNil: [		method _ (aClass _ model selectedClassOrMetaClass) compiledMethodAt: aName.		filteredList _ method messages reject: 			[:each | #(new initialize = ) includes: each].		Smalltalk browseAllImplementorsOfList: filteredList asArray sort			 title: 'All messages sent in ', aClass name, '.', aName]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 16:42'!browseClassRefs	model selectedClass ifNotNil: [ :cls | 		Smalltalk browseAllCallsOnClass: cls theNonMetaClass]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 16:40'!browseClassVarRefs 	model selectedClass ifNotNil: [ :cls |		cls browseClassVarRefs ]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 16:42'!browseClassVariables	model selectedClass ifNotNil: [ :cls | 		cls classPool inspectWithLabel: 'Class Variables in ', cls name]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 16:20'!browseFullProtocol	"Create and schedule a new protocol browser on the currently selected class or meta."	| aPBrowser label |	model selectedClassOrMetaClass ifNotNil: [ :classOrMetaclass |		aPBrowser_ ProtocolBrowser new on: classOrMetaclass.		label _ 'Entire protocol of: ', classOrMetaclass name.		MessageSetWindow open: aPBrowser label: label ]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 20:27'!browseHierarchy	"Create and schedule a new hierarchy browser on the currently selected class or meta."	| newBrowser |	newBrowser _ model hierarchyBrowser.				HierarchyBrowserWindow openNoSysCat: newBrowser label: newBrowser labelString.	newBrowser assureSelectionsShow! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:17'!browseImplementors	"Create and schedule a message set browser on all implementors of the currently selected message selector. Do nothing if no message is selected."	model selectedMessageName ifNotNil: [ :messageName |		Smalltalk browseAllImplementorsOf: messageName]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 16:39'!browseInstVarDefs 	model selectedClassOrMetaClass ifNotNil: [ :cls |		Smalltalk browseInstVarDefs: cls ]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 16:38'!browseInstVarRefs	model selectedClassOrMetaClass ifNotNil: [ :cls |		Smalltalk browseInstVarRefs: cls ]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:41'!browseLocalImplementors	"Present a menu of all messages sent by the currently selected message. 	Open a message set browser of all implementors of the message chosen in or below	the selected class.	Do nothing if no message is chosen."	self getSelectorAndSendQuery: #browseAllImplementorsOf:localTo:		to: Smalltalk		with: { model selectedClass }! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:41'!browseLocalSendersOfMessages	"Present a menu of the currently selected message, as well as all	messages sent by it.  Open a message set browser of all implementors	of the message chosen in or below the selected class"	self getSelectorAndSendQuery: #browseAllCallsOn:localTo:		to: Smalltalk		with: { model selectedClass }! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:42'!browseMessages	"Present a menu of all messages sent by the currently selected message. 	Open a message set browser of all implementors of the message chosen."	self getSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:06'!browseMethodFull	"Create and schedule a full Browser and then select the current class and message."	|  myClass |	(myClass _ model selectedClassOrMetaClass) ifNotNil: [		BrowserWindow fullOnClass: myClass selector: model selectedMessageName]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:04'!browseProtocol	"Create and schedule a new protocol browser on the currently selected class or meta."	| aPBrowser label |	model selectedClassOrMetaClass ifNotNil: [ :classOrMetaclass |		aPBrowser_ ProtocolBrowser new onSubProtocolOf: classOrMetaclass.		label _'Sub-protocol of: ', classOrMetaclass name.		MessageSetWindow open: aPBrowser label: label ]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:15'!browseSenders	"Create and schedule a message set browser on all senders of the currently selected message selector.  Of there is no message currently selected, offer a type-in"	self sendQuery: #browseAllCallsOn: to: Smalltalk! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:42'!browseSendersOfMessages	"Present a menu of the currently selected message, as well as all messages sent by it.  Open a message set browser of all senders of the selector chosen."	self getSelectorAndSendQuery: #browseAllCallsOn: to: Smalltalk! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 21:43'!browseUnusedMethods	| list |	list _ model unusedMethods ifNil: [ ^self ].	Smalltalk browseMessageList: list name: 'Unsent Methods in ', model selectedClass name! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:45'!browseVersions	"Create and schedule a Versions Browser, showing all versions of the 	currently selected message. Answer the browser or nil."	| selector class | 	(selector _ model selectedMessageName)		ifNil:[ self inform: 'Sorry, only actual methods have retrievable versions.'. ^nil ]		ifNotNil: [(MessageSet isPseudoSelector: selector)				ifTrue: ["Eliminates Definition and Hierarchy"					^ model classCommentIndicated						ifTrue: [ ClassCommentVersionsBrowser browseCommentOf: model selectedClass. nil ]].			class _ model selectedClassOrMetaClass.			^VersionsBrowser				browseVersionsOf: (class compiledMethodAt: selector)				class: model selectedClass				meta: class isMeta				category: (class organization categoryOfElement: selector)				selector: selector]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:07'!findMethodInChangeSets	"Find and open a changeSet containing the current method."	| aName |	(aName _ model selectedMessageName) ifNotNil: [		ChangeSorter browseChangeSetsWithClass: model selectedClassOrMetaClass					selector: aName]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 21:50'!inspectInstances	"Inspect all instances of the selected class."	model selectedClassOrMetaClass ifNotNil: [ :c |		c theNonMetaClass inspectAllInstances]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 21:51'!inspectSubInstances	"Inspect all instances of the selected class and all its subclasses"	model selectedClassOrMetaClass ifNotNil: [ :c |		c theNonMetaClass inspectSubInstances]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:05'!makeSampleInstance	| aClass nonMetaClass anInstance |	(aClass _ model selectedClassOrMetaClass) ifNil: [^ self].	nonMetaClass _ aClass theNonMetaClass.	anInstance _ nonMetaClass initializedInstance.	(anInstance isNil and: [nonMetaClass ~~ UndefinedObject]) ifTrue: 		[^ self inform: 'Sorry, cannot make an instance of ', nonMetaClass name].	(anInstance is: #Morph)		ifTrue: [			self currentHand attachMorph: anInstance]		ifFalse: [			anInstance inspectWithLabel: 'An instance of ', nonMetaClass name]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:43'!methodHierarchy	"Create and schedule a method browser on the hierarchy of implementors."self flag: #ojo."sacar estas cosas de Utilities..."	Utilities		methodHierarchyBrowserForClass: model selectedClassOrMetaClass 		selector: model selectedMessageName! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:35'!openSingleMessageBrowser	| msgName mr |	"Create and schedule a message list browser populated only by the currently selected message"	(msgName _ model selectedMessageName) ifNil: [^ self].	mr _ MethodReference new		setStandardClass: model selectedClassOrMetaClass		methodSymbol: msgName.	Smalltalk 		browseMessageList: (Array with: mr)		name: mr asStringOrText		autoSelect: nil! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 21:45'!showUnreferencedClassVars	"Search for all class variables known to the selected class, and put up a 	list of those that have no references anywhere in the system. The 	search includes superclasses, so that you don't need to navigate your 	way to the class that defines each class variable in order to determine 	whether it is unreferenced"	| cls aList |	(cls _ model selectedClass)		ifNil: [^ self].	aList _ cls allUnreferencedClassVariables.	aList size = 0		ifTrue: [^ self inform: 'There are no unreferencedclass variables in' , cls name].	Transcript cr; nextPutAll: 'Unreferenced class variable(s) in ', cls name; cr.	aList do: [:el | Transcript tab; nextPutAll: el; cr].	(SelectionMenu labels: aList selections: aList)		startUpWithCaption: 'Unreferencedclass variables in ' , cls name! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 21:44'!showUnreferencedInstVars	"Search for all instance variables known to the selected class, and put up a list of those that have no references anywhere in the system.  The search includes superclasses, so that you don't need to navigate your way to the class that defines each inst variable in order to determine whether it is unreferenced"	| cls aList |	(cls _ model selectedClassOrMetaClass) ifNil: [^ self].	aList _ cls allUnreferencedInstanceVariables.	aList size = 0 ifTrue: [^ self inform: 'There are no unreferencedinstance variables in', cls name].	Transcript cr; nextPutAll: 'Unreferenced instance variable(s) in ', cls name; cr.	aList do: [:el | Transcript tab; nextPutAll: el; cr].	(SelectionMenu labels: aList selections: aList) startUpWithCaption: 'Unreferencedinstance variables in ', cls name! !!CodeWindow methodsFor: 'menu building' stamp: 'jmv 4/19/2011 22:25'!addContentsTogglesTo: aMenu	"Add updating menu toggles governing contents to aMenu."	model contentsSymbolQuints do: [ :aQuint |			aQuint == #-				ifTrue: [					aMenu addLine]				ifFalse: [					aMenu addUpdating: aQuint third target: model action: aQuint second.					aMenu balloonTextForLastItem: aQuint fifth ]]! !!CodeWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 07:55'!offerShiftedClassListMenu	"Offer the shifted class-list menu."	^ self shiftedClassListMenu popUpInWorld! !!CodeWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 07:55'!offerUnshiftedClassListMenu	"Offer the shifted class-list menu."	^ self classListMenu popUpInWorld! !!CodeWindow methodsFor: 'menu building' stamp: 'jmv 4/19/2011 22:25'!offerWhatToShowMenu	"Offer a menu governing what to show"	 | aMenu  |	aMenu _ MenuMorph new defaultTarget: model.	aMenu addTitle: 'What to show'.	aMenu addStayUpIcons.	self addContentsTogglesTo: aMenu.	aMenu popUpInWorld ! !!CodeWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 07:55'!openMessageListMenu	"Offer the unshifted selector-list menu"	^ self messageListMenu popUpInWorld! !!CodeWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 07:55'!openShiftedMessageListMenu	"Offer the shifted selector-list menu"	^ self shiftedMessageListMenu popUpInWorld! !!CodeWindow methodsFor: 'misc' stamp: 'jmv 4/19/2011 22:41'!getSelectorAndSendQuery: querySelector to: queryPerformer	"Obtain a selector relevant to the current context, and then send the querySelector to the queryPerformer with the selector obtained as its argument.  If no message is currently selected, then obtain a method name from a user type-in"	self getSelectorAndSendQuery: querySelector to: queryPerformer with: { }! !!CodeWindow methodsFor: 'misc' stamp: 'jmv 4/19/2011 22:40'!getSelectorAndSendQuery: querySelector to: queryPerformer with: queryArgs	"Obtain a selector relevant to the current context, and then send the querySelector to the queryPerformer with the selector obtained and queryArgs as its arguments.  If no message is currently selected, then obtain a method name from a user type-in"	| strm array |	strm _ WriteStream on: (array _ Array new: queryArgs size + 1).	strm nextPut: nil.	strm nextPutAll: queryArgs.	model selectedMessageName ifNil: [ | selector |		selector _ FillInTheBlank request: 'Type selector:' initialAnswer: 'flag:'.		^ selector isEmptyOrNil ifFalse: [			(Symbol hasInterned: selector				ifTrue: [ :aSymbol |					array at: 1 put: aSymbol.					queryPerformer perform: querySelector withArguments: array])				ifFalse: [ self inform: 'no such selector']		]	].	self selectMessageAndEvaluate: [:selector |		array at: 1 put: selector.		queryPerformer perform: querySelector withArguments: array	]! !!CodeWindow methodsFor: 'misc' stamp: 'jmv 4/19/2011 22:40'!selectMessageAndEvaluate: aBlock	"Allow the user to choose one selector, chosen from the currently selected message's selector, as well as those of all messages sent by it, and evaluate aBlock on behalf of chosen selector.  If there is only one possible choice, simply make it; if there are multiple choices, put up a menu, and evaluate aBlock on behalf of the the chosen selector, doing nothing if the user declines to choose any"	| selector method messages |	(selector _ model selectedMessageName) ifNil: [^ self].	method _ (model selectedClassOrMetaClass ifNil: [^ self])		compiledMethodAt: selector		ifAbsent: nil.	(method isNil or: [(messages _ method messages) size = 0])		 ifTrue: [^ aBlock value: selector].	(messages size = 1 and: [messages includes: selector])		ifTrue:			[^ aBlock value: selector].  "If only one item, there is no choice"	Smalltalk		showMenuOf: messages		withFirstItem: selector		ifChosenDo: [:sel | aBlock value: sel]! !!CodeWindow methodsFor: 'misc' stamp: 'jmv 4/20/2011 08:16'!sendQuery: querySelector to: queryPerformer	"Apply a query to the primary selector associated with the current context.  If no such selection exists, obtain one by user type-in. Then send querySelector to queryPerformer with the selector as its argument."	| aSelector aString |	aSelector _ model selectedMessageName ifNil:		[aString _FillInTheBlank request: 'Type selector:' initialAnswer: 'flag:'.		^ aString isEmptyOrNil ifFalse:			[(Symbol hasInterned: aString ifTrue:				[:aSymbol | queryPerformer perform: querySelector with: aSymbol])				ifFalse:					[self inform: 'no such selector']]].	queryPerformer perform: querySelector with: aSelector! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/19/2011 15:59'!buildMorphicClassList	| myClassList |	(myClassList _ PluggableListMorph new)		model: model		listGetter: #classList		indexGetter: #classListIndex		indexSetter: #classListIndex:		menuGetter: (MessageSend receiver: self selector: #classListMenu)		keystrokeAction: #classListKey:from:.	myClassList enableDragNDrop: false.	^myClassList! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/19/2011 21:59'!buildMorphicMessageCatList	| myMessageCatList |	(myMessageCatList := PluggableMessageCategoryListMorph new)		model: model		listGetter: #messageCategoryList		indexGetter: #messageCategoryListIndex		indexSetter: #messageCategoryListIndex:		menuGetter: (MessageSend receiver: self selector: #messageCategoryMenu)		keystrokeAction: #arrowKey:from:		rawListGetter: #rawMessageCategoryList.	myMessageCatList enableDragNDrop: false.	^myMessageCatList! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/19/2011 22:22'!buildMorphicMessageList	"Build a morphic message list, with #messageList as its list-getter"	| aListMorph |	aListMorph _ PluggableListMorph		model: model		listGetter: #messageList		indexGetter: #messageListIndex		indexSetter: #messageListIndex:		menuGetter: (MessageSend receiver: self selector: #messageListMenu)		keystrokeAction: #messageListKey:from:.	aListMorph enableDragNDrop: false.	^aListMorph! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 08:22'!buildMorphicSystemCatList	| dragNDropFlag myCatList |	dragNDropFlag _ false.	(myCatList _ PluggableListMorph new)		model: model		listGetter: #systemCategoryList		indexGetter: #systemCategoryListIndex		indexSetter: #systemCategoryListIndex:		menuGetter: (MessageSend receiver: self selector: #systemCategoryMenu)		keystrokeAction: #systemCatListKey:from:.	myCatList enableDragNDrop: dragNDropFlag.	^myCatList! !!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 08:34'!buildNoSysCatMorphicWindow	"A Browser without the class categories list"	| mySingletonList upperPanes |	mySingletonList _ PluggableListMorph 				model: model				listGetter: #systemCategorySingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				menuGetter: (MessageSend receiver: self selector: #systemCatSingletonMenu)				keystrokeAction: #systemCatSingletonKey:from:.	mySingletonList enableDragNDrop: false.	mySingletonList hideScrollBarsIndefinitely.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: self buildMorphicClassColumn proportionalWidth: 0.3;		addAdjusterAndMorph: self buildMorphicMessageCatList proportionalWidth: 0.3;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.4.	self layoutMorph		addMorph: mySingletonList fixedHeight: Preferences standardCodeFont height + 10;		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.	self setUpdatablePanesFrom: #(classList messageCategoryList messageList).	model changed: #editSelection! !!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 07:58'!addExtraShiftedItemsTo: aMenu	"The shifted selector-list menu is being built; some menu items are appropriate only for certain kinds of browsers, and this gives a hook for them to be added as approrpiate.  If any is added here, a line should be added first -- browse reimplementors of this message for examples."! !!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/19/2011 22:04'!classListMenu	"Set up the menu to apply to the receiver's class list, honoring the #shifted boolean"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('browse full (b)'			browseMethodFull)		('browse hierarchy (h)'		browseHierarchy)		('browse protocol (p)'		browseFullProtocol)		-		('fileOut'					fileOutClass				''		model)		-		('show hierarchy'			hierarchy					''		model)		('show definition'			editClass					''		model)		('show comment'			editComment			''		model)		-		('inst var refs...'				browseInstVarRefs)		('inst var defs...'			browseInstVarDefs)		-		('class var refs...'			browseClassVarRefs)		('class vars'					browseClassVariables)		('class refs (N)'				browseClassRefs)		-		('rename class ...'			renameClass				''		model)		('copy class...'				copyClass				''		model)		('remove class (x)'			removeClass				''		model)		-		('more...'					offerShiftedClassListMenu)).	^ aMenu! !!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/19/2011 22:13'!messageCategoryMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: model.			"All the options are for the model."	aMenu addList: #(		('fileOut'							fileOutMessageCategories)		-		('reorganize'						editMessageCategories)		('alphabetize'						alphabetizeMessageCategories)		('remove empty categories'		removeEmptyCategories)		('categorize all uncategorized'		categorizeAllUncategorizedMethods)		('new category...'					addCategory)		-		('rename...'							renameCategory)		('remove'							removeMessageCategory)).	^aMenu! !!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 08:13'!messageListMenu	"Answer the message-list menu"	"Changed by emm to include menu-item for breakpoints"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList:#(			('what to show...'				offerWhatToShowMenu)                	('toggle break on entry'		toggleBreakOnEntry					''		model)            	-			('browse full (b)' 				browseMethodFull)			('browse hierarchy (h)'			browseHierarchy)			('browse method (O)'			openSingleMessageBrowser)			('browse protocol (p)'			browseFullProtocol)			-			('fileOut'						fileOutMessage							''		model)			-			('senders of... (n)'				browseSendersOfMessages)			('implementors of... (m)'			browseMessages)			('inheritance (i)'					methodHierarchy)			('versions (v)'					browseVersions)			-			('inst var refs...'					browseInstVarRefs)			('inst var defs...'				browseInstVarDefs)			('class var refs...'				browseClassVarRefs)			('class variables'				browseClassVariables)			('class refs (N)'					browseClassRefs)			-			('remove method (x)'			removeMessage							''		model)			-			('more...'						openShiftedMessageListMenu)).	^ aMenu! !!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/19/2011 21:52'!shiftedClassListMenu	"Set up the menu to apply to the receiver's class list when the shift key is down"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: #(			-			('unsent methods'					browseUnusedMethods				'browse all methods defined by this class that have no senders')			('unreferenced inst vars'			showUnreferencedInstVars				'show a list of all instance variables that are not referenced in methods')			('unreferenced class vars'			showUnreferencedClassVars				'show a list of all class variables that are not referenced in methods')			('subclass template'				makeNewSubclass				'put a template into the code pane for defining of a subclass of this class'								model)			-			('sample instance'					makeSampleInstance				'give me a sample instance of this class, if possible')			('inspect instances'					inspectInstances				'open an inspector on all the extant instances of this class')			('inspect subinstances'				inspectSubInstances				'open an inspector on all the extant instances of this class and of all of its subclasses')			-			('add all meths to current chgs'		addAllMethodsToCurrentChangeSet				'place all the methods defined by this class into the current change set'								model)			('create inst var accessors'			createInstVarAccessors				'compile instance-variable access methods for any instance variables that do not yet have them'		model)			-			('more...'							offerUnshiftedClassListMenu				'return to the standard class-list menu')).	^ aMenu! !!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 08:08'!shiftedMessageListMenu	"Fill aMenu with the items appropriate when the shift key is held down"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpIcons.	aMenu addList: #(		('toggle diffing (D)'						toggleDiffing							''		model)		('implementors of sent messages'		browseAllMessages)		-		('local senders of...'						browseLocalSendersOfMessages)		('local implementors of...'				browseLocalImplementors)		-		('spawn sub-protocol'					browseProtocol)		('spawn full protocol'					browseFullProtocol)		-		('sample instance'						makeSampleInstance)		('inspect instances'						inspectInstances)		('inspect subinstances'					inspectSubInstances)).	self addExtraShiftedItemsTo: aMenu.	aMenu addList: #(		-		('change category...'					changeCategory							''		model)).	model canShowMultipleMessageCategories ifTrue: [ aMenu addList: #(		('show category (C)'					showHomeCategory						''		model))].	aMenu addList: #(		-		('change sets with this method'			findMethodInChangeSets)		('revert to previous version'			revertToPreviousVersion				''		model)		('remove from current change set'		removeFromCurrentChanges			''		model)		('revert & remove from changes'		revertAndForget						''		model)		('add to current change set'			adoptMessageInCurrentChangeset	''		model)		-		('more...' 								openMessageListMenu)).	^ aMenu! !!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 08:38'!systemCatSingletonMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('find class... (f)'				findClass									''		model)		-		('browse all'				browseAllClasses)		('browse'					openSystemCategoryBrowser)		-		('fileOut'					fileOutSystemCategory				''		model)		-		('update'					updateSystemCategories				''		model)		('rename...'					renameSystemCategory				''		model)		('remove'					removeSystemCategory				''		model)).	^aMenu! !!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 08:34'!systemCategoryMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('find class... (f)'				findClass									''		model)		('recent classes... (r)'		recent									''		model)		-		('browse all'				browseAllClasses)		('browse'					openSystemCategoryBrowser)		-		('fileOut'					fileOutSystemCategory				''		model)		-		('reorganize'				editSystemCategories					''		model)		('alphabetize'				alphabetizeSystemCategories		''		model)		-		('update'					updateSystemCategories				''		model)		('add item...'				addSystemCategory					''		model)		('rename...'					renameSystemCategory				''		model)		('remove'					removeSystemCategory				''		model)		-		('move to top'				moveSystemCategoryTop				''		model)		('move up'					moveSystemCategoryUp				''		model)		('move down'				moveSystemCategoryDown			''		model)		('move to bottom' 			moveSystemCategoryBottom			''		model)).	^aMenu! !!BrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:29'!browseAllClasses	"Create and schedule a new browser on all classes alphabetically."	| newBrowser |	newBrowser _ HierarchyBrowser new initAlphabeticListing.	HierarchyBrowserWindow openNoSysCat: newBrowser label: 'All Classes Alphabetically'! !!BrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:31'!openSystemCategoryBrowser	"Create and schedule a new system category browser with initial textual 	contents set to aString."	model systemCategoryBrowser ifNotNil: [ :newBrowser |				BrowserWindow				openNoSysCat: newBrowser				label: 'Classes in category ', newBrowser selectedSystemCategoryName ]! !!ChangeListWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:49'!browseVersions	| browser change |	change _ model xtraVersion.	change ifNil: [ ^self ].	browser _ super browseVersions.	browser ifNotNil: [ browser addedChangeRecord: change ].	^browser! !!ChangeSorterWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:51'!browseVersions	"Create and schedule a changelist browser on the versions of the 	selected message."	| class selector method category pair sourcePointer |	(selector _ model selectedMessageName) ifNil: [^ self].	class _ model selectedClassOrMetaClass.	(class includesSelector: selector)		ifTrue: [method _ class compiledMethodAt: selector.				category _ class whichCategoryIncludesSelector: selector.				sourcePointer _ nil]		ifFalse: [pair _ model methodInfoFromRemoval: {class name. selector}.				pair ifNil: [^ nil].				sourcePointer _ pair first.				method _ CompiledMethod toReturnSelf setSourcePointer: sourcePointer.				category _ pair last].	VersionsBrowser		browseVersionsOf: method		class: model selectedClass meta: class isMeta		category: category selector: selector		lostMethodPointer: sourcePointer! !!FileContentsBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/19/2011 21:59'!buildMorphicWindow	"Create a pluggable version of all the views for a Browser, including views and controllers."	| list1 list2 upperPanes |	model systemCategoryListIndex: 1.	list1 _ PluggableListMorph 			model: model 			listGetter: #systemCategorySingleton			indexGetter: #indexIsOne 			indexSetter: #indexIsOne:			menuGetter: #packageListMenu			keystrokeAction: #packageListKey:from:.	list1 hideScrollBarsIndefinitely.		list2 _ PluggableListMorph 			model: model 			listGetter: #messageCategoryList			indexGetter: #messageCategoryListIndex 			indexSetter: #messageCategoryListIndex:			menuGetter:  (MessageSend receiver: self selector: #messageCategoryMenu).	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: self buildMorphicClassColumn proportionalWidth: 0.3;		addAdjusterAndMorph: list2 proportionalWidth: 0.3;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.4.	self layoutMorph		addMorph: list1 fixedHeight: Preferences standardCodeFont height + 10;		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.	model changed: #editSelection! !!FileContentsBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/19/2011 21:57'!classListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('definition'			editClass							''		model)		('comment'			editComment					''		model)		-		('browse full (b)'	browseMethodFull)		('class refs (N)'		browseClassRefs)		-		('fileIn'				fileInClass						''		model)		('fileOut'			fileOutClass						''		model)		-		('rename...'			renameClass						''		model)		('remove'			removeClass						''		model)		-		('remove existing'	removeUnmodifiedCategories	''		model)).	^aMenu! !!FileContentsBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/19/2011 22:13'!messageCategoryMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: model.			"All the options are for the model."	aMenu addList: #(		('fileIn'								fileInMessageCategories)		('fileOut'							fileOutMessageCategories)		-		('reorganize'						editMessageCategories)		-		('add item...'						addCategory)		('rename...'							renameCategory)		('remove'							removeMessageCategory)		-		('remove existing'					removeUnmodifiedMethods)).	^aMenu! !!FileContentsBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 08:18'!messageListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList:#(			('fileIn'							fileInMessage)			('fileOut'						fileOutMessage)			-			('senders (n)'					browseSenders)			('implementors (m)'				browseImplementors)			('method inheritance (h)'		methodHierarchy)			('versions (v)'					browseVersions)			-			('remove method (x)'			removeMessage				''		model)).	^ aMenu! !!FileContentsBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 16:12'!browseMethodFull	"Create and schedule a full Browser and then select the current class and message."	|  myClass |	(myClass _ model selectedClassOrMetaClass) ifNotNil: [		BrowserWindow fullOnClass: myClass realClass selector: model selectedMessageName]! !!FileContentsBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:45'!browseVersions	"Create and schedule a message set browser on all versions of the 	currently selected message selector."	| class selector |	(selector _ model selectedMessageName) ifNotNil:		[class _ model selectedClassOrMetaClass.		(class exists and: [class realClass includesSelector: selector]) ifTrue:			[VersionsBrowser				browseVersionsOf: (class realClass compiledMethodAt: selector)				class: class realClass theNonMetaClass				meta: class realClass isMeta				category: model selectedMessageCategoryName				selector: selector]]! !!FileContentsBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/19/2011 22:44'!methodHierarchy	(model selectedClassOrMetaClass isNil or:		[model selectedClassOrMetaClass hasDefinition])			ifFalse: [super methodHierarchy]! !!MenuMorph methodsFor: 'construction' stamp: 'jmv 4/19/2011 16:28'!add: aString action: aSymbol	"Append a menu item with the given label. If the item is selected, it will send the given selector to the default target object."	"Details: Note that the menu item added captures the default target object at the time the item is added; the default target can later be changed before added additional items without affecting the targets of previously added entries. The model is that each entry is like a button that knows everything it needs to perform its action."	self add: aString		target: defaultTarget		selector: aSymbol		argumentList: #()! !!MenuMorph methodsFor: 'construction' stamp: 'jmv 4/19/2011 16:29'!add: aString target: aTarget action: aSymbol	self add: aString		target: aTarget		selector: aSymbol		argumentList: #()! !!MenuMorph methodsFor: 'construction' stamp: 'jmv 4/19/2011 16:29'!add: aString target: anObject selector: aSymbol	"Append a menu item with the given label. If the item is selected, it will send the given selector to the target object."	self add: aString		target: anObject		selector: aSymbol		argumentList: #()! !!MenuMorph methodsFor: 'construction' stamp: 'jmv 4/19/2011 16:33'!addList: aList	"Add the given items to this menu, where each item is a pair (<string> <actionSelector>)..  If an element of the list is simply the symobl $-, add a line to the receiver.  The optional third element of each entry, if present, provides balloon help."	| target |	aList do: [:tuple |		tuple == #-			ifTrue: [ self addLine ]			ifFalse: [				target _ tuple size > 3					ifTrue: [ defaultTarget perform: tuple fourth ]					ifFalse: [ defaultTarget ].				self add: tuple first target: target action: tuple second.				tuple size > 2 ifTrue: [					self balloonTextForLastItem: tuple third]]]! !!MenuMorph methodsFor: 'construction' stamp: 'jmv 4/19/2011 16:29'!addUpdating: aWordingSelector action: aSymbol	self addUpdating: aWordingSelector target: defaultTarget selector: aSymbol argumentList: #()! !!MenuMorph methodsFor: 'construction' stamp: 'jmv 4/19/2011 16:29'!addUpdating: aWordingSelector target: aTarget action: aSymbol	self addUpdating: aWordingSelector target: aTarget selector: aSymbol argumentList: #()! !!MenuMorph methodsFor: 'construction' stamp: 'jmv 4/19/2011 16:29'!addWithLabel: aLabel enablement: anEnablementSelector action: aSymbol	self addWithLabel: aLabel enablementSelector: anEnablementSelector target: defaultTarget selector: aSymbol argumentList: #()! !!MessageSetWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 08:11'!addExtraShiftedItemsTo: aMenu	"The shifted selector-list menu is being built.  Add items specific to MessageSet"	model growable ifTrue: [		aMenu addList: #(			-			('remove from this browser'			removeMessageFromBrowser		''		model)			('filter message list...'					filterMessageList))].	aMenu add: 'sort by date' target: model action: #sortByDate! !!MessageSetWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:09'!filterMessageList	"Allow the user to refine the list of messages."	| aMenu evt |	model messageList size <= 1 		ifTrue: [^self inform: 'this is not a propitious filtering situation'].	"would like to get the evt coming in but thwarted by the setInvokingView: circumlocution"	evt := self currentWorld activeHand lastEvent.	aMenu := MenuMorph new defaultTarget: model.	aMenu addTitle: 'Filter by only showing...'.	aMenu addStayUpIcons.	aMenu 		addList: #(#('unsent messages' #filterToUnsentMessages 'filter to show only messages that have no senders') #- #('messages that send...' #filterToSendersOf 'filter to show only messages that send a selector I specify') #('messages that do not send...' #filterToNotSendersOf 'filter to show only messages that do not send a selector I specify') #- #('messages whose selector is...' #filterToImplementorsOf 'filter to show only messages with a given selector I specify') #('messages whose selector is NOT...' #filterToNotImplementorsOf 'filter to show only messages whose selector is NOT a seletor I specify') #- #('messages in current change set' #filterToCurrentChangeSet 'filter to show only messages that are in the current change set') #('messages not in current change set' #filterToNotCurrentChangeSet 'filter to show only messages that are not in the current change set') #- #('messages in any change set' #filterToAnyChangeSet 'filter to show only messages that occur in at least one change set') #('messages not in any change set' #filterToNotAnyChangeSet 'filter to show only messages that do not occur in any change set in the system') #- #('messages authored by me' #filterToCurrentAuthor 'filter to show only messages whose authoring stamp has my initials') #('messages not authored by me' #filterToNotCurrentAuthor 'filter to show only messages whose authoring stamp does not have my initials') #- #('messages logged in .changes file' #filterToMessagesInChangesFile 'filter to show only messages whose latest source code is logged in the .changes file') #('messages only in .sources file' #filterToMessagesInSourcesFile 'filter to show only messages whose latest source code is logged in the .sources file') #- #('messages with prior versions' #filterToMessagesWithPriorVersions 'filter to show only messages that have at least one prior version') #('messages without prior versions' #filterToMessagesWithoutPriorVersions 'filter to show only messages that have no prior versions') #- #('uncommented messages' #filterToUncommentedMethods 'filter to show only messages that do not have comments at the beginning') #('commented messages' #filterToCommentedMethods 'fileter to show only messages that have comments at the beginning') #- #('messages that...' #filterToMessagesThat 'let me type in a block taking a class and a selector, which will specify yea or nay concerning which elements should remain in the list')).	aMenu popUpInWorld: evt hand world! !!Morph class methodsFor: 'class initialization' stamp: 'jmv 4/19/2011 16:29'!initialize	"Morph initialize"! !!BrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 4/19/2011 16:04'!fullOnClass: aClass selector: aSelector	"Open a new full browser set to class."	| browser |	browser _ Browser new.	browser setClass: aClass selector: aSelector.	BrowserWindow open: browser label: browser labelString! !!PluggableListMorph methodsFor: 'menu' stamp: 'jmv 4/19/2011 15:58'!getMenu	"Answer the menu for this view"	menuGetter ifNil: [^ nil].	(menuGetter is: #MessageSend) ifTrue: [		^menuGetter value ].	menuGetter numArgs = 0 ifTrue: [		^ model perform: menuGetter ].	^ self error: 'The menuGetter has an unsupported number of arguments'! !!ProcessBrowser methodsFor: 'stack list' stamp: 'jmv 4/19/2011 16:05'!browseContext	selectedContext		ifNil: [^ self].	BrowserWindow fullOnClass: self selectedClass selector: self selectedSelector! !!RecentMessageSet methodsFor: 'message functions' stamp: 'jmv 4/19/2011 22:20'!messageListMenu	"Answer the message-list menu"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList:#(			('what to show...'						offerWhatToShowMenu)			-			('browse full (b)' 						browseMethodFull)			('browse hierarchy (h)'					classHierarchy)			('browse method (O)'					openSingleMessageBrowser)			('browse protocol (p)'					browseFullProtocol)			-			('fileOut (o)'								fileOutMessage)			('copy selector (c)'						copySelector)			-			('senders of... (n)'						browseSendersOfMessages)			('implementors of... (m)'					browseMessages)			('inheritance (i)'							methodHierarchy)			('versions (v)'							browseVersions)			-			('inst var refs...'							browseInstVarRefs)			('inst var defs...'						browseInstVarDefs)			('class var refs...'						browseClassVarRefs)			('class variables'						browseClassVariables)			('class refs (N)'							browseClassRefs)			-			('remove method (x)'					removeMessage)			('remove from RecentSubmissions'		removeFromRecentSubmissions)			-			('more...'								openShiftedMessageListMenu)).	^ aMenu! !!RecentMessageSet class methodsFor: 'instance creation' stamp: 'jmv 4/19/2011 22:28'!open: aMessageSet name: aString 	"Create a standard system view for the messageSet, aMessageSet, whose label is aString."	RecentMessageSetWindow open: aMessageSet label: aString! !!RecentMessageSetWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 07:58'!addExtraShiftedItemsTo: aMenu	"The shifted selector-list menu is being built.  Overridden here to defeat the presence of the items that add or change order, since RecentMessageSet defines methods & order explicitly based on external criteria"	aMenu add: 'set size of recent history...' action: #setRecentHistorySize! !!RecentMessageSetWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 08:21'!messageListMenu	"Answer the message-list menu"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList:#(			('what to show...'						offerWhatToShowMenu)			-			('browse full (b)' 						browseMethodFull)			('browse hierarchy (h)'					browseHierarchy)			('browse method (O)'					openSingleMessageBrowser)			('browse protocol (p)'					browseFullProtocol)			-			('fileOut (o)'								fileOutMessage						''		model)			('copy selector (c)'						copySelector)			-			('senders of... (n)'						browseSendersOfMessages)			('implementors of... (m)'					browseMessages)			('inheritance (i)'							methodHierarchy)			('versions (v)'							browseVersions)			-			('inst var refs...'							browseInstVarRefs)			('inst var defs...'						browseInstVarDefs)			('class var refs...'						browseClassVarRefs)			('class variables'						browseClassVariables)			('class refs (N)'							browseClassRefs)			-			('remove method (x)'					removeMessage						''		model)			('remove from RecentSubmissions'		removeFromRecentSubmissions	''		model)			-			('more...'								openShiftedMessageListMenu)).	^ aMenu! !!RecentMessageSetWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 08:13'!setRecentHistorySize	"Let the user specify the recent history size"	| aReply aNumber |	aReply _ FillInTheBlank request: 'How many recent methodsshould be maintained?' initialAnswer: Utilities numberOfRecentSubmissionsToStore asString.	aReply isEmptyOrNil ifFalse:		[aNumber _ aReply asNumber rounded.		(aNumber > 1 and: [aNumber <= 1000])			ifTrue:				[Utilities numberOfRecentSubmissionsToStore: aNumber.				self inform: 'Okay, ', aNumber asString, ' is the new size of the recent method history']			ifFalse:				[self inform: 'Sorry, must be a number between 2 & 1000']]! !!SimpleHierarchicalListMorph methodsFor: 'menu' stamp: 'jmv 4/19/2011 15:58'!getMenu	"Answer the menu for this view"	menuGetter ifNil: [^ nil].	(menuGetter is: #MessageSend) ifTrue: [		^menuGetter value ].	menuGetter numArgs = 0 ifTrue: [		^ model perform: menuGetter ].	^ self error: 'The menuGetter has an unsupported number of arguments'! !!TestRunner methodsFor: 'menus' stamp: 'jmv 4/19/2011 16:05'!browse: aClass	BrowserWindow fullOnClass: aClass selector: nil.! !!Utilities class methodsFor: 'recent method submissions' stamp: 'jmv 4/19/2011 22:29'!openRecentSubmissionsWindow	"Answer a SystemWindow holding recent submissions"	| recentMessages messageSet |	recentMessages _ RecentSubmissions copy reversed.	messageSet _ RecentMessageSet messageList: recentMessages.	messageSet autoSelectString: nil.	RecentMessageSetWindow open: messageSet label: 'Recent submissions -- youngest first'	"Utilities recentSubmissionsWindow"! !!RecentMessageSetWindow reorganize!('menu building' addExtraShiftedItemsTo: messageListMenu)('menu commands' setRecentHistorySize)!!RecentMessageSet class reorganize!('instance creation' open:name:)!Morph initialize!!MessageSetWindow reorganize!('GUI building' buildMorphicWindow windowColor)('updating' update:)('menu building' addExtraShiftedItemsTo:)('menu commands' filterMessageList)!FileContentsBrowserWindow removeSelector: #shiftedClassListMenu!!ChangeSorterWindow reorganize!('GUI building' buildMorphicWindow windowColor)('menu commands' browseVersions)!!ChangeListWindow reorganize!('GUI building' buildMorphicCodePane buildMorphicWindow buttonSpecs optionalButtonRow windowColor)('menu commands' browseVersions)!BrowserWindow removeSelector: #browseAllMessages!BrowserWindow removeSelector: #browseMethodFull!BrowserWindow removeSelector: #offerShiftedClassListMenu!BrowserWindow removeSelector: #offerUnshiftedClassListMenu!!BrowserWindow reorganize!('GUI building' buildLowerPanes buildMorphicClassColumn buildMorphicClassList buildMorphicCommentPane buildMorphicMessageCatList buildMorphicMessageList buildMorphicSwitches buildMorphicSystemCatList buildMorphicWindow buildNoSysCatMorphicWindow windowColor)('menu building' addExtraShiftedItemsTo: classListMenu messageCategoryMenu messageListMenu shiftedClassListMenu shiftedMessageListMenu systemCatSingletonMenu systemCategoryMenu)('menu commands' browseAllClasses openSystemCategoryBrowser)!!CodeWindow reorganize!('as yet unclassified' hasUnacceptedEdits)('GUI building' buildLowerPanes buildMorphicAnnotationsPane buildMorphicCodePane defaultAnnotationPaneHeight lineDiffButton optionalButtonRow optionalButtonTuples prettyLineDiffButton prettyWordDiffButton windowColor wordDiffButton)('accessing' buttonWithSelector: inheritanceButton)('updating' decorateButtons decorateForInheritance update:)('top window' activateAndSendTopToBack:)('menu commands' browseAllMessages browseClassRefs browseClassVarRefs browseClassVariables browseFullProtocol browseHierarchy browseImplementors browseInstVarDefs browseInstVarRefs browseLocalImplementors browseLocalSendersOfMessages browseMessages browseMethodFull browseProtocol browseSenders browseSendersOfMessages browseUnusedMethods browseVersions findMethodInChangeSets inspectInstances inspectSubInstances makeSampleInstance methodHierarchy openSingleMessageBrowser showUnreferencedClassVars showUnreferencedInstVars)('menu building' addContentsTogglesTo: offerShiftedClassListMenu offerUnshiftedClassListMenu offerWhatToShowMenu openMessageListMenu openShiftedMessageListMenu)('misc' getSelectorAndSendQuery:to: getSelectorAndSendQuery:to:with: selectMessageAndEvaluate: sendQuery:to:)!MessageSet removeSelector: #augmentMessageList!ClassCommentVersionsBrowser removeSelector: #openSingleMessageBrowser!Browser class removeSelector: #fullOnClass:selector:!Browser removeSelector: #inspectInstances!Browser removeSelector: #inspectSubInstances!CodeProvider removeSelector: #openExtraMenu!CodeProvider removeSelector: #openMenu!CodeProvider removeSelector: #sampleInstanceOfSelectedClass!Object removeSelector: #browseHierarchy!