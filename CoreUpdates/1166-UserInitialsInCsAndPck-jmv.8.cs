'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 6 December 2011 at 11:06:26 am'!!ChangeSet methodsFor: 'fileIn/Out' stamp: 'jmv 12/6/2011 10:40'!                               fileOut	"File out the receiver, to a file whose name is a function of the  	change-set name and either of the date & time or chosen to have a  	unique numeric tag, depending on the preference  	'changeSetVersionNumbers'"	| slips nameToUse |	self checkForConversionMethods.	nameToUse := Preferences changeSetVersionNumbers				ifTrue: [self defaultChangeSetDirectory nextNameFor: self name coda: '-', Utilities authorInitials extension: 'cs']				ifFalse: [(self name , FileDirectory dot , Utilities dateTimeSuffix , FileDirectory dot , 'cs') asFileName].	Cursor write		showWhile: [			| file |			file := self defaultChangeSetDirectory newFileNamed: nameToUse.			[				file timeStamp.				self fileOutPreambleOn: file.				self fileOutOn: file.				self fileOutPostscriptOn: file]					ensure: [file close]].	Preferences checkForSlips		ifFalse: [^ self].	slips := self checkForSlips.	(slips size > 0			and: [(PopUpMenu withCaption: 'Methods in this fileOut have haltsor references to the Transcriptor other ''slips'' in them.Would you like to browse them?' chooseFrom: 'Ignore\Browse slips')					= 2])		ifTrue: [Smalltalk browseMessageList: slips name: 'Possible slips in ' , name]! !!ChangeSorter class methodsFor: 'adding' stamp: 'jmv 12/6/2011 11:03'!  newChangesFromStream: aStream named: aName	"File in the code from the stream into a new change set whose	name is derived from aName. Leave the 'current change set'	unchanged. Return the new change set or nil on failure."	| oldChanges newName newSet |	oldChanges _ ChangeSet current.	PreviousSet _ oldChanges name. 		"so a Bumper update can find it"	newName _ (aName prefixAndSuffix: $-)		ifNotNil: [ :ary | ary first ]		ifNil: [ aName sansPeriodSuffix ].	newSet _ self basicNewChangeSet: newName.	[		newSet ifNotNil: [			ChangeSet newChanges: newSet.			aStream fileInAnnouncing: 'Loading ', newName, '...'.			Transcript show: 'File ', aName, ' successfully filed in to change set ', newName; cr].		aStream close	] ensure: [		ChangeSet  newChanges: oldChanges].	^ newSet! !!CodeFileBrowserWindow class methodsFor: 'services' stamp: 'jmv 12/6/2011 11:04'!                   installMonticelloPackageStream: aStream		| stream fullName localName pkName |	fullName _ aStream name.	localName _ FileDirectory localNameFor: fullName.	pkName _ (localName prefixAndSuffix: $-)		ifNotNil: [ :ary | ary first ]		ifNil: [ localName sansPeriodSuffix ].	stream _ aStream asUnZippedStream: 'snapshot/source.st'.	stream ascii.	Cursor wait showWhile: [		PackageFile			installFileStream: stream			packageName: pkName			fullName: fullName ]! !!CodeFileBrowserWindow class methodsFor: 'services' stamp: 'jmv 12/6/2011 11:04'!                            installPackageStream: aStream	| fullName localName pkName |	fullName _ aStream name.	localName _ FileDirectory localNameFor: fullName.	pkName _ (localName prefixAndSuffix: $-)		ifNotNil: [ :ary | ary first ]		ifNil: [ localName sansPeriodSuffix ].	Cursor wait showWhile: [		PackageFile			installFileStream: aStream			packageName: pkName			fullName: fullName ]! !!FileDirectory methodsFor: 'file name utilities' stamp: 'jmv 12/6/2011 11:01'!                        lastNameFor: baseFileName coda: fileNameCoda extension: extension	"Assumes a file name includes a version number encoded as '.' followed by digits 	preceding the file extension.  Increment the version number and answer the new file name.	If a version number is not found, set the version to 1 and answer a new file name"	| files splits |	files _ self fileNamesMatching: (baseFileName,'*', self class dot, extension).	splits _ files collect: [:file | self splitNameVersionExtensionFor: file].	splits _ splits asArray sort: [:a :b | (a at: 2) < (b at: 2)].	^splits isEmpty 			ifTrue: [nil]			ifFalse: [(baseFileName, fileNameCoda, '.', (splits last at: 2) asString, self class dot, extension) asFileName]! !!FileDirectory methodsFor: 'file name utilities' stamp: 'jmv 12/6/2011 11:01'!  nextNameFor: baseFileName coda: fileNameCoda extension: extension	"Assumes a file name includes a version number encoded as '.' followed by digits 	preceding the file extension.  Increment the version number and answer the new file name.	If a version number is not found, set the version to 1 and answer a new file name.	fileNameCoda is ignored during version number search, but added to the final name. It allows sequences like:	someFileName-authorXX.cs	someFileName-authorYY.1.cs	someFileName-authorZZ.2.cs	"	| files splits version |	files _ self fileNamesMatching: (baseFileName,'*', self class dot, extension).	splits _ files collect: [:file | self splitNameVersionExtensionFor: file].	splits _ splits asArray sort: [:a :b | (a at: 2) < (b at: 2)].	splits isEmpty 			ifTrue: [version _ 1]			ifFalse: [version _ (splits last at: 2) + 1].	^ (baseFileName, fileNameCoda, '.', version asString, self class dot, extension) asFileName! !!FileDirectory methodsFor: 'file name utilities' stamp: 'jmv 12/6/2011 10:39'!                      nextNameFor: baseFileName extension: extension	"Assumes a file name includes a version number encoded as '.' followed by digits 	preceding the file extension.  Increment the version number and answer the new file name.	If a version number is not found, set the version to 1 and answer a new file name"	^self nextNameFor: baseFileName coda: '' extension: extension! !!MessageSetWindow methodsFor: 'top window' stamp: 'jmv 12/6/2011 10:28'! activateAndSendTopToBack: aBoolean	super activateAndSendTopToBack: aBoolean.	self isCollapsed 		ifFalse: [			(model messageListIndex = 0 and: [ model messageList notEmpty ])				ifTrue: [ model messageListIndex: 1 ]]! !!PackageInfo methodsFor: 'fileOut' stamp: 'jmv 12/6/2011 10:41'!                             fileOut	| nameToUse |	nameToUse _ Preferences changeSetVersionNumbers		ifTrue: [ ChangeSet defaultChangeSetDirectory nextNameFor: self packageName coda: '-', Utilities authorInitials extension: 'pck' ]		ifFalse: [ (self packageName , FileDirectory dot , Utilities dateTimeSuffix , FileDirectory dot , 'pck') asFileName ].	Cursor write		showWhile: [			| file |			file _ ChangeSet defaultChangeSetDirectory newFileNamed: nameToUse.			[				file timeStamp.				self fileOutOnStream: file ]					ensure: [file close]]! !!String methodsFor: 'converting' stamp: 'jmv 12/6/2011 10:34'!                 prefixAndSuffix: aCharacter	"Answer an array with the prefix up to the last occurrence of aCharacter, and the suffix after it.	Answer nil if aCharacter is not in self	'1164-ReferenceStreamFix-jmv.1.cs' prefixAndSuffix: $-	"	| i |	i _ self findLast: [ :c | c = aCharacter ].	i = 0 ifTrue: [ ^ nil ].	^ { self copyFrom: 1 to: i-1 . self copyFrom: i+1 to: self size }! !