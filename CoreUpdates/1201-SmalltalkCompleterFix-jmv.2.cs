'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 14 March 2012 at 4:20:23 pm'!!SmalltalkCompleter class methodsFor: 'class initialization' stamp: 'jmv 3/14/2012 16:02'!         initialize	"	It takes about 6 seconds, mostly because of the time to fetch method stamps from source files...	[ SmalltalkCompleter initialize ]timeToRun	Selectors inspect	"	| maxSortValue allImplemented |	SystemChangeNotifier uniqueInstance		removeActionsWithReceiver: self; "avoid double registration"		notify: self ofSystemChangesOfItem: #method using: #methodChanged:;		notify: self ofSystemChangesOfItem: #class using: #classChanged:.		self protected: [		allImplemented _ Smalltalk allImplementedMessages.		Selectors _ Trie new.		"		Smalltalk allBehaviorsDo: [:class |			class selectorsAndMethodsDo: [ :sel :method |				Selectors at: sel ifAbsentPut: [ 0 ].				method messages do: [ :sentMsg |					Selectors at: sentMsg put: (Selectors at: sentMsg ifAbsent: [ 0 ]) + 1 ]]].		"		Smalltalk allBehaviorsDo: [:class |			class selectorsAndMethodsDo: [ :sel :method |				self addSelector: sel method: method allImplemented: allImplemented]].		""			"The following might not be found in #messages. Give them maximum priority."		maxSortValue _ SmallInteger maxVal.		"From MessageNode>>#initialize"		#(	ifTrue: ifFalse: ifTrue:ifFalse: ifFalse:ifTrue:			and: or:			whileFalse: whileTrue: whileFalse whileTrue			to:do: to:by:do:			caseOf: caseOf:otherwise:			ifNil: ifNotNil:  ifNil:ifNotNil: ifNotNil:ifNil:) do: [ :sel |				Selectors at: sel put: maxSortValue ].			maxSortValue _ SmallInteger maxVal-1.		"From SystemDictionary >>#recreateSpecialObjectsArray"		(1 to: Smalltalk specialSelectorSize) do:  [ :i |				Selectors at: (Smalltalk specialSelectorAt: i) put: maxSortValue ]]! !!SmalltalkCompleter class methodsFor: 'notifications' stamp: 'jmv 3/14/2012 16:17'!                       classChanged: anEvent	| class |	anEvent isRemoved ifFalse: [ ^ self ].	self protected: [		class _ anEvent item.		class selectorsDo: [ :selector |			(Smalltalk isThereAnImplementorOf: selector exceptFor: class) ifFalse: [				Selectors removeKey: selector ]].		class class selectorsDo: [ :selector |			(Smalltalk isThereAnImplementorOf: selector exceptFor: class class) ifFalse: [				Selectors removeKey: selector ]]]! !!SmalltalkCompleter class methodsFor: 'notifications' stamp: 'jmv 3/14/2012 16:14'!                              methodChanged: anEvent	| method selector |	self protected: [		method _ anEvent item.		selector _ anEvent itemSelector.		anEvent isAdded | anEvent isModified			ifTrue: [ self addSelector: selector method: method allImplemented: nil ]			ifFalse: [				(anEvent isRemoved and: [(Smalltalk isThereAnImplementorOf: selector) not])					ifTrue: [ Selectors removeKey: selector ]]]! !!SystemDictionary methodsFor: 'retrieving' stamp: 'jmv 3/14/2012 16:18'!                   isThereAnImplementorOf: aSelector exceptFor: aBehavior	"Answer whether if there is at least some other implementor of the selector besides aBehavior."	self allBehaviorsDo: [ :class |		((class == aBehavior) not and: [class includesSelector: aSelector])			ifTrue: [^ true]].	^ false"Smalltalk isThereAnImplementorOf: #contents.Smalltalk isThereAnImplementorOf: #nobodyImplementsThis."! !SmalltalkCompleter initialize!