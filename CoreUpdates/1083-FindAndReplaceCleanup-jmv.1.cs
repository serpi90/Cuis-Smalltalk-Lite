'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 22 September 2011 at 2:57:51 pm'!!TextEditor methodsFor: 'menu messages' stamp: 'jmv 9/22/2011 10:12'!find	"Prompt the user for a string to search for, and search the receiver from the current selection onward for it.  1/26/96 sw"	| reply |	reply _ FillInTheBlank request: 'Find what? ' initialAnswer: FindText.	reply size = 0 ifTrue: [		^ self].	self setSearch: reply.	ChangeText _ FindText.  "Implies no replacement to againOnce: method"	self findAndReplaceMany: false."	morph installEditorToReplace: self"! !!TextEditor methodsFor: 'menu messages' stamp: 'jmv 9/22/2011 10:12'!findAgain	"Find the text-to-find again.  1/24/96 sw"	self findAndReplaceMany: false! !!TextEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/22/2011 09:59'!findAgain: aKeyboardEvent 	"Find the desired text again.  1/24/96 sw"	self findAgain.	^ true! !!TextEditor methodsFor: 'private' stamp: 'jmv 9/22/2011 10:14'!findAndReplaceMany: doMany	"Subroutine of search: and again.  Use same FindText and ChangeText as before.  If many is true, do it repeatedly.  Created 1/26/96 sw by adding the many argument to #againOrSame."	"jmvnote: We currently have no command for search&replace, but it is really easy to add, and this method supports it. See ChangeText"	"This is a user command, and generates undo"	|  indexStream |	"Find and Change, recording start indices in the array"	indexStream _ WriteStream on: (Array new: 20). "an array to store change locs"	selectionStartBlocks _ OrderedCollection new.	selectionStopBlocks _ OrderedCollection new.	[(self findAndReplaceOnce: indexStream) & doMany] whileTrue. "<-- this does the work"	"Last find was also stored in markBlock / pointBlock"	selectionStartBlocks notEmpty ifTrue: [		selectionStartBlocks removeLast.		selectionStopBlocks removeLast ].	indexStream isEmpty ifTrue: [  "none found"		self flash]! !!TextEditor methodsFor: 'private' stamp: 'jmv 9/22/2011 10:12'!findAndReplaceOnce: indexStream	"Find the next occurrence of FindText.  If none, answer false.	Append the start index of the occurrence to the stream indices, and, if	ChangeText is not the same object as FindText, replace the occurrence by it.	Note that the search is case-sensitive for replacements, otherwise not."	"This is a user command, and generates undo"	| where |	where _ model actualContents		findString: FindText		startingAt: self stopIndex		caseSensitive: ((ChangeText ~~ FindText) or: [Preferences caseSensitiveFinds]).	where = 0 ifTrue: [^ false].	selectionStartBlocks add: (paragraph characterBlockForIndex: where).	selectionStopBlocks add: (paragraph characterBlockForIndex: where + FindText size).	self selectInvisiblyFrom: where to: where + FindText size - 1.	"Repeat it here. Senders beware: only one of these should last"	ChangeText ~~ FindText ifTrue: [ self zapSelectionWith: ChangeText ].	indexStream nextPut: where.	^ true! !!TextEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 9/22/2011 10:01'!initializeBasicCmdKeyShortcuts	"Initialize the (unshifted) command-key (or alt-key) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor test"	"Editor initialize"	| cmdMap cmds |	cmdMap := Array new: 256 withAll: #noop:.		"use temp in case of a crash"	cmdMap at: 32 + 1 put: #selectWord:.			"space bar key"			'([{''"<' do: [:char | cmdMap at: char asciiValue + 1 put: #enclose:].		"arranged in QWERTY keyboard order"	cmds _ #(		$w #backWord:		$a #selectAll:		$f #find:		$g #findAgain:		$h #setSearchString:		$z #undo:		$x #cut:		$c #copySelection:		$v #paste:		$R	#indent:		$Y	#makeUppercase:		$U	#changeLfToCr:		$H	#cursorTopHome:		$L	#outdent:"		$Z	#makeCapitalized:"		$Z	#redo:		$X	#makeLowercase:		$C	#compareToClipboard:	).	1 to: cmds size		by: 2		do: [ :i | cmdMap at: (cmds at: i) asciiValue + 1 put: (cmds at: i + 1)].			cmdActions _ cmdMap! !!TextEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 9/22/2011 09:55'!initializeMenu	"Initialize the mouseButton2 (right button) pop-up menu and corresponding messages."	"TextEditor initialize"	menu _ SelectionMenu fromArray: {		{'Find...(f)'.						#find}.		{'Find Again (g)'.				#findAgain}.		{'Use Selection for Find (h)'.	#setSearchString}.		#-.		{'Undo - multiple (z)'.			#undo}.		{'Redo - multiple (Z)'.			#redo}.		#-.		{'Copy (c)'.						#copySelection}.		{'Cut (x)'.						#cut}.		{'Paste (v)'.						#paste}.		{'Paste...'.						#pasteRecent}.		#-.		{'Set Font... (k)'.					#offerFontMenu}.		{'Set Alignment...'.				#chooseAlignment}.	}! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 9/22/2011 09:55'!initializeCmdKeyShortcuts	"Initialize the (unshifted) command-key (or alt-key if not on Mac) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor test"	"SmalltalkEditor initialize"	| cmds |	self initializeBasicCmdKeyShortcuts.		cmds := #(		$i	#inspectIt:		$p	#printIt:		$s	#save:		$d	#doIt:		$l	#cancel:		$b	#browseIt:		$n	#sendersOfIt:		$m	#implementorsOfIt:		$T	#displayIfTrue:		$I	#exploreIt:		$A	#argAdvance:		$F	#displayIfFalse:		$G	#fileItIn:		$V	#pasteInitials:		$N	#referencesToIt:	).	1 to: cmds size		by: 2		do: [ :i | cmdActions at: (cmds at: i) asciiValue + 1 put: (cmds at: i + 1)]! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 9/22/2011 09:55'!initializeMenu	"Initialize the mouseButton2 (right button) pop-up menu and corresponding messages."	"SmalltalkEditor initialize"	menu _ SelectionMenu fromArray: {		{'Find...(f)'.						#find}.		{'Find Again (g)'.				#findAgain}.		{'Use Selection for Find (h)'.	#setSearchString}.		#-.		{'Undo - multiple (z)'.			#undo}.		{'Redo - multiple (Z)'.			#redo}.		#-.		{'Copy (c)'.						#copySelection}.		{'Cut (x)'.						#cut}.		{'Paste (v)'.						#paste}.		{'Paste...'.						#pasteRecent}.		#-.		{'Do it (d)'.						#doIt}.		{'Print it (p)'.					#printIt}.		{'Inspect it (i)'.					#inspectIt}.		{'Explore it (I)'.					#exploreIt}.		{'Debug it'.						#debugIt}.		#-.		{'Explain'.						#explain}.		{'Browse it (b)'.					#browseIt}.		{'Senders of it (n)'.				#sendersOfIt}.		{'Implementors of it (m)'.		#implementorsOfIt}.		{'References to it (N)'.			#referencesToIt}.		#-.		{'Accept (s)'.					#accept}.		{'Cancel (l)'.					#cancel}.		#-.		{'Method Strings with it (E)'.	#methodStringsContainingit}.		{'Method Source with it'.		#methodSourceContainingIt}.		{'Class Comments with it'.		#classCommentsContainingIt}.	}! !!TextModelMorph methodsFor: 'updating' stamp: 'jmv 9/22/2011 10:12'!update: aSymbol	super update: aSymbol.	aSymbol ifNil: [^self].	aSymbol == #flash ifTrue: [^self flash].	aSymbol == #actualContents ifTrue: [		"Some day, it would be nice to keep objects and update them		instead of throwing them away all the time for no good reason..."		textMorph releaseParagraph.		textMorph formatAndStyleIfNeeded.		^self].	aSymbol == #acceptedContents ifTrue: [		textMorph hasUnacceptedEdits ifTrue: [			self hasEditingConflicts: true.				^self redrawNeeded ].		model refetch.		^self].	aSymbol == #refetched ifTrue: [		self setSelection: model getSelection.		self hasUnacceptedEdits: false.		^self].	aSymbol == #initialSelection ifTrue: [		^self setSelection: model getSelection].	aSymbol == #autoSelect ifTrue: [		self handleEdit: [			TextEditor abandonChangeText.	"no replacement!!"			self editor				setSearch: model autoSelectString;				findAndReplaceMany: true ]].	"Quite ugly"	aSymbol == #clearUserEdits ifTrue: [^self hasUnacceptedEdits: false].	aSymbol == #shoutStyle ifTrue: [		self stylerStyled.		^self redrawNeeded ].! !!Theme methodsFor: 'menus' stamp: 'jmv 9/22/2011 09:30'!basicIcons"Minimal menu scheme."	^ { 		#('open...') -> #openIcon.		#('windows...' 'find window') -> #windowIcon.		#('help...' 'explain' 'about this system...') -> #helpIcon.		#('appearance...' 'themes...') -> #appearanceIcon.		#('do...' 'Cursor normal show.' 'do it (d)') -> #doItIcon.		#('new morph...' 'objects (o)' 'save world as morph file') -> #morphsIcon.		#('save' 'save project on file...' ) -> #saveIcon.		#('save as...' 'change category...' 'rename change set (r)' 'rename') -> #saveAsIcon.		#('save as new version') -> #saveAsNewVersionIcon.		#('quit') -> #quitIcon.		#('save and quit' ) -> #saveAndQuitIcon.		#('inspect it (i)' 'inspect world'  'inspect model' 'inspect morph'		 'inspect owner chain' 'inspect' 'inspect (i)' 'basic inspect' 'message names' 'find message names' 'inspect instances' 'inspect subinstances' 'inspect change set' 'inspect context (c)' 'inspect receiver (i)' 'start CPUWatcher')			-> #inspectIcon.		#('explore' 'explore it (I)' 'explore world' 'explore morph' 'explore (I)' 'explore context (C)' 'explore receiver (I)') -> #exploreIcon.		#('find...(f)' 'find class... (f)' 'find method...' 'find recent submissions' 'show hierarchy' 'show definition' 'show comment' 'filter' 'filter message list...' 'find context... (f)') -> #findIcon.		#('add item...' 'new category...' 'create new change set...' 'new change set... (n)' 'add new file') -> #newIcon.		#('remove method (x)' 'remove' 'remove class (x)' 'remove method from system (x)' 'remove class from system (x)' 'remove postscript') -> #deleteIcon.		#('delete method from changeset (d)' 'delete class from change set (d)' 'destroy change set (X)' 'revert & remove from changes' 'delete unchanged windows' 'delete non windows' 'delete both of the above' 'reset variables' 'remove contained in class categories...' 'clear this change set' 'uninstall this change set' 'delete directory...' 'delete') -> #warningIcon.		#('do again (j)' 'Redo - multiple (Z)') -> #redoIcon.		#('undo (z)' 'revert to previous version' 'Undo - multiple (z)') -> #undoIcon.		#('copy (c)' 'copy class...' 'copy class chgs to other side' 'copy method to other side' 'copy all to other side (c)' 'copy name to clipboard' 'copy selector to clipboard') -> #copyIcon.		#('paste (v)') -> #pasteIcon.		#('cut (x)' 'move class chgs to other side' 'move method to other side' 'submerge into other side') -> #cutIcon.		#('paste...' 'icons...') -> #worldIcon.}! !!Theme methodsFor: 'menus' stamp: 'jmv 9/22/2011 09:47'!miscellaneousIcons	"Everything else."	^ {		#('restore display (r)' 'set display depth...' 'move windows onscreen' 'Utilities saveDisplay.') -> #displayIcon.		#('changes...' 'dual change sorter' 'change sets with this method' 'find a change sorter' 'recent changes in file') -> #changesIcon.		#('print PS to file...' ) -> #printIcon.		#('find again (g)' 'full stack (k)') -> #systemIcon.		#('print it (p)' 'check change set for slips') -> #printIcon.		#('accept (s)' 'make changes go to me (m)') -> #acceptIcon.		#('cancel (l)' ) -> #cancelIcon.		#('debug...' 'debug it' 'toggle break on entry') -> #debugIcon.		#('close' 'close all debuggers' 'close top window') -> #closeIcon.		#('collapse' 'hide taskbar' 'collapse all windows') -> #collapseIcon.		#('expand / contract' 'show taskbar' 'expand all windows') -> #expandIcon.		#('menu') -> #windowMenuIcon.		#('browse all' 'browser' 'browse it (b)' 'MessageTally UI and browse' 'browse recent submissions' 'browse full (b)' 'find changed browsers...' 'browse (b)' 'browse my changes') -> #editFindReplaceIcon.		#('workspace' 'workspace with contents') -> #terminalIcon.		#('text editor' 'edit this list' 'edit postscript...' 'add postscript...') -> #textEditorIcon.		#('file list' 'find a fileList') -> #systemFileManagerIcon.		#('transcript' 'find a transcript' 'Transcript clear.' 'log to transcript') -> #printerIcon.		#('process browser' 'vm statistics' 'MessageTally all Processes') -> #systemMonitorIcon.		#('emergency evaluator' 'conflicts with other change sets' 'check for slips' 'conflicts with change set opposite' 'conflicts with category opposite') -> #emblemImportantIcon.		#('simple change sorter') -> #halfRefreshIcon.		#('SUnit Test Runner') -> #weatherFewCloudsIcon.		#('system fonts...' 'set font... (k)') -> #preferencesDesktopFontIcon.		#('full screen on') -> #viewFullscreenIcon.		#('full screen off') -> #exitFullscreenIcon.		#('set desktop color...') -> #wallpaperIcon.		#('preferences...' 'what to show...') -> #preferencesIcon.		#('command-key help') -> #keyboardShortcutsIcon.		#('world menu help') -> #globeIcon.		#('useful expressions' 'class comments with it' 'check for uncommented methods' 'check for uncommented classes') -> #chatIcon.		#('set author initials...' 'check for other authors' 'check for any other authors') -> #usersIcon.		#('space left') -> #removableMediaIcon.		#('start drawing all again' 'window color...') -> #graphicsIcon.		#('start stepping again') -> #mediaPlaybackStartIcon.		#('file out current change set' 'fileOut' 'file out (o)') -> #fileOutIcon.		#('recently logged changes...' 'versions (v)' 'recent classes... (r)' 'trim history' 'profile messages (m)') -> #clockIcon.		#('senders of it (n)' 'senders of... (n)' 'local senders of...' 'senders (n)') -> #mailForwardIcon.		#('implementors of it (m)' 'implementors of... (m)' 'implementors of sent messages') -> #developmentIcon.		#('references to it (N)') -> #addressBookIcon.		#('class var refs...' 'class refs (N)' 'class variables' 'class vars' 'local implementors of...' 'subclass template') -> #classIcon.		#('inst var refs...' 'inst var defs...' 'sample instance' 'inspect Pointers (P)') -> #instanceIcon.		#('Use Selection for Find (h)' 'rename class ...' 'rename...' 'change title...') -> #saveAsIcon.		#('method source with it' 'browse method (O)' 'check for uncategorized methods') -> #scriptIcon.		#('method strings with it (E)') -> #genericTextIcon.		#('browse hierarchy (h)' 'move to top' 'promote to top of list') -> #goTopIcon.		#('move up' 'make next-to-topmost') -> #goUpIcon.		#('move to bottom' 'send to back' 'send top window to back') -> #goBottomIcon.		#('inheritance (i)' 'move down') -> #goDownIcon.		#('browse protocol (p)' 'spawn sub-protocol') -> #spreadsheetIcon.		#('spawn full protocol') -> #speadsheetTemplateIcon.		#('alphabetize') -> #fontXGenericIcon.		#('browse' 'show category (C)' 'categorize all uncategorized' 'select change set...' 'view affected class categories') -> #packageIcon.		#('remove from current change set' 'remove empty categories' 'subtract other side (-)' 'remove from this browser') -> #listRemoveIcon.		#('add to current change set' 'add all meths to current chgs' 'add preamble (p)') -> #listAddIcon.		#('toggle diffing (D)' 'toggle selections') -> #switchIcon.		#('reorganize' 'create inst var accessors' 'ChangeSorter reorderChangeSets.' 'reorder all change sets' 'by name' 'by size' 'by date') -> #sendReceiveIcon.		#('unsent methods' 'unreferenced class vars' 'unreferenced inst vars' 'Undeclared inspect.' 'Undeclared removeUnreferencedKeys; inspect.' 'ChangeSorter removeEmptyUnnamedChangeSets.' 'check for unsent messages') -> #junkIcon.		#('update' 'turn on auto-update (a)' 'update list (u)') -> #updateIcon.		#('find changed windows...') -> #newWindowIcon.		#('make undraggable') -> #pushPinIcon.		#('Utilities saveScreenshot.') -> #stillCameraIcon.		#('add new directory') -> #newFolderIcon.		#('select all' 'deselect all') -> #selectAllIcon.		#('sort by date') -> #dateIcon.		#('justified') -> #formatJustifyFillIcon.		#('centered') -> #formatJustifyCenterIcon.		#('set alignment...' 'leftFlush') -> #formatJustifyLeftIcon.		#('rightFlush') -> #formatJustifyRightIcon.		#('signal Semaphore (S)') -> #haloHelpIcon.	}! !TextModelMorph removeSelector: #again!SmalltalkEditor removeSelector: #doAgainOnce:!TextEditor removeSelector: #again!TextEditor removeSelector: #againOnce:!TextEditor removeSelector: #againOrSame:!TextEditor removeSelector: #againOrSame:many:!TextEditor removeSelector: #doAgainMany:!TextEditor removeSelector: #search:!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."Editor initialize.Theme current class beCurrent!