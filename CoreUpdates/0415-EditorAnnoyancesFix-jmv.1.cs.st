'From Cuis 2.0 of 4 January 2010 [latest update: #393] on 9 February 2010 at 10:50:03 pm'!!Parser methodsFor: 'error correction' stamp: 'jmv 2/9/2010 22:49'!correctSelector: proposedKeyword wordIntervals: spotsInSelection exprInterval: expInt ifAbort: abortAction	"Correct the proposedKeyword to some selector symbol, correcting the original text if such action is indicated.  abortAction is invoked if the proposedKeyword couldn't be converted into a valid selector.  Spots is an ordered collection of intervals within the test stream of the for each of the keyword parts."	| correctSelector userSelection spots |	"If we can't ask the user, assume that the keyword will be defined later"	self interactive ifFalse: [^proposedKeyword asSymbol].		"If the requestor is of an exotic kind (like a telnet server) we might not be allowed to open a PupUpMenu for querying the user"	"	((requestor isKindOf: Editor) or: [ requestor is: #Morph ])		ifFalse: [ ^ proposedKeyword asSymbol ].	"	userSelection := requestor selectionInterval.	spots _ spotsInSelection collect: [ :each | each + userSelection first-1 ].	requestor selectFrom: spots first first to: spots last last.	correctSelector := UnknownSelector name: proposedKeyword.	correctSelector ifNil: [^abortAction value].	requestor deselect.	requestor selectInvisiblyFrom: userSelection first to: userSelection last.	self substituteSelector: correctSelector keywords wordIntervals: spots.	^(proposedKeyword last ~~ $:	   and: [correctSelector last == $:])		ifTrue: [abortAction value]		ifFalse: [correctSelector]! !!String methodsFor: 'paragraph support' stamp: 'jmv 2/9/2010 22:13'!encompassLine: anInterval	"Return an interval that includes anInterval, and that comprises one or several whole paragraphs in the receiver.	Answer starts at the position following a cr (or eventually 1) and ends before a cr (or eventually at self size)	See also encompassParagraph:"	| left right |	left _ (self lastIndexOf: Character cr startingAt: anInterval first - 1 ifAbsent:[0]) + 1.	right _ (self indexOf: Character cr startingAt: (anInterval last max: anInterval first) ifAbsent: [self size+1])-1.	^left to: right! !!String methodsFor: 'paragraph support' stamp: 'jmv 2/9/2010 22:12'!encompassParagraph: anInterval	"Return an interval that includes anInterval, and that comprises one or several whole paragraphs in the receiver.	Answer starts at the position following a cr (or eventually 1) and ends at a cr (or eventually at self size).	See also #encompassLine:"	| left right |	left _ (self lastIndexOf: Character cr startingAt: anInterval first - 1 ifAbsent:[0]) + 1.	right _ (self indexOf: Character cr startingAt: (anInterval last max: anInterval first) ifAbsent: [self size]).	^left to: right! !!Text methodsFor: 'paragraph support' stamp: 'jmv 2/9/2010 22:11'!encompassLine: anInterval	^string encompassLine: anInterval! !!TextEditor methodsFor: 'new selection' stamp: 'jmv 2/9/2010 22:11'!selectLine	"Make the receiver's selection, if it currently consists of an insertion point only, encompass the current line."	self hasSelection ifTrue:[^self].	self selectInterval: (paragraph text encompassLine: self selectionInterval)! !