'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 22 April 2011 at 12:11:45 am'!!ChangeListWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 13:57'!buildMorphicWindow	"Open a morphic view for the messageSet, whose label is labelString. 	The listView may be either single or multiple selection type"	| listPane |	listPane _ PluggableListMorphOfMany		model: model		listGetter: #list		primarySelectionGetter: #listIndex		primarySelectionSetter: #toggleListIndex:		listSelectionGetter: #listSelectionAt:		listSelectionSetter: #listSelectionAt:put:		menuGetter: (MessageSend receiver: self selector: #listMenu).	listPane keystrokeActionSelector: #changeListKey:from:.		self layoutMorph		addMorph: listPane proportionalHeight: 0.4;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6! !!ChangeListWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 14:13'!browseCurrentVersionsOfSelections	"Opens a message-list browser on the current in-memory versions of all methods that are currently seleted"	| aList |	Cursor read showWhile: [aList _ model currentVersionsOfSelections].	aList size = 0 ifTrue: [^ self inform: 'no selected methods have in-memory counterparts'].	MessageSet 		openMessageList: aList 		name: 'Current versions of selected methods in ', model file localName! !!ChangeListWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 14:21'!listMenu	"Fill aMenu up so that it comprises the primary changelist-browser menu"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addTitle: 'change list'.	aMenu addStayUpIcons.	aMenu addList: #(	('fileIn selections'							fileInSelections							'import the selected items into the image'																		model)	('fileOut selections...	'					fileOutSelections						'create a new file containing the selected items'																model)	-	('compare to current'						compareToCurrentVersion			'open a separate window which shows the text differences between the on-file version and the in-image version.' model)	('toggle diffing (D)'							toggleDiffing							'start or stop showing diffs in the code pane.'																	model)	-	('select conflicts with any changeset'		selectAllConflicts						'select methods in the file which also occur in any change-set in the system'									model)	('select conflicts with current changeset'	selectConflicts							'select methods in the file which also occur in the current change-set'											model)	('select conflicts with...'						selectConflictsWith						'allows you to designate a file or change-set against which to check for code conflicts.'						model)	-	('select unchanged methods'				selectUnchangedMethods				'select methods in the file whose in-image versions are the same as their in-file counterparts'					model)	('select methods equivalent to current'		selectEquivalentMethods				'select methods in the file whose in-image versions have the same behavior as their in-file counterparts'		model)	('select new methods'						selectNewMethods						'select methods in the file that do not current occur in the image'												model)	('select methods for absent classes'		selectMethodsForAbsentClasses		'select methods in the file for classes that are not defined in the image'										model)	('select methods for this class'				selectMethodsForThisClass			'select all methods in the file that belong to the currently-selected class'										model)	('select removals of sent methods'			selectRemovalsOfSent					'select all method removals of methods that have some sender in the image'									model)	-	('select all (a)'								selectAll									'select all the items in the list'																					model)	('deselect all'								deselectAll								'deselect all the items in the list'																				model)	('invert selections'							invertSelections							'select every item that is not currently selected, and deselect every item that *is* currently selected'		model)	-	('browse all versions of single selection'	browseVersions							'open a version browser showing the versions of the currently selected method')	('browse current versions of selections'	browseCurrentVersionsOfSelections 'open a message-list browser showing the current (in-image) counterparts of the selected methods')	('destroy current methods of selections'	destroyCurrentCodeOfSelections	'remove (*destroy*) the in-image counterparts of all selected methods'										model)	-	('remove doIts'								removeDoIts								'remove all items that are doIts rather than methods'															model)	('remove older versions'					removeOlderMethodVersions			'remove all but the most recent versions of methods in the list'												model)	('remove up-to-date versions'				removeExistingMethodVersions		'remove all items whose code is the same as the counterpart in-image code'									model)	('remove empty class comments'			removeEmptyClassComments			'remove all empty class comments'																			model)	('remove selected items'					removeSelections						'remove the selected items from the change-list'																model)	('remove unselected items'					removeNonSelections					'remove all the items not currently selected from the change-list'												model)).	^ aMenu! !!ChangeSorterWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 14:36'!buildMorphicWindow	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."	| list1 list2 list3 upperPanes |	model myChangeSet ifNil: [ model myChangeSet: ChangeSet current ].	list1 _ (PluggableListMorphByItem 				model: model				listGetter: #changeSetList				indexGetter: #currentCngSet				indexSetter: #showChangeSetNamed:				menuGetter: (MessageSend receiver: self selector: #changeSetMenu)				keystrokeAction: #changeSetListKey:from:)			autoDeselect: false.	list2 _ PluggableListMorphByItem 				model: model				listGetter: #classList				indexGetter: #currentClassName				indexSetter: #currentClassName:				menuGetter: (MessageSend receiver: self selector: #classListMenu)				keystrokeAction: #classListKey:from:.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: list1 proportionalWidth: 0.5;		addAdjusterAndMorph: list2 proportionalWidth: 0.5.	list3 _ PluggableListMorphByItem 				model: model				listGetter: #messageList				indexGetter: #currentSelector				indexSetter: #currentSelector:				menuGetter: (MessageSend receiver: self selector: #messageMenu)				keystrokeAction: #messageListKey:from:.	self layoutMorph		addMorph: upperPanes proportionalHeight: 0.25;		addAdjusterAndMorph: list3 proportionalHeight: 0.25;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.5.	self setLabel: model labelString! !!ChangeSorterWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 18:24'!changeSetMenu	"Set up aMenu to hold commands for the change-set-list pane.  This could be for a single or double changeSorter"	| aMenu |	aMenu _ MenuMorph new defaultTarget: model.	aMenu title: 'Change Set'.	aMenu addStayUpIcons.	aMenu add: 'make changes go to me (m)' 		action: #newCurrent.	aMenu addLine.	aMenu add: 'new change set... (n)' 				action: #newSet.	aMenu add: 'rename change set (r)' 			action: #rename.	aMenu add: 'file out (o)' 						action: #fileOut.	aMenu addLine.	model currentHasPreamble		ifTrue: [			aMenu add: 'edit preamble (p)' 			action: #addPreamble.			aMenu add: 'remove preamble' 			action: #removePreamble]		ifFalse: [aMenu add: 'add preamble (p)' 		action: #addPreamble].	model currentHasPostscript		ifTrue: [			aMenu add: 'edit postscript...' 			action: #editPostscript.			aMenu add: 'remove postscript' 		action: #removePostscript]		ifFalse: [aMenu add: 'add postscript...' 		action: #editPostscript].	aMenu addLine.	aMenu add: 'destroy change set (x)' 			action: #remove.	aMenu addLine.	aMenu add: 'more...' 							target: self				action: #offerShiftedChangeSetMenu.	^ aMenu! !!ChangeSorterWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 18:24'!classListMenu	"Fill aMenu with items appropriate for the class list"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: 'class list'.	aMenu addStayUpIcons.	aMenu addList: #(			-			('delete class from change set (d)'		forgetClass					''		model)			('remove class from system (x)'		removeClass					''		model)			-			('browse full (b)'						browseMethodFull)			('browse hierarchy (h)'					browseHierarchy)			('browse protocol (p)'					browseFullProtocol)			-			('fileOut'								fileOutClass					''		model)			-			('inst var refs...'							browseInstVarRefs)			('inst var defs...'						browseInstVarDefs)			('class var refs...'						browseClassVarRefs)			('class vars'								browseClassVariables)			('class refs (N)'							browseClassRefs)).	^ aMenu! !!ChangeSorterWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 18:24'!messageMenu	"Fill aMenu with items appropriate for the message list; could be for a single or double changeSorter"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: 'message list'.	aMenu addStayUpIcons.	aMenu addList: #(			('delete method from changeSet (d)'	forget							''		model)			-			('remove method from system (x)'		removeMessage				''		model)				-			('browse full (b)'						browseMethodFull)			('browse hierarchy (h)'					browseHierarchy)			('browse method (O)'					openSingleMessageBrowser)			('browse protocol (p)'					browseFullProtocol)			-			('fileOut'								fileOutMessage				''		model)			-			('senders of... (n)'						browseSendersOfMessages)			('implementors of... (m)'					browseMessages)			('inheritance (i)'							methodHierarchy)			('versions (v)'							browseVersions)).	^ aMenu! !!ChangeSorterWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 18:25'!shiftedChangeSetMenu	"Set up aMenu to hold items relating to the change-set-list pane when the shift key is down"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: 'Change set (shifted)'.	aMenu addStayUpIcons.	"CONFLICTS SECTION"	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	aMenu addLine.	"CHECKS SECTION"	aMenu add: 'trim history' target: model action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes. ',				'NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'view affected class categories' target: model action: #viewAffectedClassCategories.	aMenu balloonTextForLastItem: ' Show class categories affected by any contained change'.	aMenu addLine.	aMenu add: 'more...' action: #offerUnshiftedChangeSetMenu.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!ChangeSorterWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 15:33'!browseMethodConflicts	"Check to see if any other change set also holds changes to any methods in the selected change set; if so, open a browser on all such."	| aList |	aList _ model methodConflicts.	aList isEmpty ifTrue: [		^ self inform: 'No other change set has changes for any method in this change set.' ].	MessageSetWindow		open: (MessageSet messageList: aList)		label: 'Methods in "', model changeSet name, '" that are also in other change sets (', aList size printString, ')'! !!ChangeSorterWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 15:33'!browseMethodConflictsWithOtherSide	"Check to see if the change set on the other side shares any methods with the selected change set; if so, open a browser on all such."	| aList other |	aList _ model methodConflictsWithOtherSide ifNil: [ ^self ].	aList isEmpty ifTrue: [		^ self inform: 'There are no methods that appear both in this change set and in the one on the other side.' ].	other _ (model parent other: model) changeSet.	MessageSetWindow		open: (MessageSet messageList: aList)		label: 'Methods in "', model changeSet name, '" that are also in ', other name,' (', aList size printString, ')'! !!ChangeSorterWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 14:46'!offerShiftedChangeSetMenu	"Offer the shifted version of the change set menu"	self shiftedChangeSetMenu popUpInWorld! !!ChangeSorterWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 14:47'!offerUnshiftedChangeSetMenu	"Offer the unshifted version of the change set menu"	self changeSetMenu popUpInWorld! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 4/20/2011 15:40'!spawnHierarchy	"Create and schedule a new hierarchy browser on the currently selected class or meta."	| newBrowser aSymbol aBehavior messageCatIndex selectedClassOrMetaClass |	self flag: #ojo. "revisar senders, quizas borrar..."	(selectedClassOrMetaClass _ self selectedClassOrMetaClass)		ifNil: [^ self].	newBrowser _ HierarchyBrowser new initHierarchyForClass: selectedClassOrMetaClass.	((aSymbol _ self selectedMessageName) notNil and: [(MessageSet isPseudoSelector: aSymbol) not])		ifTrue: [			aBehavior _ selectedClassOrMetaClass.			messageCatIndex _ aBehavior organization numberOfCategoryOfElement: aSymbol.			newBrowser messageCategoryListIndex: messageCatIndex + 1.			newBrowser messageListIndex:				((aBehavior organization listAtCategoryNumber: messageCatIndex) indexOf: aSymbol)].				HierarchyBrowserWindow openNoSysCat: newBrowser label: newBrowser labelString.	newBrowser assureSelectionsShow! !!ChangeList methodsFor: 'menu actions' stamp: 'jmv 4/20/2011 14:12'!browseCurrentVersionsOfSelections	"Opens a message-list browser on the current in-memory versions of all methods that are currently seleted"	| aList |	Cursor read showWhile: [aList _ self currentVersionsOfSelections].	aList size = 0 ifTrue: [^ self inform: 'no selected methods have in-memory counterparts'].	MessageSet 		openMessageList: aList 		name: 'Current versions of selected methods in ', file localName! !!ChangeList methodsFor: 'menu actions' stamp: 'jmv 4/20/2011 14:10'!changeListMenu	"Fill aMenu up so that it comprises the primary changelist-browser menu"	| aMenu |	self flag: #ojo. "borrar"	aMenu := MenuMorph new defaultTarget: self.	aMenu addTitle: 'change list'.	aMenu addStayUpIcons.	aMenu addList: #(	('fileIn selections'							fileInSelections							'import the selected items into the image')	('fileOut selections...	'					fileOutSelections						'create a new file containing the selected items')	-	('compare to current'						compareToCurrentVersion				'open a separate window which shows the text differences between the on-file version and the in-image version.' )	('toggle diffing (D)'							toggleDiffing							'start or stop showing diffs in the code pane.')	-	('select conflicts with any changeset'		selectAllConflicts						'select methods in the file which also occur in any change-set in the system')	('select conflicts with current changeset'	selectConflicts							'select methods in the file which also occur in the current change-set')	('select conflicts with...'						selectConflictsWith						'allows you to designate a file or change-set against which to check for code conflicts.')	-	('select unchanged methods'				selectUnchangedMethods				'select methods in the file whose in-image versions are the same as their in-file counterparts' )	('select methods equivalent to current'		selectEquivalentMethods				'select methods in the file whose in-image versions have the same behavior as their in-file counterparts' )	('select new methods'						selectNewMethods						'select methods in the file that do not current occur in the image')	('select methods for absent classes'		selectMethodsForAbsentClasses		'select methods in the file for classes that are not defined in the image')	('select methods for this class'				selectMethodsForThisClass			'select all methods in the file that belong to the currently-selected class')	('select removals of sent methods'			selectRemovalsOfSent					'select all method removals of methods that have some sender in the image')	-	('select all (a)'								selectAll									'select all the items in the list')	('deselect all'								deselectAll								'deselect all the items in the list')	('invert selections'							invertSelections							'select every item that is not currently selected, and deselect every item that *is* currently selected')	-	('browse all versions of single selection'	browseVersions							'open a version browser showing the versions of the currently selected method')	('browse current versions of selections'	browseCurrentVersionsOfSelections 'open a message-list browser showing the current (in-image) counterparts of the selected methods')	('destroy current methods of selections'	destroyCurrentCodeOfSelections	'remove (*destroy*) the in-image counterparts of all selected methods')	-	('remove doIts'								removeDoIts								'remove all items that are doIts rather than methods')	('remove older versions'					removeOlderMethodVersions			'remove all but the most recent versions of methods in the list')	('remove up-to-date versions'				removeExistingMethodVersions		'remove all items whose code is the same as the counterpart in-image code')	('remove empty class comments'			removeEmptyClassComments			'remove all empty class comments')	('remove selected items'					removeSelections						'remove the selected items from the change-list')	('remove unselected items'					removeNonSelections					'remove all the items not currently selected from the change-list')).	^ aMenu! !!ChangeList methodsFor: 'menu actions' stamp: 'jmv 4/20/2011 14:11'!currentVersionsOfSelections	"Opens a message-list browser on the current in-memory versions of all methods that are currently seleted"	| aList |	aList _ OrderedCollection new.	1 to: changeList size do: [ :i |		(listSelections at: i) ifTrue: [			| aClass aChange |			aChange _ changeList at: i.			(aChange type = #method				and: [(aClass _ aChange methodClass) notNil				and: [aClass includesSelector: aChange methodSelector]])					ifTrue: [						aList add: (							MethodReference new								setStandardClass: aClass  								methodSymbol: aChange methodSelector						)					]]].	^ aList! !!ChangeList methodsFor: 'menu actions' stamp: 'sw 10/11/1999 17:10'!fileInSelections 	| any |	any _ false.	listSelections with: changeList do: 		[:selected :item | selected ifTrue: [any _ true. item fileIn]].	any ifFalse:		[self inform: 'nothing selected, so nothing done']! !!ChangeSorter methodsFor: 'access' stamp: 'jmv 4/20/2011 14:31'!currentHasPostscript	^ myChangeSet hasPostscript! !!ChangeSorter methodsFor: 'access' stamp: 'jmv 4/20/2011 14:31'!currentHasPreamble	^ myChangeSet hasPreamble! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/20/2011 15:26'!browseMethodConflicts	"Check to see if any other change set also holds changes to any methods in the selected change set; if so, open a browser on all such."	| aList |	aList _ self methodConflicts.	aList isEmpty ifTrue: [		^ self inform: 'No other change set has changes for any method in this change set.' ].		MessageSet 		openMessageList: aList 		name: 'Methods in "', myChangeSet name, '" that are also in other change sets (', aList size printString, ')'	! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/20/2011 15:28'!browseMethodConflictsWithOtherSide	"Check to see if the change set on the other side shares any methods with the selected change set; if so, open a browser on all such."	| aList other |	aList _ self methodConflictsWithOtherSide ifNil: [ ^self ].	aList isEmpty ifTrue: [		^ self inform: 'There are no methods that appear both in this change set and in the one on the other side.' ].	other _ (parent other: self) changeSet.		MessageSet 		openMessageList: aList 		name: 'Methods in "', myChangeSet name, '" that are also in ', other name,' (', aList size printString, ')'! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/20/2011 14:40'!chooseCngSet	"Present the user with an alphabetical list of change set names, and let her choose one"	| changeSetsSortedAlphabetically chosen |self flag: #ojo.	"borrar"	self okToChange ifFalse: [ ^ self ].	changeSetsSortedAlphabetically _ self changeSetList asArray sort: [ :a :b |		a asLowercase withoutLeadingDigits < b asLowercase withoutLeadingDigits ].	chosen _ (SelectionMenu selections: changeSetsSortedAlphabetically) startUp.	chosen ifNil: [ ^ self ].	self showChangeSet: (ChangeSorter changeSetNamed: chosen).! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/20/2011 15:30'!copyAllToOther	"Copy this entire change set into the one on the other side"	| companionSorter |	self checkThatSidesDiffer: [^ self].	(companionSorter _ parent other: self) changeSet assimilateAllChangesFoundIn: myChangeSet.	companionSorter changed: #classList.	"Later the changeSet itself will notice..."	companionSorter changed: #messageList! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/20/2011 14:40'!findCngSet 	"Search for a changeSet by name.  Pop up a menu of all changeSets whose name contains the string entered by the user.  If only one matches, then the pop-up menu is bypassed"	| index pattern candidates nameList |self flag: #ojo.	"borrar"	self okToChange ifFalse: [^ self].	pattern _ FillInTheBlank request: 'ChangeSet name or fragment?'.	pattern isEmpty ifTrue: [^ self].	nameList _ self changeSetList asSet.	candidates _ AllChangeSets select:			[:c | (nameList includes: c name) and: 				[c name includesSubstring: pattern caseSensitive: false]].	candidates size = 0 ifTrue: [^ Beeper beep].	candidates size = 1 ifTrue:		[^ self showChangeSet: candidates first].	index _ (PopUpMenu labels: 		(candidates collect: [:each | each name]) asStringWithCr) startUp.	index = 0 ifFalse: [self showChangeSet: (candidates at: index)].! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/20/2011 15:25'!methodConflicts	"Check to see if any other change set also holds changes to any methods in the selected change set; if so, open a browser on all such."	| aList |	aList _ myChangeSet 		messageListForChangesWhich: [ :aClass :aSelector |			(ChangeSorter allChangeSetsWithClass: aClass selector: aSelector) size > 1		]		ifNone: [ #() ].	^aList! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/20/2011 15:25'!methodConflictsWithOtherSide	"Check to see if the change set on the other side shares any methods with the selected change set; if so, open a browser on all such."	| aList other |	self checkThatSidesDiffer: [^ nil].	other _ (parent other: self) changeSet.	aList _ myChangeSet 		messageListForChangesWhich: [ :aClass :aSelector |			aClass notNil and: [(other methodChangesAtClass: aClass name) includesKey: aSelector]		]		ifNone:  [#()].	^aList! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/20/2011 15:21'!shiftedChangeSetMenu	"Set up aMenu to hold items relating to the change-set-list pane when the shift key is down"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'Change set (shifted)'.	aMenu addStayUpIcons.	"CONFLICTS SECTION"	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	parent ifNotNil:		[aMenu add: 'conflicts with change set opposite' action: #browseMethodConflictsWithOtherSide.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in the one on the opposite side of the change sorter.'].	aMenu addLine.	"CHECKS SECTION"	aMenu add: 'trim history' action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.  NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'view affected class categories' action: #viewAffectedClassCategories.	aMenu balloonTextForLastItem: ' Show class categories affected by any contained change'.	aMenu addLine.	aMenu add: 'more...' action: #offerUnshiftedChangeSetMenu.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!ChangeSorter methodsFor: 'class list' stamp: 'jmv 4/20/2011 16:26'!classListMenu	"Fill aMenu with items appropriate for the class list"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'class list'.	aMenu addStayUpIcons.	parent notNil		ifTrue: [aMenu addList: #( "These two only apply to dual change sorters"			('copy class chgs to other side'			copyClassToOther)				('move class chgs to other side'			moveClassToOther))].	aMenu addList: #(			-			('delete class from change set (d)'		forgetClass)			('remove class from system (x)'			removeClass)			-			('browse full (b)'						browseMethodFull)			('browse hierarchy (h)'					spawnHierarchy)			('browse protocol (p)'					browseFullProtocol)			-			('fileOut'								fileOutClass)			-			('inst var refs...'						browseInstVarRefs)			('inst var defs...'						browseInstVarDefs)			('class var refs...'						browseClassVarRefs)			('class vars'								browseClassVariables)			('class refs (N)'							browseClassRefs)).	^ aMenu! !!ChangeSorter methodsFor: 'message list' stamp: 'jmv 4/20/2011 16:30'!messageMenu	"Fill aMenu with items appropriate for the message list; could be for a single or double changeSorter"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'message list'.	aMenu addStayUpIcons.	parent ifNotNil:		[aMenu addList: #(			('copy method to other side'			copyMethodToOther)			('move method to other side'			moveMethodToOther))].	aMenu addList: #(			('delete method from changeSet (d)'	forget)			-			('remove method from system (x)'		removeMessage)				-			('browse full (b)'						browseMethodFull)			('browse hierarchy (h)'					spawnHierarchy)			('browse method (O)'					openSingleMessageBrowser)			('browse protocol (p)'					browseFullProtocol)			-			('fileOut'								fileOutMessage)			-			('senders of... (n)'						browseSendersOfMessages)			('implementors of... (m)'					browseMessages)			('inheritance (i)'							methodHierarchy)			('versions (v)'							browseVersions)).	^ aMenu! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/20/2011 22:18'!browseMessages	"Present a menu of all messages sent by the currently selected message.	Open a message set browser of all implementors of the message chosen.	Do nothing if no message is chosen."self flag: #ojo.	"borrar"	contextStackIndex = 0 ifTrue: [^ self].	super browseMessages.! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/20/2011 22:17'!browseSendersOfMessages	"Present a menu of the currently selected message, as well as all	messages sent by it.  Open a message set browser of all implementors	of the message chosen."self flag: #ojo.	"borrar"	contextStackIndex = 0 ifTrue: [^ self].	super browseSendersOfMessages! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/20/2011 22:18'!browseVersions	"Create and schedule a message set browser on all versions of the 	currently selected message selector."	| class selector |self flag: #ojo.	"borrar"	class _ self selectedClassOrMetaClass.	selector _ self selectedMessageName.	VersionsBrowser		browseVersionsOf: (class compiledMethodAt: selector)		class: self selectedClass theNonMetaClass		meta: class isMeta		category: self selectedMessageCategoryName		selector: selector! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/20/2011 21:54'!contextStackMenu	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(			('fullStack (f)'				fullStack)			('restart (r)'					restart)			('proceed (p)'				proceed)			('step (t)'					doStep)			('step through (T)'			stepIntoBlock)			('send (e)'					send)			('where (w)'					where)			('peel to first like this'		peelToFirst)			-			('return entered value'		returnValue)			-			('toggle break on entry'	toggleBreakOnEntry)			('senders of... (n)'			browseSendersOfMessages)			('implementors of... (m)'		browseMessages)			('inheritance (i)'				methodHierarchy)			-			('versions (v)'				browseVersions)			('inst var refs...'				browseInstVarRefs)			-			('inst var defs...'			browseInstVarDefs)			('class var refs...'			browseClassVarRefs)			('class variables'			browseClassVariables)			-			('class refs (N)'				browseClassRefs)			('browse full (b)'			browseMethodFull)			('file out '					fileOutMessage)			-			('more...'					openShiftedMessageListMenu)		).	^aMenu! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/20/2011 22:19'!shiftedContextStackMenu	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"	| aMenu |self flag: #ojo.	"borrar"	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(			('browse class hierarchy'				#classHierarchy)			('browse method (O)'					#openSingleMessageBrowser)			('implementors of sent messages'		#browseAllMessages)			('change sets with this method'			#findMethodInChangeSets)			-			('inspect instances'						#inspectInstances)			('inspect subinstances'					#inspectSubInstances)			-			('revert to previous version'			#revertToPreviousVersion)			('remove from current change set'		#removeFromCurrentChanges)			('revert & remove from changes'		#revertAndForget)			-			('more...'								#openMessageListMenu)		).	^aMenu! !!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 4/21/2011 23:16'!buildMorphicWindow	"Open a full morphic debugger with the given label"	| upperMorph bottomMorph1 bottomMorph2 bottomMorph3 bottomMorph4 bottomMorph |	upperMorph _ PluggableListMorph		model: model 		listGetter: #contextStackList		indexGetter: #contextStackIndex		indexSetter: #toggleContextStackIndex:		menuGetter: (MessageSend receiver: self selector: #contextStackMenu)		keystrokeAction: #contextStackKey:from:.	bottomMorph1 _ PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: model receiverInspector			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			menuGetter: (MessageSend receiver: self selector: #receiverFieldListMenu)			keystrokeAction: #inspectorKey:from:.	bottomMorph2 _ TextModelMorph 			textProvider: model receiverInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection.	bottomMorph3 _ PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: model contextVariablesInspector 			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			menuGetter: (MessageSend receiver: self selector: #contextFieldListMenu)			keystrokeAction: #inspectorKey:from:.	bottomMorph4 _ TextModelMorph 			textProvider: model contextVariablesInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection.	bottomMorph _ LayoutMorph newRow.	bottomMorph		addMorph: bottomMorph1 proportionalWidth: 0.2;		addAdjusterAndMorph: bottomMorph2 proportionalWidth: 0.3;		addAdjusterAndMorph: bottomMorph3 proportionalWidth: 0.2;		addAdjusterAndMorph: bottomMorph4 proportionalWidth: 0.3.	self layoutMorph		addMorph: upperMorph proportionalHeight: 0.25;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.55;		addAdjusterAndMorph: bottomMorph proportionalHeight: 0.2! !!DebuggerWindow methodsFor: 'menu building' stamp: 'jmv 4/21/2011 23:53'!contextFieldListMenu	"Arm the supplied menu with items for the field-list of the receiver"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('explore (I)'						exploreContextSelection)		-		('browse hierarchy (h)'				contextClassHierarchy)).	^ aMenu! !!DebuggerWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 22:19'!contextStackMenu	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"	| aMenu |	aMenu _ MenuMorph new defaultTarget: model.			"all go to the model"	aMenu addList: #(			('fullStack (f)'				fullStack)			('restart (r)'					restart)			('proceed (p)'				proceed)			('step (t)'					doStep)			('step through (T)'			stepIntoBlock)			('send (e)'					send)			('where (w)'					where)			('peel to first like this'		peelToFirst)			-			('return entered value'		returnValue)			('toggle break on entry'	toggleBreakOnEntry)		).	^aMenu! !!DebuggerWindow methodsFor: 'menu building' stamp: 'jmv 4/21/2011 23:50'!receiverFieldListMenu	"Arm the supplied menu with items for the field-list of the receiver"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('explore (I)'						exploreReceiverSelection)		-		('browse hierarchy (h)'				receiverClassHierarchy)).	^ aMenu! !!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 4/21/2011 23:53'!contextClassHierarchy	Utilities spawnHierarchyForClass: model contextVariablesInspector selectedClassOrMetaClass "OK if nil"		selector: nil! !!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 4/21/2011 23:53'!exploreContextSelectionself flag: #ojo."Todos los que hagan self changed: #flash en WINDOWS deberian ser self flash"	model contextVariablesInspector selectionIndex = 0 ifTrue: [^ self changed: #flash].	^ model contextVariablesInspector  selection explore! !!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 4/21/2011 23:51'!exploreReceiverSelectionself flag: #ojo."Todos los que hagan self changed: #flash en WINDOWS deberian ser self flash"	model receiverInspector selectionIndex = 0 ifTrue: [^ self changed: #flash].	^ model receiverInspector  selection explore! !!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 4/21/2011 23:52'!receiverClassHierarchy	Utilities spawnHierarchyForClass: model receiverInspector selectedClassOrMetaClass "OK if nil"		selector: nil! !!DualChangeSorterWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 18:43'!buildMorphicUIIn: aLayoutMorph for: aChangeSorter	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0.""Aca hay cosas que deben ir a la mitad correcta... Y no quiero duplicar con la otra ventana....pensar"	| list1 list2 list3 upperPanes realModel |	list1 _ (PluggableListMorphByItem 				model: aChangeSorter				listGetter: #changeSetList				indexGetter: #currentCngSet				indexSetter: #showChangeSetNamed:				menuGetter: (MessageSend receiver: self selector: #changeSetMenuFor: argument: aChangeSorter)				keystrokeAction: #changeSetListKey:from:)			autoDeselect: false.	list2 _ PluggableListMorphByItem 				model: aChangeSorter				listGetter: #classList				indexGetter: #currentClassName				indexSetter: #currentClassName:				menuGetter: (MessageSend receiver: self selector: #classListMenuFor: argument: aChangeSorter)				keystrokeAction: #classListKey:from:.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: list1 proportionalWidth: 0.5;		addAdjusterAndMorph: list2 proportionalWidth: 0.5.	list3 _ PluggableListMorphByItem 				model: aChangeSorter				listGetter: #messageList				indexGetter: #currentSelector				indexSetter: #currentSelector:				menuGetter: (MessageSend receiver: self selector: #messageMenuFor: argument: aChangeSorter)				keystrokeAction: #messageListKey:from:.	aLayoutMorph addMorph: upperPanes proportionalHeight: 0.25.	aLayoutMorph addAdjusterAndMorph: list3 proportionalHeight: 0.25.	"set aChangeSorter as the model during #buildLowerPanes, as the inherited methods assume a simple model that is a CodeProvider."	realModel _ model.	model _ aChangeSorter.	aLayoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.5.	model _ realModel! !!DualChangeSorterWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 18:00'!buildMorphicWindow	| left right |	model buildLeftAndRight.	self beRow.	left _ LayoutMorph newColumn.	self buildMorphicUIIn: left for: model leftSorter.	right _ LayoutMorph newColumn.	self buildMorphicUIIn: right for: model rightSorter.	self setLabel: model labelString.	self layoutMorph		addMorph: left proportionalWidth: 0.5;		addAdjusterAndMorph: right proportionalWidth: 0.5! !!DualChangeSorterWindow methodsFor: 'updating' stamp: 'jmv 4/20/2011 17:58'!decorateForInheritance	"We just don't bother...	Maybe all this mechanism could be cleaned a bit, to make it more natural to implement for this class..."! !!DualChangeSorterWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 18:43'!changeSetMenuFor: aChangeSorter	"Set up aMenu to hold commands for the change-set-list pane.  This could be for a single or double changeSorter"	| aMenu |	aMenu _ MenuMorph new defaultTarget: aChangeSorter.	aMenu title: 'Change Set'.	aMenu addStayUpIcons.	aMenu add: 'make changes go to me (m)' 		action: #newCurrent.	aMenu addLine.	aMenu add: 'new change set... (n)' 				action: #newSet.	aMenu add: 'rename change set (r)' 			action: #rename.	aMenu add: 'file out (o)' 						action: #fileOut.	aMenu addLine.	aMenu add: 'copy all to other side (c)' 			action: #copyAllToOther.	aMenu add: 'submerge into other side'			action: #submergeIntoOtherSide.	aMenu add: 'subtract other side (-)' 			action: #subtractOtherSide.	aMenu addLine.	aChangeSorter currentHasPreamble		ifTrue: [			aMenu add: 'edit preamble (p)' 			action: #addPreamble.			aMenu add: 'remove preamble' 			action: #removePreamble]		ifFalse: [aMenu add: 'add preamble (p)' 		action: #addPreamble].	aChangeSorter currentHasPostscript		ifTrue: [			aMenu add: 'edit postscript...' 			action: #editPostscript.			aMenu add: 'remove postscript' 		action: #removePostscript]		ifFalse: [aMenu add: 'add postscript...' 		action: #editPostscript].	aMenu addLine.	aMenu add: 'destroy change set (x)' 			action: #remove.	aMenu addLine.	aMenu add: 'more...' target: self	 selector: #offerShiftedChangeSetMenuFor: argument: aChangeSorter.	^ aMenu! !!DualChangeSorterWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 18:39'!classListMenuFor: aChangeSorter	"Fill aMenu with items appropriate for the class list"	| aMenu |	aMenu _ MenuMorph new defaultTarget: aChangeSorter.	aMenu title: 'class list'.	aMenu addStayUpIcons.	aMenu addList: #(		('copy class chgs to other side'		copyClassToOther)		('move class chgs to other side'		moveClassToOther)		-		('delete class from change set (d)'		forgetClass)		('remove class from system (x)'		removeClass)		-		('fileOut'								fileOutClass)).	^ aMenu! !!DualChangeSorterWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 18:33'!messageMenuFor: aChangeSorter	"Fill aMenu with items appropriate for the message list; could be for a single or double changeSorter"	| aMenu |	aMenu _ MenuMorph new defaultTarget: aChangeSorter.	aMenu title: 'message list'.	aMenu addStayUpIcons.	aMenu addList: #(			('copy method to other side'			copyMethodToOther)			('move method to other side'			moveMethodToOther)			('delete method from changeSet (d)'	forget)			-			('remove method from system (x)'		removeMessage)			-			('fileOut'								fileOutMessage)		).	^ aMenu! !!DualChangeSorterWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 18:37'!shiftedChangeSetMenuFor: aChangeSorter	"Set up aMenu to hold items relating to the change-set-list pane when the shift key is down"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: 'Change set (shifted)'.	aMenu addStayUpIcons.	"CONFLICTS SECTION"	aMenu add: 'conflicts with other change sets' selector: #browseMethodConflicts: argument: aChangeSorter.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	aMenu add: 'conflicts with change set opposite' selector: #browseMethodConflictsWithOtherSide: argument: aChangeSorter.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in the one on the opposite side of the change sorter.'.	aMenu addLine.	"CHECKS SECTION"	aMenu add: 'trim history' target: aChangeSorter action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes. ',				'NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'view affected class categories' target: aChangeSorter action: #viewAffectedClassCategories.	aMenu balloonTextForLastItem: ' Show class categories affected by any contained change'.	aMenu addLine.	aMenu add: 'more...' selector: #offerUnshiftedChangeSetMenu argument: aChangeSorter.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!DualChangeSorterWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 18:36'!browseMethodConflicts: aChangeSorter	"Check to see if any other change set also holds changes to any methods in the selected change set; if so, open a browser on all such."	| aList |	aList _ aChangeSorter methodConflicts.	aList isEmpty ifTrue: [		^ self inform: 'No other change set has changes for any method in this change set.' ].	MessageSetWindow		open: (MessageSet messageList: aList)		label: 'Methods in "', aChangeSorter changeSet name, '" that are also in other change sets (', aList size printString, ')'! !!DualChangeSorterWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 18:37'!browseMethodConflictsWithOtherSide: aChangeSorter	"Check to see if the change set on the other side shares any methods with the selected change set; if so, open a browser on all such."	| aList other |	aList _ aChangeSorter methodConflictsWithOtherSide ifNil: [ ^self ].	aList isEmpty ifTrue: [		^ self inform: 'There are no methods that appear both in this change set and in the one on the other side.' ].	other _ (model other: aChangeSorter) changeSet.	MessageSetWindow		open: (MessageSet messageList: aList)		label: 'Methods in "', aChangeSorter changeSet name, '" that are also in ', other name,' (', aList size printString, ')'! !!DualChangeSorterWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 18:14'!offerShiftedChangeSetMenuFor: aChangeSorter	"Offer the shifted version of the change set menu"	(self shiftedChangeSetMenuFor: aChangeSorter) popUpInWorld! !!DualChangeSorterWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 18:14'!offerUnshiftedChangeSetMenuFor: aChangeSorter	"Offer the unshifted version of the change set menu"	(self changeSetMenuFor: aChangeSorter) popUpInWorld! !!FileContentsBrowser methodsFor: 'menus' stamp: 'jmv 4/20/2011 23:21'!packageListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('find class... (f)'				findClass)		-		('fileIn'						fileInPackage)		('file into new changeset'	fileIntoNewChangeSet)		('fileOut'					fileOutPackage)		('remove existing'			removeUnmodifiedClasses)).	^ aMenu! !!FileContentsBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 23:23'!buildMorphicWindow	"Create a pluggable version of all the views for a Browser, including views and controllers."	| list1 list2 upperPanes |	model systemCategoryListIndex: 1.	list1 _ PluggableListMorph 			model: model 			listGetter: #systemCategorySingleton			indexGetter: #indexIsOne 			indexSetter: #indexIsOne:			menuGetter: (MessageSend receiver: self selector: #packageListMenu)			keystrokeAction: #packageListKey:from:.	list1 hideScrollBarsIndefinitely.		list2 _ PluggableListMorph 			model: model 			listGetter: #messageCategoryList			indexGetter: #messageCategoryListIndex 			indexSetter: #messageCategoryListIndex:			menuGetter:  (MessageSend receiver: self selector: #messageCategoryMenu).	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: self buildMorphicClassColumn proportionalWidth: 0.3;		addAdjusterAndMorph: list2 proportionalWidth: 0.3;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.4.	self layoutMorph		addMorph: list1 fixedHeight: Preferences standardCodeFont height + 10;		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.	model changed: #editSelection! !!FileContentsBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 23:23'!packageListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: model.		"all options are for the model"	aMenu addList: #(		('find class... (f)'				findClass)		-		('fileIn'						fileInPackage)		('file into new changeset'	fileIntoNewChangeSet)		('fileOut'					fileOutPackage)		('remove existing'			removeUnmodifiedClasses)).	^ aMenu! !!FileList methodsFor: 'volume list and pattern' stamp: 'jmv 4/16/2011 10:27'!deleteDirectory	"Remove the currently selected directory"	| localDirName |	directory entries size = 0 ifFalse:[^self inform:'Directory must be empty'].	localDirName _ directory localName.	(self confirm: 'Really delete ' , localDirName , '?') ifFalse: [^ self].	directory deleteDirectory: localDirName.	self updateFileList.	self updateDirectory! !!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 23:07'!morphicDirectoryTreePane	^(SimpleHierarchicalListMorph 		model: model		listGetter: #initialDirectoryList		indexGetter: #currentDirectorySelected		indexSetter: #setSelectedDirectoryTo:		menuGetter:  (MessageSend receiver: self selector: #volumeMenu)		keystrokeAction: nil)			autoDeselect: false;			enableDrag: false;			enableDrop: true;			yourself! !!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 23:11'!morphicFileListPane	^(PluggableListMorph 		model: model 		listGetter: #fileList 		indexGetter: #fileListIndex		indexSetter: #fileListIndex: 		menuGetter: (MessageSend receiver: self selector: #fileListMenu))			enableDrag: true;			enableDrop: false;			yourself! !!FileListWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 23:09'!fileListMenu	^model fileName		ifNil: [ self noFileSelectedMenu ]		ifNotNil: [ self fileSelectedMenu ]! !!FileListWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 23:10'!fileSelectedMenu	| firstItems secondItems thirdItems n1 n2 n3 services aMenu |	aMenu _ MenuMorph new defaultTarget: model.	firstItems _ model itemsForFile: model fullName.	secondItems _ model itemsForAnyFile.	thirdItems _ model itemsForNoFile.	n1 _ firstItems size.	n2 _ n1 + secondItems size.	n3 _ n2 + thirdItems size.	services _ firstItems, secondItems, thirdItems, model serviceAllFileOptions.	services do: [ :svc | svc addDependent: model ].	^ aMenu 		addServices: services 		for: model		extraLines: (Array with: n1 with: n2 with: n3)! !!FileListWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 23:09'!noFileSelectedMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: model.	^ aMenu		addServices: model itemsForNoFile 		for: model		extraLines: #()! !!FileListWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 23:07'!volumeMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: model.	^ aMenu addList: #(			('delete directory...'		#deleteDirectory))! !!Inspector methodsFor: 'menu commands' stamp: 'jmv 4/22/2011 00:11'!fieldListMenu	"Arm the supplied menu with items for the field-list of the receiver"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('inspect (i)'							inspectSelection)		('explore (I)'						exploreSelection)		('basic inspect'						inspectBasic)		('explore pointers'					exploreObjectPointers)).	(object isKindOf: Dictionary) ifTrue: [ aMenu addList: #(		-		('senders of this key'				sendersOfSelectedKey)		('add key'							addEntry)		('rename key'						renameEntry)		('remove'							removeSelection)) ]	ifFalse: [ (object isKindOf: Set) ifTrue: [ aMenu addList: #(		-		('remove'							removeSelection))]].	aMenu addList: #(		-		('browse full (b)'					browseMethodFull)		('browse hierarchy (h)'				classHierarchy)		('browse protocol (p)'				browseFullProtocol)).	^ aMenu! !!Inspector methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 22:32'!inspectorKey: aChar from: view	"Respond to a Command key issued while the cursor is over my field list"	aChar == $i ifTrue: [^ self selection inspect].	aChar == $I ifTrue: [^ self selection explore].	aChar == $b ifTrue:[^ self browseMethodFull].	aChar == $h ifTrue:[^ self classHierarchy].	aChar == $p ifTrue: [^ self browseFullProtocol].	aChar == $N ifTrue: [^ self browseClassRefs].	^ self arrowKey: aChar from: view! !!ContextVariablesInspector methodsFor: 'selecting' stamp: 'laza 3/22/2010 11:01'!contentsIsString	"Hacked so contents empty when deselected and = long printString when item 3"	^ (selectionIndex = 3) | (selectionIndex = 0)! !!MessageNames methodsFor: 'selector list' stamp: 'jmv 4/20/2011 22:31'!selectorListMenu	"Answer the menu associated with the selectorList"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: #(		('senders (n)'					browseSenders		'browse senders of the chosen selector')	).	^ aMenu! !!MessageNames methodsFor: 'initialization' stamp: 'jmv 4/20/2011 22:31'!selectorListKey: aChar from: view	"Respond to a Command key in the message-list pane."	aChar == $n ifTrue: [ ^ self browseSenders ].	aChar == $b ifTrue: [ ^ self browseMethodFull ].	aChar == $m ifTrue: [ ^ self browseImplementors ].! !!MessageNamesWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 23:27'!buildMorphicWindow	"Answer a morphic window with the given initial search string, nil if none""MessageNames openMessageNames"	| selectorListView firstRow searchButton textMorph secondRow |	textMorph _ TextModelMorph 		textProvider: model		textGetter: #searchString 		textSetter: #searchString:.	textMorph setProperty: #alwaysAccept toValue: true.	textMorph askBeforeDiscardingEdits: false.	textMorph acceptOnCR: true.	textMorph setTextColor: Color brown.	textMorph hideScrollBarsIndefinitely.	textMorph textMorph		on: #mouseEnter send: #selectAll to: textMorph textMorph.	searchButton _ PluggableButtonMorph new 		model: textMorph;		label: 'Search';		action: #accept.	searchButton setBalloonText: 'Type some letters into the pane at right, and then press this Search button (or hit RETURN) and all method selectors that match what you typed will appear in the list pane below.  Click on any one of them, and all the implementors of that selector will be shown in the right-hand pane, and you can view and edit their code without leaving this tool.'.	firstRow _ LayoutMorph newRow.	firstRow		addMorph: searchButton proportionalWidth: 0.25;		addMorph: textMorph proportionalWidth: 0.75.	selectorListView _ PluggableListMorph 		model: model		listGetter: #selectorList		indexGetter: #selectorListIndex		indexSetter: #selectorListIndex:		menuGetter: (MessageSend receiver: self selector: #selectorListMenu)		keystrokeAction: #selectorListKey:from:.	secondRow _  LayoutMorph newRow.	secondRow		addMorph: selectorListView proportionalWidth: 0.5;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.5.	self layoutMorph		addMorph: firstRow fixedHeight: self defaultButtonPaneHeight+4;		addAdjusterAndMorph: secondRow proportionalHeight: 0.5;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.5.	model changed: #editSelection! !!MessageNamesWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 23:27'!selectorListMenu	"Answer the menu associated with the selectorList"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('senders (n)'	browseSenders	'browse senders of the chosen selector')	).	^ aMenu! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/20/2011 22:31'!explorerKey: aChar from: view	"Similar to #genericMenu:..."	| insideObject parentObject |	currentSelection ifNotNil: [		insideObject _ self object.		parentObject _ self parentObject.		inspector ifNil: [inspector _ Inspector new].		inspector			inspect: parentObject;			object: insideObject.		aChar == $i ifTrue: [^ self inspectSelection].		aChar == $I ifTrue: [^ self exploreSelection].		aChar == $b ifTrue:	[^ inspector browseMethodFull].		aChar == $h ifTrue:	[^ inspector classHierarchy].		aChar == $p ifTrue: [^ inspector browseFullProtocol].		aChar == $N ifTrue: [^ inspector browseClassRefs]].	^ self arrowKey: aChar from: view! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/20/2011 22:52'!genericMenu	"Borrow a menu from my inspector"	| insideObject parentObject aMenu |	aMenu := MenuMorph new defaultTarget: self.	currentSelection		ifNil: [			aMenu				add: '*nothing selected*'				target: self				selector: #yourself]		ifNotNil: [			insideObject _ self object.			parentObject _ self parentObject.			inspector				ifNil: [inspector _ Inspector new].			inspector inspect: parentObject;				 object: insideObject.			aMenu _ inspector fieldListMenu.			aMenu defaultTarget: inspector.			aMenu items				do: [:i | (#(#inspectSelection #exploreSelection #exploreObjectPointers) includes: i selector)						ifTrue: [i target: self]].			aMenu addLine;				add: 'monitor changes'				target: self				selector: #monitor:				argument: currentSelection].	monitorList isEmptyOrNil		ifFalse: [aMenu addLine;				add: 'stop monitoring all'				target: self				selector: #stopMonitoring].	^ aMenu! !!ProcessBrowser methodsFor: 'process list' stamp: 'jmv 4/20/2011 22:00'!processListMenu	| pw menu |	menu := MenuMorph new defaultTarget: self.	selectedProcess		ifNotNil: [			| nameAndRules | 			nameAndRules _ self nameAndRulesForSelectedProcess.			menu addList: #(				('inspect (i)'					#inspectProcess)				('explore (I)'				#exploreProcess)				('inspect Pointers (P)'		#inspectPointers)).			nameAndRules second				ifTrue: [					menu add: 'terminate (t)' action: #terminateProcess.					selectedProcess isSuspended						ifTrue: [menu add: 'resume (r)' action: #resumeProcess]						ifFalse: [menu add: 'suspend (s)' action: #suspendProcess]].			nameAndRules third				ifTrue: [					menu addList: #(						('change priority (p)'		 	#changePriority)						('debug (d)'						#debugProcess))].			menu addList: #(('profile messages (m)'	#messageTally)).			(selectedProcess suspendingList isKindOf: Semaphore)				ifTrue: [menu add: 'signal Semaphore (S)' action: #signalSemaphore].			menu add: 'full stack (k)' action: #moreStack.			menu addLine].	menu addList: #(		('find context... (f)'		#findContext)		('find again (g)'			#nextContext)).	menu addLine.	menu		add: (self isAutoUpdating				ifTrue: ['turn off auto-update (a)']				ifFalse: ['turn on auto-update (a)'])		action: #toggleAutoUpdate.	menu add: 'update list (u)' action: #updateProcessList.	pw _ Smalltalk at: #CPUWatcher ifAbsent: nil.	pw ifNotNil: [		menu addLine.		pw isMonitoring				ifTrue: [ menu add: 'stop CPUWatcher' action: #stopCPUWatcher ]				ifFalse: [ menu add: 'start CPUWatcher' action: #startCPUWatcher  ]].	^ menu! !!ProcessBrowser methodsFor: 'stack list' stamp: 'jmv 4/20/2011 23:31'!stackListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	selectedContext		ifNil: [^ aMenu].	aMenu addList: #(		('inspect context (c)'		inspectContext)		('explore context (C)'		exploreContext)		('inspect receiver (i)'		inspectReceiver)		('explore receiver (I)'		exploreReceiver)		('browse (b)'				browseContext)).	^aMenu! !!ProgressBarMorph methodsFor: 'menu' stamp: 'jmv 4/20/2011 21:57'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu addList: #(		('progress color...'			#changeProgressColor:)		('progress value...'			#changeProgressValue:)	)! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 23:17'!buildUpperControls	| refreshButton filterButton stopButton runOneButton runButton row column1 column2 column3 theTestsList |	refreshButton _ self buildRefreshButton.	filterButton _ self buildFilterButton.	stopButton _ self buildStopButton.	column1 _ LayoutMorph newColumn.	column1 addMorphs: { refreshButton . filterButton . stopButton }.	theTestsList _ PluggableListMorphOfMany				model: model				listGetter: #tests				primarySelectionGetter: #selectedSuite				primarySelectionSetter: #selectedSuite:				listSelectionGetter: #listSelectionAt:				listSelectionSetter: #listSelectionAt:put:				menuGetter: (MessageSend receiver: self selector: #listMenu).	theTestsList autoDeselect: false.	theTestsList color: Color veryVeryLightGray.	column2 _ LayoutMorph newColumn.	column2		addMorph: theTestsList proportionalHeight: 1;		addMorph: self optionalButtonRow fixedHeight: self defaultButtonPaneHeight.	runOneButton _ self buildRunOneButton.	runButton _ self buildRunButton.		column3 _ LayoutMorph newColumn.	column3 addMorphs: { runOneButton . runButton }.		row _ LayoutMorph newRow.	row		addMorph: column1 fixedWidth: 80;		addMorph: column2 proportionalWidth: 1;		addMorph: column3 fixedWidth: 120.	^row! !!TestRunnerWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 23:16'!listMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: 'Test Cases'.	aMenu add: 'select all' target: model selector: #selectAll.	aMenu add: 'deselect all' target: model selector: #deselectAll.	aMenu add: 'toggle selections' target: model selector: #toggleSelections.	aMenu add: 'filter' target: model selector: #setFilter.	model runButtonState ifTrue: [		aMenu add: 'stop' target: model selector: #terminateRun		].	model selectedSuite > 0 ifTrue: [ | cls |		cls _ (model tests at: model selectedSuite ifAbsent: ['']) copyUpTo: Character space.		cls _ cls asSymbol.		cls _ (Smalltalk at: cls ifAbsent: nil).		cls ifNotNil: [			aMenu addLine.			aMenu add: 'browse' target: self selector: #browse: argument: cls.		].	].	aMenu addLine.	aMenu add: 'log to Transcript' target: model selector: #showResult.	^aMenu! !!TestRunnerWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 23:17'!browse: aClass	BrowserWindow fullOnClass: aClass selector: nil! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 4/20/2011 14:52'!changesMenu        "Build the changes menu for the world."        | menu |        menu _ self menu: 'changes...'.        self fillIn: menu from: {                { 'file out current change set' . { ChangeSet current . #verboseFileOut}.                                'Write the current change set out to a file whose name reflects the change set name and the current date & time.'}.                { 'create new change set...' . { ChangeSorter . #newChangeSet}. 'Create a new change set and make it the current one.'}.                nil.                { 'simple change sorter' . {self. #openChangeSorter1}.  'Open a 3-paned changed-set viewing tool'}.                { 'dual change sorter' . {self. #openChangeSorter2}.                                'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'}.                nil.                { 'browse recent submissions' . { Utilities . #browseRecentSubmissions}.                                'Open a new recent-submissions browser.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions.'}.                { 'find recent submissions' . { #myWorld . #openRecentSubmissionsBrowser:}.                                'Make an open recent-submissions browser be the front-window, expanding a collapsed one or creating a new one if necessary.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted, latest first.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions at the top of the browser.'}.                { 'recently logged changes...' . { ChangeList . #browseRecentLog}.'Open a change-list browser on the latter part of the changes log.  You can use this browser to recover logged changes which were not saved in your image, in the event of a crash or other interruption.'}.                nil.                { 'save world as morph file' . {self. #saveWorldInFile}. 'Save a file that, when reloaded, reconstitutes the current World.'}.        }.        ^ menu! !!VersionsBrowser methodsFor: 'menu' stamp: 'jmv 4/20/2011 13:56'!versionsMenu	"Fill aMenu with menu items appropriate to the receiver"	| aMenu |	self flag: #ojo. "borrar"	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'Versions'.	aMenu addStayUpIcons.	listIndex > 0 ifTrue:[		(list size > 1 ) ifTrue: [			aMenu addList: #(				('compare to current'		compareToCurrentVersion		'compare selected version to the current version')				('compare to version...'		compareToOtherVersion		'compare selected version to another selected version'))].		"Note: Revert to selected should be visible for lists of length one for having the ability to revert to an accidentally deleted method"		 aMenu addList: #(			('revert to selected version'	fileInSelections					'resubmit the selected version, so that it becomes the current version') )].	aMenu addList: #(		('remove from changes'	removeMethodFromChanges	'remove this method from the current change set, if present')		('edit current method (O)'	openSingleMessageBrowser	'open a single-message browser on the current version of this method')				('find original change set'	findOriginalChangeSet			'locate the changeset which originally contained this version')		-		('toggle diffing (D)'			toggleDiffing					'toggle whether or not diffs should be shown here')		('update list'				reformulateList					'reformulate the list of versions, in case it somehow got out of synch with reality')		-		('senders (n)'				browseSenders					'browse all senders of this selector')		('implementors (m)'			browseImplementors			'browse all implementors of this selector')		-		('help...'						offerVersionsHelp				'provide an explanation of the use of this tool')).								^aMenu! !!ClassCommentVersionsBrowser methodsFor: 'menu' stamp: 'jmv 4/20/2011 13:56'!versionsMenu	"Fill aMenu with menu items appropriate to the receiver"	| aMenu |	self flag: #ojo. "borrar"	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'versions'.	aMenu addStayUpIcons.	^ aMenu addList: #(		('compare to current'			compareToCurrentVersion		'compare selected version to the current version')		('revert to selected version'	fileInSelections					'resubmit the selected version, so that it becomes the current version')		('remove from changes'		removeMethodFromChanges	'remove this method from the current change set, if present')			-		('toggle diffing (D)'				toggleDiffing					'toggle whether or not diffs should be shown here')		('update list'					reformulateList					'reformulate the list of versions, in case it somehow got out of synch with reality')		-		('help...'							offerVersionsHelp				'provide an explanation of the use of this tool'))! !!VersionsBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/20/2011 13:57'!buildMorphicWindow	"Open a morphic view for the messageSet, whose label is labelString. 	The listView may be either single or multiple selection type"	| listPane |	listPane _ PluggableListMorph		model: model		listGetter: #list		indexGetter: #listIndex		indexSetter: #toggleListIndex:		menuGetter: (MessageSend receiver: self selector: #listMenu).	listPane keystrokeActionSelector: #changeListKey:from:.		self layoutMorph		addMorph: listPane proportionalHeight: 0.4;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6! !!VersionsBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 14:16'!classCommentVersionsMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: model.				"all commands are implemented by the model, not the view"	aMenu title: 'versions'.	aMenu addStayUpIcons.	^ aMenu addList: #(		('compare to current'			compareToCurrentVersion		'compare selected version to the current version')		('revert to selected version'	fileInSelections					'resubmit the selected version, so that it becomes the current version')		('remove from changes'		removeMethodFromChanges	'remove this method from the current change set, if present')			-		('toggle diffing (D)'				toggleDiffing					'toggle whether or not diffs should be shown here')		('update list'					reformulateList					'reformulate the list of versions, in case it somehow got out of synch with reality')		-		('help...'							offerVersionsHelp				'provide an explanation of the use of this tool'))! !!VersionsBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 13:50'!listMenu	^model classCommentIndicated		ifTrue: [ self classCommentVersionsMenu ]		ifFalse: [ self methodVersionsMenu]! !!VersionsBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/20/2011 14:18'!methodVersionsMenu	"Fill aMenu with menu items appropriate to the receiver"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: 'Versions'.	aMenu addStayUpIcons.	model listIndex > 0 ifTrue:[		(model list size > 1 ) ifTrue: [			aMenu addList: #(				('compare to current'		compareToCurrentVersion		'compare selected version to the current version'									model)				('compare to version...'		compareToOtherVersion		'compare selected version to another selected version'							model))].		"Note: Revert to selected should be visible for lists of length one for having the ability to revert to an accidentally deleted method"		 aMenu addList: #(			('revert to selected version'	fileInSelections					'resubmit the selected version, so that it becomes the current version'			model) )].	aMenu addList: #(		('remove from changes'	removeMethodFromChanges	'remove this method from the current change set, if present'								model)		('edit current method (O)'	openSingleMessageBrowser	'open a single-message browser on the current version of this method')				('find original change set'	findOriginalChangeSet			'locate the changeset which originally contained this version')		-		('toggle diffing (D)'			toggleDiffing					'toggle whether or not diffs should be shown here'										model)		('update list'				reformulateList					'reformulate the list of versions, in case it somehow got out of synch with reality'			model)		-		('senders (n)'				browseSenders					'browse all senders of this selector')		('implementors (m)'			browseImplementors			'browse all implementors of this selector')		-		('help...'						offerVersionsHelp				'provide an explanation of the use of this tool'												model)).								^aMenu! !!VersionsBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/20/2011 14:20'!findOriginalChangeSet	| changeSet |	model currentChange ifNil: [^ self].	changeSet _ model currentChange originalChangeSetForSelector: model selectedMessageName.	changeSet = #sources ifTrue: [		^ self inform: 'This version is in the .sources file.'].	changeSet ifNil: [		^ self inform: 'This version was not found in any changeset nor in the .sources file.'].	ChangeSorterWindow open: (ChangeSorter new myChangeSet: changeSet) label: nil! !!VersionsBrowserWindow reorganize!('GUI building' buildMorphicWindow buttonSpecs windowColor)('menu building' classCommentVersionsMenu listMenu methodVersionsMenu)('menu commands' findOriginalChangeSet)!TheWorldMenu removeSelector: #lookForSlips!!TestRunnerWindow reorganize!('GUI building' buildDetailsText buildErrorsList buildFailuresList buildFilterButton buildLowerPanes buildMorphicWindow buildPassFailText buildRefreshButton buildRunButton buildRunOneButton buildStopButton buildUpperControls optionalButtonRow optionalButtonTuples windowColor)('constants' runButtonColor)('updating' refreshTests refreshWindow update: updateColors updatePartColors:)('menu building' listMenu)('menu commands' browse:)!SetInspector removeSelector: #copyName!SetInspector removeSelector: #fieldListMenu!Preference removeSelector: #copyName!ObjectExplorer removeSelector: #defsOfSelection!ObjectExplorer removeSelector: #objectReferencesToSelection!ObjectExplorer removeSelector: #referencesToSelection!MorphExtension removeSelector: #inspectElement!!MessageNamesWindow reorganize!('GUI building' buildMorphicWindow windowColor)('menu building' selectorListMenu)!MessageNames removeSelector: #copyName!DictionaryInspector removeSelector: #copyName!DictionaryInspector removeSelector: #fieldListMenu!DictionaryInspector removeSelector: #selectionReferences!Inspector removeSelector: #addCollectionItemsTo:!Inspector removeSelector: #browseClassRefs!Inspector removeSelector: #browseClassVariables!Inspector removeSelector: #browseInstVarDefs!Inspector removeSelector: #browseInstVarRefs!Inspector removeSelector: #classVarRefs!Inspector removeSelector: #copyName!Inspector removeSelector: #defsOfSelection!Inspector removeSelector: #inspectElement!Inspector removeSelector: #objectReferencesToSelection!Inspector removeSelector: #referencesToSelection!!FileListWindow reorganize!('GUI building' buildMorphicWindow buttonToTriggerIn:for: morphicDirectoryTreePane morphicFileContentsPane morphicFileListPane morphicPatternPane optionalButtonRow updateButtonRow: windowColor)('menu building' fileListMenu fileSelectedMenu noFileSelectedMenu volumeMenu)!FileList removeSelector: #volumeMenu!DualChangeSorterWindow removeSelector: #buildMorphicUIIn:!!DualChangeSorterWindow reorganize!('GUI building' buildMorphicUIIn:for: buildMorphicWindow windowColor)('updating' decorateForInheritance)('menu building' changeSetMenuFor: classListMenuFor: messageMenuFor: shiftedChangeSetMenuFor:)('menu commands' browseMethodConflicts: browseMethodConflictsWithOtherSide: offerShiftedChangeSetMenuFor: offerUnshiftedChangeSetMenuFor:)!DebuggerWindow removeSelector: #addCollectionItemsTo:for:!DebuggerWindow removeSelector: #browseReceiverFull!DebuggerWindow removeSelector: #browseReceiverFullProtocol!DebuggerWindow removeSelector: #exploreReceiverObjectPointers!DebuggerWindow removeSelector: #fieldListMenuFor:!DebuggerWindow removeSelector: #inspectReceiverSelection!DebuggerWindow removeSelector: #messageListMenu!DebuggerWindow removeSelector: #receiverInspectBasic!DebuggerWindow removeSelector: #shiftedContextStackMenu!DebuggerWindow removeSelector: #shiftedMessageListMenu!!DebuggerWindow reorganize!('GUI building' buildLowerPanes buildMorphicWindow customButtonRow customButtonSpecs optionalButtonTuples windowColor)('updating' update:)('menu building' contextFieldListMenu contextStackMenu receiverFieldListMenu)('menu commands' contextClassHierarchy exploreContextSelection exploreReceiverSelection receiverClassHierarchy)!ChangeSorter class removeSelector: #reorderChangeSets!ChangeSorter removeSelector: #browsemethodConflicts!ChangeSorter removeSelector: #changeSetCurrentlyDisplayed!ChangeSorter removeSelector: #checkForAlienAuthorship!ChangeSorter removeSelector: #checkForAnyAlienAuthorship!ChangeSorter removeSelector: #checkForUnclassifiedMethods!ChangeSorter removeSelector: #checkForUncommentedClasses!ChangeSorter removeSelector: #checkForUncommentedMethods!ChangeSorter removeSelector: #checkForUnsentMessages!ChangeSorter removeSelector: #clearChangeSet!ChangeSorter removeSelector: #inspectChangeSet!ChangeSorter removeSelector: #lookForSlips!ChangeSorter removeSelector: #methodConflictsWithOppositeCategory!ChangeSorter removeSelector: #promoteToTopChangeSet!ChangeSorter removeSelector: #removeContainedInClassCategories!ChangeSorter removeSelector: #reorderChangeSets!ChangeSorter removeSelector: #shiftedClassListMenu!ChangeSorter removeSelector: #shiftedMessageListMenu!ChangeSorter removeSelector: #shiftedMessageMenu!ChangeSorter removeSelector: #uninstallChangeSet!ChangeList removeSelector: #browseAllVersionsOfSelections!CodeProvider removeSelector: #copyName!!ChangeSorterWindow reorganize!('GUI building' buildMorphicWindow windowColor)('menu building' changeSetMenu classListMenu messageMenu shiftedChangeSetMenu)('menu commands' browseMethodConflicts browseMethodConflictsWithOtherSide browseVersions offerShiftedChangeSetMenu offerUnshiftedChangeSetMenu)!ChangeSet removeSelector: #checkForAlienAuthorship!ChangeSet removeSelector: #checkForAnyAlienAuthorship!ChangeSet removeSelector: #checkForUnclassifiedMethods!ChangeSet removeSelector: #checkForUncommentedClasses!ChangeSet removeSelector: #checkForUncommentedMethods!ChangeSet removeSelector: #checkForUnsentMessages!ChangeSet removeSelector: #lookForSlips!ChangeSet removeSelector: #uninstall!!ChangeListWindow reorganize!('GUI building' buildMorphicCodePane buildMorphicWindow buttonSpecs optionalButtonRow windowColor)('menu commands' browseCurrentVersionsOfSelections browseVersions)('menu building' listMenu)!