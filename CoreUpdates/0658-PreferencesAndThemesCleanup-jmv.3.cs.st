'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 23 November 2010 at 12:05:47 pm'!!ColorTheme methodsFor: 'colors' stamp: 'jmv 11/23/2010 11:57'!insertionPoint	^ Display depth <= 2		ifTrue: [ Color black ]		ifFalse: [ self text ]! !!ColorTheme methodsFor: 'menu colors' stamp: 'jmv 11/23/2010 11:51'!menu	| c |	Display depth <= 2 ifTrue: [^ Color white].	c := 0.91.	^ Color		r: c		g: 1.0		b: c! !!ColorTheme methodsFor: 'menu colors' stamp: 'jmv 11/23/2010 11:51'!menuTitleBar	Display depth = 1 ifTrue: [^ Color white].	Display depth = 2 ifTrue: [^ Color gray].	^ self menu twiceDarker! !!ColorTheme class methodsFor: 'colors' stamp: 'jmv 11/23/2010 11:59'!beCurrent	CurrentPalette := self basicNew initialize.	SHTextStylerST80 initialize.	World color: ColorTheme current background.	ThreePhaseButtonMorph initialize.	SystemWindow initialize.	^ CurrentPalette! !!EntryField2LW methodsFor: 'drawing' stamp: 'jmv 11/23/2010 11:58'!drawCaretOn: aCanvas	|  w caretColor leftX top bottom |	top _ bounds top + 4.	bottom _ top + font height + 1.	leftX _ (font widthOfString: contents from: 1 to: editor startIndex-1) + bounds left + 4.	w := 3.	caretColor := ColorTheme current insertionPoint.		1 to: w do: [:i |		"Draw caret triangles at top and bottom"		aCanvas fillRectangle: ((leftX - w + i - 1) @ (top + i - 1) 				extent: ((w - i) * 2 + 4) @ 1)			color: caretColor.		aCanvas fillRectangle: ((leftX - w + i - 1) @ (bottom - i) 				extent: ((w - i) * 2 + 4) @ 1)			color: caretColor].	aCanvas fillRectangle: (leftX @ top corner: leftX+2 @ bottom)		color: caretColor! !!CellStyleEntryFieldLW methodsFor: 'drawing' stamp: 'jmv 11/23/2010 11:57'!drawCaretOn: aCanvas	| top bottom leftX rightX |	editor isInCellShiftMode not ifTrue: [		^super drawCaretOn: aCanvas ].		top _ bounds top + 4.	bottom _ top + font height + 1.	leftX _ (font widthOfString: contents from: 1 to: editor startIndex-2) + bounds left + 4.	rightX _ (font widthOfString: contents from: 1 to: editor stopIndex-1) + bounds left + 6.	aCanvas		fillRectangle: (leftX @ top corner: rightX @ bottom)		color: ColorTheme current insertionPoint! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 11/23/2010 11:50'!setDefaultParameters	"change the receiver's appareance parameters"	self		setColor: ColorTheme current menu		borderWidth: Preferences menuBorderWidth		borderColor: #raised! !!MenuLineMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 11:47'!drawOn: aCanvas 	| baseColor |	baseColor := owner color.	aCanvas		fillRectangle: (bounds topLeft corner: bounds rightCenter)		color: baseColor twiceDarker.				aCanvas		fillRectangle: (bounds leftCenter corner: bounds bottomRight)		color: baseColor twiceLighter! !!MenuMorph methodsFor: 'initialization' stamp: 'jmv 11/23/2010 11:50'!setDefaultParameters	self		setColor: ColorTheme current menu		borderWidth: Preferences menuBorderWidth		borderColor: #raised! !!MenuMorph methodsFor: 'initialization' stamp: 'jmv 11/23/2010 11:52'!setTitleParametersFor: aMenuTitle 	aMenuTitle		setColor: ColorTheme current menuTitleBar		borderWidth: Preferences menuTitleBorderWidth		borderColor: #inset! !!NewParagraph methodsFor: 'display' stamp: 'jmv 11/23/2010 11:58'!displayClassicInsertionMarkAtX: x top: top bottom: bottom emphasis: emphasis on: aCanvas	| caretColor e x1 x2 isBold isItalic x0 xtraWidth |	isBold _ emphasis allMask: 1.	isItalic _ emphasis allMask: 2.	caretColor _ ColorTheme current insertionPoint.	xtraWidth _ isBold ifTrue: [ 1 ] ifFalse: [ 0 ].	isItalic ifTrue: [		x0 _ x - 2.		x1 _ x0 - 2.		x2 _ x0 - 6 ]	ifFalse: [		x0 _ x.		x1 _ x0 - 4.		x2 _ x1 ].	1 to: 2 do: [ :i | 		"Draw caret triangles at top and bottom"		e _ (2 - i) * 2 + 4+xtraWidth @ 1.		aCanvas fillRectangle: (x1 + i @ (top + i - 1) extent: e)			color: caretColor.		aCanvas fillRectangle: (x2 + i @ (bottom - i) extent: e)			color: caretColor].	aCanvas fillRectangle: (x0-1 @ top corner: x0+1+xtraWidth @ bottom)		color: caretColor! !!NewParagraph methodsFor: 'display' stamp: 'jmv 11/23/2010 11:58'!displayThinInsertionMarkAtX: x top: top bottom: bottom emphasis: emphasis on: aCanvas	| caretColor x1 isBold isItalic x0 h w halfW r |	isBold _ emphasis allMask: 1.	isItalic _ emphasis allMask: 2.	caretColor _ ColorTheme current insertionPoint.	h _ bottom - top.	w _ isBold		ifTrue: [ h // 25 + 2 ]		ifFalse: [ h // 30 + 1 ].	halfW _ w // 2.	isItalic		ifTrue: [				x0 _ x - (h * 1 // 22) - 3.			x1 _ x + (h * 4 // 22 ) - 3.			isBold ifTrue: [				x0 _ x0 - 3.				x1 _ x1 - 3 ]]		ifFalse: [			x0 _ x.			x1 _ x].	x0 < halfW ifTrue: [		x1 _ x1 - x0 + halfW.		x0 _ halfW ].	r _ container right-halfW-1.	r < x1 ifTrue: [		x0 _ x0 + r - x1.		x1 _ r.		].	caretRect _ x0-halfW@ top corner: x1+halfW+1 @ bottom.	aCanvas		line: x0@(bottom-halfW) to: x1@(top+halfW)		width: w color: caretColor! !!OneLineEditorMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 11:58'!drawCaretOn: aCanvas	"Essentially copied from #displayInsertionMarkAtX:top:bottom:emphasis:on:"	|  caretColor top bottom x isBold isItalic xtraWidth x0 x1 x2 e |	top _ bounds top.	bottom _ top + self baseFont height.	x _ (self fontToUse widthOfString: contents from: 1 to: editor startIndex-1) + bounds left.	isBold _ emphasis allMask: 1.	isItalic _ emphasis allMask: 2.	caretColor _ ColorTheme current insertionPoint.	xtraWidth _ isBold ifTrue: [ 1 ] ifFalse: [ 0 ].	isItalic ifTrue:		[x0 _ x - 2.		x1 _ x0 - 2.		x2 _ x0 - 6 ]	ifFalse:		[x0 _ x.		x1 _ x0 - 4.		x2 _ x1 ].	1 to: 2 do: [ :i | 		"Draw caret triangles at top and bottom"		e _ (2 - i) * 2 + 4+xtraWidth @ 1.		aCanvas fillRectangle: (x1 + i @ (top + i - 1) extent: e)			color: caretColor.		aCanvas fillRectangle: (x2 + i @ (bottom - i) extent: e)			color: caretColor].	aCanvas fillRectangle: (x0-1 @ top corner: x0+1+xtraWidth @ bottom)		color: caretColor! !!PluggableListMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 11:53'!drawOn: aCanvas	super drawOn: aCanvas.	(drawKeyboardFocusIndicator and: [ self hasKeyboardFocus ]) ifTrue: [		aCanvas			frameRectangle: self focusIndicatorRectangle			width: Preferences focusIndicatorWidth			color: ColorTheme current focusIndicator ].! !!PluggableTextMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 11:53'!drawOn: aCanvas 	"Include a thin red inset border for unaccepted edits, or, if the unaccepted edits are known to conflict with a change made somewhere else to the same method (typically), put a thick red frame"	| bw bc |	super drawOn: aCanvas.	bw _ Preferences focusIndicatorWidth.	bc _ nil.	self wantsFrameAdornments ifTrue: [		((model is: #CodeHolder) and: [model refusesToAcceptCode])			ifTrue: [  "Put up feedback showing that code cannot be submitted in this state"				bc _ Color tan]			ifFalse: [				self hasEditingConflicts					ifTrue: [						bw _ 3.						bc _ Color red ] 					ifFalse: [						self hasUnacceptedEdits							ifTrue: [								model wantsDiffFeedback									ifTrue: [										bw _ 4.										bc _ Color green]									ifFalse: [										bc _ Color red]]							ifFalse: [								model wantsDiffFeedback									ifTrue: [										bc _ Color green]									ifFalse: []]]]].	(drawKeyboardFocusIndicator and: [ textMorph hasKeyboardFocus ]) ifTrue: [		bc ifNil: [			bc _ ColorTheme current focusIndicator ]]	ifFalse: [		bc ifNotNil: [			bc _ bc alphaMixed: 0.4 with: Color white ]].	bc ifNotNil: [		aCanvas frameRectangle: self focusIndicatorRectangle width: bw color: bc ]! !!Preferences class methodsFor: 'menu parameters' stamp: 'jmv 11/23/2010 11:52'!restoreDefaultMenuParameters	"Restore the four color choices of the original implementors of  	MorphicMenus"	" 	Preferences restoreDefaultMenuParameters	"	Parameters				at: #menuBorderWidth		put: 2;			at: #menuTitleBorderWidth		put: 1! !!Preferences class methodsFor: 'misc' stamp: 'jmv 11/23/2010 11:59'!addModelItemsToWindowMenu: aMenu	aMenu addLine.	aMenu add: 'restore default preference settings' target: self action: #chooseInitialSettings! !!Preferences class methodsFor: 'parameters' stamp: 'jmv 11/23/2010 12:00'!initializeParameters	"Preferences initializeParameters"	Parameters _ IdentityDictionary new.	self restoreDefaultMenuParameters.	Parameters at: #maxBalloonHelpLineLength put: 28! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 11:46'!brightSqueak	"The classic bright Squeak look.  Windows have saturated colors and relatively low contrast; scroll-bars are of the flop-out variety and are on the left.  Many power-user features are enabled."	self setPreferencesFrom:	#(		(annotationPanes true)		(automaticFlapLayout true)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(debugHaloHandle true)		(debugPrintSpaceLog false)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(hiddenScrollBars false)		(inboardScrollbars false)		(logDebuggerStackToFile true)		(menuKeyboardControl true)		(optionalButtons true)		(personalizedWorldMenu true)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(scrollBarsWithoutMenuButton false)		(selectiveHalos false)		(simpleMenus false)		(smartUpdating true)		(systemWindowEmbedOK false)		(thoroughSenders true)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 11:46'!defaultValueTableForCurrentRelease	"Answer a table defining default values for all the preferences in the release.  Returns a list of (pref-symbol, boolean-symbol) pairs"	^  #(		(alternativeBrowseIt false)		(annotationPanes false)		(automaticFlapLayout true)		(automaticPlatformSettings true)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(canRecordWhilePlaying false)		(caseSensitiveFinds false)		(changeSetVersionNumbers true)		(checkForSlips true)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(conversionMethodsAtFileOut false)		(cpuWatcherEnabled false)		(debugHaloHandle true)		(debugPrintSpaceLog false)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose false)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(hiddenScrollBars false)		(higherPerformance false)		(honorDesktopCmdKeys true)		(inboardScrollbars true)		(logDebuggerStackToFile true)		(menuKeyboardControl false)  		(modalColorPickers true)		(optionalButtons true)		(personalizedWorldMenu true)		(projectsSentToDisk false)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(scrollBarsWithoutMenuButton false)		(selectiveHalos false)		(showBoundsInHalo false)		(simpleMenus false)		(smartUpdating true)		(soundQuickStart false)		(soundStopWhenDone false)		(soundsEnabled true)		(systemWindowEmbedOK false)		(thoroughSenders true)		(twentyFourHourFileStamps true)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))"Preferences defaultValueTableForCurrentRelease do:	[:pair | (Preferences preferenceAt: pair first ifAbsent: [nil]) ifNotNilDo:			[:pref | pref defaultValue: (pair last == #true)]].Preferences chooseInitialSettings."! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 11:46'!juans	self setPreferencesFrom:	#(		(annotationPanes true)		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips true)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(honorDesktopCmdKeys false)		(inboardScrollbars true)		(menuKeyboardControl true)		(optionalButtons true)		(extraDebuggerButtons true)		(personalizedWorldMenu false)		(restartAlsoProceeds false)		(scrollBarsWithoutMenuButton true)		(simpleMenus false)		(smartUpdating true)		(subPixelRenderFonts true)		(thoroughSenders true)	)! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 11:45'!paloAlto	"Similar to the brightSqueak theme, but with a number of idiosyncratic personal settings.   Note that caseSensitiveFinds is true"	self setPreferencesFrom:	#(		(accessOnlineModuleRepositories noOpinion)		(alternativeBrowseIt noOpinion)		(annotationPanes true)		(automaticFlapLayout true)		(automaticPlatformSettings noOpinion)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(canRecordWhilePlaying noOpinion)		(caseSensitiveFinds true)		(changeSetVersionNumbers true)		(checkForSlips true)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(conservativeModuleDeActivation noOpinion)		(conversionMethodsAtFileOut true)		(cpuWatcherEnabled noOpinion)		(debugHaloHandle true)		(debugPrintSpaceLog true)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose true)		(duplicateControlAndAltKeys false)		(extraDebuggerButtons true)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(hiddenScrollBars false)		(higherPerformance noOpinion)		(honorDesktopCmdKeys true)		(inboardScrollbars false)		(logDebuggerStackToFile true)		(menuKeyboardControl true)  		(modalColorPickers true)		(modularClassDefinitions noOpinion)		(optionalButtons true)		(personalizedWorldMenu true)		(projectsSentToDisk noOpinion)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(scrollBarsWithoutMenuButton false)		(selectiveHalos false)		(showBoundsInHalo false)		(simpleMenus false)		(smartUpdating true)		(soundQuickStart noOpinion)		(soundsEnabled true)		(soundStopWhenDone noOpinion)		(strongModules noOpinion)		(swapControlAndAltKeys noOpinion)		(swapMouseButtons  noOpinion)		(systemWindowEmbedOK false)		(thoroughSenders true)		(twentyFourHourFileStamps false)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 11:45'!slowMachine	self setPreferencesFrom:	#(		(annotationPanes false)		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(honorDesktopCmdKeys false)		(inboardScrollbars true)		(menuKeyboardControl false)		(optionalButtons false)		(personalizedWorldMenu false)		(restartAlsoProceeds false)		(scrollBarsWithoutMenuButton false)		(simpleMenus false)		(smartUpdating false)		(subPixelRenderFonts false)		(thoroughSenders false)	)! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 11:45'!smalltalk80	"A traditional monochrome Smalltalk-80 look and feel, clean and austere, and lacking many features added to Squeak in recent years. Caution: this theme removes the standard Squeak flaps, turns off the 'smartUpdating' feature that keeps multiple browsers in synch, and much more."	self setPreferencesFrom:	#(		(annotationPanes false)		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(honorDesktopCmdKeys false)		(inboardScrollbars false)		(menuKeyboardControl false)		(optionalButtons false)		(personalizedWorldMenu false)		(restartAlsoProceeds false)		(scrollBarsWithoutMenuButton false)		(simpleMenus false)		(smartUpdating false)		(thoroughSenders false)	)! !!SimpleHierarchicalListMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 11:53'!drawOn: aCanvas	super drawOn: aCanvas.	(drawKeyboardFocusIndicator and: [ self hasKeyboardFocus ]) ifTrue: [		aCanvas			frameRectangle: self focusIndicatorRectangle 			width: Preferences focusIndicatorWidth			color: ColorTheme current focusIndicator ].	selectedMorph  ifNotNil:		[aCanvas fillRectangle:			((selectedMorph bounds: selectedMorph bounds in: self)						intersect: scroller bounds)				color: (ColorTheme current listHighlightFocused: self hasKeyboardFocus)].	Preferences showLinesInHierarchyViews ifTrue:[		self drawLinesOn: aCanvas.	].! !!TestRunner methodsFor: 'constants' stamp: 'jmv 11/23/2010 12:03'!runButtonColor	^ Color green lighter duller! !!TestRunner methodsFor: 'constants' stamp: 'jmv 11/23/2010 12:04'!runButtonOffColor	^ Color yellow lighter duller! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 11/23/2010 12:02'!buildTestsList	| column buttonRow |	column _ AlignmentMorph proportional.	testsList _ PluggableListMorphOfMany				model: self				listGetter: #tests				primarySelectionGetter: #selectedSuite				primarySelectionSetter: #selectedSuite:				listSelectionGetter: #listSelectionAt:				listSelectionSetter: #listSelectionAt:put:				menuGetter: #listMenu:shifted:.	testsList autoDeselect: false.	column		addMorph: testsList		fullFrame: (LayoutFrame				fractions: (0 @ 0 corner: 1 @ 0.75)).	buttonRow _ self optionalButtonRow.	buttonRow color: Color transparent.	column		addMorph: buttonRow		fullFrame: (LayoutFrame				fractions: (0 @ 0.76 corner: 1 @ 1)).	^ column! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 11/23/2010 12:03'!buildUpperControls	| refreshButton filterButton stopButton runOneButton runButton row bWidth listsMorph |	row _ AlignmentMorph proportional.	refreshButton _ self buildRefreshButton.	filterButton _ self buildFilterButton.	stopButton _ self buildStopButton.	runOneButton _ self buildRunOneButton.	runButton _ self buildRunButton.	listsMorph _ self buildTestsList.	bWidth _ 90.	row		addMorph: refreshButton		fullFrame: (LayoutFrame				fractions: (0 @ 0 corner: 0 @ 0.33)				offsets: (4 @ 2 corner: bWidth - 4 @ -2)).	row		addMorph: filterButton		fullFrame: (LayoutFrame				fractions: (0 @ 0.33 corner: 0 @ 0.66)				offsets: (4 @ 2 corner: bWidth - 4 @ -2)).	row		addMorph: stopButton		fullFrame: (LayoutFrame				fractions: (0 @ 0.66 corner: 0 @ 1)				offsets: (4 @ 2 corner: bWidth - 4 @ -2)).	row		addMorph: listsMorph		fullFrame: (LayoutFrame				fractions: (0 @ 0 corner: 1 @ 1)				offsets: (bWidth  @ 0 corner: bWidth negated @ 0)).	row		addMorph: runOneButton		fullFrame: (LayoutFrame				fractions: (1 @ 0 corner: 1 @ 0.5)				offsets: (bWidth negated + 4 @ 2 corner: -4 @ -2)).	row		addMorph: runButton		fullFrame: (LayoutFrame				fractions: (1 @ 0.5 corner: 1 @ 1)				offsets: (bWidth negated + 4 @ 2 corner: -4 @ -2)).	row color: Color transparent.	^ row! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 11/23/2010 11:45'!appearanceMenu	"Build the appearance menu for the world."		^self fillIn: (self menu: 'appearance...') from: {		{'system fonts...' . { self . #standardFontDo} . 'Choose the standard fonts to use for code, lists, menus, window titles, etc.'}.		nil.		{'full screen on' . { self . #fullScreenOn} . 'puts you in full-screen mode, if not already there.'}.		{'full screen off' . { self . #fullScreenOff} . 'if in full-screen mode, takes you out of it.'}.		nil.		{'set display depth...' . {self. #setDisplayDepth} . 'choose how many bits per pixel.'}.		{'set desktop color...' . {self. #changeBackgroundColor} . 'choose a uniform color to use as desktop background.'}.	}! !TheWorldMenu removeSelector: #menuColorString!Preferences class removeSelector: #focusIndicatorColor!Preferences class removeSelector: #initializeTextHighlightingParameters!Preferences class removeSelector: #insertionPointColor!Preferences class removeSelector: #insertionPointColor:!Preferences class removeSelector: #menuColor!Preferences class removeSelector: #menuColorFromWorld!Preferences class removeSelector: #menuColorString!Preferences class removeSelector: #menuTitleColor!Preferences class removeSelector: #toggleMenuColorPolicy!OneLineEditorMorph removeSelector: #insertionPointColor!NewParagraph removeSelector: #insertionPointColor!EntryField2LW removeSelector: #insertionPointColor!