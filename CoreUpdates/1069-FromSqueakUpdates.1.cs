'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 30 August 2011 at 10:48 pm'!!MessageSet commentStamp: '<historical>' prior: 0!Note: In Squeak, this class is not subclass of Browser anymore. See http://lists.squeakfoundation.org/pipermail/packages/2011-June/004764.html . It might make sense to do the same in Cuis.I represent a query path of the retrieval result of making a query about methods in the system. The result is a set of methods, denoted by a message selector and the class in which the method was found. As a TextProvider, the string I represent is the source code of the currently selected method. I am typically viewed in a Message Set Browser consisting of a MessageListView and a BrowserCodeView.!!CompiledMethod methodsFor: 'evaluating' stamp: 'jmv 8/30/2011 21:58'!valueWithReceiver: aReceiver arguments: anArray 	^self class receiver: aReceiver withArguments: anArray executeMethod: self! !!CompiledMethod class methodsFor: 'evaluating' stamp: 'ul 6/7/2011 21:58'!receiver: receiver withArguments: argArray executeMethod: compiledMethod	"Execute compiledMethod against the receiver and the arguments in argArray"	<primitive: 188>	^receiver withArgs: argArray executeMethod: compiledMethod! !!ContextPart methodsFor: 'private' stamp: 'jmv 8/30/2011 22:00'!doPrimitive: primitiveIndex method: meth receiver: receiver args: arguments 	"Simulate a primitive method whose index is primitiveIndex.  The	 simulated receiver and arguments are given as arguments to this message.	 Any primitive which provikes execution needs to be intercepted and simulated	 to avoid execution running away."	| value |	<primitive: 19> "Simulation guard"	"If successful, push result and return resuming context,		else ^ PrimitiveFailToken"	(primitiveIndex = 19) ifTrue:[		Debugger 			openContext: self			label:'Code simulation error'			contents: nil].	"ContextPart>>blockCopy:; simulated to get startpc right"	(primitiveIndex = 80 and: [receiver isKindOf: ContextPart]) 		ifTrue: [^self push: ((BlockContext newForMethod: receiver method)						home: receiver home						startpc: pc + 2						nargs: (arguments at: 1))].	(primitiveIndex = 81 and: [receiver isMemberOf: BlockContext]) "BlockContext>>value[:value:...]"		ifTrue: [^receiver pushArgs: arguments from: self].	(primitiveIndex = 82 and: [receiver isMemberOf: BlockContext]) "BlockContext>>valueWithArguments:"		ifTrue: [^receiver pushArgs: arguments first from: self].	primitiveIndex = 83 "afr 9/11/1998 19:50" "Object>>perform:[with:...]"		ifTrue: [^self send: arguments first to: receiver					with: arguments allButFirst					super: false].	primitiveIndex = 84 "afr 9/11/1998 19:50" "Object>>perform:withArguments:"		ifTrue: [^self send: arguments first to: receiver					with: (arguments at: 2)					super: false].	primitiveIndex = 188 ifTrue: [		arguments size = 2 ifTrue: [ "eem 5/27/2008 11:10 Object>>withArgs:executeMethod:"			^MethodContext				sender: self				receiver: receiver				method: (arguments at: 2)				arguments: (arguments at: 1) ].		arguments size = 3 ifTrue: [ "CompiledMethod class >> #receiver:withArguments:executeMethod:"			^MethodContext				sender: self				receiver: (arguments at: 1)				method: (arguments at: 3)				arguments: (arguments at: 2) ] ].	primitiveIndex = 189 ifTrue: [ "Object >> (#with:)*executeMethod"		^MethodContext			sender: self			receiver: receiver			method: arguments last			arguments: arguments allButLast ].	"Closure primitives"	(primitiveIndex = 200 and: [receiver == self]) ifTrue:		"ContextPart>>closureCopy:copiedValues:; simulated to get startpc right"		[^self push: (BlockClosure						outerContext: receiver						startpc: pc + 2						numArgs: arguments first						copiedValues: arguments last)].	((primitiveIndex between: 201 and: 205)			 "BlockClosure>>value[:value:...]"	or: [primitiveIndex between: 221 and: 222]) ifTrue: "BlockClosure>>valueNoContextSwitch[:]"		[^receiver simulateValueWithArguments: arguments caller: self].	primitiveIndex = 206 ifTrue:						"BlockClosure>>valueWithArguments:"		[^receiver simulateValueWithArguments: arguments first caller: self].	primitiveIndex = 120 ifTrue:[ "FFI method"		value := meth literals first tryInvokeWithArguments: arguments.	] ifFalse:[		arguments size > 6 ifTrue: [^PrimitiveFailToken].		value := primitiveIndex = 117 "named primitives"				ifTrue:[self tryNamedPrimitiveIn: meth for: receiver withArgs: arguments]				ifFalse:[receiver tryPrimitive: primitiveIndex withArgs: arguments].	].	^value == PrimitiveFailToken		ifTrue: [PrimitiveFailToken]		ifFalse: [self push: value]! !!SmalltalkEditor methodsFor: 'do-its' stamp: 'jmv 8/30/2011 22:08'!debug: aCompiledMethod receiver: anObject in: evalContext	| guineaPig debugger context |	guineaPig _ [		aCompiledMethod			valueWithReceiver: anObject			arguments: (evalContext ifNil: [ #() ] ifNotNil: [ { evalContext } ]) ] newProcess.	context _ guineaPig suspendedContext.	debugger _ Debugger new		process: guineaPig		controller: nil		context: context.	debugger openFullNoSuspendLabel: 'Debug it'.	[debugger interruptedContext method == aCompiledMethod]		whileFalse: [debugger send]! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 8/30/2011 22:39'!changesMenu        "Build the changes menu for the world."	| menu |	menu _ self menu: 'Changes...'.	self fillIn: menu from: {		{ 'File out current Change Set' . { ChangeSet current . #verboseFileOut}.				'Write the current change set out to a file whose name reflects the change set name and the current date & time.'}.		{ 'Create new Change Set...' . { ChangeSorter . #newChangeSet}. 'Create a new change set and make it the current one.'}.		nil.		{ 'Simple Change Sorter' . {self. #openChangeSorter1}.  'Open a 3-paned changed-set viewing tool'}.		{ 'Dual Change Sorter' . {self. #openChangeSorter2}.				'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'}.		nil.		{ 'Browse my Changes' . { Smalltalk . #browseMyChanges }.				'Browse all of my changes since the last time #condenseSources was run.'}.		{ 'Browse recent Submissions' . { #myWorld . #openRecentSubmissionsBrowser:}.				'Make an open recent-submissions browser be the front-window, expanding a collapsed one or creating a new one if necessary.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted, latest first.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions at the top of the browser.'}.		{ 'Recently logged Changes...' . { ChangeList . #browseRecentLog}.'Open a change-list browser on the latter part of the changes log.  You can use this browser to recover logged changes which were not saved in your image, in the event of a crash or other interruption.'}.		nil.		{ 'Save World as morph file' . {self. #saveWorldInFile}. 'Save a file that, when reloaded, reconstitutes the current World.'}.	}.	^ menu! !!Theme methodsFor: 'menus' stamp: 'jmv 8/30/2011 22:37'!miscellaneousIcons	"Everything else."	^ {		#('restore display (r)' 'set display depth...' 'move windows onscreen' 'Utilities saveDisplay.') -> #displayIcon.		#('changes...' 'dual change sorter' 'change sets with this method' 'find a change sorter' 'recent changes in file') -> #changesIcon.		#('print PS to file...' ) -> #printIcon.		#('find again (g)' 'full stack (k)') -> #systemIcon.		#('print it (p)' 'check change set for slips') -> #printIcon.		#('accept (s)' 'make changes go to me (m)') -> #acceptIcon.		#('cancel (l)' ) -> #cancelIcon.		#('debug...' 'debug it' 'toggle break on entry') -> #debugIcon.		#('close' 'close all debuggers' 'close top window') -> #closeIcon.		#('collapse' 'hide taskbar' 'collapse all windows') -> #collapseIcon.		#('expand / contract' 'show taskbar' 'expand all windows') -> #expandIcon.		#('menu') -> #windowMenuIcon.		#('browse all' 'browser' 'browse it (b)' 'MessageTally UI and browse' 'browse recent submissions' 'browse full (b)' 'find changed browsers...' 'browse (b)' 'browse my changes') -> #editFindReplaceIcon.		#('workspace' 'workspace with contents') -> #terminalIcon.		#('text editor' 'edit this list' 'edit postscript...' 'add postscript...') -> #textEditorIcon.		#('file list' 'find a fileList') -> #systemFileManagerIcon.		#('transcript' 'find a transcript' 'Transcript clear.' 'log to transcript') -> #printerIcon.		#('process browser' 'vm statistics' 'MessageTally all Processes') -> #systemMonitorIcon.		#('emergency evaluator' 'conflicts with other change sets' 'check for slips' 'conflicts with change set opposite' 'conflicts with category opposite') -> #emblemImportantIcon.		#('simple change sorter') -> #halfRefreshIcon.		#('SUnit Test Runner') -> #weatherFewCloudsIcon.		#('system fonts...' 'set font... (k)') -> #preferencesDesktopFontIcon.		#('full screen on') -> #viewFullscreenIcon.		#('full screen off') -> #exitFullscreenIcon.		#('set desktop color...') -> #wallpaperIcon.		#('preferences...' 'what to show...') -> #preferencesIcon.		#('command-key help') -> #keyboardShortcutsIcon.		#('world menu help') -> #globeIcon.		#('useful expressions' 'class comments with it' 'check for uncommented methods' 'check for uncommented classes') -> #chatIcon.		#('set author initials...' 'check for other authors' 'check for any other authors') -> #usersIcon.		#('space left') -> #removableMediaIcon.		#('start drawing all again' 'window color...') -> #graphicsIcon.		#('start stepping again') -> #mediaPlaybackStartIcon.		#('file out current change set' 'fileOut' 'file out (o)') -> #fileOutIcon.		#('recently logged changes...' 'versions (v)' 'recent classes... (r)' 'trim history' 'profile messages (m)') -> #clockIcon.		#('senders of it (n)' 'senders of... (n)' 'local senders of...' 'senders (n)') -> #mailForwardIcon.		#('implementors of it (m)' 'implementors of... (m)' 'implementors of sent messages') -> #developmentIcon.		#('references to it (N)') -> #addressBookIcon.		#('class var refs...' 'class refs (N)' 'class variables' 'class vars' 'local implementors of...' 'subclass template') -> #classIcon.		#('inst var refs...' 'inst var defs...' 'sample instance' 'inspect Pointers (P)') -> #instanceIcon.		#('set search string (h)' 'rename class ...' 'rename...' 'change title...') -> #saveAsIcon.		#('method source with it' 'browse method (O)' 'check for uncategorized methods') -> #scriptIcon.		#('method strings with it (E)') -> #genericTextIcon.		#('browse hierarchy (h)' 'move to top' 'promote to top of list') -> #goTopIcon.		#('move up' 'make next-to-topmost') -> #goUpIcon.		#('move to bottom' 'send to back' 'send top window to back') -> #goBottomIcon.		#('inheritance (i)' 'move down') -> #goDownIcon.		#('browse protocol (p)' 'spawn sub-protocol') -> #spreadsheetIcon.		#('spawn full protocol') -> #speadsheetTemplateIcon.		#('alphabetize') -> #fontXGenericIcon.		#('browse' 'show category (C)' 'categorize all uncategorized' 'select change set...' 'view affected class categories') -> #packageIcon.		#('remove from current change set' 'remove empty categories' 'subtract other side (-)' 'remove from this browser') -> #listRemoveIcon.		#('add to current change set' 'add all meths to current chgs' 'add preamble (p)') -> #listAddIcon.		#('toggle diffing (D)' 'toggle selections') -> #switchIcon.		#('reorganize' 'create inst var accessors' 'ChangeSorter reorderChangeSets.' 'reorder all change sets' 'by name' 'by size' 'by date') -> #sendReceiveIcon.		#('unsent methods' 'unreferenced class vars' 'unreferenced inst vars' 'Undeclared inspect.' 'Undeclared removeUnreferencedKeys; inspect.' 'ChangeSorter removeEmptyUnnamedChangeSets.' 'check for unsent messages') -> #junkIcon.		#('update' 'turn on auto-update (a)' 'update list (u)') -> #updateIcon.		#('find changed windows...') -> #newWindowIcon.		#('make undraggable') -> #pushPinIcon.		#('Utilities saveScreenshot.') -> #stillCameraIcon.		#('add new directory') -> #newFolderIcon.		#('select all' 'deselect all') -> #selectAllIcon.		#('sort by date') -> #dateIcon.		#('justified') -> #formatJustifyFillIcon.		#('centered') -> #formatJustifyCenterIcon.		#('set alignment...' 'leftFlush') -> #formatJustifyLeftIcon.		#('rightFlush') -> #formatJustifyRightIcon.		#('signal Semaphore (S)') -> #haloHelpIcon.	}! !