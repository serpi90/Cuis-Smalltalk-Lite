'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 2 November 2011 at 4:02:31 pm'!!classDefinition: #CodeFile category: #'Tools-File Contents Browser'!Object subclass: #CodeFile	instanceVariableNames: 'fullName sourceSystem classes doIts classOrder'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-File Contents Browser'!!classDefinition: #CodeFileBrowser category: #'Tools-File Contents Browser'!Browser subclass: #CodeFileBrowser	instanceVariableNames: 'codeFile'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-File Contents Browser'!!CodeFileBrowser commentStamp: '<historical>' prior: 0!I am a class browser view on a fileout (either a source file (.st) or change set (.cs)). I do not actually load the code into to the system, nor do I alter the classes in the image. Use me to vet code in a comfortable way before loading it into your image.From a FileList, I can be invoked by selecting a source file and selecting the "browse code" menu item from the context (right click) menu.I use PseudoClass, PseudoClassOrganizers, and PseudoMetaclass to model the class structure of the source file.!!classDefinition: #CodeFileBrowserWindow category: #'Morphic-Tools'!BrowserWindow subclass: #CodeFileBrowserWindow	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Tools'!!CodeFile methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:27'!classAt: className	^self classes at: className! !!CodeFile methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:27'!classes	^classes! !!CodeFile methodsFor: 'accessing' stamp: 'jmv 11/2/2011 16:00'!description	^String streamContents:[:s|		s nextPutAll: 'CodeFile: '.		s nextPutAll: self fullName; cr; cr.		sourceSystem isEmpty ifFalse:[			s nextPutAll: sourceSystem; cr; cr ].		doIts isEmpty ifFalse:[			s nextPutAll: 'Unresolvable doIts:'; cr; cr.			doIts do: [ :chgRec |				s					nextPut:$!!;					nextPutAll: chgRec string;					nextPut: $!!;					cr ]]]! !!CodeFile methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:44'!fullName	^fullName! !!CodeFile methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:27'!fullName: aString	fullName _ aString! !!CodeFile methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:57'!name	^FileDirectory localNameFor: self fullName! !!CodeFile methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:27'!removeClass: aPseudoClass	(self classes removeKey: aPseudoClass name).	classOrder copy do:[:cls|		cls name = aPseudoClass name ifTrue:[ classOrder remove: cls].	].! !!CodeFile methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:27'!removeDoIts	doIts := OrderedCollection new.! !!CodeFile methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:27'!renameClass: aPseudoClass to: newName	| oldName |	oldName := aPseudoClass name.	self classes removeKey: oldName.	self classes at: newName put: aPseudoClass.	aPseudoClass renameTo: newName.! !!CodeFile methodsFor: 'initialize' stamp: 'jmv 11/2/2011 15:27'!fromFileNamed: aName	| stream |	fullName := aName.	stream := FileStream readOnlyFileNamed: aName.	[self fileInFrom: stream] ensure:[stream close].! !!CodeFile methodsFor: 'initialize' stamp: 'jmv 11/2/2011 15:27'!initialize	classes _ Dictionary new.	classOrder _ OrderedCollection new.	sourceSystem _ ''.	doIts _ OrderedCollection new! !!CodeFile methodsFor: 'private' stamp: 'jmv 11/2/2011 15:27'!classDefinition: string with: chgRec	| tokens theClass |	tokens := Smalltalk actualScannerClass new scanTokens: string.	tokens size = 11 ifFalse:[^doIts add: chgRec].	theClass := self getClass: (tokens at: 3).	theClass definition: string.	classOrder add: theClass.! !!CodeFile methodsFor: 'private' stamp: 'jmv 11/2/2011 15:27'!getClass: className	| pseudoClass |	(classes includesKey: className) ifTrue:[		^classes at: className.	].	pseudoClass := PseudoClass new.	pseudoClass name: className.	classes at: className put: pseudoClass.	^pseudoClass.! !!CodeFile methodsFor: 'private' stamp: 'jmv 11/2/2011 15:27'!metaClassDefinition: string with: chgRec	| tokens theClass |	tokens := Smalltalk actualScannerClass new scanTokens: string.	theClass := self getClass: (tokens at: 1).	theClass metaClass definition: string.	classOrder add: theClass metaClass.! !!CodeFile methodsFor: 'private' stamp: 'jmv 11/2/2011 15:27'!msgClassComment: string with: chgRec	| tokens theClass |	tokens := Smalltalk actualScannerClass new scanTokens: string.	(tokens size = 3 and:[(tokens at: 3) class == String]) ifTrue:[		theClass := self getClass: tokens first.		^theClass commentString: tokens last].	(tokens size = 4 and:[(tokens at: 3) asString = 'class' and:[(tokens at: 4) class == String]]) ifTrue:[		theClass := self getClass: tokens first.		theClass metaClass commentString: tokens last].! !!CodeFile methodsFor: 'private' stamp: 'jmv 11/2/2011 15:27'!possibleSystemSource: chgRec	| tokens |	sourceSystem isEmpty ifTrue:[		tokens := Smalltalk actualScannerClass new scanTokens: chgRec string.		(tokens size = 1 and:[tokens first class == String]) ifTrue:[			sourceSystem := tokens first.			^self]].	doIts add: chgRec.! !!CodeFile methodsFor: 'private' stamp: 'jmv 11/2/2011 15:27'!removedMethod: string with: chgRec	| class tokens |	tokens := Smalltalk actualScannerClass new scanTokens: string.	(tokens size = 3 and:[(tokens at: 2) == #removeSelector: ]) ifTrue:[		class := self getClass: (tokens at: 1).		^class removeSelector: (tokens at: 3).	].	(tokens size = 4 and:[(tokens at: 2) == #class and:[(tokens at: 3) == #removeSelector:]]) ifTrue:[		class := self getClass: (tokens at: 1).		^class metaClass removeSelector: (tokens at: 4).	].	doIts add: chgRec! !!CodeFile methodsFor: 'change record types' stamp: 'jmv 11/2/2011 15:27'!classComment: chgRec	(self getClass: chgRec methodClassName) classComment: chgRec! !!CodeFile methodsFor: 'change record types' stamp: 'jmv 11/2/2011 15:27'!classDefinition: chgRec	| string |	string := chgRec string.	^chgRec isMetaClassChange 		ifTrue: [self metaClassDefinition: string with: chgRec]		ifFalse: [self classDefinition: string with: chgRec]! !!CodeFile methodsFor: 'change record types' stamp: 'jmv 11/2/2011 15:27'!doIt: chgRec	| string |	string := chgRec string.	('*ubclass:*instanceVariableNames:*classVariableNames:*poolDictionaries:*category:*'		match: string) ifTrue:[^self classDefinition: string with: chgRec].	('* class*instanceVariableNames:*'		match: string) ifTrue:[^self metaClassDefinition: string with: chgRec].	('* removeSelector: *'		match: string) ifTrue:[^self removedMethod: string with: chgRec].	('* comment:*'		match: string) ifTrue:[^self msgClassComment: string with: chgRec].	('* initialize'		match: string) ifTrue:[^self]. "Initialization is done based on class>>initialize"	('''From *'		match: string) ifTrue:[^self possibleSystemSource: chgRec].	doIts add: chgRec.! !!CodeFile methodsFor: 'change record types' stamp: 'jmv 11/2/2011 15:27'!method: chgRec	(self getClass: chgRec methodClassName) methodChange: chgRec! !!CodeFile methodsFor: 'change record types' stamp: 'jmv 11/2/2011 15:27'!preamble: chgRec	self doIt: chgRec! !!CodeFile methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:59'!askForDoits	| menu choice choices |	choices := #('do not process' 'at the beginning' 'at the end' 'cancel').	menu _ SelectionMenu selections: choices.	choice := nil.	[choices includes: choice] whileFalse: [		choice _ menu startUpWithCaption: 'The CodeFile contains unprocessed doIts.When would like to process those?'].	^choices indexOf: choice! !!CodeFile methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:27'!fileIn	| doitsMark |	doitsMark := 1.	doIts isEmpty ifFalse:[doitsMark := self askForDoits].	doitsMark = 4 ifTrue: [^nil].	doitsMark = 2 ifTrue:[self fileInDoits].	classOrder do:[:cls|		cls fileInDefinition.	].	classes do:[:cls|		Transcript cr; show:'Filing in ', cls name.		cls fileInMethods.		cls hasMetaclass ifTrue:[cls metaClass fileInMethods].	].	doitsMark = 3 ifTrue:[self fileInDoits].! !!CodeFile methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:27'!fileInDoits	doIts do:[:chgRec| chgRec fileIn].! !!CodeFile methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:27'!fileOut	| fileName stream |	fileName := FillInTheBlank request: 'Enter the file name' initialAnswer:''.	stream := FileStream newFileNamed: fileName.	sourceSystem isEmpty ifFalse:[		stream nextChunkPut: sourceSystem printString;cr ].	self fileOutOn: stream.	stream cr; cr.	self classes do:[:cls|		cls needsInitialize ifTrue:[			stream cr; nextChunkPut: cls name,' initialize']].	stream cr.	stream close.	"DeepCopier new checkVariables."! !!CodeFile methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:27'!fileOutDoits: aStream	doIts do:[:chgRec| chgRec fileOutOn: aStream].! !!CodeFile methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:27'!fileOutOn: aStream	| doitsMark |	doitsMark := 1.	doIts isEmpty ifFalse:[doitsMark := self askForDoits].	doitsMark = 4 ifTrue: [^nil].	doitsMark = 2 ifTrue:[self fileOutDoits: aStream].	classOrder do:[:cls|		cls fileOutDefinitionOn: aStream.	].	classes do:[:cls|		cls fileOutMethodsOn: aStream.		cls hasMetaclass ifTrue:[cls metaClass fileOutMethodsOn: aStream].	].	doitsMark = 3 ifTrue:[self fileOutDoits: aStream].! !!CodeFile methodsFor: 'reading' stamp: 'jmv 11/2/2011 15:58'!fileInFrom: aStream	| chgRec changes |	changes := (ChangeList new scanFile: aStream from: 0 to: aStream size) changeList.	aStream close.	('Processing ', self name) 		displayProgressAt: Sensor mousePoint		from: 1		to: changes size		during:[:bar|			1 to: changes size do:[:i|				bar value: i.				chgRec := changes at: i.				self perform: (chgRec type copyWith: $:) asSymbol with: chgRec.			].		]! !!CodeFile class methodsFor: 'instance creation' stamp: 'jmv 11/2/2011 15:27'!fromFileNamed: aName	^self new fromFileNamed: aName! !!CodeFileBrowser methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:52'!acceptedStringOrText	self updateInfoView.	(editSelection == #newClass and: [ self selectedCodeFile notNil ])		ifTrue: [ ^self selectedCodeFile description ].	editSelection == #editClass		ifTrue:[ ^self modifiedClassDefinition ].	^super acceptedStringOrText! !!CodeFileBrowser methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:52'!codeFile: aCodeFile	codeFile _ aCodeFile! !!CodeFileBrowser methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:22'!contents: input notifying: aController 	"The retrieved information has changed and its source must now be 	updated. The information can be a variety of things, depending on the 	list selections (such as templates for class or message definition, methods) 	or the user menu commands (such as definition, comment, hierarchy). 	Answer the result of updating the source."	| aString aText theClass |	aString _ input asString.	aText _ input asText.	editSelection == #editComment 		ifTrue: [theClass _ self selectedClass.				theClass ifNil: [self inform: 'You must select a classbefore giving it a comment.'.				^ false].				theClass comment: aText. ^ true].	editSelection == #editMessageCategories 		ifTrue: [^ self changeMessageCategories: aString].	self inform:'You cannot change the current selection'.	^false! !!CodeFileBrowser methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:22'!contentsSymbol	"Answer a symbol indicating what kind of content should be shown for the method"	^ contentsSymbol ifNil: [		contentsSymbol _ self defaultDiffsSymbol ]! !!CodeFileBrowser methodsFor: 'accessing' stamp: 'jmv 11/2/2011 15:52'!selectedCodeFile	^codeFile! !!CodeFileBrowser methodsFor: 'removing' stamp: 'jmv 11/2/2011 15:53'!removeClass	| class |	selectedClassName ifNil: [ ^self ].	class _ self selectedClass.	(self confirm:'Are you certain that youwant to delete the class ', class name, '?') ifFalse:[^self].	self selectedCodeFile removeClass: class.	self classListIndex: 0.	self changed: #classList.! !!CodeFileBrowser methodsFor: 'removing' stamp: 'jmv 11/2/2011 15:22'!removeMessage	| messageName |	selectedMessage ifNil: [ ^self ].	messageName _ self selectedMessageName.	(self selectedClass confirmRemovalOf: messageName)		ifFalse: [^ false].	self selectedClassOrMetaClass removeMethod: self selectedMessageName.	self messageListIndex: 0.	self setClassOrganizer.	"In case organization not cached"	self changed: #messageList! !!CodeFileBrowser methodsFor: 'removing' stamp: 'jmv 11/2/2011 15:22'!removeMessageCategory	"If a message category is selected, create a Confirmer so the user can 	verify that the currently selected message category should be removed 	from the system. If so, remove it."	| messageCategoryName |	selectedMessageCategory ifNil: [ ^self ].	messageCategoryName _ self selectedMessageCategoryName.	(self messageList size = 0		or: [self confirm: 'Are you sure you want toremove this method category and all its methods?']) ifFalse: [^ self].	self selectedClassOrMetaClass removeCategory: messageCategoryName.	self messageCategoryListIndex: 0.	self changed: #messageCategoryList.! !!CodeFileBrowser methodsFor: 'removing' stamp: 'jmv 11/2/2011 15:22'!removeUnmodifiedCategories	| theClass |	theClass _ self selectedClass.	theClass ifNil: [^self].	Cursor wait showWhile: [		theClass removeUnmodifiedMethods: theClass selectors.		theClass metaClass removeUnmodifiedMethods: theClass metaClass selectors].	self messageCategoryListIndex: 0.	self changed: #messageCategoryList! !!CodeFileBrowser methodsFor: 'removing' stamp: 'jmv 11/2/2011 15:54'!removeUnmodifiedClasses	codeFile classes copy do: [ :theClass |		Cursor wait showWhile: [ theClass removeAllUnmodified ].		theClass hasChanges ifFalse: [ codeFile removeClass: theClass ]].	self classListIndex: 0.	self changed: #classList! !!CodeFileBrowser methodsFor: 'removing' stamp: 'jmv 11/2/2011 15:22'!removeUnmodifiedMethods	| theClass cat |	theClass := self selectedClassOrMetaClass.	theClass ifNil: [ ^self].	cat := self selectedMessageCategoryName.	cat ifNil: [ ^self].	Cursor wait showWhile:[		theClass removeUnmodifiedMethods: (theClass organization listAtCategoryNamed: cat).	].	self messageListIndex: 0.	self changed: #messageList.! !!CodeFileBrowser methodsFor: 'class list' stamp: 'jmv 11/2/2011 15:53'!classList	"Answer an array of the class names of the selected category. Answer an 	empty array if no selection exists."	^(selectedSystemCategory isNil or: [ self selectedCodeFile isNil ])		ifTrue: [ #() ]		ifFalse: [ self selectedCodeFile classes keys sort ]! !!CodeFileBrowser methodsFor: 'class list' stamp: 'jmv 11/2/2011 16:00'!renameClass	| oldName newName |	selectedClassName ifNil: [ ^self ].	oldName _ self selectedClass name.	newName _ (self request: 'Please type new class name'						initialAnswer: oldName) asSymbol.	(newName isEmpty or:[newName = oldName]) ifTrue: [^ self].	(self selectedCodeFile classes includesKey: newName)		ifTrue: [^ self error: newName , ' already exists in the CodeFile'].	systemOrganizer classify: newName under: selectedSystemCategory.	systemOrganizer removeElement: oldName.	self selectedCodeFile renameClass: self selectedClass to: newName.	self changed: #classList.	self classListIndex: ((systemOrganizer listAtCategoryNamed: selectedSystemCategory) indexOf: newName).! !!CodeFileBrowser methodsFor: 'class list' stamp: 'jmv 11/2/2011 15:53'!selectedClass	"Answer the class that is currently selected. Answer nil if no selection 	exists."	^self selectedClassName ifNotNil: [ :scn |		self selectedCodeFile classAt: scn ]! !!CodeFileBrowser methodsFor: 'edit pane' stamp: 'jmv 11/2/2011 15:22'!selectedBytecodes	"Not supported"	^''! !!CodeFileBrowser methodsFor: 'edit pane' stamp: 'jmv 11/2/2011 15:22'!selectedMessage	"Answer a copy of the source code for the selected message selector."	| class selector answer |	class _ self selectedClassOrMetaClass.	selector _ self selectedMessageName.	answer _ (class sourceCodeAt: selector).	Preferences browseWithPrettyPrint ifTrue: [		answer _ (Smalltalk actualCompilerClass new					format: answer					in: class					notifying: nil)].	self showingAnyKindOfDiffs ifTrue: [		answer _ (self			methodDiffFor: answer			class: self selectedClass			selector: self selectedMessageName			meta: self metaClassIndicated)].	^ answer asText makeSelectorBoldIn: class! !!CodeFileBrowser methodsFor: 'diffs' stamp: 'jmv 11/2/2011 15:22'!methodDiffFor: aString class: aPseudoClass selector: selector meta: meta 	"Answer the diff between the current copy of the given class/selector/meta for the string provided"	| theClass source |	theClass _ Smalltalk				at: aPseudoClass name				ifAbsent: [^ aString copy].	meta		ifTrue: [theClass _ theClass class].	(theClass includesSelector: selector)		ifFalse: [^ aString copy].	source _ theClass sourceCodeAt: selector.	^ Cursor wait		showWhile: [			DifferenceFinder				displayPatchFrom: source to: aString				tryWords: self shouldDiffWords				prettyPrintedIn: (self showingAnyKindOfPrettyDiffs ifTrue: [theClass])]! !!CodeFileBrowser methodsFor: 'diffs' stamp: 'jmv 11/2/2011 15:22'!modifiedClassDefinition	| pClass rClass old new |	pClass := self selectedClassOrMetaClass.	pClass hasDefinition ifFalse: [ ^pClass definition].	rClass := Smalltalk at: self selectedClass name asSymbol ifAbsent: nil.	rClass ifNil: [ ^pClass definition].	self metaClassIndicated ifTrue:[ rClass := rClass class].	old := rClass definition.	new := pClass definition.	^Cursor wait showWhile:[		DifferenceFinder displayPatchFrom: old to: new tryWords: true ]! !!CodeFileBrowser methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:53'!fileIn	Cursor read showWhile:[		self selectedCodeFile fileIn.	]! !!CodeFileBrowser methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:22'!fileInClass	Cursor read showWhile:[		self selectedClass fileIn.	].! !!CodeFileBrowser methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:22'!fileInMessage		self selectedMessageName ifNil: [^self].	Cursor read showWhile: [		self selectedClassOrMetaClass fileInMethod: self selectedMessageName.	].! !!CodeFileBrowser methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:22'!fileInMessageCategories	Cursor read showWhile:[		self selectedClassOrMetaClass fileInCategory: self selectedMessageCategoryName.	].! !!CodeFileBrowser methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:58'!fileIntoNewChangeSet	| codeFile ff |	(codeFile _ self selectedCodeFile) ifNil: [^ Beeper beep].	ff _ StandardFileStream readOnlyFileNamed: codeFile fullName.	ChangeSorter newChangesFromStream: ff named: codeFile name! !!CodeFileBrowser methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:53'!fileOut	Cursor write showWhile:[		self selectedCodeFile fileOut.	]! !!CodeFileBrowser methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:22'!fileOutClass	Cursor write showWhile:[		self selectedClass fileOut.	].! !!CodeFileBrowser methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:22'!fileOutMessage	self selectedMessageName ifNil: [^self].	Cursor write showWhile: [		self selectedClassOrMetaClass fileOutMethod: self selectedMessageName].! !!CodeFileBrowser methodsFor: 'fileIn/fileOut' stamp: 'jmv 11/2/2011 15:22'!fileOutMessageCategories	Cursor write showWhile:[		self selectedClassOrMetaClass fileOutCategory: self selectedMessageCategoryName.	].! !!CodeFileBrowser methodsFor: 'infoView' stamp: 'jmv 11/2/2011 15:22'!annotation	| info |	info _ self infoViewContents.	^info isEmpty		ifTrue: [ super annotation ]		ifFalse: [ info, self annotationSeparator, super annotation ]! !!CodeFileBrowser methodsFor: 'infoView' stamp: 'jmv 11/2/2011 15:22'!extraInfo	^ (self		methodDiffFor: (self selectedClassOrMetaClass sourceCodeAt: self selectedMessageName)		class: self selectedClass		selector: self selectedMessageName		meta: self metaClassIndicated) unembellished			ifTrue: [' - identical']			ifFalse: [' - modified']! !!CodeFileBrowser methodsFor: 'infoView' stamp: 'jmv 11/2/2011 15:53'!infoViewContents	| theClass |	editSelection == #newClass ifTrue: [^ self codeFile: self selectedCodeFile].	self selectedClass ifNil: [^ ''].	theClass _ Smalltalk at: self selectedClass name asSymbol ifAbsent: nil.	editSelection == #editClass ifTrue: [		^ theClass			ifNotNil: ['Class exists already in the system']			ifNil: ['New class']].	editSelection == #editMessage ifFalse: [^ ''].	(theClass notNil and: [self metaClassIndicated])		ifTrue: [theClass _ theClass class].	^ (theClass notNil and: [theClass includesSelector: self selectedMessageName])		ifTrue: ['Method already exists' , self extraInfo]		ifFalse: ['New method']! !!CodeFileBrowser methodsFor: 'infoView' stamp: 'jmv 11/2/2011 15:22'!updateInfoView	self changed: #infoViewContents! !!CodeFileBrowser methodsFor: 'metaclass' stamp: 'jmv 11/2/2011 15:22'!selectedClassOrMetaClass	"Answer the selected class or metaclass."	| cls |	self metaClassIndicated		ifTrue: [^ (cls _ self selectedClass) ifNotNil: [cls metaClass]]		ifFalse: [^ self selectedClass]! !!CodeFileBrowser methodsFor: 'metaclass' stamp: 'jmv 11/2/2011 15:22'!setClassOrganizer	"Install whatever organization is appropriate"	| theClass |	classOrganizer _ nil.	metaClassOrganizer _ nil.	selectedClassName ifNil: [ ^self ].	classOrganizer _ (theClass _ self selectedClass) organization.	metaClassOrganizer _ theClass metaClass organization.! !!CodeFileBrowser methodsFor: 'other' stamp: 'jmv 11/2/2011 15:22'!changeMessageCategories: aString 	"The characters in aString represent an edited version of the the message 	categories for the selected class. Update this information in the system 	and inform any dependents that the categories have been changed. This 	message is invoked because the user had issued the categories command 	and edited the message categories. Then the user issued the accept 	command."	self classOrMetaClassOrganizer changeFromString: aString.	self unlock.	self editClass.	self classListIndex: self classListIndex.	^ true! !!CodeFileBrowser methodsFor: 'other' stamp: 'jmv 11/2/2011 15:22'!didCodeChangeElsewhere	"Determine whether the code for the currently selected method and class has been changed somewhere else."	| aClass |	(aClass _ self selectedClassOrMetaClass) ifNil: [^ false].	(aClass isKindOf: PseudoClass) ifTrue: [^ false]. "class not installed"	^super didCodeChangeElsewhere! !!CodeFileBrowser methodsFor: 'other' stamp: 'jmv 11/2/2011 15:22'!labelString	"Answer the string for the window title"	^ 'File Contents Browser ', (selectedSystemCategory ifNil: [''])! !!CodeFileBrowser methodsFor: 'menus' stamp: 'jmv 11/2/2011 15:22'!contentsSymbolQuints	"Answer a list of quintuplets representing information on the alternative views available in the code pane.  For the file-contents browser, the choices are restricted to source and the diffing options"	^ self sourceAndDiffsQuintsOnly! !!CodeFileBrowser methodsFor: 'initialize-release' stamp: 'jmv 11/2/2011 15:22'!defaultBrowserTitle	^ 'File Contents Browser'! !!CodeFileBrowser methodsFor: 'shout styling' stamp: 'jmv 11/2/2011 15:22'!shoutAboutToStyle: aSHTextStyler	"This is a notification that aSHTextStyler is about to re-style its text.	Set the classOrMetaClass in aSHTextStyler, so that identifiers	will be resolved correctly.	Answer true to allow styling to proceed, or false to veto the styling"	self isModeStyleable ifFalse: [^false].	aSHTextStyler classOrMetaClass: self selectedClassOrMetaClass.	^true! !!CodeFileBrowser class methodsFor: 'instance creation' stamp: 'jmv 11/2/2011 15:23'!browseCompressedCodeStream: aStandardFileStream 	"Browse the selected file in fileIn format."	| zipped unzipped |	zipped _ GZipReadStream on: aStandardFileStream.	unzipped _ ReadStream on:  zipped contents asString.	CodeFileBrowserWindow browseStream: unzipped named: aStandardFileStream name.! !!CodeFileBrowser class methodsFor: 'instance creation' stamp: 'jmv 11/2/2011 15:23'!browseMCZCodeStream: aStandardFileStream 	"Browse the selected file in fileIn format."	| unzipped |	unzipped _ aStandardFileStream asUnZippedStream: 'snapshot/source.st'.	unzipped ascii.	CodeFileBrowserWindow browseStream: unzipped named: aStandardFileStream name! !!CodeFileBrowser class methodsFor: 'instance creation' stamp: 'jmv 11/2/2011 15:23'!browseStream: aStream	CodeFileBrowserWindow browseStream: aStream named: aStream name! !!CodeFileBrowser class methodsFor: 'instance creation' stamp: 'jmv 11/2/2011 15:22'!fileReaderServicesForFile: fullName suffix: suffix	((FileStream isSourceFileSuffix: suffix) or: [ suffix = '*' ])		ifTrue: [ ^Array with: self serviceBrowseCode].	suffix = 'mcz'		ifTrue: [ ^ Array with: self serviceBrowseMCZCode ].	^(fullName endsWith: 'cs.gz')		ifTrue: [ Array with: self serviceBrowseCompressedCode ]		ifFalse: [#()]! !!CodeFileBrowser class methodsFor: 'instance creation' stamp: 'jmv 11/2/2011 15:22'!serviceBrowseCode	"Answer the service of opening a file-contents browser"	^ (SimpleServiceEntry		provider: self 		label: 'code-file browser'		selector: #browseStream:		description: 'open a "file-contents browser" on this file, allowing you to view and selectively load its code'		buttonLabel: 'code')		argumentGetter: [ :fileList | fileList readOnlyStream ]! !!CodeFileBrowser class methodsFor: 'instance creation' stamp: 'jmv 11/2/2011 15:22'!serviceBrowseCompressedCode	"Answer a service for opening a changelist browser on a file"	^ (SimpleServiceEntry 		provider: self 		label: 'code-file browser'		selector: #browseCompressedCodeStream:		description: 'open a "file-contents browser" on this file, allowing you to view and selectively load its code'		buttonLabel: 'code')		argumentGetter: [ :fileList | fileList readOnlyStream ]! !!CodeFileBrowser class methodsFor: 'instance creation' stamp: 'jmv 11/2/2011 15:22'!serviceBrowseMCZCode	"Answer a service for opening a changelist browser on a file"	^ (SimpleServiceEntry 		provider: self 		label: 'code-file browser'		selector: #browseMCZCodeStream:		description: 'open a "file-contents browser" on this file, allowing you to view and selectively load its code'		buttonLabel: 'code')		argumentGetter: [ :fileList | fileList readOnlyStream ]! !!CodeFileBrowser class methodsFor: 'instance creation' stamp: 'jmv 11/2/2011 15:22'!services	^ Array with: self serviceBrowseCode! !!CodeFileBrowser class methodsFor: 'class initialization' stamp: 'jmv 11/2/2011 15:31'!initialize	"	CodeFileBrowser initialize	"	FileList registerFileReader: self! !!CodeFileBrowser class methodsFor: 'class initialization' stamp: 'jmv 11/2/2011 15:22'!unload	FileList unregisterFileReader: self ! !!CodeFileBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 11/2/2011 15:56'!buildMorphicWindow	"Create a pluggable version of all the views for a Browser, including views and controllers."	| list1 list2 upperPanes |	model systemCategoryListIndex: 1.	list1 _ PluggableListMorph 			model: model 			listGetter: #systemCategorySingleton			indexGetter: #indexIsOne 			indexSetter: #indexIsOne:			mainView: self			menuGetter: #codeFileListMenu			keystrokeAction: #codeFileListKey:from:.	list1 hideScrollBarsIndefinitely.		list2 _ PluggableListMorph 			model: model 			listGetter: #messageCategoryList			indexGetter: #messageCategoryListIndex 			indexSetter: #messageCategoryListIndex:			mainView: self			menuGetter: #messageCategoryMenu			keystrokeAction: nil.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: self buildMorphicClassColumn proportionalWidth: 0.3;		addAdjusterAndMorph: list2 proportionalWidth: 0.3;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.4.	self layoutMorph		addMorph: list1 fixedHeight: Preferences standardCodeFont height + 10;		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.	model changed: #editSelection! !!CodeFileBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 11/2/2011 15:22'!windowColor	^ Theme current fileContentsBrowser! !!CodeFileBrowserWindow methodsFor: 'menu building' stamp: 'jmv 11/2/2011 15:22'!classListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('definition'			editClass							''		model)		('comment'			editComment					''		model)		-		('browse full (b)'	browseMethodFull)		('class refs (N)'		browseClassRefs)		-		('fileIn'				fileInClass						''		model)		('fileOut'			fileOutClass						''		model)		-		('rename...'			renameClass						''		model)		('remove'			removeClass						''		model)		-		('remove existing'	removeUnmodifiedCategories	''		model)).	^aMenu! !!CodeFileBrowserWindow methodsFor: 'menu building' stamp: 'jmv 11/2/2011 15:56'!codeFileListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('find class... (f)'				findClass)		-		('fileIn'						fileIn								''		model)		('file into new changeset'	fileIntoNewChangeSet			''		model)		('fileOut'					fileOut							''		model)		('remove existing'			removeUnmodifiedClasses		''		model)).	^ aMenu! !!CodeFileBrowserWindow methodsFor: 'menu building' stamp: 'jmv 11/2/2011 15:22'!messageCategoryMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: model.			"All the options are for the model."	aMenu addList: #(		('fileIn'								fileInMessageCategories)		('fileOut'							fileOutMessageCategories)		-		('reorganize'						editMessageCategories)		-		('add item...'						addCategory)		('rename...'							renameCategory)		('remove'							removeMessageCategory)		-		('remove existing'					removeUnmodifiedMethods)).	^aMenu! !!CodeFileBrowserWindow methodsFor: 'menu building' stamp: 'jmv 11/2/2011 15:22'!messageListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList:#(			('fileIn'							fileInMessage				''		model)			('fileOut'						fileOutMessage				''		model)			-			('senders (n)'					browseSenders)			('implementors (m)'				browseImplementors)			('method inheritance (h)'		methodHierarchy)			('versions (v)'					browseVersions)			-			('remove method (x)'			removeMessage				''		model)).	^ aMenu! !!CodeFileBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 11/2/2011 15:22'!browseMethodFull	"Create and schedule a full Browser and then select the current class and message."	|  myClass |	(myClass _ model selectedClassOrMetaClass) ifNotNil: [		BrowserWindow fullOnClass: myClass realClass selector: model selectedMessageName]! !!CodeFileBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 11/2/2011 15:22'!browseVersions	"Create and schedule a message set browser on all versions of the 	currently selected message selector."	| class selector |	(selector _ model selectedMessageName) ifNotNil: [		class _ model selectedClassOrMetaClass.		(class exists and: [class realClass includesSelector: selector]) ifTrue: [			VersionsBrowserWindow				browseVersionsOf: (class realClass compiledMethodAt: selector)				class: class realClass theNonMetaClass				meta: class realClass isMeta				category: model selectedMessageCategoryName				selector: selector]]! !!CodeFileBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 11/2/2011 15:22'!methodHierarchy	(model selectedClassOrMetaClass isNil or:		[model selectedClassOrMetaClass hasDefinition])			ifFalse: [super methodHierarchy]! !!CodeFileBrowserWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 11/2/2011 15:55'!classListKey: aChar from: view	aChar == $b ifTrue: [^ self browseMethodFull].	aChar == $N ifTrue: [^ self browseClassRefs].	self codeFileListKey: aChar from: view! !!CodeFileBrowserWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 11/2/2011 15:55'!codeFileListKey: aChar from: view	aChar == $f ifTrue: [^ self findClass]! !!CodeFileBrowserWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 11/2/2011 15:22'!messageListKey: aChar from: view	aChar == $b ifTrue: [^ self browseMethodFull].	super messageListKey: aChar from: view! !!CodeFileBrowserWindow methodsFor: 'commands' stamp: 'jmv 11/2/2011 16:00'!findClass	| pattern foundClass classNames index foundCodeFile |	self okToChange ifFalse: [^ self flash].	pattern _ (FillInTheBlank request: 'Class Name?') asLowercase.	pattern isEmpty ifTrue: [^ self].	classNames := Set new.	classNames addAll: model selectedCodeFile classes keys.	classNames := classNames asArray select: 		[:n | (n asLowercase indexOfSubCollection: pattern startingAt: 1) > 0].	classNames isEmpty ifTrue: [^ self].	index _ classNames size = 1				ifTrue:	[1]				ifFalse:	[(PopUpMenu labelArray: classNames lines: #()) startUp].	index = 0 ifTrue: [^ self].	foundCodeFile := nil.	foundClass := nil.		(model selectedCodeFile classes includesKey: (classNames at: index)) ifTrue:[			foundClass := model selectedCodeFile classes at: (classNames at: index).			foundCodeFile := model selectedCodeFile ].	foundClass ifNotNil: [	 	model systemCategoryListIndex: (model systemCategoryList indexOf: foundCodeFile name asSymbol).		model classListIndex: (model classList indexOf: foundClass name) ]! !!CodeFileBrowserWindow class methodsFor: 'services' stamp: 'jmv 11/2/2011 15:58'!browseStream: aStream named: aString	| codeFile organizer browser |	Cursor wait showWhile: [		organizer _ SystemOrganizer defaultList: Array new.		codeFile _ (CodeFile new fullName: aString; fileInFrom: aStream).		organizer 			classifyAll: codeFile classes keys 			under: codeFile name.		(browser _ CodeFileBrowser new)			systemOrganizer: organizer;			codeFile: codeFile].	CodeFileBrowserWindow open: browser label: 'Code File Browser'! !!DecompilerTests methodsFor: 'utilities' stamp: 'jmv 11/2/2011 15:45'!decompilerFailures	"here is the list of failures: DNU resulting in trying to decompile the following methods"	^ #((AdditionalMethodState at:ifAbsent:)		(AdditionalMethodState at:ifAbsentPut:)		(AdditionalMethodState at:put:)		(AdditionalMethodState hasLiteralSuchThat:)		(AdditionalMethodState hasLiteralThorough:)		(AdditionalMethodState includesProperty:)		(AdditionalMethodState keysAndValuesDo:)		(AdditionalMethodState pragmas)		(AdditionalMethodState properties)		(AdditionalMethodState propertyKeysAndValuesDo:)		(AdditionalMethodState propertyValueAt:ifAbsent:)		(AdditionalMethodState removeKey:ifAbsent:)		(AdditionalMethodState setMethod:)		(BalloonEngineSimulation circleCosTable "-0.3826834323650903 => -0.38268343236509 or -0.3826834323650902")		 (BalloonEngineSimulation circleSinTable "-0.3826834323650903 => -0.38268343236509 or -0.3826834323650902")		(BlockNode emitCodeExceptLast:encoder:)		(BlockNode sizeCodeExceptLast:)		(Categorizer changeFromCategorySpecs:)		(Categorizer elementCategoryDict)		(ChatNotes storeAIFFOnFile:)		(ClosureTests testToDoInsideTemp)		(Command veryDeepFixupWith:)		(CompiledMethod =)		(CompiledMethod getPreambleFrom:at:)		(CompiledMethod hasLiteralSuchThat:)		(CompiledMethod hasLiteralThorough:)		(CompiledMethod sameTraitCodeAs:)		(Date printOn:)		(EventSensor eventTickler)		(Float printPaddedWith:to:)		(FMSound mixSampleCount:into:startingAt:leftVol:rightVol:)		(Form preMultiplyAlpha)		(FTPClient getDataInto:)		 (GeniePlugin primSameClassAbsoluteStrokeDistanceMyPoints:otherPoints:myVectors:otherVectors:mySquaredLengths:otherSquaredLengths:myAngles:otherAngles:maxSizeAndReferenceFlag:rowBase:rowInsertRemove:rowInsertRemoveCount: "Cannot compile -- stack including temps is too deep")		(GZipReadStream on:from:to:)		(GraphMorph drawDataOn:)		(HttpUrl checkAuthorization:retry:)		(Integer asBytesDescription)		(IntegerTest testNumberOfDigits)		(IntegerTest testPrintStringBase)		(JPEGReadWriter decodeBlockInto:component:dcTable:acTable:)		(LoopedSampledSound mixSampleCount:into:startingAt:leftVol:rightVol:)		(MessageTally treePrintOn:tabs:thisTab:total:totalTime:tallyExact:orThreshold:)		(MessageTrace selectAllBetweenAnchorAnd:)		(MethodPragmaTest testCompileCharacter)		(MultiByteBinaryOrTextStream next:)		(MultiByteFileStream next:)		(MVCProject textWindows)		(MVCToolBuilder setLayout:in:)		(Paragraph selectionRectsFrom:to:)		(PasteUpMorph dropFiles:)		(Player veryDeepFixupWith:)		(PluggableTabButtonMorph calculateArcLengths)		(PluggableTabButtonMorph drawTabOn:)		(PluckedSound reset)		(PNGReadWriter copyPixelsGray:)		(PNGReadWriter processInterlaced)		(PNMReadWriter nextPutRGB:)		(PNMReadWriter nextPutBW:reverse:)		(PNMReadWriter readBWreverse:)		(PNMReadWriter readGray)		(PNMReadWriter readPlainRGB)		(PNMReadWriter writeHeader:)		(PointTest testTheta)		(PopUpMenu readKeyboard)		(PostscriptCanvas outlineQuadraticBezierShape:)		(QPickable2D pick:) "foo ifTrue: [^bar] ifFalse: [^baz]. ^huh?"		(QUsersPane userEntryCompare:to:) "foo ifTrue: [^bar] ifFalse: [^baz]. ^huh?"		(RelativeInstructionPrinter print:)		(RemoteHandMorph appendNewDataToReceiveBuffer)		(ScaledDecimalTest testConvertFromFraction)		(SHMCClassDefinition allInstVarNames)		(SHMCClassDefinition withAllSuperclasses)		(ShortIntegerArray writeOn:)		(SHParserST80 isBinary)		(StandardScriptingSystem holderWithAlphabet)		(StrikeFontSet displayStringR2L:on:from:to:at:kern:)		(String howManyMatch:)		(String keywords)		(StringTest testWthNoLineLongerThan)		(SyntaxMorph replaceKeyWord:menuItem:)		(SyntaxMorph replaceSel:menuItem:)		(TextDiffBuilder lcsFor:and:)		(TextURL actOnClickFor:)		(TShaderProgram vertexStrings) "foo ifTrue: []. => foo. => ."		(TShaderProgram fragmentStrings) "foo ifTrue: []. => foo. => ."		(TTContourConstruction segmentsDo:) "out of scope variable"		(TTCFontReader processCharacterMappingTable:)		(TTFileDescription getGlyphFlagsFrom:size:)		(TTFileDescription processCharacterMappingTable:)		(TTFontReader getGlyphFlagsFrom:size:)		(TTFontReader processCharacterMappingTable:)		(TTFontReader processHorizontalMetricsTable:length:)		(TWindow zoomWindow:) "foo ifTrue: [^bar] ifFalse: [^baz]. ^huh?"		(WaveEditor showEnvelope)		(WeakSet scanForLoadedSymbol:)		"(PNMReadWriter nextImage) (Collection #ifEmpty:ifNotEmpty:) (Collection #ifEmpty:) (Collection #ifNotEmpty:ifEmpty:) (Text #alignmentAt:ifAbsent:) (ObjectWithDocumentation propertyAt:ifAbsent:)")! !!FileList class methodsFor: 'class initialization' stamp: 'jmv 11/2/2011 15:38'!initialize	"	FileList initialize	""	(Smalltalk allClassesImplementing: #fileReaderServicesForFile:suffix:)		do: [:providerMetaclass | self registerFileReader: providerMetaclass soleInstance]"	FileReaderRegistry removeAll.	Form initialize.	CodeFileBrowser initialize.	GZipReadStream initialize.	GZipWriteStream initialize.	ChangeList initialize.	FileStream initialize.	ChangeSorter initialize.! !!FileList class methodsFor: 'file reader registration' stamp: 'jmv 11/2/2011 15:37'!registeredFileReaderClasses		FileReaderRegistry ifNil: [ FileReaderRegistry _ OrderedCollection new ].	^ FileReaderRegistry! !!HoverHelpMorph methodsFor: 'initialization' stamp: 'jmv 11/2/2011 15:41'!popUpForHand: aHand	"Pop up the receiver as balloon help for the given hand"	| xcess |	(contents isNil or: [ contents isEmpty ]) ifTrue: [ ^self ].	self position: aHand position + (-6@20).	xcess _ bounds right - aHand world bounds right.	xcess > 0 ifTrue: [		self position: self position - (xcess@0) ].	aHand world addMorphFront: self.	aHand balloonHelp: self! !FileList initialize!FileList removeSelector: #registeredFileReaderClasses!CodeFileBrowserWindow removeSelector: #packageListKey:from:!CodeFileBrowserWindow removeSelector: #packageListMenu!CodeWindow removeSelector: #codeFileListKey:from:!CodeWindow removeSelector: #packageListKey:from:!CodeFileBrowser initialize!CodeFileBrowser removeSelector: #fileCodeFile!CodeFileBrowser removeSelector: #fileInPackage!CodeFileBrowser removeSelector: #fileOutPackage!CodeFileBrowser removeSelector: #packageInfo:!CodeFileBrowser removeSelector: #selectedPackage!CodeFileBrowser removeSelector: #thePackage:!CodeFile removeSelector: #fullPackageName!CodeFile removeSelector: #localCodeFileName!CodeFile removeSelector: #packageInfo!CodeFile removeSelector: #packageName!Smalltalk removeClassNamed: #FileContentsBrowser!Smalltalk removeClassNamed: #FileContentsBrowserWindow!Smalltalk removeClassNamed: #FilePackage!