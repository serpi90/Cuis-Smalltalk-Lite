'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 28 December 2010 at 11:01:54 am'!!classDefinition: #SystemDictionary category: #'System-Support'!IdentityDictionary subclass: #SystemDictionary	instanceVariableNames: 'cachedClassNames cachedNonClassNames '	classVariableNames: 'EndianCache LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore ShutDownList SourceFileVersionString SpecialSelectors StartUpList StartupStamp '	poolDictionaries: ''	category: 'System-Support'!!SystemDictionary methodsFor: 'class names' stamp: 'jmv 12/28/2010 10:55'!fillCaches	"Fill cachedClassNames and cachedNonClassNames. Return an array with the calculated values."	| classNames nonClassNames |	classNames _ IdentitySet new: self size.	nonClassNames _ IdentitySet new.	self keysAndValuesDo: [ :key :value |		value isInMemory ifTrue: [			"The key == value name test below addresses two separate issues:				1) Obsolete classes, where key = #Foo and value name = 'AnObsoleteFoo'				2) Aliases, i.e., Smalltalk at: #OtherName put: aClass"			((value isKindOf: Class) and: [ key == value name ])				ifTrue: [ classNames add: key ]				ifFalse: [ nonClassNames add: key ] ] ].	classNames _ classNames asArray sort.	nonClassNames _ nonClassNames asArray sort.	cachedClassNames _ classNames.	cachedNonClassNames _ nonClassNames.	^{ classNames. nonClassNames }! !!SystemDictionary methodsFor: 'class names' stamp: 'jmv 12/28/2010 10:53'!flushClassNameCache	"Smalltalk flushClassNameCache"	"Forse recomputation of the cached list of class names."	cachedClassNames _ nil.	cachedNonClassNames _ nil! !!SystemDictionary methodsFor: 'testing' stamp: 'jmv 12/28/2010 11:01'!hasBindingThatBeginsWith: aString	"Answer true if the receiver has a key that begins with aString, false otherwise"	"	[ 5000 timesRepeat: [Smalltalk hasBindingThatBeginsWith: 'Obj' ]] timeToRun	Smalltalk hasBindingThatBeginsWith: 'Obj'	[ 5000 timesRepeat: [Smalltalk hasBindingThatBeginsWith: 'zxzxObj' ]] timeToRun	Smalltalk hasBindingThatBeginsWith: 'zxzxObj'	"		"Use the cached class and non-class names for better performance."	| name searchBlock |	searchBlock := [ :element |		(element beginsWith: aString)			ifTrue: [ 0 ]			ifFalse: [				aString < element					ifTrue: [ -1 ]					ifFalse: [ 1 ] ] ].	name := self classNames 		findBinary: searchBlock		do: [ :found | found ]		ifNone: [ :a :b | nil ].	name ifNotNil: [ ^true ].		name := self nonClassNames 		findBinary: searchBlock		do: [ :found | found ]		ifNone: [ :a :b | nil ].	^name notNil! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'ul 10/8/2010 21:22'!classNames	"Answer a sorted collection of all class names. Use the return value of #fillCaches to avoid concurrency issues."		^cachedClassNames ifNil: [ self fillCaches at: 1 ]! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'ul 10/8/2010 21:22'!nonClassNames	"Answer a sorted collection of all non-class names. Use the return value of #fillCaches to avoid concurrency issues."		^cachedNonClassNames ifNil: [ self fillCaches at: 2 ]! !!classDefinition: #SystemDictionary category: #'System-Support'!IdentityDictionary subclass: #SystemDictionary	instanceVariableNames: 'cachedClassNames cachedNonClassNames'	classVariableNames: 'EndianCache LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore ShutDownList SourceFileVersionString SpecialSelectors StartUpList StartupStamp'	poolDictionaries: ''	category: 'System-Support'!!SystemDictionary reorganize!('accessing' organization)('class names' classNamed: fillCaches flushClassNameCache forgetClass:logged: hasClassNamed: removeClassNamed: renameAndUpdateReferences:as: renameClass:as: renameClassNamed:as:)('dictionary access' associationAtOrAbove:ifAbsent: associationOrUndeclaredAt: at:put: atOrAbove:ifAbsent: atOrBelow:ifAbsent: environmentForCategory: includesKeyOrAbove: scopeFor:from:envtAndPathIfFound:)('housekeeping' browseEqEqSentToSmallIntegerConstants browseObsoleteMethodReferences browseUndeclaredReferences cleanCompactObsoleteClasses cleanOutUndeclared condenseChanges condenseSources forgetDoIts macroBenchmark1 macroBenchmark3 makeInternalRelease obsoleteBehaviors obsoleteClasses obsoleteMethodReferences recompileAllFrom: removeAllLineFeeds removeEmptyMessageCategories removeTextCode testDecompiler testFormatter testFormatter2 verifyChanges)('image, changes name' changeImageNameTo: currentSourcesName defaultSourcesName fullNameForChangesNamed: fullNameForImageNamed: imageName imageName: imagePath localChangesName newSourcesName vmPath)('memory space' bytesLeft bytesLeft: bytesLeftString createStackOverflow garbageCollect garbageCollectMost installLowSpaceWatcher lowSpaceThreshold lowSpaceWatcher lowSpaceWatcherProcess okayToProceedEvenIfSpaceIsLow primBytesLeft primLowSpaceSemaphore: primSignalAtBytesLeft: primitiveGarbageCollect signalLowSpace useUpMemory useUpMemoryWithArrays useUpMemoryWithContexts useUpMemoryWithTinyObjects)('code authors' agreedContributors allContributors contributionsOf: missingAuthorsWithMethods newContributors okContributors relicenseEffortStartDate returnedSignatories)('miscellaneous' exitToDebugger extraVMMemory extraVMMemory: getSystemAttribute: getVMParameters handleUserInterrupt listBuiltinModule: listBuiltinModules listLoadedModule: listLoadedModules logError:inContext:to: osVersion platformName platformSubtype setMacFileInfoOn: unloadModule: vmParameterAt: vmParameterAt:put: vmVersion)('objects from disk' objectForDataStream: storeDataOn:)('printing' printElementsOn:)('profiling' clearProfile dumpProfile profile: startProfiling stopProfiling)('retrieving' allBehaviorsDo: allCallsOn: allCallsOn:and: allClasses allClassesDo: allClassesImplementing: allGlobalRefs allGlobalRefsWithout: allImplementedMessages allImplementedMessagesWithout: allImplementorsOf: allImplementorsOf:localTo: allMethodsInCategory: allMethodsWithSourceString:matchCase: allMethodsWithString: allObjectsDo: allObjectsSelect: allPrimitiveMessages allPrimitiveMethodsInCategories: allSelect: allSelectNoDoits: allSentMessages allSentMessagesWithout: allUnSentMessages allUnSentMessagesIn: allUnSentMessagesWithout: allUnimplementedCalls allUnusedClassesWithout: isThereAReferenceTo: isThereAnImplementorOf: numberOfImplementorsOf: pointersTo: pointersTo:except: pointersToItem:of: poolUsers unimplemented)('shrinking' abandonSources abandonTempNames lastRemoval presumedSentMessages removeAllUnSentMessages removeSelector: removedUnusedClassesAndMethods reportClassAndMethodRemovalsFor: unusedClasses unusedClassesAndMethodsWithout:)('snapshot and quit' add:toList:after: addToShutDownList: addToShutDownList:after: addToStartUpList: addToStartUpList:after: lastQuitLogPosition processShutDownList: processStartUpList: quitPrimitive readDocumentFile removeFromShutDownList: removeFromStartUpList: saveAs saveAsEmbeddedImage saveAsNewVersion saveChangesInFileNamed: saveImageInFileNamed: saveSession send:toClassesNamedIn:with: setGCParameters setPlatformPreferences shutDown snapshot:andQuit: snapshotEmbeddedPrimitive snapshotPrimitive unbindExternalPrimitives)('sources, change log' aboutThisSystem assureStartupStampLogged calcEndianness closeSourceFiles currentChangeSetString datedVersion endianness event: externalizeSources forceChangesToDisk internalizeChangeLog internalizeSources isBigEndian isLittleEndian lastUpdateString logChange: logChange:preamble: openSourceFiles recover: systemInformationString timeStamp: version writeRecentCharacters:toFileNamed: writeRecentToFile)('special objects' clearExternalObjects compactClassesArray externalObjects hasSpecialSelector:ifTrueSetByte: recreateSpecialObjectsArray registerExternalObject: specialNargsAt: specialObjectsArray specialSelectorAt: specialSelectorSize specialSelectors unregisterExternalObject:)('copying' veryDeepCopyWith:)('toDeprecate' getFileNameFromUser snapshot:andQuit:embedded:)('ui' confirmRemovalOf:on: inspectGlobals)('browsing' browseAllAccessesTo:from: browseAllCallsOn: browseAllCallsOn:and: browseAllCallsOn:localTo: browseAllCallsOnClass: browseAllImplementorsOf: browseAllImplementorsOf:localTo: browseAllImplementorsOfList: browseAllImplementorsOfList:title: browseAllMethodsInCategory: browseAllObjectReferencesTo:except:ifNone: browseAllSelect: browseAllSelect:name:autoSelect: browseAllStoresInto:from: browseAllUnSentMessages browseAllUnimplementedCalls browseClassCommentsWithString: browseClassesWithNamesContaining:caseSensitive: browseEqSmallConstant browseInstVarDefs: browseInstVarRefs: browseMessageList:name: browseMessageList:name:autoSelect: browseMethodsWhoseNamesContain: browseMethodsWithSourceString: browseMethodsWithString: browseMethodsWithString:matchCase: browseMyChanges browseObsoleteReferences showMenuOf:withFirstItem:ifChosenDo: showMenuOf:withFirstItem:ifChosenDo:withCaption:)('private' allSymbolsIn:do:)('Compiler swapping' actualCompiledMethodWithNodeClass actualCompilerClass actualDecompilerClass actualEncoderClass actualParserClass actualScannerClass)('Closure measurements' browseMethodsWithClosuresThatAccessOuterTemps browseMethodsWithClosuresThatOnlyReadOuterTemps browseMethodsWithClosuresThatWriteOuterTemps browseMethodsWithClosuresThatWriteOuterTempsButCleanOtherwise browseMethodsWithEmptyClosures browseMethodsWithMoreThanOneClosure browseMethodsWithOnlyCleanClosures closuresInfoStringForClass:selector: eliotsClosureMeasurements eliotsClosureMeasurements2 eliotsClosureMeasurements2On: eliotsClosureMeasurementsOn:over:)('removing' removeKey:ifAbsent:)('system attributes' flagInterpretedMethods: isRunningCog isRunningCogit processHasThreadIdInstVar: processPreemptionYields processPreemptionYields:)('query' unusedBlocks)('testing' hasBindingThatBeginsWith:)('classes and traits' classNames nonClassNames)!