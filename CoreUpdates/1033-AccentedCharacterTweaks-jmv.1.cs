'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 15 June 2011 at 9:02:04 am'!!classDefinition: #Character category: #'Kernel-Text'!Magnitude subclass: #Character	instanceVariableNames: 'value '	classVariableNames: 'CharacterTable ClassificationTable LetterBits LowercaseBit UnicodeCodePoints UppercaseBit UnaccentedTable '	poolDictionaries: ''	category: 'Kernel-Text'!!Character methodsFor: 'testing' stamp: 'jmv 6/14/2011 22:53'!isAccented	^self isLetter and: [ self asUnaccented ~~ self ]! !!Character methodsFor: 'testing' stamp: 'jmv 6/14/2011 22:53'!isUnaccented	^self isLetter and: [ self asUnaccented == self ]! !!Character methodsFor: 'converting' stamp: 'jmv 6/14/2011 22:43'!asUnaccented	"	$A asUnaccented	$Á asUnaccented	(0 to: 255) collect: [ :i | (Character value: i) asUnaccented ]	(0 to: 255) collect: [ :i | (Character value: i) asUnaccented  asLowercase]	"	^ Character		value: (UnaccentedTable at: value + 1)! !!Character class methodsFor: 'class initialization' stamp: 'jmv 6/14/2011 20:55'!initializeClassificationTable	"Initialize the classification table. The classification table is a	compact encoding of upper and lower cases of characters with		- bits 0-7: The lower case value of this character.		- bits 8-15: The upper case value of this character.		- bit 16: lowercase bit (e.g., isLowercase == true)		- bit 17: uppercase bit (e.g., isUppercase == true).	The UnaccentedTable holds for each numeric value, the corresponding unaccented character"	LowercaseBit _ 1 bitShift: 16.	UppercaseBit _ 1 bitShift: 17.	"Initialize the letter bits (e.g., isLetter == true)"	LetterBits _ LowercaseBit bitOr: UppercaseBit.	ClassificationTable _ Array new: 256.	UnaccentedTable _ ByteArray new: 256.	"Initialize the defaults (neither lower nor upper case)"	0 to: 255 do: [ :i |		ClassificationTable at: i+1 put: (i bitShift: 8) + i.		UnaccentedTable at: i+1 put: i].	"Initialize character pairs (upper-lower case)"	Character uppercaseLowercaseAndUnaccentedLetters do: [ :group |		| uppercase lowercase unaccentedUppercase unaccentedLowercase |		group size > 1 ifTrue: [			uppercase _ group first asciiValue.			lowercase _ group second asciiValue.			ClassificationTable at: uppercase+1 put: (uppercase bitShift: 8) + lowercase + UppercaseBit.			ClassificationTable at: lowercase+1 put: (uppercase bitShift: 8) + lowercase + LowercaseBit.			group size > 2				ifTrue: [					unaccentedUppercase _ group third asciiValue.					unaccentedLowercase _ group fourth asciiValue.					UnaccentedTable at: uppercase+1 put: unaccentedUppercase.					UnaccentedTable at: lowercase+1 put: unaccentedLowercase ].		] ifFalse: [			lowercase _ group first asciiValue.			ClassificationTable at: lowercase+1 put: (lowercase bitShift: 8) + lowercase + LowercaseBit.		]	]! !!Character class methodsFor: 'class initialization' stamp: 'jmv 6/14/2011 20:22'!uppercaseLowercaseAndUnaccentedLetters	"Answer all uppercase and lowercase letters in standard collation order.	For accented characters, include the non-accented ones.	Note that $ß is 'LATIN SMALL LETTER SHARP S' and ISO 8859-15 doesn't have an uppercase version."	^#(		'Aa' 'ÀàAa' 'ÁáAa' 'ÂâAa' 'ÃãAa' 'ÄäAa' 'ÅåAa'		'Bb' 'Cc' 'Çç' 'Dd'			'Ee' 'ÈèEe' 'ÉéEe' 'ÊêEe' 'ËëEe'		'Ff' 'Gg' 'Hh'			'Ii' 'ÌìIi' 'ÍíIi' 'ÎîIi' 'ÏïIi'		'Jj' 'Kk' 'Ll' 'Mm' 'Nn' 'Ññ'			'Oo' 'ÒòOo' 'ÓóOo' 'ÔôOo' 'ÕõOo' 'ÖöOo'		'Pp' 'Qq' 'Rr'			'Ss' '¦¨Ss'		'Tt'			'Uu' 'ÙùUu' 'ÚúUu' 'ÛûUu' 'ÜüUu'		'Vv' 'Ww' 'Xx'			'Yy' 'ÝýYy' '¾ÿYy'			'Zz' '´¸Zz' 		'Ææ' 'Ðð' 'Øø' 'Þþ' 'ß' '¼½'	).! !!String class methodsFor: 'initialization' stamp: 'jmv 6/14/2011 20:30'!initialize	"	String initialize	"	| order newOrder lowercase |	"Case insensitive compare sorts space, digits, letters, all the rest..."	newOrder _ Array new: 256.	order _ -1.	32 to: 63 do: [ :c |		newOrder at: c + 1 put: (order _ order+1)].	Character uppercaseLowercaseAndUnaccentedLetters do: [ :upperAndLowercase |		order _ order+1.		newOrder at: upperAndLowercase first asciiValue + 1 put: order.		upperAndLowercase size > 1 ifTrue: [			newOrder at: upperAndLowercase second asciiValue + 1 put: order ]].	1 to: newOrder size do: [ :i |		(newOrder at: i) ifNil: [			newOrder at: i put: (order _ order+1)]].	CaseInsensitiveOrder _ newOrder asByteArray.		"Case sensitive compare sorts space, digits, letters, all the rest..."	newOrder _ Array new: 256.	order _ -1.	32 to: 63 do: [ :c |		newOrder at: c + 1 put: (order _ order+1)].	Character uppercaseLowercaseAndUnaccentedLetters do: [ :upperAndLowercase |		upperAndLowercase size > 1 ifTrue: [			newOrder at: upperAndLowercase first asciiValue + 1 put: (order _ order+1) ]].	Character uppercaseLowercaseAndUnaccentedLetters do: [ :upperAndLowercase |		lowercase _ upperAndLowercase size = 1			ifTrue: [ upperAndLowercase first ]			ifFalse: [ upperAndLowercase second ].		newOrder at: lowercase asciiValue + 1 put: (order _ order+1) ].	1 to: newOrder size do: [ :i |		(newOrder at: i) ifNil: [			newOrder at: i put: (order _ order+1)]].	order = 255 ifFalse: [self error: 'order problem'].	CaseSensitiveOrder _ newOrder asByteArray.	"a table for translating to lower case"	LowercasingTable _ String withAll: (Character allCharacters collect: [:c | c asLowercase]).	"a table for translating to upper case"	UppercasingTable _ String withAll: (Character allCharacters collect: [:c | c asUppercase]).	"a table for testing tokenish (for fast numArgs)"	Tokenish _ String withAll: (Character allCharacters collect:									[:c | c tokenish ifTrue: [c] ifFalse: [$~]]).	"CR and LF--characters that terminate a line"	CSLineEnders _ CharacterSet empty.	CSLineEnders add: Character cr.	CSLineEnders add: Character lf. 	"separators and non-separators"	CSSeparators _ CharacterSet separators.	CSNonSeparators _ CSSeparators complement! !!String class methodsFor: 'character collation' stamp: 'jmv 6/14/2011 16:25'!does: aCharacter caseInsensitiveCollateBefore: otherCharacter	"	String does: $a caseInsensitiveCollateBefore: $b	String does: $a caseInsensitiveCollateBefore: $B	String does: $A caseInsensitiveCollateBefore: $b	"	^ (CaseInsensitiveOrder at: aCharacter asciiValue + 1) < (CaseInsensitiveOrder at: otherCharacter asciiValue + 1).! !String initialize!Character class removeSelector: #letterPairs!!classDefinition: #Character category: #'Kernel-Text'!Magnitude subclass: #Character	instanceVariableNames: 'value'	classVariableNames: 'CharacterTable ClassificationTable LetterBits LowercaseBit UnaccentedTable UnicodeCodePoints UppercaseBit'	poolDictionaries: ''	category: 'Kernel-Text'!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."String initialize.Character initialize!