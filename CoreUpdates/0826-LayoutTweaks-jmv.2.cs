'From Cuis 3.0 of 18 January 2011 [latest update: #768] on 27 February 2011 at 9:54:25 pm'!!classDefinition: #BrowserCommentTextMorph category: #'Tools-Browser'!TextModelMorph subclass: #BrowserCommentTextMorph	instanceVariableNames: 'separator proportionalHeight separatorHeight '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Browser'!!Browser methodsFor: 'construction' stamp: 'jmv 2/27/2011 21:45'!buildLowerPanes	| codeAndButtons codeButtonsAndAnnotations comment separator |	comment _ self buildMorphicCommentPane.	separator _ LayoutAdjustingMorph new.	comment separator: separator.	codeAndButtons _ LayoutMorph newColumn.	codeAndButtons		addMorph: self optionalButtonRow fixedHeight: self defaultButtonPaneHeight;		addAdjusterAndMorph: self buildMorphicCodePane proportionalHeight: 2.0;		addMorph: separator fixedHeight: 4;		addMorph: comment proportionalHeight: 2.0.	codeButtonsAndAnnotations _ LayoutMorph newColumn.	codeButtonsAndAnnotations		addMorph: self buildMorphicAnnotationsPane fixedHeight: self defaultAnnotationPaneHeight;		addAdjusterAndMorph: codeAndButtons proportionalHeight: 1.0.	^codeButtonsAndAnnotations! !!BrowserCommentTextMorph methodsFor: 'displaying' stamp: 'jmv 2/27/2011 19:32'!hidePane	self hide.	separator visible ifTrue: [		proportionalHeight _ self layoutSpec proportionalHeight.		separatorHeight _ separator layoutSpec fixedHeight ].	separator layoutSpec fixedHeight: 0.	self layoutSpec proportionalHeight: 0.	separator ifNotNil: [ separator hide ]! !!BrowserCommentTextMorph methodsFor: 'displaying' stamp: 'jmv 2/27/2011 21:52'!showPane	self show.	proportionalHeight ifNotNil: [		self layoutSpec proportionalHeight: proportionalHeight ].	separator ifNotNil: [		separatorHeight ifNotNil: [			separator layoutSpec fixedHeight: separatorHeight ].		separator show ]! !!FileList2 class methodsFor: 'instance creation' stamp: 'jmv 2/27/2011 19:20'!morphicViewOnDirectory: aFileDirectory	| aFileList window middleRow upperRow |	aFileList _ self new directory: aFileDirectory.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: aFileList morphicPatternPane proportionalWidth: 0.3;		addAdjusterAndMorph: aFileList optionalButtonRow proportionalWidth: 0.7.	middleRow _ LayoutMorph newRow.	middleRow		addMorph: aFileList morphicDirectoryTreePane proportionalWidth: 0.3;		addAdjusterAndMorph: aFileList morphicFileListPane proportionalWidth: 0.7.	window _ SystemWindow new model: aFileList.	window layoutMorph		addMorph: upperRow fixedHeight: self defaultButtonPaneHeight;		addAdjusterAndMorph: middleRow proportionalHeight: 0.4;		addAdjusterAndMorph: aFileList morphicFileContentsPane proportionalHeight: 0.6.	window setLabel: aFileDirectory pathName.	aFileList postOpen.	^ window ! !!LayoutMorph methodsFor: 'layout' stamp: 'jmv 2/27/2011 21:50'!layoutSubmorphsVerticallyIn: boundsForLayout	"Compute a new layout based on the given layout bounds."	| usableHeight sumOfFixed normalizationFactor availableForPropHeight heights t usableWidth boundsLeft boundsBottom b l r |	usableHeight _ boundsForLayout height - ((submorphs size + 1) * separation).	sumOfFixed _ submorphs sum: [ :m | m layoutSpec fixedHeight ].	availableForPropHeight _ usableHeight - sumOfFixed.	padding ifNil: [		availableForPropHeight = 0 ifFalse: [			self height: self height - availableForPropHeight.			^ self doLayoutIfNeeded ]].	normalizationFactor _ self proportionalHeightNormalizationFactor.	availableForPropHeight _ availableForPropHeight * normalizationFactor.	heights _ submorphs collect: [ :m | m layoutSpec heightFor: availableForPropHeight ].	t _ ((usableHeight - heights sum) * (padding ifNil: [0]) + separation max: 0) +  boundsForLayout top.	usableWidth _ boundsForLayout width - (2*separation) max: 0.	boundsLeft _ boundsForLayout left.		boundsBottom _ boundsForLayout bottom.	submorphs size to: 1 by: -1 do: [ :index | | m h w ls |			m _ submorphs at: index.			h _ heights at: index.			"major direction"			b _ t + h min: boundsBottom.			"minor direction"			ls _ m layoutSpec.			w _ (ls widthFor: usableWidth) min: usableWidth.			l _ (usableWidth - w) * ls minorDirectionPadding + separation + boundsLeft.			r _ l + w.			"Set bounds and adjust major direction for next step"			m bounds: (l rounded @ t rounded corner: r rounded @ b rounded).			h > 0 ifTrue: [				t _ b + separation min: boundsBottom ]]! !!LayoutMorph methodsFor: 'submorphs-add/remove' stamp: 'jmv 2/27/2011 21:46'!addAdjusterMorph	"So the user can adjust layout"	"twekear para ui grande..."	| thickness |	thickness _ 4.	direction == #horizontal ifTrue: [		self			addMorph: LayoutAdjustingMorph new			layoutSpec: (LayoutSpec fixedWidth: thickness) ].	direction == #vertical ifTrue: [		self			addMorph: LayoutAdjustingMorph new			layoutSpec: (LayoutSpec fixedHeight: thickness)]! !!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 2/27/2011 19:52'!adjustHorizontallyBy: aLayoutAdjustMorph at: aPoint	| delta l ls r rs lNewWidth rNewWidth i lCurrentWidth rCurrentWidth doNotResizeBelow |	doNotResizeBelow _ self minPaneWidthForReframe.	i _ submorphs indexOf: aLayoutAdjustMorph.	l _ self submorphs at: i +1.	ls _ l layoutSpec.	lCurrentWidth _ l width max: 1.	"avoid division by zero"	r _ self submorphs at: i - 1.	rs _ r layoutSpec.	rCurrentWidth _ r width max: 1.	"avoid division by zero"	delta _ aPoint x - aLayoutAdjustMorph center x.	delta _ delta max: doNotResizeBelow - lCurrentWidth.	delta _ delta min: rCurrentWidth - doNotResizeBelow.	delta = 0 ifTrue: [ ^self ].	rNewWidth _ rCurrentWidth - delta.	lNewWidth _ lCurrentWidth + delta.	(ls isProportionalWidth and: [ rs isProportionalWidth ])		ifTrue: [	"If both proportional, update them"			ls setProportionalWidth: (1.0 * lNewWidth / lCurrentWidth * ls proportionalWidth).			rs setProportionalWidth: (1.0 * rNewWidth / rCurrentWidth * rs proportionalWidth) ]		ifFalse: ["If at least one is fixed, update only the fixed"			ls isProportionalWidth ifFalse: [				ls fixedOrMorphWidth: lNewWidth ].			rs isProportionalWidth ifFalse: [				rs fixedOrMorphWidth: rNewWidth ]].	self layoutAndComputeFullBounds! !!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 2/27/2011 19:52'!adjustVerticallyBy: aLayoutAdjustMorph at: aPoint	| delta t ts b bs tNewHeight bNewHeight i tCurrentHeight bCurrentHeight doNotResizeBelow |	doNotResizeBelow _ self minPaneHeightForReframe.	i _ submorphs indexOf: aLayoutAdjustMorph.	t _ self submorphs at: i +1.	ts _ t layoutSpec.	tCurrentHeight _ t height max: 1.	"avoid division by zero"	b _ self submorphs at: i - 1.	bs _ b layoutSpec.	bCurrentHeight _ b height max: 1.	"avoid division by zero"	delta _ aPoint y - aLayoutAdjustMorph center y.	delta _ delta max: doNotResizeBelow - tCurrentHeight.	delta _ delta min: bCurrentHeight - doNotResizeBelow.	delta = 0 ifTrue: [ ^self ].	tNewHeight _ tCurrentHeight + delta.	bNewHeight _ bCurrentHeight - delta.	(ts isProportionalHeight and: [ bs isProportionalHeight ])		ifTrue: [	"If both proportional, update them"			ts setProportionalHeight: (1.0 * tNewHeight / tCurrentHeight * ts proportionalHeight).			bs setProportionalHeight: (1.0 * bNewHeight / bCurrentHeight * bs proportionalHeight) ]		ifFalse: ["If at least one is fixed, update only the fixed"			ts isProportionalHeight ifFalse: [				ts fixedOrMorphHeight: tNewHeight ].			bs isProportionalHeight ifFalse: [				bs fixedOrMorphHeight: bNewHeight ]].	self layoutAndComputeFullBounds! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/27/2011 19:16'!addMorphs: morphs widthProportionalTo: widths	"Widths can be in any arbitrary unit. The actual widths will be proportional to them."	morphs with: widths do: [ :m :w |		self addMorph: m proportionalWidth: w ]! !!classDefinition: #BrowserCommentTextMorph category: #'Tools-Browser'!TextModelMorph subclass: #BrowserCommentTextMorph	instanceVariableNames: 'separator separatorHeight proportionalHeight'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Browser'!