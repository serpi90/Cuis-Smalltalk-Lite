'From Cuis 2.7 of 3 September 2010 [latest update: #600] on 6 October 2010 at 10:10:40 pm'!!classDefinition: #CharacterTest category: #'Kernel-Tests'!TestCase subclass: #CharacterTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Tests'!!classDefinition: #String category: #'Kernel-Text'!ArrayedCollection variableByteSubclass: #String	instanceVariableNames: ''	classVariableNames: 'AsciiOrder CSLineEnders CSNonSeparators CSSeparators CaseInsensitiveOrder CaseSensitiveOrder Latin1ToUtf8Encodings Latin1ToUtf8Map LowercasingTable Tokenish UppercasingTable '	poolDictionaries: ''	category: 'Kernel-Text'!!Character methodsFor: 'comparing' stamp: 'jmv 10/6/2010 18:18'!< aCharacter 	"Compare with the standard case sensitive collation order.	This stuff should be in Character and not in String..."	^String does: self collateBefore: aCharacter! !!Character methodsFor: 'comparing' stamp: 'jmv 10/6/2010 18:18'!> aCharacter 	"Compare with the standard case sensitive collation order.	This stuff should be in Character and not in String..."	^String does: self collateAfter: aCharacter! !!Character methodsFor: 'testing' stamp: 'jmv 10/6/2010 17:27'!isVowel	"Answer whether the receiver is one of the vowels, AEIOU, in upper or 	lower case, and with various diacritical marks."	^Character vowels includes: self! !!Character class methodsFor: 'class initialization' stamp: 'jmv 10/6/2010 22:09'!initialize	"Create the table of unique Characters.	Character initialize	"	self initializeClassificationTable! !!Character class methodsFor: 'class initialization' stamp: 'jmv 10/6/2010 17:13'!initializeClassificationTable	"Initialize the classification table. The classification table is a	compact encoding of upper and lower cases of characters with		- bits 0-7: The lower case value of this character.		- bits 8-15: The upper case value of this character.		- bit 16: lowercase bit (e.g., isLowercase == true)		- bit 17: uppercase bit (e.g., isUppercase == true)"	LowercaseBit := 1 bitShift: 16.	UppercaseBit := 1 bitShift: 17.	"Initialize the letter bits (e.g., isLetter == true)"	LetterBits := LowercaseBit bitOr: UppercaseBit.	ClassificationTable := Array new: 256.	"Initialize the defaults (neither lower nor upper case)"	0 to: 255 do:[:i|		ClassificationTable at: i+1 put: (i bitShift: 8) + i.	].	"Initialize character pairs (upper-lower case)"	Character letterPairs do: [ :pair | | ch1 ch2 |		pair size > 1 ifTrue: [			ch1 _ pair first asciiValue.			ch2 _ pair last asciiValue.			ClassificationTable at: ch1+1 put: (ch1 bitShift: 8) + ch2 + UppercaseBit.			ClassificationTable at: ch2+1 put: (ch1 bitShift: 8) + ch2 + LowercaseBit.		] ifFalse: [			ch1 _ pair first asciiValue.			ClassificationTable at: ch1+1 put: (ch1 bitShift: 8) + ch1 + LowercaseBit.		]	]! !!Character class methodsFor: 'class initialization' stamp: 'jmv 10/6/2010 17:05'!letterPairs	"Answer all uppercase and lowercase letters in standard collation order.	Note that $ß is 'LATIN SMALL LETTER SHARP S' and ISO 8859-15 doesn't have an uppercase version."	^#('Aa' 'Àà' 'Áá' 'Ââ' 'Ãã' 'Ää' 'Åå'	'Bb' 'Cc' 'Çç' 'Dd' 'Ee' 'Èè' 'Éé' 'Êê' 'Ëë'	'Ff' 'Gg' 'Hh' 'Ii' 'Ìì' 'Íí' 'Îî' 'Ïï'	'Jj' 'Kk' 'Ll' 'Mm' 'Nn' 'Ññ' 'Oo' 'Òò' 'Óó' 'Ôô' 'Õõ' 'Öö'	'Pp' 'Qq' 'Rr' 'Ss' '¦¨' 	'Tt' 'Uu' 'Ùù' 'Úú' 'Ûû' 'Üü'	'Vv' 'Ww' 'Xx' 'Yy' 'İı' '¾ÿ'	'Zz' '´¸' 	'Ææ' 'Ğğ' 'Øø' 'Şş' 'ß' '¼½').! !!Character class methodsFor: 'class initialization' stamp: 'jmv 10/6/2010 17:26'!vowels	"Answer a String with all the vowels"		^'AaÀàÁáÂâÃãÄäÅåEeÈèÉéÊêËëIiÌìÍíÎîÏïOoÒòÓóÔôÕõÖöUuÙùÚúÛûÜü'! !!CharacterTest methodsFor: 'testing' stamp: 'jmv 10/6/2010 22:08'!testCaseConversion	"	self new testCaseConversion	"	self assert: ('año Comé tomá Camión' collect: [ :c | c asLowercase ]) = 'año comé tomá camión'.	self assert:('año Comé tomá Camión' collect: [ :c | c asUppercase ]) = 'AÑO COMÉ TOMÁ CAMIÓN'! !!CharacterTest methodsFor: 'testing' stamp: 'jmv 10/6/2010 22:05'!testSorting	"	self new testSorting	"	self assert: $a < $á.	self deny: $a < $Á.	self assert: $A < $á.	self assert: $A < $Á.	self assert: $á < $b.	self deny: $á < $B.	self assert: $Á < $b.	self assert: $Á < $B.! !!CharacterTest methodsFor: 'testing' stamp: 'jmv 10/6/2010 22:10'!testTestingMethods	"	self new testTestingMethods	"	self assert:		('año Comé tomá Camión' allSatisfy: [ :c |			c = $  or: [ c isLetter ]]).	self assert:		('año comé tomá camión' allSatisfy: [ :c |			c = $  or: [ c isLowercase ]]).	self assert:		('AÑO COMÉ TOMÁ CAMIÓN' allSatisfy: [ :c |			c = $  or: [ c isUppercase ]]).	self assert:		('AaÀàÁáÂâÃãÄäÅåEeÈèÉéÊêËëIiÌìÍíÎîÏïOoÒòÓóÔôÕõÖöUuÙùÚúÛûÜü' allSatisfy: [ :c |			c isVowel ]).! !!String methodsFor: 'comparing' stamp: 'jmv 10/6/2010 18:06'!< aString 	"Answer whether the receiver sorts before aString.	The collation order is case sensitive."	^ (self compare: self with: aString collated: CaseSensitiveOrder) = 1! !!String methodsFor: 'comparing' stamp: 'jmv 10/6/2010 18:07'!<= aString 	"Answer whether the receiver sorts before or equal to aString.	The collation order is case sensitive."	^ (self compare: self with: aString collated: CaseSensitiveOrder) <= 2! !!String methodsFor: 'comparing' stamp: 'jmv 10/6/2010 21:53'!= aString 	"Answer whether the receiver sorts equally as aString.	The collation order is case sensitive."	aString species == String ifFalse: [		(aString is: #Text) ifTrue: [^ self = aString string].		^ false].	^ (self compare: self with: aString collated: CaseSensitiveOrder) = 2! !!String methodsFor: 'comparing' stamp: 'jmv 10/6/2010 18:07'!> aString 	"Answer whether the receiver sorts after aString.	The collation order is case sensitive."	^ (self compare: self with: aString collated: CaseSensitiveOrder) = 3! !!String methodsFor: 'comparing' stamp: 'jmv 10/6/2010 18:07'!>= aString 	"Answer whether the receiver sorts after or equal to aString.	The collation order is case sensitive."	^ (self compare: self with: aString collated: CaseSensitiveOrder) >= 2! !!String class methodsFor: 'initialization' stamp: 'jmv 10/6/2010 21:55'!initialize	"	String initialize	"	| order newOrder |	"Case insensitive compare sorts space, digits, letters, all the rest..."	newOrder _ Array new: 256.	order _ -1.	32 to: 63 do: [ :c |		newOrder at: c + 1 put: (order _ order+1)].	Character letterPairs do: [ :upperAndLowercase |		order _ order+1.		upperAndLowercase do: [ :c |			newOrder at: c asciiValue + 1 put: order ]].	1 to: newOrder size do: [ :i |		(newOrder at: i) ifNil: [			newOrder at: i put: (order _ order+1)]].	CaseInsensitiveOrder _ newOrder asByteArray.		"Case sensitive compare sorts space, digits, letters, all the rest..."	newOrder _ Array new: 256.	order _ -1.	32 to: 63 do: [ :c |		newOrder at: c + 1 put: (order _ order+1)].	Character letterPairs do: [ :upperAndLowercase |		upperAndLowercase size > 1 ifTrue: [			newOrder at: upperAndLowercase first asciiValue + 1 put: (order _ order+1) ]].	Character letterPairs do: [ :upperAndLowercase |		newOrder at: upperAndLowercase last asciiValue + 1 put: (order _ order+1) ].	1 to: newOrder size do: [ :i |		(newOrder at: i) ifNil: [			newOrder at: i put: (order _ order+1)]].	order = 255 ifFalse: [self error: 'order problem'].	CaseSensitiveOrder _ newOrder asByteArray.	"a table for translating to lower case"	LowercasingTable _ String withAll: (Character allCharacters collect: [:c | c asLowercase]).	"a table for translating to upper case"	UppercasingTable _ String withAll: (Character allCharacters collect: [:c | c asUppercase]).	"a table for testing tokenish (for fast numArgs)"	Tokenish _ String withAll: (Character allCharacters collect:									[:c | c tokenish ifTrue: [c] ifFalse: [$~]]).	"CR and LF--characters that terminate a line"	CSLineEnders _ CharacterSet empty.	CSLineEnders add: Character cr.	CSLineEnders add: Character lf. 	"separators and non-separators"	CSSeparators _ CharacterSet separators.	CSNonSeparators _ CSSeparators complement.		"UTF-8 support for VM interface for clipboard, files and directories at least on Windows"	self initializeUtf8ConversionMaps! !!String class methodsFor: 'character collation' stamp: 'jmv 10/6/2010 18:16'!does: aCharacter collateAfter: otherCharacter	^ (CaseSensitiveOrder at: aCharacter asciiValue + 1) > (CaseSensitiveOrder at: otherCharacter asciiValue + 1).! !!String class methodsFor: 'character collation' stamp: 'jmv 10/6/2010 18:16'!does: aCharacter collateBefore: otherCharacter	^ (CaseSensitiveOrder at: aCharacter asciiValue + 1) < (CaseSensitiveOrder at: otherCharacter asciiValue + 1).! !!StringTest methodsFor: 'testing' stamp: 'jmv 10/6/2010 22:08'!testCaseConversion	"	self new testCaseConversion	"	self assert: ('año Comé tomá Camión' asLowercase) = 'año comé tomá camión'.	self assert: ('año Comé tomá Camión' asUppercase) = 'AÑO COMÉ TOMÁ CAMIÓN'! !!StringTest methodsFor: 'testing' stamp: 'jmv 10/6/2010 22:03'!testSorting"self new testSorting"	self assert: 'a' < 'á'.	self assert: ('a' < 'Á') not.	self assert: 'A' < 'á'.	self assert: 'A' < 'Á'.	self assert: 'á' < 'b'.	self assert: ('á' < 'B') not.	self assert: 'Á' < 'b'.	self assert: 'Á' < 'B'.	self assert: ('a' caseSensitiveLessOrEqual: 'á').	self deny: ('a' caseSensitiveLessOrEqual: 'Á').	self assert: ('A' caseSensitiveLessOrEqual: 'á').	self assert: ('A' caseSensitiveLessOrEqual: 'Á').	self assert: ('á' caseSensitiveLessOrEqual: 'b').	self deny: ('á' caseSensitiveLessOrEqual: 'B').	self assert: ('Á' caseSensitiveLessOrEqual: 'b').	self assert: ('Á' caseSensitiveLessOrEqual: 'B').	self assert: ('a' caseInsensitiveLessOrEqual: 'á').	self assert: ('a' caseInsensitiveLessOrEqual: 'Á').	self assert: ('A' caseInsensitiveLessOrEqual: 'á').	self assert: ('A' caseInsensitiveLessOrEqual: 'Á').	self assert: ('á' caseInsensitiveLessOrEqual: 'b').	self assert: ('á' caseInsensitiveLessOrEqual: 'B').	self assert: ('Á' caseInsensitiveLessOrEqual: 'b').	self assert: ('Á' caseInsensitiveLessOrEqual: 'B').! !String initialize!!String class reorganize!('instance creation' cr crlf crlfcrlf fromPacked: fromString: lf readFrom: tab value:)('examples' example)('initialization' initialize initializeUtf8ConversionMaps)('primitives' findFirstInString:inSet:startingAt: indexOfAscii:inString:startingAt: stringHash:initialHash: translate:from:to:table:)('character collation' does:collateAfter: does:collateBefore:)!!classDefinition: #String category: #'Kernel-Text'!ArrayedCollection variableByteSubclass: #String	instanceVariableNames: ''	classVariableNames: 'CSLineEnders CSNonSeparators CSSeparators CaseInsensitiveOrder CaseSensitiveOrder Latin1ToUtf8Encodings Latin1ToUtf8Map LowercasingTable Tokenish UppercasingTable'	poolDictionaries: ''	category: 'Kernel-Text'!!CharacterTest reorganize!('testing' testCaseConversion testSorting testTestingMethods)!Character initialize!