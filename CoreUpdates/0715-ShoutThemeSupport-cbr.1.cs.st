'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 17 December 2010 at 9:45:43 pm'!!classDefinition: #ThemesTest category: #'Theme-Tests'!TestCase subclass: #ThemesTest	instanceVariableNames: 'theme'	classVariableNames: ''	poolDictionaries: ''	category: 'Theme-Tests'!!ThemesTest commentStamp: '<historical>' prior: 0!If you break #shout and switch themes, you may not be able to edit text or use the debugger. This seemed worthy of a test case.!!Behavior methodsFor: 'private' stamp: 'cbr 12/17/2010 21:04'!setFormat: aFormatInstanceDescription	"Needed for shout theme test."	"only use this method with extreme care since it modifies the format of the class      ie a description of the number of instance variables and whether the class is     compact, variable sized"	format := aFormatInstanceDescription! !!SHTextStylerST80 class methodsFor: 'style table' stamp: 'cbr 12/17/2010 00:26'!defaultStyleTable	^ Theme current generateShoutConfig! !!Theme methodsFor: 'colors' stamp: 'cbr 12/17/2010 21:40'!shout	"Color symbols as an association list."		^ {		#defaults 				-> #black.		#undefined 				-> #red.		#methodTags 			-> #(green muchDarker).		#pseudoVariables 		-> #(red muchDarker).		#messages 				-> #(blue muchDarker).		#instVar 					-> #(magenta muchDarker).		#incompleteMessages -> #(gray veryMuchDarker).		#blockLevelFour 		-> #(green darker).		#blockLevelFive 		-> #(orange darker).		#blockLevelSix 			-> #(magenta darker).		#blockLevelSeven 		-> #blue.		#tempBar 				-> #gray.		#tempVars 				-> #(gray muchDarker).	}! !!Theme methodsFor: 'private' stamp: 'cbr 12/16/2010 23:58'!argumentTypes	^ #(		patternArg		methodArg		blockPatternArg		blockArg		argument	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/16/2010 23:58'!blockLevelFive	^ #(		leftParenthesis5		rightParenthesis5		blockStart5		blockEnd5	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:57'!blockLevelFour	^ #(		blockStart4 		blockEnd4		leftParenthesis4		rightParenthesis4	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/16/2010 23:58'!blockLevelSeven	^ #(		leftParenthesis7		rightParenthesis7		blockStart7		blockEnd7	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/16/2010 23:59'!blockLevelSix	^ #(		leftParenthesis6		rightParenthesis6		blockStart6		blockEnd6	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/16/2010 23:59'!blockTemps	^ #(		blockTempVar		blockPatternTempVar	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/16/2010 23:59'!defaults	^ #(		default		arrayStart		arrayEnd		arrayStart1		arrayEnd1		leftBrace		rightBrace		cascadeSeparator		statementSeparator		externalCallType		externalCallTypePointerIndicator		rightParenthesis1		blockArgColon		leftParenthesis		rightParenthesis		blockStart		blockEnd	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:00'!firstBlockLevel	^ #(		blockStart1		blockEnd1		leftParenthesis1	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 01:01'!generateShoutConfig	| styles colors |		styles := OrderedCollection new.	colors := self shout as: Dictionary.	{		{self undefined. colors at: #undefined}.		{self literals . colors at: #pseudoVariables}.		{self defaults . colors at: #defaults}.		{self pseudoVariables . colors at: #pseudoVariables}.		{self blockLevelFour . colors at: #blockLevelFour}.		{self instVar . colors at: #instVar}.		{self messages . colors at: #messages}.		{self blockLevelFive . colors at: #blockLevelFive}.		{self blockLevelSix . colors at: #blockLevelSix}.		{self blockLevelSeven . colors at: #blockLevelSeven}.		{self tempBar . colors at: #tempBar}.		{self methodTags . colors at: #methodTags . #bold}.		{self globals . colors at: #defaults . #bold}.		{self incompleteMessages . colors at: #incompleteMessages . #underlined}.		{self argumentTypes . colors at: #messages . #italic}.		{self symbols . colors at: #messages . #bold}.		{self nilly . nil . #bold}. "This one is odd.  --cbr"		{self tempVars . colors at: #tempVars . #italic }.		{self blockTemps . colors at: #tempBar . #italic}	} do: [:style|		styles addAll:			(style first				collect: [:category|					Array withAll:						(style asOrderedCollection							removeFirst;							addFirst: category;							yourself)])].	"Miscellaneous remainder after factoring out commonality:"	self flag: #todo. "investigate meaning of nil in this context"	styles addAll: {		{#unfinishedString . colors at: #undefined . #normal}.		{#undefinedIdentifier . colors at: #undefined . #bold}.		{#unfinishedComment . colors at: #pseudoVariables . #italic}.		{#comment . colors at: #methodTags . #italic}.		{#string . colors at: #instVar . #normal}.		{#literal . nil . #italic}.		{#incompleteIdentifier . colors at: #tempVars . {#italic. #underlined}}.		{#classVar . colors at: #tempVars . #bold}.	}.	^ styles! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:00'!globals	^ #(		primitiveOrExternalCallStart		primitiveOrExternalCallEnd		globalVar		workspaceVar	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:01'!incompleteMessages	^ #(		incompleteKeyword		incompleteBinary		incompleteUnary	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:01'!instVar	^ #(		(instVar magentaMuchDarker)		(blockStart2 magentaMuchDarker)		(blockEnd2 magentaMuchDarker)		(leftParenthesis2 magentaMuchDarker)		(rightParenthesis2	magentaMuchDarker)	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:01'!literals	^ #(			character			integer			number			-			blockStart3			blockEnd3			leftParenthesis3			rightParenthesis3	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:01'!messages	^ #(		keyword		binary		unary	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:01'!methodTags	^ #(		primitive		pragmaKeyword		pragmaUnary		pragmaBinary		externalFunctionCallingConvention		module	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:02'!nilly	"#bold"	^ #(		assignment		ansiAssignment		patternKeyword		patternBinary		patternUnary	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:02'!pseudoVariables	^ #(		#self		#super		#true		#false		#nil		#thisContext		#return	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:02'!symbols	^ #(		symbol		stringSymbol		literalArray	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:02'!tempBar		^ #(		methodTempBar		blockTempBar		blockArgsBar	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:02'!tempVars	^ #(		tempVar		patternTempVar		poolConstant	)! !!Theme methodsFor: 'private' stamp: 'cbr 12/17/2010 00:02'!undefined	^ #(		invalid		excessCode		#'$'		undefinedKeyword		undefinedBinary		undefinedUnary	)! !!ThemesTest methodsFor: 'as yet unclassified' stamp: 'cbr 12/17/2010 21:34'!setUp	"Create an anonymous subclass of Theme, override #shout.	We do this because the ouput of #generateShoutConfig, the	method under test, is dependent on the color data answered 	by #shout, and we don't want the test to fail just because 	someone changed the colors on the default theme (Theme.)"	| metaclass |	metaclass := Metaclass new		superclass: Theme class;		methodDictionary: MethodDictionary new;		setFormat: Theme class format;		yourself.	theme := metaclass new		superclass: Theme;		methodDictionary: MethodDictionary new;		setFormat: Theme format;		yourself.			theme compile:'	shout	"Color symbols as an association list."		^ {		#defaults 				-> #black.		#undefined 			-> #green.		#methodTags 			-> #(green muchDarker).		#pseudoVariables 		-> #(red muchDarker).		#messages 			-> #(blue muchDarker).		#instVar 				-> #(magenta muchDarker).		#incompleteMessages -> #(gray veryMuchDarker).		#blockLevelFour 		-> #(green darker).		#blockLevelFive 		-> #(orange darker).		#blockLevelSix 		-> #(magenta darker).		#blockLevelSeven 		-> #blue.		#tempBar 				-> #gray.		#tempVars 			-> #(gray muchDarker).	}'"	theme class methodDictionary 		at: #shout		put: (self class methodDictionary at: #shout)."! !!ThemesTest methodsFor: 'as yet unclassified' stamp: 'cbr 12/17/2010 21:38'!shoutArray	^  #(#(#invalid #green) #(#excessCode #green) #(#'$' #green) #(#undefinedKeyword #green) #(#undefinedBinary #green) #(#undefinedUnary #green) #(#character #(#red #muchDarker)) #(#integer #(#red #muchDarker)) #(#number #(#red #muchDarker)) #(#- #(#red #muchDarker)) #(#blockStart3 #(#red #muchDarker)) #(#blockEnd3 #(#red #muchDarker)) #(#leftParenthesis3 #(#red #muchDarker)) #(#rightParenthesis3 #(#red #muchDarker)) #(#default #black) #(#arrayStart #black) #(#arrayEnd #black) #(#arrayStart1 #black) #(#arrayEnd1 #black) #(#leftBrace #black) #(#rightBrace #black) #(#cascadeSeparator #black) #(#statementSeparator #black) #(#externalCallType #black) #(#externalCallTypePointerIndicator #black) #(#rightParenthesis1 #black) #(#blockArgColon #black) #(#leftParenthesis #black) #(#rightParenthesis #black) #(#blockStart #black) #(#blockEnd #black) #(#self #(#red #muchDarker)) #(#super #(#red #muchDarker)) #(#true #(#red #muchDarker)) #(#false #(#red #muchDarker)) #(#nil #(#red #muchDarker)) #(#thisContext #(#red #muchDarker)) #(#return #(#red #muchDarker)) #(#blockStart4 #(#green #darker)) #(#blockEnd4 #(#green #darker)) #(#leftParenthesis4 #(#green #darker)) #(#rightParenthesis4 #(#green #darker)) #(#(#instVar #magentaMuchDarker) #(#magenta #muchDarker)) #(#(#blockStart2 #magentaMuchDarker) #(#magenta #muchDarker)) #(#(#blockEnd2 #magentaMuchDarker) #(#magenta #muchDarker)) #(#(#leftParenthesis2 #magentaMuchDarker) #(#magenta #muchDarker)) #(#(#rightParenthesis2 #magentaMuchDarker) #(#magenta #muchDarker)) #(#keyword #(#blue #muchDarker)) #(#binary #(#blue #muchDarker)) #(#unary #(#blue #muchDarker)) #(#leftParenthesis5 #(#orange #darker)) #(#rightParenthesis5 #(#orange #darker)) #(#blockStart5 #(#orange #darker)) #(#blockEnd5 #(#orange #darker)) #(#leftParenthesis6 #(#magenta #darker)) #(#rightParenthesis6 #(#magenta #darker)) #(#blockStart6 #(#magenta #darker)) #(#blockEnd6 #(#magenta #darker)) #(#leftParenthesis7 #blue) #(#rightParenthesis7 #blue) #(#blockStart7 #blue) #(#blockEnd7 #blue) #(#methodTempBar #gray) #(#blockTempBar #gray) #(#blockArgsBar #gray) #(#primitive #(#green #muchDarker) #bold) #(#pragmaKeyword #(#green #muchDarker) #bold) #(#pragmaUnary #(#green #muchDarker) #bold) #(#pragmaBinary #(#green #muchDarker) #bold) #(#externalFunctionCallingConvention #(#green #muchDarker) #bold) #(#module #(#green #muchDarker) #bold) #(#primitiveOrExternalCallStart #black #bold) #(#primitiveOrExternalCallEnd #black #bold) #(#globalVar #black #bold) #(#workspaceVar #black #bold) #(#incompleteKeyword #(#gray #veryMuchDarker) #underlined) #(#incompleteBinary #(#gray #veryMuchDarker) #underlined) #(#incompleteUnary #(#gray #veryMuchDarker) #underlined) #(#patternArg #(#blue #muchDarker) #italic) #(#methodArg #(#blue #muchDarker) #italic) #(#blockPatternArg #(#blue #muchDarker) #italic) #(#blockArg #(#blue #muchDarker) #italic) #(#argument #(#blue #muchDarker) #italic) #(#symbol #(#blue #muchDarker) #bold) #(#stringSymbol #(#blue #muchDarker) #bold) #(#literalArray #(#blue #muchDarker) #bold) #(#assignment nil #bold) #(#ansiAssignment nil #bold) #(#patternKeyword nil #bold) #(#patternBinary nil #bold) #(#patternUnary nil #bold) #(#tempVar #(#gray #muchDarker) #italic) #(#patternTempVar #(#gray #muchDarker) #italic) #(#poolConstant #(#gray #muchDarker) #italic) #(#blockTempVar #gray #italic) #(#blockPatternTempVar #gray #italic) #(#unfinishedString #green #normal) #(#undefinedIdentifier #green #bold) #(#unfinishedComment #(#red #muchDarker) #italic) #(#comment #(#green #muchDarker) #italic) #(#string #(#magenta #muchDarker) #normal) #(#literal nil #italic) #(#incompleteIdentifier #(#gray #muchDarker) #(#italic #underlined)) #(#classVar #(#gray #muchDarker) #bold))! !!ThemesTest methodsFor: 'as yet unclassified' stamp: 'cbr 12/17/2010 21:01'!testGenerateShoutConfig	self assert: 		(self shoutArray = theme new generateShoutConfig asArray)! !