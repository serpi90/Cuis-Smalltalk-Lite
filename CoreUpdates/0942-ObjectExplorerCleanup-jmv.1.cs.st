'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 22 April 2011 at 11:54:01 pm'!!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/22/2011 23:42'!browseClassRefs	Smalltalk browseAllCallsOnClass: self object class theNonMetaClass! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/22/2011 23:41'!browseFullProtocol	"Spawn a window showing full protocol for the receiver's selection"	ProtocolBrowser openFullProtocolForClass: self object class! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/22/2011 23:39'!browseMethodFull	BrowserWindow fullOnClass: self object class selector: nil! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/22/2011 23:40'!classHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."	Utilities spawnHierarchyForClass: self object class selector: nil! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/22/2011 23:42'!explorerKey: aChar from: view	currentSelection ifNotNil: [		aChar == $i ifTrue: [^ self inspectSelection].		aChar == $I ifTrue: [^ self exploreSelection].		aChar == $b ifTrue: [^ self browseMethodFull].		aChar == $h ifTrue: [^ self classHierarchy].		aChar == $p ifTrue: [^ self browseFullProtocol].		aChar == $N ifTrue: [^ self browseClassRefs]].	^ self arrowKey: aChar from: view! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/22/2011 23:49'!genericMenu	"Borrow a menu from my inspector"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	currentSelection		ifNil: [			aMenu				add: '*nothing selected*'				target: self				selector: #yourself]		ifNotNil: [			aMenu addList: #(				('inspect (i)'							inspectSelection)				('explore (I)'						exploreSelection)				('basic inspect'						inspectBasic)				('explore pointers'					exploreObjectPointers)				-				('browse full (b)'					browseMethodFull)				('browse hierarchy (h)'				classHierarchy)				('browse protocol (p)'				browseFullProtocol)).			aMenu addLine;				add: 'monitor changes'				target: self				selector: #monitor:				argument: currentSelection].	monitorList isEmptyOrNil		ifFalse: [aMenu addLine;				add: 'stop monitoring all'				target: self				selector: #stopMonitoring].	^ aMenu! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/22/2011 23:50'!inspectBasic	"Open an Inspector on the current selection"	self object basicInspect! !ObjectExplorer class removeSelector: #about!ObjectExplorer removeSelector: #doesNotUnderstand:!!ObjectExplorer reorganize!('accessing' doItContext doItReceiver editorClass getList object parentObject rootObject rootObject: selector)('menus' browseClassRefs browseFullProtocol browseMethodFull classHierarchy exploreObjectPointers exploreSelection explorerKey:from: genericMenu inspectBasic inspectSelection selectedClass)('user interface' initialExtent)('monitoring' monitor: monitorList shouldGetStepsFrom: step stopMonitoring)!