'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 23 April 2011 at 7:43:18 pm'!!classDefinition: #ObjectExplorer category: #'Tools-Explorer'!AbstractHierarchicalList subclass: #ObjectExplorer	instanceVariableNames: 'rootObject inspector monitorList '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Explorer'!!DictionaryInspector methodsFor: 'selecting' stamp: 'jmv 4/23/2011 09:57'!selectedKey	"Create a browser on all senders of the selected key"	| i |	i _ selectionIndex  - self numberOfFixedFields.	i > 0 ifFalse: [ ^ nil ].	^keyArray at: i! !!DictionaryInspector methodsFor: 'menu' stamp: 'jmv 4/23/2011 10:00'!addEntry	| newKey aKey |	newKey _ FillInTheBlank request:'Enter new key, then type RETURN.(Expression will be evaluated for value.)Examples:  #Fred    ''a string''   3+4'.	aKey _ Smalltalk actualCompilerClass evaluate: newKey.	self addEntry: aKey! !!DictionaryInspector methodsFor: 'menu' stamp: 'jmv 12/31/2009 10:16'!renameEntry	| newKey aKey value |	value := object at: (keyArray at: selectionIndex - self numberOfFixedFields).	newKey := FillInTheBlank request: 'Enter new key, then type RETURN.(Expression will be evaluated for value.)Examples:  #Fred    ''a string''   3+4'		 initialAnswer: (keyArray at: selectionIndex - self numberOfFixedFields) printString.	newKey = '' ifTrue: [		^self ].	aKey := Compiler evaluate: newKey.	object removeKey: (keyArray at: selectionIndex - self numberOfFixedFields).	object at: aKey put: value.	self calculateKeyArray.	selectionIndex := self numberOfFixedFields + (keyArray indexOf: aKey).	self changed: #selectionIndex.	self changed: #inspectObject.	self changed: #fieldList.	self update! !!DictionaryInspector methodsFor: 'menu' stamp: 'jmv 4/23/2011 10:06'!renameEntryTo: newKey	| value |	value := object at: (keyArray at: selectionIndex - self numberOfFixedFields).	object removeKey: (keyArray at: selectionIndex - self numberOfFixedFields).	object at: newKey put: value.	self calculateKeyArray.	selectionIndex := self numberOfFixedFields + (keyArray indexOf: newKey).	self changed: #selectionIndex.	self changed: #inspectObject.	self changed: #fieldList.	self update! !!InspectorWindow methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 09:50'!buildMorphicWindow	" Inspector openAsMorphOn: SystemOrganization "	| contentsText list upperRow evaluatorText |	list _ PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: model 			listGetter: #fieldList			indexGetter: #selectionIndex			indexSetter: #toggleIndex:			menuGetter: (MessageSend receiver: self selector: #fieldListMenu)			keystrokeAction: #inspectorKey:from:.	contentsText _ TextModelMorph			textProvider: model			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection.	evaluatorText _ (TextModelMorph textProvider: model)			askBeforeDiscardingEdits: false.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: list proportionalWidth: 0.3;		addAdjusterAndMorph: contentsText proportionalWidth: 0.7.	self layoutMorph		addMorph: upperRow proportionalHeight: 0.7;		addAdjusterAndMorph: evaluatorText proportionalHeight: 0.3.	self setLabel: model object defaultLabelForInspector.	self setUpdatablePanesFrom: #(fieldList)! !!InspectorWindow methodsFor: 'menu building' stamp: 'jmv 4/23/2011 10:12'!fieldListMenu	"Arm the supplied menu with items for the field-list of the receiver"	| aMenu object |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('inspect (i)'							inspectSelection)		('explore (I)'						exploreSelection)		('basic inspect'						inspectBasic)		('explore pointers'					exploreObjectPointers)).	object _ model object.	(object isKindOf: Dictionary) ifTrue: [ aMenu addList: #(		-		('senders of this key'				sendersOfSelectedKey)		('add key'							addEntry)		('rename key'						renameEntry)		('remove'							removeSelection			''		model)) ]	ifFalse: [ (object isKindOf: Set) ifTrue: [ aMenu addList: #(		-		('remove'							removeSelection			''		model))]].	aMenu addList: #(		-		('browse full (b)'					browseMethodFull)		('browse hierarchy (h)'				classHierarchy)		('browse protocol (p)'				browseFullProtocol)).	^ aMenu! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 10:07'!addEntry	| newKey string |	string _ FillInTheBlank request:'Enter new key, then type RETURN.(Expression will be evaluated for value.)Examples:  #Fred    ''a string''   3+4'.	newKey _ Smalltalk actualCompilerClass evaluate: string.	model addEntry: newKey! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 10:15'!browseFullProtocol	"Spawn a window showing full protocol for the receiver's selection"	ProtocolBrowser openFullProtocolForClass: model selectedClassOrMetaClass! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 10:13'!browseMethodFull	"Create and schedule a full Browser and then select the current class and message."	|  myClass |	(myClass _ model selectedClassOrMetaClass) ifNotNil: [		BrowserWindow fullOnClass: myClass selector: nil]! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 10:14'!classHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."	Utilities		spawnHierarchyForClass: model selectedClassOrMetaClass "OK if nil"		selector: nil! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 09:54'!exploreObjectPointers	"Create and schedule a Pointers Explorer on the receiver's model's currently selected object."	^ model selection explorePointers! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 09:53'!exploreSelection	"Create and schedule an Explorer on the receiver's model's currently selected object."	^ model selection explore! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 09:54'!inspectBasic	"Create and schedule a basic Inspector on the receiver's model's currently selected object."	^ model selection basicInspect! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 09:52'!inspectSelection	"Create and schedule an Inspector on the receiver's model's currently selected object."	^ model selection inspect! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 10:09'!renameEntry	| string newKey |	string _ FillInTheBlank request: 'Enter new key, then type RETURN.(Expression will be evaluated for value.)Examples:  #Fred    ''a string''   3+4'		 initialAnswer: model selectedKey printString.	string = '' ifTrue: [		^self ].	newKey _ Compiler evaluate: string.	model renameEntryTo: newKey! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 09:57'!sendersOfSelectedKey	| key |	key _ model selectedKey.	key ifNil: [ ^self ].	Smalltalk browseAllCallsOn: key! !!ObjectExplorer methodsFor: 'monitoring' stamp: 'jmv 4/23/2011 11:22'!basicMonitorList	^monitorList! !!ObjectExplorerWindow methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 11:25'!buildMorphicWindow	| listMorph textMorph |	.listMorph _ SimpleHierarchicalListMorph 			model: model			listGetter: #getList			indexGetter: #getCurrentSelection			indexSetter: #noteNewSelection:			menuGetter: (MessageSend receiver: self selector: #genericMenu)			keystrokeAction: #explorerKey:from:.	listMorph autoDeselect: false.	textMorph _ (TextModelMorph textProvider: model)			askBeforeDiscardingEdits: false.	self layoutMorph		addMorph: listMorph proportionalHeight: 0.8;		addAdjusterAndMorph: textMorph proportionalHeight: 0.2.	self setLabel: (model rootObject printStringLimitedTo: 64)! !!ObjectExplorerWindow methodsFor: 'building menus' stamp: 'jmv 4/23/2011 11:29'!genericMenu	"Borrow a menu from my inspector"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	model getCurrentSelection		ifNil: [			aMenu				add: '*nothing selected*'				target: self				selector: #yourself]		ifNotNil: [			aMenu addList: #(				('inspect (i)'							inspectSelection)				('explore (I)'						exploreSelection)				('basic inspect'						inspectBasic)				('explore pointers'					exploreObjectPointers)				-				('browse full (b)'					browseMethodFull)				('browse hierarchy (h)'				classHierarchy)				('browse protocol (p)'				browseFullProtocol)).			aMenu addLine;				add: 'monitor changes'				target: model			"Model!!"				selector: #monitor:				argument: model getCurrentSelection].	model basicMonitorList isEmptyOrNil		ifFalse: [			aMenu addLine;				add: 'stop monitoring all'				target: model			"Model!!"				selector: #stopMonitoring].	^ aMenu! !!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 11:29'!browseFullProtocol	"Spawn a window showing full protocol for the receiver's selection"	ProtocolBrowser openFullProtocolForClass: model selectedClass! !!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 11:28'!browseMethodFull	"Create and schedule a full Browser and then select the current class and message."	|  myClass |	(myClass _ model selectedClass) ifNotNil: [		BrowserWindow fullOnClass: myClass selector: nil]! !!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 11:28'!classHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."	Utilities		spawnHierarchyForClass: model selectedClass		selector: nil! !!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 11:27'!exploreObjectPointers	"Create and schedule a Pointers Explorer on the receiver's model's currently selected object."	^ model object explorePointers! !!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 11:26'!exploreSelection	"Create and schedule an Explorer on the receiver's model's currently selected object."	^ model object explore! !!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 11:27'!inspectBasic	"Create and schedule a basic Inspector on the receiver's model's currently selected object."	^ model object basicInspect! !!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 11:26'!inspectSelection	"Create and schedule an Inspector on the receiver's model's currently selected object."	^ model object inspect! !!ProcessBrowser methodsFor: 'accessing' stamp: 'jmv 4/23/2011 19:34'!pointers	| tc pointers |	selectedProcess		ifNil: [^ nil].	tc _ thisContext.	pointers _ Smalltalk pointersTo: selectedProcess except: {self processList. tc. self}.	pointers isEmpty		ifTrue: [^ nil].	^pointers! !!ProcessBrowser methodsFor: 'accessing' stamp: 'jmv 4/23/2011 19:40'!searchString	^searchString! !!ProcessBrowser methodsFor: 'accessing' stamp: 'jmv 4/23/2011 19:30'!selectedProcess	^selectedProcess! !!ProcessBrowser methodsFor: 'process list' stamp: 'jmv 4/23/2011 19:39'!findContext	| initialProcessIndex initialStackIndex found |	searchString _ FillInTheBlank request: 'Enter a string to search for in the process stack lists' initialAnswer: searchString.	searchString isEmpty		ifTrue: [^ false].	initialProcessIndex _ self processListIndex.	initialStackIndex _ self stackListIndex.	self processListIndex: 1.	self stackListIndex: 1.	found _ self nextContext.	found		ifFalse: [self processListIndex: initialProcessIndex.			self stackListIndex: initialStackIndex].	^ found! !!ProcessBrowser methodsFor: 'process list' stamp: 'jmv 4/23/2011 19:39'!findContext: aString	| initialProcessIndex initialStackIndex found |	searchString _ aString.	searchString isEmpty		ifTrue: [^ false].	initialProcessIndex _ self processListIndex.	initialStackIndex _ self stackListIndex.	self processListIndex: 1.	self stackListIndex: 1.	found _ self nextContext.	found		ifFalse: [self processListIndex: initialProcessIndex.			self stackListIndex: initialStackIndex].	^ found! !!ProcessBrowser methodsFor: 'stack list' stamp: 'jmv 4/23/2011 19:28'!selectedContext	^selectedContext! !!ProcessBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 19:31'!buildMorphicWindow	"Create a pluggable version of me, answer a window"	| aTextMorph list1 list2 upperRow |	list1 _ (PluggableListMorph				model: model				listGetter: #processNameList				indexGetter: #processListIndex				indexSetter: #processListIndex:				menuGetter: (MessageSend receiver: self selector: #processListMenu)				keystrokeAction: #processListKey:from:)			enableDragNDrop: false.	list2 _ (PluggableListMorph				model: model				listGetter: #stackNameList				indexGetter: #stackListIndex				indexSetter: #stackListIndex:				menuGetter: (MessageSend receiver: self selector: #stackListMenu)				keystrokeAction: #stackListKey:from:)			enableDragNDrop: false.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: list1 proportionalWidth: 0.5;		addAdjusterAndMorph: list2 proportionalWidth: 0.5.	aTextMorph _ TextModelMorph				textProvider: model				textGetter: #selectedMethod.	aTextMorph askBeforeDiscardingEdits: false.	self layoutMorph		addMorph: upperRow proportionalHeight: 0.5;		addAdjusterAndMorph: aTextMorph proportionalHeight: 0.5.	self setUpdatablePanesFrom: #(#processNameList #stackNameList ).	self setLabel: 'Process Browser'.	model startedCPUWatcher ifTrue: [ self setUpdateCallbackAfter: 7 ]! !!ProcessBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/23/2011 19:42'!processListMenu	| pw menu |	menu _ MenuMorph new defaultTarget: self.	model selectedProcess		ifNotNil: [ :selectedProcess |			| nameAndRules | 			nameAndRules _ model nameAndRulesForSelectedProcess.			menu addList: #(				('inspect (i)'					#inspectProcess)				('explore (I)'				#exploreProcess)				('inspect Pointers (P)'		#inspectPointers)).			nameAndRules second				ifTrue: [					menu add: 'terminate (t)' target: model action: #terminateProcess.					selectedProcess isSuspended						ifTrue: [menu add: 'resume (r)' target: model action: #resumeProcess]						ifFalse: [menu add: 'suspend (s)' target: model action: #suspendProcess]].			nameAndRules third				ifTrue: [					menu addList: #(						('change priority (p)'		 	#changePriority)						('debug (d)'						#debugProcess))].			menu addList: #(('profile messages (m)'	#messageTally)).			(selectedProcess suspendingList isKindOf: Semaphore)				ifTrue: [menu add: 'signal Semaphore (S)' target: model action: #signalSemaphore].			menu add: 'full stack (k)' target: model action: #moreStack.			menu addLine].	menu addList: #(		('find context... (f)'		#findContext)		('find again (g)'			#nextContext		''		model)).	menu addLine.	menu		add: (model isAutoUpdating				ifTrue: ['turn off auto-update (a)']				ifFalse: ['turn on auto-update (a)'])		target: model		action: #toggleAutoUpdate.	menu add: 'update list (u)' target: model action: #updateProcessList.	pw _ Smalltalk at: #CPUWatcher ifAbsent: nil.	pw ifNotNil: [		menu addLine.		pw isMonitoring				ifTrue: [ menu add: 'stop CPUWatcher' action: #stopCPUWatcher ]				ifFalse: [ menu add: 'start CPUWatcher' action: #startCPUWatcher  ]].	^ menu! !!ProcessBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/23/2011 19:22'!stackListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	model selectedContext		ifNil: [^ aMenu].	aMenu addList: #(		('inspect context (c)'		inspectContext)		('explore context (C)'		exploreContext)		('inspect receiver (i)'		inspectReceiver)		('explore receiver (I)'		exploreReceiver)		('browse (b)'				browseContext)).	^aMenu! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:36'!changePriority	| str newPriority nameAndRules |	nameAndRules _ model nameAndRulesForSelectedProcess.	nameAndRules third		ifFalse: [PopUpMenu inform: 'Nope, won''t change priority of ' , nameAndRules first.			^ self].	str _ FillInTheBlank request: 'New priority' initialAnswer: model selectedProcess priority asString.	newPriority _ str asNumber asInteger.	newPriority		ifNil: [^ self].	(newPriority < 1			or: [newPriority > Processor highestPriority])		ifTrue: [PopUpMenu inform: 'Bad priority'.			^ self].	model class setProcess: model selectedProcess toPriority: newPriority.	model updateProcessList! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:36'!debugProcess	| nameAndRules |	nameAndRules _ model nameAndRulesForSelectedProcess.	nameAndRules third		ifFalse: [PopUpMenu inform: 'Nope, won''t debug ' , nameAndRules first.			^ self].	model class debugProcess: model selectedProcess.! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:24'!exploreContext	model selectedContext explore! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:32'!exploreProcess	model selectedProcess explore! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:29'!exploreReceiver	model selectedContext		ifNotNil: [			BrowserWindow				fullOnClass: model selectedClass				selector: model selectedSelector ]! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:39'!findContext	| searchString |	searchString _ FillInTheBlank request: 'Enter a string to search for in the process stack lists' initialAnswer: model searchString.	model findContext: searchString! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:28'!inspectContext	model selectedContext inspect! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:34'!inspectPointers	model pointers ifNotNil: [ :pointers |		OrderedCollectionInspector			openOn: pointers			withLabel: 'Objects pointing to ' , model selectedProcess browserPrintString ]! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:32'!inspectProcess	model selectedProcess inspect! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:24'!inspectReceiver	model selectedContext		ifNotNil: [ :context | context receiver inspect]! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:37'!messageTally	| secString secs |	secString _ FillInTheBlank request: 'Profile for how many seconds?' initialAnswer: '4'.	secs _ secString asNumber asInteger.	(secs isNil			or: [secs isZero])		ifTrue: [^ self].	[ TimeProfileBrowser spyOnProcess: model selectedProcess forMilliseconds: secs * 1000 ] forkAt: model selectedProcess priority + 1.! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:43'!startCPUWatcher	model startCPUWatcher! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 19:42'!stopCPUWatcher	model stopCPUWatcher! !!ProcessBrowserWindow reorganize!('GUI building' buildMorphicWindow)('updating' setUpdateCallbackAfter:)('menu building' processListMenu stackListMenu)('menu commands' changePriority debugProcess exploreContext exploreProcess exploreReceiver findContext inspectContext inspectPointers inspectProcess inspectReceiver messageTally startCPUWatcher stopCPUWatcher)!!ObjectExplorerWindow reorganize!('GUI building' buildMorphicWindow)('building menus' genericMenu)('menu commands' browseFullProtocol browseMethodFull classHierarchy exploreObjectPointers exploreSelection inspectBasic inspectSelection)!!classDefinition: #ObjectExplorer category: #'Tools-Explorer'!AbstractHierarchicalList subclass: #ObjectExplorer	instanceVariableNames: 'rootObject monitorList'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Explorer'!!InspectorWindow reorganize!('GUI building' buildMorphicWindow)('menu building' fieldListMenu)('menu commands' addEntry browseFullProtocol browseMethodFull classHierarchy exploreObjectPointers exploreSelection inspectBasic inspectSelection renameEntry sendersOfSelectedKey)!