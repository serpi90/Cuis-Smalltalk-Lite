'From Cuis 3.0 of 31 January 2011 [latest update: #790] on 16 February 2011 at 12:47:48 pm'!!CompiledMethod methodsFor: 'testing' stamp: 'jmv 2/15/2011 00:13'!hasReportableSlip	"Answer whether the receiver contains anything that should be brought 	to the attention of the author when filing out. Customize the lists here 	to suit your preferences. If slips do not get reported in spite of your 	best efforts here, make certain that the Preference 'checkForSlips' is set 	to true."	#(#halt #halt: #hottest #toRemove #personal #urgent  #haltOnce #haltOnce: #haltIf: )		do: [ :aLit | 			(self hasLiteral: aLit)				ifTrue: [^ true]].	#(#Transcript #AA #BB #CC #DD #EE )		do: [ :aSymbol | 	| assoc |			(assoc := Smalltalk				associationAt: aSymbol				ifAbsent: nil)					ifNotNil: [(self hasLiteral: assoc)						ifTrue: [^ true]]].	^ false! !!LightWidget methodsFor: 'halos and balloon help' stamp: 'jmv 2/14/2011 23:54'!balloonHelpTextForHandle: aHandle	"Answer a string providing balloon help for the given halo handle"	|  itsSelector |	itsSelector _ aHandle eventHandler firstMouseSelector.	#(		(chooseEmphasisOrAlignment			'Emphasis & alignment')		(chooseFont								'Change font')		(maybeDismiss:with:					'Remove')		(doDebug:with:							'Debug')		(doDirection:with:						'Choose forward direction')		(doDup:with:								'Duplicate')		(doMenu:with:							'Menu')		(doGrab:with:								'Pick up')		(doRecolor:with:							'Change color')		(maybeDoDup:with:						'Duplicate')		(mouseDownInCollapseHandle:with:	'Collapse')		(mouseDownOnHelpHandle:			'Help')		(startDrag:with:							'Move')		(startGrow:with:							'Change size') 		(startRot:with:							'Rotate')) 	do: [ :pair |		itsSelector == pair first ifTrue: [^ pair last]].	(itsSelector == #mouseDownInDimissHandle:with:) ifTrue: [		'Remove from screen'].	^ 'unknown halo handle'! !!Morph methodsFor: 'halos and balloon help' stamp: 'jmv 2/14/2011 23:54'!balloonHelpTextForHandle: aHandle	"Answer a string providing balloon help for the given halo handle"	|  itsSelector |	itsSelector _ aHandle eventHandler firstMouseSelector.	#(		(chooseEmphasisOrAlignment			'Emphasis & alignment')		(chooseFont								'Change font')		(maybeDismiss:with:					'Remove')		(doDebug:with:							'Debug')		(doDirection:with:						'Choose forward direction')		(doDup:with:								'Duplicate')		(doMenu:with:							'Menu')		(doGrab:with:								'Pick up')		(doRecolor:with:							'Change color')		(maybeDoDup:with:						'Duplicate')		(mouseDownInCollapseHandle:with:	'Collapse')		(mouseDownOnHelpHandle:			'Help')		(startDrag:with:							'Move')		(startGrow:with:							'Change size') 		(startRot:with:							'Rotate')) 	do:		[ :pair | itsSelector == pair first ifTrue: [^ pair last]].	(itsSelector == #mouseDownInDimissHandle:with:) ifTrue: [			'Remove from screen'].	^ 'unknown halo handle'! !!MorphExtension methodsFor: 'printing' stamp: 'jmv 2/15/2011 00:03'!printOn: aStream	"Append to the argument, aStream, a sequence of characters that 	identifies the receiver."	super printOn: aStream.	aStream nextPutAll: ' (', self identityHash printString, ')'.	layoutSpec ifNotNil: [ aStream nextPutAll: ' [layoutSpec = ] ' , layoutSpec printString , '] ' ].	eventHandler ifNotNil: [ aStream nextPutAll: ' [eventHandler = ' , eventHandler printString , '] ' ].	(otherProperties isNil or: [ otherProperties isEmpty ]) ifTrue: [ ^ self ].	aStream nextPutAll: ' [other: '.	otherProperties keysDo: [ :aKey |		aStream nextPutAll: ' (' , aKey , ' -> ' , (otherProperties at: aKey) printString , ')' ].	aStream nextPut: $].! !!SystemDictionary methodsFor: 'shrinking' stamp: 'jmv 2/16/2011 12:47'!presumedSentMessages	| sent |	"	In addition to those here, if it is desired to preserve some methods from deletion, see #nominallyUnsent:	Smalltalk presumedSentMessages	"	"The following should be preserved for doIts, etc"	sent _ IdentitySet new.	#( rehashWithoutBecome compactSymbolTable		browseAllSelect:  lastRemoval		vScrollBarValue: hScrollBarValue: 		to: removeClassNamed:		dragon: hilberts: mandala: web test3 factorial tinyBenchmarks benchFib		newDepth: restoreAfter: forgetDoIts zapAllMethods obsoleteClasses		removeAllUnSentMessages abandonSources removeUnreferencedKeys		zapOrganization condenseChanges browseObsoleteReferences		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:		startTimerEventLoop unusedClasses) do: [ :sel |			sent add: sel].	"The following may be sent by perform: in dispatchOnChar..."	(TextEditor cmdActions) asSet do: [ :sel | sent add: sel].	(SmalltalkEditor cmdActions) asSet do: [ :sel | sent add: sel].	#(beReadOnlyBinding beReadWriteBinding changeSetCategoryClass belongsInAll:) do: [ :sel |		sent add: sel].	^ sent! !!TextModelMorph methodsFor: 'drawing' stamp: 'jmv 2/15/2011 00:02'!drawOn: aCanvas 	"Include a thin red inset border for unaccepted edits, or, if the unaccepted edits are known to conflict with a change made somewhere else to the same method (typically), put a thick red frame"	| bw bc |	super drawOn: aCanvas.	bw _ Preferences focusIndicatorWidth.	bc _ nil.	self wantsFrameAdornments ifTrue: [		model refusesToAccept			ifTrue: [  "Put up feedback showing that code cannot be submitted in this state"				bc _ Color tan]			ifFalse: [				self hasEditingConflicts					ifTrue: [						bw _ 3.						bc _ Color red ] 					ifFalse: [						self hasUnacceptedEdits							ifTrue: [								bc _ Color red]]]].	(drawKeyboardFocusIndicator and: [ textMorph hasKeyboardFocus ]) ifTrue: [		bc ifNil: [			bc _ Theme current focusIndicator ]]	ifFalse: [		bc ifNotNil: [			bc _ bc alphaMixed: 0.4 with: Color white ]].	bc ifNotNil: [		aCanvas frameRectangle: self focusIndicatorRectangle width: bw color: bc ]! !Preferences class removeSelector: #showDeprecationWarnings!HaloMorph removeSelector: #dismiss!CodeProvider removeSelector: #wantsDiffFeedback!Object removeSelector: #deprecated:!Object removeSelector: #deprecated:block:!Object removeSelector: #identityHashPrintString!Object removeSelector: #isThisEverCalled!Object removeSelector: #isThisEverCalled:!Object removeSelector: #printDirectlyToDisplay!Object removeSelector: #wantsDiffFeedback!ProtoObject removeSelector: #doOnlyOnce:!ProtoObject removeSelector: #rearmOneShot!Smalltalk removeClassNamed: #Deprecation!