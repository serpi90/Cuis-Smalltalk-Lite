'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 6 January 2012 at 2:46:04 pm'!!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 1/6/2012 11:25'!                    createAcceptButton	"create the [accept] button"	| result buttonColor theme |	theme _ Theme current.	theme useUniformColors		ifTrue: [ buttonColor _ theme buttonColorFrom: theme defaultWindowColor ]		ifFalse: [ buttonColor _ theme acceptButton].	result _ PluggableButtonMorph new		 model: self;		 color: buttonColor;		 label: 'Accept';		 action: #acceptClicked.	result bounds: (29@90 corner: 122@117).	self addMorph: result.	^ result! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 1/6/2012 11:25'!              createCancelButton	"create the [cancel] button"	| result buttonColor theme |	theme _ Theme current.	theme useUniformColors		ifTrue: [ buttonColor _ theme buttonColorFrom: theme defaultWindowColor ]		ifFalse: [ buttonColor _ theme buttonColorFrom: theme cancelButton ].	result _ PluggableButtonMorph new		 model: self;		 color: buttonColor;		 label: 'Cancel';		 action: #cancelClicked.	result bounds: (149@90 corner: 242@117).	self addMorph: result.	^ result! !!FillInTheBlankMorph methodsFor: 'menu' stamp: 'jmv 1/6/2012 12:03'!                               acceptClicked	"Sent by the accept button."	textPane textMorph acceptContents! !!FillInTheBlankMorph methodsFor: 'menu' stamp: 'jmv 1/6/2012 11:25'!       cancelClicked	"Sent by the cancel button."	response _ responseUponCancel.	done _ true.! !!InnerTextMorph methodsFor: 'editing' stamp: 'jmv 1/6/2012 12:28'!                            acceptContents	"The message is sent when the user hits enter or Cmd-S.	Accept the current contents and end editing."	"Inform the model of text to be accepted, and return true if OK."	| ok prevSelection prevScrollValue |	prevSelection _ self editor selectionInterval copy.	prevScrollValue _ owner verticalScrollBar value.	(self canDiscardEdits and: [(self hasProperty: #alwaysAccept) not]) 		ifTrue: [^self flash].	self hasEditingConflicts 		ifTrue: [			(self confirm: 'Caution!! Contents were savedelsewhere since you startedediting them here.  Accept anyway?' ) 					ifFalse: [^self flash]].	ok _ model acceptContentsFrom: owner.	ok == true		ifTrue: [ model refetch ].	"sps 8/13/2001 22:41: restore selection and scroll info"		["During the step for the browser, updatePaneIfNeeded is called, and 		invariably resets the contents of the codeholding PluggableTextMorph		at that time, resetting the cursor position and scroller in the process.		The following line forces that update without waiting for the step, 		then restores the cursor and scrollbar"		ok			ifTrue: [				self editor selectFrom: prevSelection first to: prevSelection last.				WorldState addDeferredUIMessage: [						World activeHand newKeyboardFocus: self.						owner setScrollDeltas.						owner verticalScrollBar setValue: prevScrollValue ]]	] on: Error do: nil! !!InnerTextMorph methodsFor: 'editing' stamp: 'jmv 1/6/2012 11:39'!    cancelEdits	"The message is sent when the user hits enter or Cmd-L.	Cancel the current contents and end editing."	self releaseEditorAndParagraph.	model refetch! !!InnerTextMorph methodsFor: 'event handling' stamp: 'jmv 1/6/2012 12:26'!              processKeyStroke: evt	| action |	(acceptOnCR and: [evt keyCharacter = Character cr])		ifTrue: [^ self acceptContents].	self pauseBlinking.	evt keyValue = 13 ifTrue: ["CR - check for special action"		action _ self crAction.		action ifNotNil: [			^action value]].	self handleInteraction: [ editor processKeyStroke: evt ].	self updateFromParagraph.	self eventHandler ifNotNil: [		"like'super keyStroke: evt'"		self eventHandler keyStroke: evt fromMorph: self].	self scrollSelectionIntoView! !!MessageNamesWindow methodsFor: 'GUI building' stamp: 'jmv 1/6/2012 12:12'!                        buildMorphicWindow	"Answer a morphic window with the given initial search string, nil if none""MessageNames openMessageNames"	| selectorListView firstRow searchButton secondRow |	textMorph _ TextModelMorph		textProvider: model		textGetter: #searchString 		textSetter: #searchString:		selectionGetter: #contentsSelection.	textMorph textMorph setProperty: #alwaysAccept toValue: true.	textMorph askBeforeDiscardingEdits: false.	textMorph acceptOnCR: true.	textMorph setTextColor: Color brown.	textMorph hideScrollBarsIndefinitely	textMorph styler: nil.	searchButton _ PluggableButtonMorph new 		model: textMorph textMorph;		label: 'Search';		action: #acceptContents.	searchButton setBalloonText: 'Type some letters into the pane at right, and then press this Search button (or hit RETURN) and all method selectors that match what you typed will appear in the list pane below.  Click on any one of them, and all the implementors of that selector will be shown in the right-hand pane, and you can view and edit their code without leaving this tool.'.	firstRow _ LayoutMorph newRow.	firstRow		addMorph: searchButton proportionalWidth: 0.25;		addMorph: textMorph proportionalWidth: 0.75.	selectorListView _ PluggableListMorph		model: model		listGetter: #selectorList		indexGetter: #selectorListIndex		indexSetter: #selectorListIndex:		mainView: self		menuGetter: #selectorListMenu		keystrokeAction: #selectorListKey:from:.	secondRow _  LayoutMorph newRow.	secondRow		addMorph: selectorListView proportionalWidth: 0.5;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.5.	self layoutMorph		addMorph: firstRow fixedHeight: self defaultButtonPaneHeight+4;		addAdjusterAndMorph: secondRow proportionalHeight: 0.5;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.5.	model changed: #editSelection! !!PluggableScrollPane methodsFor: 'access' stamp: 'jmv 1/6/2012 11:56'!      verticalScrollBar	^scrollBar! !!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 1/6/2012 12:10'!                     extent: newExtent		| minH minW |	"Figure out the minimum width and height for this pane so that scrollbars will appear"	minH _ self vIsScrollbarShowing		ifTrue: [Theme current scrollbarThickness * 2]		ifFalse: [0].	minW _ self hIsScrollbarShowing		ifTrue: [Theme current scrollbarThickness * 2]		ifFalse: [0].	super extent: (newExtent max: (minW@minH)).	"Now reset widget sizes"	scroller adjustExtent.	self updateScrollBarsBounds.	self setScrollDeltas! !!TextEditor methodsFor: 'editing keys' stamp: 'jmv 1/6/2012 13:04'!    cancelEdits: aKeyboardEvent	"Cancel unsubmitted changes."	self cancelEdits.	^ true! !!TextEditor methodsFor: 'menu messages' stamp: 'jmv 1/6/2012 12:26'!acceptContents	"Save the current text of the text being edited as the current acceptable version for purposes of canceling.  Allow my morph to take appropriate action"	morph acceptContents! !!TextEditor methodsFor: 'menu messages' stamp: 'jmv 1/6/2012 12:17'!                        cancelEdits	"Cancel the changes made so far to this text"	morph cancelEdits! !!SmalltalkEditor methodsFor: 'editing keys' stamp: 'jmv 1/6/2012 12:27'!    save: aKeyboardEvent	"Submit the current text.  Equivalent to 'accept' 1/18/96 sw"	self acceptContents.	^ true! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 1/6/2012 13:04'!             initializeCmdKeyShortcuts	"Initialize the (unshifted) command-key (or alt-key if not on Mac) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor test"	"SmalltalkEditor initialize"	| cmds |	self initializeBasicCmdKeyShortcuts.		cmds := #(		$i	#inspectIt:		$p	#printIt:		$s	#save:		$d	#doIt:		$l	#cancelEdits:		$b	#browseIt:		$n	#sendersOfIt:		$m	#implementorsOfIt:		$E	#methodStringsContainingit:		$T	#displayIfTrue:		$I	#exploreIt:		$A	#argAdvance:		$F	#displayIfFalse:		$G	#fileItIn:		$V	#pasteInitials:		$N	#referencesToIt:	).	1 to: cmds size		by: 2		do: [ :i | cmdActions at: (cmds at: i) asciiValue + 1 put: (cmds at: i + 1)]! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 1/6/2012 12:27'!           initializeMenu	"Initialize the mouseButton2 (right button) pop-up menu and corresponding messages."	"Editor initialize"	menu _ SelectionMenu fromArray: {		{'Find...(f)'.						#find}.		{'Find Again (g)'.				#findAgain}.		{'Use Selection for Find (h)'.	#setSearchString}.		#-.		{'Undo - multiple (z)'.			#undo}.		{'Redo - multiple (Z)'.			#redo}.		{'Undo / Redo history'.			#offerUndoHistory}.		#-.		{'Copy (c)'.						#copySelection}.		{'Cut (x)'.						#cut}.		{'Paste (v)'.						#paste}.		{'Paste without Format'.		#pasteString}.		{'Paste...'.						#pasteRecent}.		#-.		{'Do it (d)'.						#doIt}.		{'Print it (p)'.					#printIt}.		{'Inspect it (i)'.					#inspectIt}.		{'Explore it (I)'.					#exploreIt}.		{'Debug it'.						#debugIt}.		#-.		{'Explain'.						#explain}.		{'Browse it (b)'.					#browseIt}.		{'Senders of it (n)'.				#sendersOfIt}.		{'Implementors of it (m)'.		#implementorsOfIt}.		{'References to it (N)'.			#referencesToIt}.		#-.		{'Accept (s)'.					#acceptContents}.		{'Cancel (l)'.					#cancelEdits}.		#-.		{'Method Strings with it (E)'.	#methodStringsContainingit}.		{'Method Source with it'.		#methodSourceContainingIt}.		{'Class Comments with it'.		#classCommentsContainingIt}.	}! !!TextModel methodsFor: 'commands' stamp: 'jmv 1/6/2012 12:14'!        acceptContentsFrom: aTextModelMorph	"Nothing to do here.	Anyway, maybe this implementor should be removed..."! !!PluggableTextModel methodsFor: 'commands' stamp: 'jmv 1/6/2012 12:14'!   acceptContentsFrom: aTextModelMorph	textSetter ifNil: [ ^ true ].	^ textSetter numArgs = 2		ifTrue: [			textProvider				perform: textSetter				with: actualContents				with: aTextModelMorph ]		ifFalse: [			textProvider				perform: textSetter				with: actualContents ].! !!methodRemoval: TextModelMorph #accept!TextModelMorph removeSelector: #accept!!methodRemoval: TextModelMorph #cancel!TextModelMorph removeSelector: #cancel!!methodRemoval: PluggableTextModel #acceptFrom:!PluggableTextModel removeSelector: #acceptFrom:!!methodRemoval: TextModel #acceptFrom:!TextModel removeSelector: #acceptFrom:!!methodRemoval: TextEditor #accept!TextEditor removeSelector: #accept!!methodRemoval: TextEditor #cancel!TextEditor removeSelector: #cancel!!methodRemoval: TextEditor #cancel:!TextEditor removeSelector: #cancel:!!methodRemoval: StringMorph class #contents:color:!StringMorph class removeSelector: #contents:color:!!methodRemoval: StringMorph #acceptContents!StringMorph removeSelector: #acceptContents!!methodRemoval: StringMorph #acceptValue:!StringMorph removeSelector: #acceptValue:!!methodRemoval: StringMorph #cancelEdits!StringMorph removeSelector: #cancelEdits!!methodRemoval: StringMorph #contentsClipped:!StringMorph removeSelector: #contentsClipped:!!methodRemoval: StringMorph #doneWithEdits!StringMorph removeSelector: #doneWithEdits!!methodRemoval: StringMorph #hasFocus!StringMorph removeSelector: #hasFocus!!methodRemoval: StringMorph #interimContents:!StringMorph removeSelector: #interimContents:!!methodRemoval: StringMorph #lostFocusWithoutAccepting!StringMorph removeSelector: #lostFocusWithoutAccepting!!methodRemoval: StringMorph #setWidth:!StringMorph removeSelector: #setWidth:!!methodRemoval: StringMorph #valueFromContents!StringMorph removeSelector: #valueFromContents!!methodRemoval: FillInTheBlankMorph #accept!FillInTheBlankMorph removeSelector: #accept!!methodRemoval: FillInTheBlankMorph #cancel!FillInTheBlankMorph removeSelector: #cancel!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."Editor initialize!