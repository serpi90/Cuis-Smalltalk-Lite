'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 18 November 2010 at 8:47:35 am'!!classDefinition: #PasteUpMorph category: #'Morphic-Worlds'!BorderedMorph subclass: #PasteUpMorph	instanceVariableNames: 'cursor backgroundMorph worldState backgroundImage backgroundImageData '	classVariableNames: 'DisableDeferredUpdates WindowEventHandler '	poolDictionaries: ''	category: 'Morphic-Worlds'!!PasteUpMorph commentStamp: '<historical>' prior: 0!A morph whose submorphs comprise a paste-up of rectangular subparts which "show through".A World, the entire Smalltalk screen, is a PasteUpMorph.  A World responds true to isWorld.  A PasteUpMorph that is a world, builds its menu in HandMorph buildWorldMenu.worldState		If I am also a World, keeps the hands, damageRecorder, stepList etc.!!Form methodsFor: 'scaling, rotation' stamp: 'jmv 11/15/2010 17:22'!magnify: aRectangle to: extent smoothing: cellSize        "Answer a Form created as a scaling of the receiver.        Scale may be a Float, and may be greater or less than 1.0."        | newForm |        newForm _ Form extent: extent depth: depth.        (WarpBlt current toForm: newForm)                sourceForm: self;                colorMap: (self colormapIfNeededFor: newForm);                cellSize: cellSize;  "installs a new colormap if cellSize > 1"                combinationRule: 3;                copyQuad: aRectangle innerCorners toRect: newForm boundingBox.        ^ newForm"Dynamic test...[Sensor anyButtonPressed] whileFalse:        [(Display magnify: (Sensor cursorPoint extent: 131@81) to: 300@200 smoothing: 2) display]"! !!Form methodsFor: 'scaling, rotation' stamp: 'jmv 11/15/2010 17:51'!magnifyTo: extent	"Answer a Form created as a scaling of the receiver."	^ self		magnify: self boundingBox		to: extent		smoothing: 3! !!PasteUpMorph methodsFor: 'drawing' stamp: 'jmv 11/18/2010 08:47'!drawOn: aCanvas	"draw background image."	backgroundImage		ifNotNil: [			self clipsSubmorphs ifTrue: [				aCanvas clipBy: self clippingBounds					during: [ :canvas | canvas paintImage: backgroundImage at: bounds topLeft ]]				ifFalse: [ aCanvas paintImage: backgroundImage at: bounds topLeft ]]		ifNil: [			"draw background fill"			(self isWorldMorph and: [aCanvas form == Display] and: [(color := self fillStyle) class == TranslucentColor])				ifTrue: [					"Special case so a translucent background on the Display allows you to see through the main Squeak Window.					Requires proper handling of translucent Display in the VM.					Seems to work only on Linux when using a composing window manager."					(BitBlt current toForm: Display)						clipRect: aCanvas clipRect;						copy: bounds						from: 0@0 in: nil						fillColor: color rule: Form over]				ifFalse: [ super drawOn: aCanvas ]]! !!PasteUpMorph methodsFor: 'geometry' stamp: 'jmv 11/15/2010 17:44'!extent: aPoint	super extent: aPoint.	worldState ifNotNil: [		worldState viewBox ifNotNil: [			worldState canvas: nil.			worldState viewBox: bounds ]].	self buildMagnifiedBackgroundImage! !!PasteUpMorph methodsFor: 'initialization' stamp: 'jmv 11/12/2010 17:21'!initialize"initialize the state of the receiver"	super initialize.	self enableDragNDrop.	self clipSubmorphs: true! !!PasteUpMorph methodsFor: 'misc' stamp: 'jmv 11/15/2010 17:42'!backgroundImageData: aByteArray	"	| filename |	filename _ 'bg/free-3d-art-pictures-gallery-wallpaper-desktop-18.jpg'.	filename _ 'bg/free-desktop-wallpaper.jpg'.	filename _ 'bg/jellyfish-thumb.jpg'.	filename _ 'bg/splash_by_beefpepsi.jpg'.	filename _ 'bg/gray ocean and pier.jpg'.	filename _ 'bg/newyork.jpg'.	filename _ 'bg/download-free-desktop-wallpaper-nature-conquestofparadise-marirs-pic.jpg'.	filename _ 'bg/desktop-wallpaper-tropical-1280x1024.jpg'.	filename _ 'bg/free-3d-art-pictures-gallery-wallpaper-desktop-18.jpg'.	World backgroundImageData: (FileStream readOnlyFileNamed: filename) binary contentsOfEntireFile.	"	backgroundImageData _ aByteArray.	self buildMagnifiedBackgroundImage! !!PasteUpMorph methodsFor: 'misc' stamp: 'jmv 11/15/2010 17:42'!buildMagnifiedBackgroundImage	| image old |	old _ backgroundImage.	backgroundImageData		ifNil: [ backgroundImage _ nil ]		ifNotNil: [ 			image _ Form fromBinaryStream: backgroundImageData readStream.			backgroundImage _ image magnifyTo: bounds extent ].	old == backgroundImage ifFalse: [		self changed ]! !TextMorph removeSelector: #cursor!PasteUpMorph removeSelector: #cursor!PasteUpMorph removeSelector: #drawSubmorphsOn:!!classDefinition: #PasteUpMorph category: #'Morphic-Worlds'!BorderedMorph subclass: #PasteUpMorph	instanceVariableNames: 'worldState backgroundImage backgroundImageData'	classVariableNames: 'DisableDeferredUpdates WindowEventHandler'	poolDictionaries: ''	category: 'Morphic-Worlds'!!PasteUpMorph reorganize!('WiW support' shouldGetStepsFrom:)('alarms-scheduler' addAlarm:withArguments:for:at: removeAlarm:for:)('caching' releaseCachedState)('change reporting' invalidRect:from:)('classification' isPlayfieldLike isWorldMorph)('copying' veryDeepCopyWith:)('drawing' drawOn:)('dropping/grabbing' acceptDroppingMorph:event: dropEnabled morphToDropFrom: repelsMorph:event: wantsDroppedMorph:event:)('event handling' handlesMouseDown: morphToGrab: mouseDown: mouseUp: wantsWindowEvent: windowEvent: windowEventHandler)('events-processing' processEvent:using:)('geometry' extent: position:)('initialization' becomeActiveDuring: clearWaitDelay defaultBorderColor defaultBorderWidth defaultColor initialize)('interaction loop' doOneCycleNow)('menu & halo' addCustomMenuItems:hand: addWorldHaloMenuItemsTo:hand: addWorldToggleItemsToHaloMenu: deleteBalloonTarget:)('misc' backgroundImageData: buildMagnifiedBackgroundImage cartesianOrigin unhideHiddenObjects)('printing' printOn:)('project state' canvas firstHand hands handsDo: handsReverseDo: listOfSteppingMorphs stepListSize steppingMorphsNotInWorld viewBox viewBox:)('stepping' cleanseStepList runLocalStepMethods runStepMethods startStepping: startStepping:at:selector:arguments:stepTime: stopStepping: stopStepping:selector:)('stepping and presenter' step)('structure' activeHand world)('submorphs-accessing' allMorphsDo: morphsInFrontOf:overlapping:do:)('submorphs-add/remove' addAllMorphs: addMorphFront:)('testing' stepTime)('world menu' bringWindowsFullOnscreen buildWorldMenu: closeUnchangedWindows collapseAll collapseNonWindows deleteNonWindows expandAll findAChangeSorter: findAFileList: findAMessageNamesWindow: findATranscript: findAWindowSatisfying:orMakeOneUsing: findDirtyBrowsers: findDirtyWindows: findWindow: invokeWorldMenu: openRecentSubmissionsBrowser: putUpDesktopMenu: putUpNewMorphMenu putUpWorldMenu: yellowButtonClickOnDesktopWithEvent:)('world state' addMorph:centeredNear: allNonFlapRelatedSubmorphs assuredCanvas deleteAllHalos displayWorld displayWorldSafely doOneCycle doOneSubCycle dragThroughOnDesktop: flashRects:color: fullRepaintNeeded haloMorphs handleFatalDrawingError: install open privateOuterDisplayWorld restoreDisplay restoreMorphicDisplay sleep startSteppingSubmorphsOf:)('private' privateMoveBy:)('errors on draw' addKnownFailing: isKnownFailing: removeAllKnownFailing removeKnownFailing:)!Morph removeSelector: #cursor!