'From Cuis 3.0 of 31 January 2011 [latest update: #790] on 18 February 2011 at 6:32:31 pm'!!Clipboard methodsFor: 'accessing' stamp: 'jmv 2/18/2011 18:09'!retrieveMorph	"Answer a Morph or nil."	| answer |		answer _ self retrieveObject.		"If clipboard contents is already a Text or String, answer it."	(answer is: #Morph) ifTrue: [		^ answer ].	"If clipboard contains a Form, prepare a Text including it."	(answer is: #Form) ifTrue: [		^ ImageMorph new image: answer ].	"If clipboard contents is already a Text or String, answer it."	(answer isString or: [ answer is: #Text ]) ifTrue: [		^ (TextModelMorph withText: answer asText)			embeddedInMorphicWindowLabeled: 'Text editor' ].		"No useful contents"	^nil! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 2/18/2011 18:02'!spawnHierarchy	"Create and schedule a new hierarchy browser on the currently selected class or meta."	| newBrowser aSymbol aBehavior messageCatIndex selectedClassOrMetaClass |	(selectedClassOrMetaClass _ self selectedClassOrMetaClass)		ifNil: [^ self].	newBrowser _ HierarchyBrowser new initHierarchyForClass: selectedClassOrMetaClass.	((aSymbol _ self selectedMessageName) notNil and: [(MessageSet isPseudoSelector: aSymbol) not])		ifTrue:			[aBehavior _ selectedClassOrMetaClass.			messageCatIndex _ aBehavior organization numberOfCategoryOfElement: aSymbol.			newBrowser messageCategoryListIndex: messageCatIndex + 1.			newBrowser messageListIndex:				((aBehavior organization listAtCategoryNumber: messageCatIndex) indexOf: aSymbol)].	Browser		openBrowserView: newBrowser openAsMorphSysCat		label: newBrowser labelString.	newBrowser assureSelectionsShow! !!CodeProvider methodsFor: 'construction' stamp: 'jmv 2/18/2011 17:44'!buildMorphicCodePane	"Construct the pane that shows the code.	Respect the Preference for standardCodeFont."	^TextModelMorph		textProvider: self		textGetter: #acceptedContents		textSetter: #contents:notifying:		selectionGetter: #contentsSelection! !!CodeProvider methodsFor: 'misc' stamp: 'jmv 2/18/2011 17:48'!addLowerPanesTo: window at: nominalFractions	| verticalOffset column innerFractions |	column _ AlignmentMorph proportional.	verticalOffset _ 0.	innerFractions _ 0@0 corner: 1@0.	verticalOffset _ self addOptionalAnnotationsTo: column at: innerFractions plus: verticalOffset.	verticalOffset _ self addOptionalButtonsTo: column  at: innerFractions plus: verticalOffset.	column 		addMorph: (self buildMorphicCodePane borderWidth: 0)		fullFrame: (			LayoutFrame 				fractions: (innerFractions withBottom: 1) 				offsets: (0@verticalOffset corner: 0@0)		).	window 		addMorph: column		frame: nominalFractions.	column on: #mouseEnter send: #paneTransition: to: window.	column on: #mouseLeave send: #paneTransition: to: window.	^column! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/18/2011 17:51'!openAsMorphClass	"Create a pluggable version a Browser on just a single class."	| window dragNDropFlag hSepFrac switchHeight mySingletonClassList switches c |	window := SystemWindow new model: self.	dragNDropFlag := false.	hSepFrac := 0.3.	switchHeight _ StrikeFont default height + 10.	mySingletonClassList := PluggableListMorph 				model: self				listGetter: #classListSingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				menuGetter: #classListMenu				keystrokeAction: #classListKey:from:.	mySingletonClassList enableDragNDrop: dragNDropFlag.	self 		addLowerPanesTo: window		at: (0 @ hSepFrac corner: 1 @ 1).	window addMorph: mySingletonClassList		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 0.5 @ 0)				offsets: (0 @ 0 corner: 0 @ switchHeight)).	switches _ self buildMorphicSwitches.	c _ switches color.	window addMorph: switches		fullFrame: (LayoutFrame fractions: (0.5 @ 0 corner: 1.0 @ 0)				offsets: (0 @ 0 corner: 0 @ switchHeight)).	switches color: c.	window addMorph: self buildMorphicMessageCatList		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 0.5 @ hSepFrac)				offsets: (0 @ switchHeight corner: 0 @ 0)).	window addMorph: self buildMorphicMessageList		fullFrame: (LayoutFrame fractions: (0.5 @ 0 corner: 1.0 @ hSepFrac)				offsets: (0 @ switchHeight corner: 0 @ 0)).	window setUpdatablePanesFrom: #(#messageCategoryList #messageList).	^window! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/18/2011 17:45'!openAsMorphMessage	"Create a pluggable version a Browser that shows just one message"	| window mySingletonMessageList verticalOffset nominalFractions |	window := SystemWindow new model: self.	mySingletonMessageList := PluggableListMorph 				model: self				listGetter: #messageListSingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				menuGetter: #messageListMenu				keystrokeAction: #messageListKey:from:.	mySingletonMessageList enableDragNDrop: false.	verticalOffset := 25.	nominalFractions := 0 @ 0 corner: 1 @ 0.	window addMorph: mySingletonMessageList		fullFrame: (LayoutFrame fractions: nominalFractions				offsets: (0 @ 0 corner: 0 @ verticalOffset)).	verticalOffset := self 				addOptionalAnnotationsTo: window				at: nominalFractions				plus: verticalOffset.	verticalOffset := self 				addOptionalButtonsTo: window				at: nominalFractions				plus: verticalOffset.	window		addMorph: self buildMorphicCodePane		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 1 @ 1)				offsets: (0 @ verticalOffset corner: 0 @ 0)).	^window! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/18/2011 18:00'!openAsMorphMsgCat	"Create a pluggable version a Browser on just a message category."	| window hSepFrac |	window := SystemWindow new model: self.	hSepFrac := 0.3.	window 		addMorph: ((PluggableListMorph 				model: self				listGetter: #messageCatListSingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				menuGetter: #messageCategoryMenu) 					enableDragNDrop: false)		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 1 @ 0)				offsets: (0 @ 0 corner: 0 @ 25)).	window addMorph: self buildMorphicMessageList		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 1 @ hSepFrac)				offsets: (0 @ 25 corner: 0 @ 0)).	self 		addLowerPanesTo: window		at: (0 @ hSepFrac corner: 1 @ 1).	window setUpdatablePanesFrom: #(#messageCatListSingleton #messageList).	^window! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/18/2011 18:01'!openAsMorphSysCat	"Create a pluggable version of all the views for a Browser, including views and controllers."	| window hSepFrac switchHeight mySingletonList nextOffsets |	window _ SystemWindow new model: self.	hSepFrac _ 0.3.	switchHeight _ Preferences standardCodeFont height + 10.	mySingletonList _ PluggableListMorph 				model: self				listGetter: #systemCategorySingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				menuGetter: #systemCatSingletonMenu				keystrokeAction: #systemCatSingletonKey:from:.	mySingletonList enableDragNDrop: false.	mySingletonList hideScrollBarsIndefinitely.	window addMorph: mySingletonList		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 1 @ 0)				offsets: (0 @ 0 corner: 0 @ switchHeight)).	self 		addClassAndSwitchesTo: window		at: (0 @ 0 corner: 0.3333 @ hSepFrac)		plus: switchHeight.	nextOffsets _ 0 @ switchHeight corner: 0 @ 0.	window addMorph: self buildMorphicMessageCatList		fullFrame: (LayoutFrame 				fractions: (0.3333 @ 0 corner: 0.6666 @ hSepFrac)				offsets: nextOffsets).	window addMorph: self buildMorphicMessageList		fullFrame: (LayoutFrame fractions: (0.6666 @ 0 corner: 1 @ hSepFrac)				offsets: nextOffsets).	self 		addLowerPanesTo: window		at: (0 @ hSepFrac corner: 1 @ 1).	window 		setUpdatablePanesFrom: #(#classList #messageCategoryList #messageList).	^window! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/18/2011 17:57'!openAsMorphX	"Create a pluggable version of all the morphs for a Browser in Morphic"	| window hSepFrac |	hSepFrac _ 0.4.	window _ SystemWindow new model: self.			window 		addMorph: self buildMorphicSystemCatList		frame: (0@0 corner: 0.25@hSepFrac).	self 		addClassAndSwitchesTo: window 		at: (0.25@0 corner: 0.5@hSepFrac)		plus: 0.	window 		addMorph: self buildMorphicMessageCatList		frame: (0.5@0 extent: 0.25@hSepFrac).	window addMorph: self buildMorphicMessageList		frame: (0.75@0 extent: 0.25@hSepFrac).	self 		addLowerPanesTo: window 		at: (0@hSepFrac corner: 1@1).			window setUpdatablePanesFrom: #(systemCategoryList classList messageCategoryList messageList).	^ window! !!Browser methodsFor: 'message category functions' stamp: 'jmv 2/18/2011 18:00'!buildMessageCategoryBrowser	"Create and schedule a message category browser for the currently 	selected message category."	"wod 6/24/1998: set newBrowser classListIndex so that it works whether the	receiver is a standard or a Hierarchy Browser."	| newBrowser |	messageCategoryListIndex ~= 0		ifTrue: 			[newBrowser _ Browser new.			newBrowser systemCategoryListIndex: systemCategoryListIndex.			newBrowser classListIndex: (newBrowser classList indexOf: self selectedClassName).			newBrowser metaClassIndicated: metaClassIndicated.			newBrowser messageCategoryListIndex: messageCategoryListIndex.			newBrowser messageListIndex: messageListIndex.			self class openBrowserView: newBrowser openAsMorphMsgCat				label: 'Message Category Browser (' , 						newBrowser selectedClassOrMetaClassName , ')']! !!Browser methodsFor: 'message functions' stamp: 'jmv 2/18/2011 17:54'!shiftedMessageListMenu	"Fill aMenu with the items appropriate when the shift key is held down"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addStayUpIcons.	aMenu addList: #(		('toggle diffing (D)'						toggleDiffing)		('implementors of sent messages'			browseAllMessages)		-		('local senders of...'						browseLocalSendersOfMessages)		('local implementors of...'				browseLocalImplementors)		-		('spawn sub-protocol'					spawnProtocol)		('spawn full protocol'					spawnFullProtocol)		-		('sample instance'						makeSampleInstance)		('inspect instances'						inspectInstances)		('inspect subinstances'					inspectSubInstances)).	self addExtraShiftedItemsTo: aMenu.	aMenu addList: #(		-		('change category...'					changeCategory)).	self canShowMultipleMessageCategories ifTrue: [ aMenu addList:		 #(('show category (C)'					showHomeCategory))].	aMenu addList: #(		-		('change sets with this method'			findMethodInChangeSets)		('revert to previous version'			revertToPreviousVersion)		('remove from current change set'		removeFromCurrentChanges)		('revert & remove from changes'		revertAndForget)		('add to current change set'			adoptMessageInCurrentChangeset)		-		('more...' 								unshiftedYellowButtonActivity)).	^ aMenu! !!Browser methodsFor: 'system category functions' stamp: 'jmv 2/18/2011 18:02'!browseAllClasses	"Create and schedule a new browser on all classes alphabetically."	| newBrowser |	newBrowser _ HierarchyBrowser new initAlphabeticListing.	self class openBrowserView: newBrowser openAsMorphSysCat		label: 'All Classes Alphabetically'! !!Browser methodsFor: 'system category functions' stamp: 'jmv 2/18/2011 18:02'!buildSystemCategoryBrowserEditString: aString 	"Create and schedule a new system category browser with initial textual 	contents set to aString."	| newBrowser |	systemCategoryListIndex > 0		ifTrue: 			[newBrowser _ self class new.			newBrowser systemCategoryListIndex: systemCategoryListIndex.			newBrowser setClass: self selectedClassOrMetaClass selector: self selectedMessageName.			self class openBrowserView: newBrowser openAsMorphSysCat				label: 'Classes in category ', newBrowser selectedSystemCategoryName]! !!Browser methodsFor: 'construction' stamp: 'jmv 2/18/2011 17:48'!addLowerPanesTo: window at: nominalFractions	| commentPane column |	column _ super addLowerPanesTo: window at: nominalFractions.	commentPane _ self buildMorphicCommentPane.	window addMorph: commentPane fullFrame: (LayoutFrame fractions: (0@0.75 corner: 1@1)).	commentPane lowerPane: column.	self changed: #editSelection.! !!Browser class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 17:58'!fullOnClass: aClass selector: aSelector	"Open a new full browser set to class."	| brow classToUse |	classToUse _ Preferences browseToolClass.	brow _ classToUse new.	brow setClass: aClass selector: aSelector.	^ classToUse 		openBrowserView: brow openAsMorphX		label: brow labelString! !!Browser class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 17:52'!newOnClass: aClass label: aLabel	"Open a new class browser on this class."	| newBrowser |	newBrowser _ self new.	newBrowser setClass: aClass selector: nil.	^ self 		openBrowserView: newBrowser openAsMorphClass		label: aLabel! !!Browser class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 17:52'!newOnClass: aClass selector: aSymbol	"Open a new class browser on this class."	| newBrowser |	newBrowser _ self new.	newBrowser setClass: aClass selector: aSymbol.	^ self 		openBrowserView: newBrowser openAsMorphClass		label: 'Class Browser: ', aClass name! !!Browser class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 17:58'!openBrowser	"Create and schedule a BrowserView with default browser label. The	view consists of five subviews, starting with the list view of system	categories of SystemOrganization. The initial text view part is empty."	| br |	br := self new.	^ self		openBrowserView: br openAsMorphX		label: br defaultBrowserTitle.! !!Browser class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 17:46'!openMessageBrowserForClass: aBehavior selector: aSymbol editString: aString	"Create and schedule a message browser for the class, aBehavior, in 	which the argument, aString, contains characters to be edited in the text 	view. These characters are the source code for the message selector 	aSymbol."	| newBrowser |	(newBrowser _ self new) setClass: aBehavior selector: aSymbol.	^ self		openBrowserView: newBrowser openAsMorphMessage		label: newBrowser selectedClassOrMetaClassName , ' ' , newBrowser selectedMessageName! !!ChangeList methodsFor: 'initialization-release' stamp: 'jmv 2/18/2011 18:03'!openAsMorphName: labelString multiSelect: multiSelect 	"Open a morphic view for the messageSet, whose label is labelString. 	The listView may be either single or multiple selection type"	| window listHeight listPane |	listHeight _ 0.4.	window _ (SystemWindow labelled: labelString)				model: self.	listPane _ multiSelect				ifTrue: [PluggableListMorphOfMany						model: self						listGetter: #list						primarySelectionGetter: #listIndex						primarySelectionSetter: #toggleListIndex:						listSelectionGetter: #listSelectionAt:						listSelectionSetter: #listSelectionAt:put:						menuGetter: (self showsVersions								ifTrue: [#versionsMenu]								ifFalse: [#changeListMenu])]				ifFalse: [PluggableListMorph						model: self						listGetter: #list						indexGetter: #listIndex						indexSetter: #toggleListIndex:						menuGetter: (self showsVersions								ifTrue: [#versionsMenu]								ifFalse: [#changeListMenu])].	listPane keystrokeActionSelector: #changeListKey:from:.	window		addMorph: listPane		frame: (0 @ 0 extent: 1 @ listHeight).	self		addLowerPanesTo: window		at: (0 @ listHeight corner: 1 @ 1).	^ window openInWorld! !!ChangeList methodsFor: 'menu actions' stamp: 'jmv 2/18/2011 17:45'!buildMorphicCodePane	^TextModelMorph		textProvider: self		textGetter: #acceptedContents! !!ChangeSorter methodsFor: 'creation' stamp: 'jmv 2/18/2011 18:03'!openAsMorphIn: window rect: rect	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."	| csListHeight msgListHeight csMsgListHeight |	csListHeight _ 0.25.	msgListHeight _ 0.25.	csMsgListHeight _ csListHeight + msgListHeight.	self addDependent: window.		"so it will get changed: #relabel"	window addMorph: ((PluggableListMorphByItem 				model: self				listGetter: #changeSetList				indexGetter: #currentCngSet				indexSetter: #showChangeSetNamed:				menuGetter: #changeSetMenu				keystrokeAction: #changeSetListKey:from:)			autoDeselect: false)		frame: (((0@0 extent: 0.5@csListHeight)			scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableListMorphByItem 				model: self				listGetter: #classList				indexGetter: #currentClassName				indexSetter: #currentClassName:				menuGetter: #classListMenu				keystrokeAction: #classListKey:from:)		frame: (((0.5@0 extent: 0.5@csListHeight)			scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableListMorphByItem 				model: self				listGetter: #messageList				indexGetter: #currentSelector				indexSetter: #currentSelector:				menuGetter: #messageMenu				keystrokeAction: #messageListKey:from:)		frame: (((0@csListHeight extent: 1@msgListHeight)			scaleBy: rect extent) translateBy: rect origin).	 self		addLowerPanesTo: window		at: (((0@csMsgListHeight corner: 1@1) scaleBy: rect extent) translateBy: rect origin).! !!ChangeSetBrowser methodsFor: 'initialization' stamp: 'jmv 2/18/2011 18:03'!openAsMorphIn: window rect: rect	"Add a set of changeSetBrowser views to the given top view offset by the given amount"	| aHeight |	aHeight _ 0.25.	self addDependent: window.		"so it will get changed: #relabel"	window addMorph: (PluggableListMorphByItem 				model: self				listGetter: #classList				indexGetter: #currentClassName				indexSetter: #currentClassName:				menuGetter: #classListMenu				keystrokeAction: #classListKey:from:)		frame: (((0.0@0 extent: 0.5 @ aHeight)			scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableListMorphByItem 				model: self				listGetter: #messageList				indexGetter: #currentSelector				indexSetter: #currentSelector:				menuGetter: #messageMenu				keystrokeAction: #messageListKey:from:)		frame: (((0.5@0 extent: 0.5 @ aHeight)			scaleBy: rect extent) translateBy: rect origin).	 self		addLowerPanesTo: window		at: (((0@aHeight corner: 1@1) scaleBy: rect extent) translateBy: rect origin).! !!Debugger methodsFor: 'initialize' stamp: 'jmv 2/18/2011 18:03'!openFullMorphicLabel: aLabelString	"Open a full morphic debugger with the given label"	| window aListMorph oldContextStackIndex |	oldContextStackIndex _ contextStackIndex.	self expandStack. "Sets contextStackIndex to zero."	window _ (SystemWindow labelled: aLabelString) model: self.	aListMorph _ PluggableListMorph		model: self 		listGetter: #contextStackList		indexGetter: #contextStackIndex		indexSetter: #toggleContextStackIndex:		menuGetter: #contextStackMenu		keystrokeAction: #contextStackKey:from:.	window addMorph: aListMorph		frame: (0@0 corner: 1@0.25).	self addLowerPanesTo: window at: (0@0.25 corner: 1@0.8).	window addMorph: (		PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: self receiverInspector			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			menuGetter: #fieldListMenu			keystrokeAction: #inspectorKey:from:)		frame: (0@0.8 corner: 0.2@1).	window addMorph: (TextModelMorph 			textProvider: self receiverInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection)		frame: (0.2@0.8 corner: 0.5@1).	window addMorph: (		PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: self contextVariablesInspector 			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			menuGetter: #fieldListMenu			keystrokeAction: #inspectorKey:from:)		frame: (0.5@0.8 corner: 0.7@1).	window addMorph: (TextModelMorph 			textProvider: self contextVariablesInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection)		frame: (0.7@0.8 corner: 1@1).	window openInWorld.	self toggleContextStackIndex: oldContextStackIndex.	^ window ! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 2/18/2011 18:09'!buildMorphicNotifierLabelled: label message: messageString 	| notifyPane window contentTop extentToUse |	self expandStack.	window := (SystemWindow labelled: label) model: self.	contentTop := 0.2.	extentToUse := 650 @ 320.	"nice and wide to show plenty of the error msg"	window addMorph: self buttonRowForPreDebugWindow		frame: (0 @ 0 corner: 1 @ contentTop).	messageString 		ifNil: [			notifyPane := PluggableListMorph 						model: self						listGetter: #contextStackList						indexGetter: #contextStackIndex						indexSetter: #debugAt:						menuGetter: nil						keystrokeAction: nil]		ifNotNil: [			notifyPane _ TextModelMorph withText: messageString.			notifyPane				askBeforeDiscardingEdits: false].	window addMorph: notifyPane frame: (0 @ contentTop corner: 1 @ 1).	^window openInWorldExtent: extentToUse! !!Debugger class methodsFor: 'opening' stamp: 'jmv 2/12/2008 19:01'!openInterrupt: aString onProcess: interruptedProcess	"Open a notifier in response to an interrupt. An interrupt occurs when the user types the interrupt key (cmd-. on Macs, ctrl-c or alt-. on other systems) or when the low-space watcher detects that memory is low."	| debugger |	<primitive: 19> "Simulation guard"	debugger _ self new.	debugger		process: interruptedProcess		controller: nil		context: interruptedProcess suspendedContext.	debugger externalInterrupt: true.Preferences logDebuggerStackToFile ifTrue:	[(aString includesSubString: 'Space') & 		(aString includesSubString: 'low') ifTrue: [			Smalltalk logError: aString inContext: debugger interruptedContext to:'LowSpaceDebug.log']].	^ debugger		openNotifierContents: nil		label: aString! !!FileContentsBrowser methodsFor: 'creation' stamp: 'jmv 2/18/2011 17:49'!addLowerPanesTo: window at: nominalFractions	| verticalOffset column codePane infoPane infoHeight divider |	column _ AlignmentMorph proportional.	codePane _ TextModelMorph 		textProvider: self		textGetter: #acceptedContents 		textSetter: #contents:notifying:		selectionGetter: #contentsSelection.	infoPane _ TextModelMorph 		textProvider: self		textGetter: #infoViewContents.	infoPane askBeforeDiscardingEdits: false.	verticalOffset _ 0.	infoHeight _ 20.	column 		addMorph: (codePane borderWidth: 0)		fullFrame: (			LayoutFrame 				fractions: (0@0 corner: 1@1) 				offsets: (0@verticalOffset corner: 0@infoHeight negated)		).	divider _ BorderedSubpaneDividerMorph forTopEdge.	column 		addMorph: divider		fullFrame: (			LayoutFrame 				fractions: (0@1 corner: 1@1) 				offsets: (0@infoHeight negated corner: 0@(1-infoHeight))		).	column 		addMorph: (infoPane borderWidth: 0; hideScrollBarsIndefinitely)		fullFrame: (			LayoutFrame 				fractions: (0@1 corner: 1@1) 				offsets: (0@(1-infoHeight) corner: 0@0)		).	window 		addMorph: column		frame: nominalFractions.	column on: #mouseEnter send: #paneTransition: to: window.	column on: #mouseLeave send: #paneTransition: to: window! !!FileContentsBrowser methodsFor: 'creation' stamp: 'jmv 2/18/2011 18:03'!openAsMorph	"Create a pluggable version of all the views for a Browser, including views and controllers."	| window aListExtent next mySingletonList |	window _ SystemWindow new model: self.	self packages size = 1		ifTrue: [			aListExtent _ 0.333333 @ 0.34.			self systemCategoryListIndex: 1.			mySingletonList _ PluggableListMorph 					model: self 					listGetter: #systemCategorySingleton					indexGetter: #indexIsOne 					indexSetter: #indexIsOne:					menuGetter: #packageListMenu					keystrokeAction: #packageListKey:from:.			mySingletonList hideScrollBarsIndefinitely.			window addMorph: mySingletonList frame: (0@0 extent: 1.0@0.06).			next := 0@0.06]		ifFalse: [			aListExtent _ 0.25 @ 0.4.			window addMorph: (PluggableListMorph 					model: self 					listGetter: #systemCategoryList					indexGetter: #systemCategoryListIndex 					indexSetter: #systemCategoryListIndex:					menuGetter: #packageListMenu					keystrokeAction: #packageListKey:from:)				frame: (0@0 extent: aListExtent).			next := aListExtent x @ 0].	self addClassAndSwitchesTo: window at: (next extent: aListExtent) plus: 0.	next := next + (aListExtent x @ 0).	window addMorph: (PluggableListMorph 			model: self 			listGetter: #messageCategoryList			indexGetter: #messageCategoryListIndex 			indexSetter: #messageCategoryListIndex:			menuGetter: #messageCategoryMenu)		frame: (next extent: aListExtent).	next := next + (aListExtent x @ 0).	window addMorph: (PluggableListMorph 			model: self 			listGetter: #messageList			indexGetter: #messageListIndex 			indexSetter: #messageListIndex:			menuGetter: #messageListMenu			keystrokeAction: #messageListKey:from:)		frame: (next extent: aListExtent).	self addLowerPanesTo: window at: (0@0.4 corner: 1@1).	^ window! !!FileList class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 18:12'!openEditorOn: aFileStream	"Open an editor on the given FileStream."	^ (self openMorphOn: aFileStream) openInWorld! !!FileList class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 18:12'!openFileDirectly	| aResult |	(aResult _ StandardFileMenu oldFile) ifNotNil: [		self openEditorOn: (aResult directory readOnlyFileNamed: aResult name) ]! !!FileList class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 18:12'!openMorphOn: aFileStream	"Open a morphic view of a FileList on the given file."	| fileModel window |	fileModel _ FileList new setFileStream: aFileStream.	"closes the stream"	window _ (SystemWindow labelled: aFileStream fullName) model: fileModel.	window addMorph: (TextModelMorph 			textProvider: fileModel			textGetter: #acceptedContents 			textSetter: #put:			selectionGetter: #contentsSelection)		frame: (0@0 corner: 1@1).	^ window! !!FileStream methodsFor: 'editing' stamp: 'jmv 2/18/2011 18:12'!edit	"Create and schedule an editor on this file."	FileList openEditorOn: self! !!ClassListBrowser methodsFor: 'initialization' stamp: 'jmv 2/18/2011 18:02'!initForClassesNamed: nameList title: aTitle	"Initialize the receiver for the class-name-list and title provided"	self systemOrganizer: SystemOrganization.	metaClassIndicated _ false.	defaultTitle _ aTitle.	classList _ nameList copy.	self		class openBrowserView: self openAsMorphSysCat		label: aTitle	"ClassListBrowser new initForClassesNamed: #(Browser CategoryViewer) title: 'Frogs'"! !!HierarchyBrowser class methodsFor: 'as yet unclassified' stamp: 'jmv 2/18/2011 18:02'!newFor: aClass	"Open a new HierarchyBrowser on the given class"	|  newBrowser |	newBrowser _ HierarchyBrowser new initHierarchyForClass: aClass.	Browser openBrowserView: newBrowser openAsMorphSysCat		label: newBrowser labelString.	newBrowser assureSelectionsShow"HierarchyBrowser newFor: Boolean"! !!MessageSet methodsFor: 'private' stamp: 'jmv 2/18/2011 18:03'!inMorphicWindowLabeled: labelString	"Answer a morphic window with the given label that can display the receiver"	| window listFraction |	window _ (SystemWindow labelled: labelString) model: self.	listFraction _ 0.2.	window addMorph: self buildMorphicMessageList frame: (0@0 extent: 1@listFraction).	self 		addLowerPanesTo: window 		at: (0@listFraction corner: 1@1).	window setUpdatablePanesFrom: #(messageList).	^ window! !!MessageNames methodsFor: 'initialization' stamp: 'jmv 2/18/2011 18:14'!inMorphicWindow	"Answer a morphic window with the given initial search string, nil if none""MessageNames openMessageNames"	| window selectorListView firstDivider secondDivider horizDivider typeInPane searchButton plugTextMor |	window _ (SystemWindow labelled: 'Message Names') model: self.	firstDivider _ 0.07.	secondDivider _ 0.5.	horizDivider _ 0.5.	typeInPane _ AlignmentMorph proportional height: 14.	plugTextMor _ TextModelMorph 		textProvider: self		textGetter: #searchString 		textSetter: #searchString:.	plugTextMor setProperty: #alwaysAccept toValue: true.	plugTextMor askBeforeDiscardingEdits: false.	plugTextMor acceptOnCR: true.	plugTextMor setTextColor: Color brown.	plugTextMor hideScrollBarsIndefinitely.	plugTextMor textMorph		on: #mouseEnter send: #selectAll to: plugTextMor textMorph.	searchButton _ PluggableButtonMorph new 		model: self;		label: 'Search';		action: #doSearchFrom:;		arguments: {plugTextMor}.	searchButton setBalloonText: 'Type some letters into the pane at right, and then press this Search button (or hit RETURN) and all method selectors that match what you typed will appear in the list pane below.  Click on any one of them, and all the implementors of that selector will be shown in the right-hand pane, and you can view and edit their code without leaving this tool.'.	typeInPane addInRow: { searchButton. plugTextMor. } widthProportionalTo: #(1 3).	window addMorph: typeInPane frame: (0@0 corner: horizDivider @ firstDivider).	selectorListView _ PluggableListMorph 		model: self		listGetter: #selectorList		indexGetter: #selectorListIndex		indexSetter: #selectorListIndex:		menuGetter: #selectorListMenu		keystrokeAction: #selectorListKey:from:.	window addMorph: selectorListView frame: (0 @ firstDivider corner: horizDivider @ secondDivider).	window addMorph: self buildMorphicMessageList frame: (horizDivider @ 0 corner: 1@ secondDivider).	self 		addLowerPanesTo: window 		at: (0 @ secondDivider corner: 1@1).	^ window! !!MessageSet class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 18:27'!open: aMessageSet name: aString 	"Create a standard system view for the messageSet, aMessageSet, whose label is aString."	^ (aMessageSet inMorphicWindowLabeled: aString) openInWorld! !!MessageSet class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 18:29'!openMessageList: messageList name: labelString autoSelect: autoSelectString	"Open a system view for a MessageSet on messageList. 	 1/24/96 sw: the there-are-no msg now supplied by my sender"	| messageSet |	messageSet _ self messageList: messageList.	messageSet autoSelectString: autoSelectString.	^self open: messageSet name: labelString ! !!ChangedMessageSet class methodsFor: 'as yet unclassified' stamp: 'jmv 2/18/2011 18:29'!openMessageList: messageList name: labelString autoSelect: autoSelectString changeSet: aChangeSet	| messageSet |	messageSet _ self messageList: messageList.	messageSet changeSet: aChangeSet.	messageSet autoSelectString: autoSelectString.	^self open: messageSet name: labelString ! !!MessageNames class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 18:21'!openMessageNames	"Open a new instance of the receiver in the active world"	self new inMorphicWindow openInWorld	"MessageNames openMessageNames"! !!PackagePaneBrowser methodsFor: 'initialize-release' stamp: 'jmv 2/18/2011 17:57'!openAsMorphX 	"Create a pluggable version of all the views for a Browser, including 	views and controllers."	"PackagePaneBrowser openBrowser"	| listHeight window |	listHeight _ 0.4.	window _ SystemWindow new model: self.	window		addMorph: (PluggableListMorph				model: self				listGetter: #packageList				indexGetter: #packageListIndex				indexSetter: #packageListIndex:				menuGetter: #packageMenu				keystrokeAction: #packageListKey:from:)		frame: (0 @ 0 extent: 0.15 @ listHeight).	window		addMorph: self buildMorphicSystemCatList		frame: (0.15 @ 0 extent: 0.2 @ listHeight).	self		addClassAndSwitchesTo: window		at: (0.35 @ 0 extent: 0.25 @ listHeight)		plus: 0.	window		addMorph: self buildMorphicMessageCatList		frame: (0.6 @ 0 extent: 0.15 @ listHeight).	window		addMorph: self buildMorphicMessageList		frame: (0.75 @ 0 extent: 0.25 @ listHeight).	self		addLowerPanesTo: window		at: (0 @ listHeight corner: 1 @ 1).	window setUpdatablePanesFrom: #(#packageList #systemCategoryList #classList #messageCategoryList #messageList ).	^ window! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 2/18/2011 18:21'!findAMessageNamesWindow: evt	"Locate a MessageNames tool, open it, and bring it to the front.  Create one if necessary"	self		findAWindowSatisfying: [ :aWindow |			aWindow model isKindOf: MessageNames ]		orMakeOneUsing: [ MessageNames openMessageNames ]! !!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 2/18/2011 17:58'!browseIt	"Launch a browser for the current selection, if appropriate"	| aSymbol anEntry brow |	Preferences alternativeBrowseIt ifTrue: [^ self browseClassFromIt].	self lineSelectAndEmptyCheck: [^ self].	(aSymbol _ self selectedSymbol) ifNil: [^ morph flash].	aSymbol first isUppercase		ifTrue:			[anEntry _ (Smalltalk				at: aSymbol				ifAbsent:					[ Smalltalk browseAllImplementorsOf: aSymbol.					^ nil]).			anEntry ifNil: [^ morph flash].			(anEntry isKindOf: Class)				ifFalse:	[anEntry _ anEntry class].			brow _ Preferences browseToolClass new.			brow setClass: anEntry selector: nil.			brow class				openBrowserView: brow openAsMorphX				label: 'System Browser' ]		ifFalse:			[Smalltalk browseAllImplementorsOf: aSymbol]! !!TextModelMorph class methodsFor: 'instance creation' stamp: 'jmv 2/18/2011 18:08'!withText: aTextOrString	^self withModel: (TextModel withText: aTextOrString)! !TextModelMorph class removeSelector: #withTextOrString:!TextModelMorph removeSelector: #changeText:!TextModelMorph removeSelector: #editString:!SystemDictionary removeSelector: #browseMethodsWhoseNamesContain:!PackagePaneBrowser removeSelector: #openAsMorphEditing:!PackagePaneBrowser removeSelector: #openEditString:!MessageNames class removeSelector: #methodBrowser!MessageNames class removeSelector: #methodBrowserSearchingFor:!MessageSet class removeSelector: #openAsMorph:name:!MessageSet class removeSelector: #openAsMorph:name:inWorld:!MessageNames removeSelector: #inMorphicWindowLabeled:!MessageNames removeSelector: #inMorphicWindowWithInitialSearchString:!MessageSet removeSelector: #openAsMorphNamed:inWorld:!HierarchyBrowser removeSelector: #buildClassBrowserEditString:!HierarchyBrowser removeSelector: #openEditString:!FileList class removeSelector: #openEditorOn:editString:!FileList class removeSelector: #openMorphOn:editString:!FileContentsBrowser removeSelector: #addLowerPanesTo:at:with:!ChangeList removeSelector: #buildMorphicCodePaneWith:!Browser removeSelector: #addLowerPanesTo:at:with:!Browser removeSelector: #buildMessageCategoryBrowserEditString:!Browser removeSelector: #openAsMorphClassEditing:!Browser removeSelector: #openAsMorphEditing:!Browser removeSelector: #openAsMorphMessageEditing:!Browser removeSelector: #openAsMorphMsgCatEditing:!Browser removeSelector: #openAsMorphSysCatEditing:!Browser removeSelector: #openEditString:!Browser removeSelector: #openMessageCatEditString:!Browser removeSelector: #openMessageEditString:!Browser removeSelector: #openOnClassWithEditString:!Browser removeSelector: #openSystemCatEditString:!CodeProvider removeSelector: #addLowerPanesTo:at:with:!CodeProvider removeSelector: #buildClassBrowserEditString:!CodeProvider removeSelector: #buildMorphicCodePaneWith:!CodeProvider removeSelector: #copyUpOrCopyDown!CodeProvider removeSelector: #spawnToClass:!CodeProvider removeSelector: #spawnToCollidingClass:!