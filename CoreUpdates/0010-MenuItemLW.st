'From Squeak3.7 of ''4 September 2004'' [latest update: #5989] on 21 April 2008 at 1:26:33 am'!!ButtonLW methodsFor: 'accessing' stamp: 'jmv 4/21/2008 00:11'!label: aString	label _ aString! !!LabelLW methodsFor: 'accessing' stamp: 'jmv 4/21/2008 00:11'!label: aString	label _ aString! !!LightWidget methodsFor: 'geometry' stamp: 'jmv 4/21/2008 00:17'!bounds: aRectangle	| box |	box _ bounds.	bounds _ aRectangle.	self invalidRect: (box merge: aRectangle).	owner ifNotNil:[owner layoutChanged].! !!Morph methodsFor: 'submorphs-add/remove' stamp: 'jmv 4/21/2008 00:28'!comeToFront	(self owner isNil or: [self owner hasSubmorphs not]) 		ifTrue: [^self].	self owner firstSubmorph == self 		ifFalse: [self owner addMorphFront: self]! !!LightWidget methodsFor: 'submorphs-add/remove' stamp: 'jmv 4/21/2008 00:28'!comeToFront	(self owner isNil or: [self owner hasSubmorphs not]) 		ifTrue: [^self].	self owner firstSubmorph == self 		ifFalse: [self owner addMorphFront: self]! !!LightWidget methodsFor: 'event handling' stamp: 'jmv 4/21/2008 00:29'!keyboardFocusChange: aBoolean	"The message is sent to a morph when its keyboard focus change. The given argument indicates that the receiver is gaining keyboard focus (versus losing) the keyboard focus. Morphs that accept keystrokes could change their appearance in some way when they are the current keyboard focus. This default implementation does nothing."! !!Morph methodsFor: 'event handling' stamp: 'jmv 4/21/2008 00:29'!keyboardFocusChange: aBoolean	"The message is sent to a morph when its keyboard focus change. The given argument indicates that the receiver is gaining keyboard focus (versus losing) the keyboard focus. Morphs that accept keystrokes could change their appearance in some way when they are the current keyboard focus. This default implementation does nothing."! !!CompositeLW methodsFor: 'submorphs-add/remove' stamp: 'jmv 4/21/2008 00:31'!addMorphBack: aMorph	^self privateAddMorph: aMorph atIndex: submorphs size+1! !!CompositeMorph methodsFor: 'submorphs-add/remove' stamp: 'jmv 4/21/2008 00:31'!addMorphBack: aMorph	^self privateAddMorph: aMorph atIndex: submorphs size+1! !!LightWidget methodsFor: 'submorphs-add/remove' stamp: 'jmv 4/21/2008 00:32'!goBehind	owner addMorphBack: self! !!Morph methodsFor: 'submorphs-add/remove' stamp: 'jmv 4/21/2008 00:32'!goBehind	owner addMorphBack: self! !!LightWidget methodsFor: 'events-processing' stamp: 'jmv 4/21/2008 00:33'!handlesKeyboard: evt	"Return true if the receiver wishes to handle the given keyboard event"	self eventHandler ifNotNil: [^ self eventHandler handlesKeyboard: evt].	^ false! !!classDefinition: #MenuItemLW category: #'LightWidgets-Kernel'!ButtonLW subclass: #MenuItemLW	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'LightWidgets-Kernel'!!MenuItemLW commentStamp: '<historical>'!A menu item is much like a button.!!MenuItemLW methodsFor: 'initialization' stamp: 'jmv 4/21/2008 00:39'!initialize	model _ 'I am the model'.	modelUpdateSelector _ #show.	bounds _ 10@10 extent: 100@30.	label _ 'item text'.	font _ (TextStyle named: 'Vera') fontNamed: 'Vera 16'.	pressed _ false! !!MenuItemLW methodsFor: 'drawing' stamp: 'jmv 4/21/2008 00:44'!drawOn: aCanvas	aCanvas fillRectangle: bounds color: Color lightBlue.	aCanvas drawString: label at: bounds topLeft + (5@2) font: font color: Color blue! !!MenuItemLW methodsFor: 'event handling' stamp: 'jmv 4/21/2008 00:50'!mouseUp: evt	ActiveHand navigationFocus: self.	super mouseUp: evt! !!ButtonLW methodsFor: 'event handling' stamp: 'jmv 4/21/2008 00:52'!mouseDown: evt	ActiveHand navigationFocus notNil ifTrue: [		ActiveHand navigationFocus: self].	pressed _ true.	self changed! !!LightWidget methodsFor: 'events-processing' stamp: 'jmv 4/21/2008 01:03'!handleKeyDown: anEvent	"System level event handling."	anEvent wasHandled ifTrue:[^self].	(self handlesKeyboard: anEvent) ifFalse:[^self].	anEvent wasHandled: true.	^self keyDown: anEvent! !!LightWidget methodsFor: 'events-processing' stamp: 'jmv 4/21/2008 01:03'!handleKeyUp: anEvent	"System level event handling."	anEvent wasHandled ifTrue:[^self].	(self handlesKeyboard: anEvent) ifFalse:[^self].	anEvent wasHandled: true.	^self keyUp: anEvent! !!LightWidget methodsFor: 'events-processing' stamp: 'jmv 4/21/2008 01:03'!handleKeystroke: anEvent	"System level event handling."	anEvent wasHandled ifTrue:[^self].	(self handlesKeyboard: anEvent) ifFalse:[^self].	anEvent wasHandled: true.	^self keyStroke: anEvent! !!ButtonLW methodsFor: 'events-processing' stamp: 'jmv 4/21/2008 01:05'!handlesKeyboard: evt	^true! !!ButtonLW methodsFor: 'event handling' stamp: 'jmv 4/21/2008 01:06'!keyStroke: evt	"Handle a keystroke event."	super keyStroke: evt  "sends to keyStroke event handler, if any"! !!LightWidget methodsFor: 'events-processing' stamp: 'jmv 4/21/2008 01:07'!keyStroke: anEvent	"Handle a keystroke event.  The default response is to let my eventHandler, if any, handle it."	self eventHandler ifNotNil:		[self eventHandler keyStroke: anEvent fromMorph: self]! !!LightWidget methodsFor: 'events-processing' stamp: 'jmv 4/21/2008 01:07'!keyDown: anEvent	"Handle a key down event. The default response is to do nothing."! !!LightWidget methodsFor: 'events-processing' stamp: 'jmv 4/21/2008 01:07'!keyUp: anEvent	"Handle a key up event. The default response is to do nothing."! !!ButtonLW methodsFor: 'event handling' stamp: 'jmv 4/21/2008 01:08'!keyDown: evt	"Handle a keystroke event."	(evt commandKeyPressed and: [evt keyValue = 13]) ifTrue: [		ActiveHand navigationFocus notNil ifTrue: [			ActiveHand navigationFocus: self].		pressed _ true.		self changed].	super keyStroke: evt! !!ButtonLW methodsFor: 'event handling' stamp: 'jmv 4/21/2008 01:09'!keyUp: evt	"Handle a keystroke event."	(evt commandKeyPressed and: [evt keyValue = 13]) ifTrue: [		pressed _ false.		self changed.		(model notNil and: [modelUpdateSelector notNil])			ifTrue: [model perform: modelUpdateSelector]].	super keyStroke: evt! !!StackedPageLW methodsFor: 'accessing' stamp: 'jmv 4/21/2008 01:11'!previous: aStackedPageLW	previous _ aStackedPageLW! !!StackedPageLW methodsFor: 'stack' stamp: 'jmv 4/21/2008 01:12'!push: aStackedPageLW	next _ aStackedPageLW.	aStackedPageLW previous: self.	aStackedPageLW openInWorld! !!classDefinition: #StackedPageSample1LW category: #'LightWidgets-Examples'!StackedPageLW subclass: #StackedPageSample1LW	instanceVariableNames: 'level'	classVariableNames: ''	poolDictionaries: ''	category: 'LightWidgets-Examples'!!StackedPageSample1LW methodsFor: 'user actions' stamp: 'jmv 4/21/2008 01:13'!openChild	self push: 		(StackedPageSample1LW new level: level + 1)! !!StackedPageSample1LW methodsFor: 'accessing' stamp: 'jmv 4/21/2008 01:16'!level: aNumber	| title |	level _ aNumber.	title _ LabelLW new.	title label: 'level: ', level printString;		bounds: (150@60 corner: 250@90).	self		addMorph: title! !!classDefinition: #StackedPageSample1LW category: #'LightWidgets-Examples'!StackedPageLW subclass: #StackedPageSample1LW	instanceVariableNames: 'firstFocus level'	classVariableNames: ''	poolDictionaries: ''	category: 'LightWidgets-Examples'!!StackedPageSample1LW methodsFor: 'initialization' stamp: 'jmv 4/21/2008 01:20'!initialize	| title close menu |	super initialize.	level _ 1.	bounds _ 0 @ 0 extent: 400 @ 300.	title _ LabelLW new.	title label: 'Application Start';		bounds: (110@30 corner: 300@60).	close _ ButtonLW new.	close model: self;		 modelUpdateSelector: #delete;		 label: 'x';		bounds: (0@0 extent: 25@25).	menu _ CompositeLW new.	menu bounds: (20@150 extent: 340@120).		menu			addMorph: (MenuItemLW new				model: self;				modelUpdateSelector: #openChild;				label: 'Something to do 4';				bounds: (20@240 extent: 340@30));			addMorph: (MenuItemLW new				model: self;				modelUpdateSelector: #openChild;				label: 'Something to do 3';				bounds: (20@210 extent: 340@30));			addMorph:  (MenuItemLW new				model: self;				modelUpdateSelector: #openChild;				label: 'Something to do 2';				bounds: (20@180 extent: 340@30));			addMorph: (firstFocus _ MenuItemLW new				model: self;				modelUpdateSelector: #delete;				label: 'Go Back';				bounds: (20@150 extent: 340@30)).	self		addMorph: title;		addMorph: close;		addMorph: menu.	ActiveHand navigationFocus: firstFocus! !!StackedPageSample1LW methodsFor: 'accessing' stamp: 'jmv 4/21/2008 01:20'!firstFocus	^firstFocus! !!StackedPageSample1LW methodsFor: 'user actions' stamp: 'jmv 4/21/2008 01:21'!delete	ActiveHand navigationFocus: (previous ifNotNil: [previous firstFocus]).	^super delete! !