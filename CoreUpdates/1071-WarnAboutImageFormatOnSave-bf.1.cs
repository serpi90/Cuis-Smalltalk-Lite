'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 31 August 2011 at 8:23:36 am'!!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/31/2011 08:19'!okayToSave	| wasCog isCog |	[ wasCog _ self imageFormatVersionFromFile allMask: 1 ]		on: Error		do: [ :ignore |			"probably save-as to non-existing file"			^ true ].	isCog _ Smalltalk isRunningCog.	^ wasCog = isCog or: [ self confirm: 'Images saved under Cog cannot be opened on an interpreter again!!Really save?' ]! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/31/2011 08:21'!saveAs	"Put up the 'saveAs' prompt, obtain a name, and save the image  under that new name."	| newName |	newName _ self getFileNameFromUser.	newName ifNil: [^ self]. 	self okayToSave ifFalse: [^self].	(SourceFiles at: 2) ifNotNil: [		self closeSourceFiles; "so copying the changes file will always work"			 saveChangesInFileNamed: (self fullNameForChangesNamed: newName)].	self saveImageInFileNamed: (self fullNameForImageNamed: newName)! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/31/2011 08:22'!saveAsNewVersion	"Save the image/changes using the next available version number."	"Smalltalk saveAsNewVersion"	| newName changesName aName anIndex | 	self okayToSave ifFalse: [^self].	aName _ FileDirectory baseNameFor: (FileDirectory default localNameFor: Smalltalk imageName).	anIndex _ aName lastIndexOf: FileDirectory dot asCharacter ifAbsent: nil.	(anIndex notNil and: [(aName copyFrom: anIndex + 1 to: aName size) isAllDigits])		ifTrue:			[aName _ aName copyFrom: 1 to: anIndex - 1].	newName _ FileDirectory default nextNameFor: aName extension: FileDirectory imageSuffix.	changesName _ self fullNameForChangesNamed: newName.	"Check to see if there is a .changes file that would cause a problem if we saved a new .image file with the new version number"	(FileDirectory default includesKey: changesName)		ifTrue:			[^ self inform:'There is already .changes file of the desired name,', newName, 'curiously already present, even though there isno corresponding .image file.   Please remedymanually and then repeat your request.'].	(SourceFiles at: 2) ifNotNil:		[self saveChangesInFileNamed: (self fullNameForChangesNamed: newName)].	self saveImageInFileNamed: (self fullNameForImageNamed: newName)! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/31/2011 08:22'!snapshot: save andQuit: quit 	(save and: [self okayToSave not]) ifTrue: [^self].	^self snapshot: save andQuit: quit embedded: false! !!SystemDictionary methodsFor: 'image format' stamp: 'jmv 8/31/2011 08:14'!imageFormatVersion 	"Answer an integer identifying the type of image in memory. The image version number may  	identify the format of the image (e.g. 32 or 64-bit word size) or specific requirements  	of the image (e.g. block closure support required). This invokes an optional primitive  	that may not be available on all virtual machines."    	"	Smalltalk imageFormatVersion	"    	<primitive: 'primitiveImageFormatVersion'>  	self notify: 'This virtual machine does not support the optional primitive #primitiveImageFormatVersion'.  	^''! !!SystemDictionary methodsFor: 'image format' stamp: 'jmv 8/31/2011 08:18'!imageFormatVersionFromFile	"Answer an integer identifying the type of image on file. The image version number may	identify the format of the image (e.g. 32 or 64-bit word size) or specific requirements	of the image (e.g. block closure support required)"	"	Smalltalk imageFormatVersionFromFile	"	| format |	format := self imageFormatVersionFromFileAsIs.	^format <= 16r00FFFFFF		ifTrue: [  "same endianness as VM"			format ]		ifFalse: [ "convert endianness"			((format bitAnd: 16rFF000000) >> 24)			+ ((format bitAnd: 16r00FF0000) >> 8)			+ ((format bitAnd: 16r0000FF00) << 8)			+ ((format bitAnd: 16r000000FF) << 16)]! !!SystemDictionary methodsFor: 'image format' stamp: 'jmv 8/31/2011 08:17'!imageFormatVersionFromFileAsIs	"Answer an integer identifying the type of image on file. The image version number may	identify the format of the image (e.g. 32 or 64-bit word size) or specific requirements	of the image (e.g. block closure support required). If the image file has a different	endianness than the VM, the format version will appear byte-swapped."	"	Smalltalk imageFormatVersionFromFileAsIs	"	| answer file |	file _ FileStream readOnlyFileNamed: Smalltalk imageName.	[	answer _ (file		 binary;		 next: 4)		unsignedLongAt: 1		bigEndian: Smalltalk isBigEndian ] ensure: [ file close ].	^ answer! !!SystemDictionary reorganize!('accessing' organization)('class names' classNamed: fillCaches flushClassNameCache forgetClass:logged: hasClassNamed: removeClassNamed: renameAndUpdateReferences:as: renameClass:as: renameClassNamed:as:)('dictionary access' associationAtOrAbove:ifAbsent: associationOrUndeclaredAt: at:put: atOrAbove:ifAbsent: environmentForCategory: includesKeyOrAbove: scopeFor:from:envtAndPathIfFound:)('housekeeping' browseEqEqSentToSmallIntegerConstants browseObsoleteMethodReferences browseUndeclaredReferences cleanCompactObsoleteClasses cleanOutUndeclared condenseChanges condenseSources macroBenchmark1 macroBenchmark3 makeInternalRelease obsoleteBehaviors obsoleteClasses obsoleteMethodReferences recompileAllFrom: removeAllLineFeeds removeEmptyMessageCategories removeTextCode testDecompiler testFormatter testFormatter2 verifyChanges)('image, changes name' changeImageNameTo: currentSourcesName defaultSourcesName fullNameForChangesNamed: fullNameForImageNamed: imageName imageName: imagePath localChangesName newSourcesName vmPath)('memory space' bytesLeft bytesLeft: bytesLeftString createStackOverflow garbageCollect garbageCollectMost installLowSpaceWatcher lowSpaceThreshold lowSpaceWatcher lowSpaceWatcherProcess okayToProceedEvenIfSpaceIsLow primBytesLeft primLowSpaceSemaphore: primSignalAtBytesLeft: primitiveGarbageCollect signalLowSpace useUpMemory useUpMemoryWithArrays useUpMemoryWithContexts useUpMemoryWithTinyObjects)('code authors' agreedContributors allContributors contributionsOf: missingAuthorsWithMethods newContributors okContributors relicenseEffortStartDate returnedSignatories)('miscellaneous' cogitClass exitToDebugger extraVMMemory extraVMMemory: getSystemAttribute: getVMParameters handleUserInterrupt interpreterClass listBuiltinModule: listBuiltinModules listLoadedModule: listLoadedModules logError:inContext:to: osVersion platformName platformSubtype primVmFileName setMacFileInfoOn: unloadModule: vmFileName vmParameterAt: vmParameterAt:put: vmVersion)('object serialization' objectForDataStream: storeDataOn:)('printing' printElementsOn:)('profiling' clearProfile dumpProfile profile: startProfiling stopProfiling)('retrieving' allBehaviorsDo: allCallsOn: allCallsOn:and: allClasses allClassesDo: allClassesImplementing: allGlobalRefs allGlobalRefsWithout: allImplementedMessages allImplementedMessagesWithout: allImplementorsOf: allImplementorsOf:localTo: allMethodsInCategory: allMethodsWithSourceString:matchCase: allMethodsWithString: allObjectsDo: allObjectsSelect: allPrimitiveMessages allPrimitiveMethodsInCategories: allSelect: allSentMessages allSentMessagesWithout: allUnSentMessages allUnSentMessagesIn: allUnSentMessagesWithout: allUnimplementedCalls allUnusedClassesWithout: isThereAReferenceTo: isThereAnImplementorOf: numberOfImplementorsOf: numberOfSendersOf: pointersTo: pointersTo:except: pointersToItem:of: poolUsers unimplemented)('shrinking' abandonSources abandonTempNames lastRemoval presumedSentMessages reduceCuis removeAllUnSentMessages removeSelector: removedUnusedClassesAndMethods reportClassAndMethodRemovalsFor: unusedClasses unusedClassesAndMethodsWithout:)('snapshot and quit' add:toList:after: addToShutDownList: addToShutDownList:after: addToStartUpList: addToStartUpList:after: lastQuitLogPosition okayToSave processShutDownList: processStartUpList: quitPrimitive readDocumentFile removeFromShutDownList: removeFromStartUpList: saveAs saveAsEmbeddedImage saveAsNewVersion saveChangesInFileNamed: saveImageInFileNamed: saveSession send:toClassesNamedIn:with: setGCParameters setPlatformPreferences shutDown snapshot:andQuit: snapshotEmbeddedPrimitive snapshotPrimitive unbindExternalPrimitives)('sources, change log' aboutThisSystem assureStartupStampLogged calcEndianness closeSourceFiles currentChangeSetString datedVersion endianness event: externalizeSources forceChangesToDisk internalizeChangeLog internalizeSources isBigEndian isLittleEndian lastUpdateString logChange: logChange:preamble: openSourceFiles systemInformationString timeStamp: version)('special objects' clearExternalObjects compactClassesArray externalObjects hasSpecialSelector:ifTrueSetByte: recreateSpecialObjectsArray registerExternalObject: specialNargsAt: specialObjectsArray specialSelectorAt: specialSelectorSize specialSelectors unregisterExternalObject:)('toDeprecate' getFileNameFromUser snapshot:andQuit:embedded:)('ui' confirmRemovalOf:on: inspectGlobals)('browsing' browseAllAccessesTo:from: browseAllCallsOn: browseAllCallsOn:and: browseAllCallsOn:localTo: browseAllCallsOnClass: browseAllImplementorsOf: browseAllImplementorsOf:localTo: browseAllImplementorsOfList: browseAllImplementorsOfList:title: browseAllMethodsInCategory: browseAllObjectReferencesTo:except:ifNone: browseAllSelect: browseAllSelect:name:autoSelect: browseAllStoresInto:from: browseAllUnSentMessages browseAllUnimplementedCalls browseClassCommentsWithString: browseClassesWithNamesContaining:caseSensitive: browseEqSmallConstant browseInstVarDefs: browseInstVarRefs: browseMessageList:name: browseMessageList:name:autoSelect: browseMethodsWithSourceString: browseMethodsWithString: browseMethodsWithString:matchCase: browseMyChanges browseObsoleteReferences browseViewReferencesFromNonViews showMenuOf:withFirstItem:ifChosenDo: showMenuOf:withFirstItem:ifChosenDo:withCaption:)('private' allSymbolsIn:do:)('Compiler swapping' actualCompiledMethodWithNodeClass actualCompilerClass actualDecompilerClass actualEncoderClass actualParserClass actualScannerClass)('Closure measurements' browseMethodsWithClosuresThatAccessOuterTemps browseMethodsWithClosuresThatOnlyReadOuterTemps browseMethodsWithClosuresThatWriteOuterTemps browseMethodsWithClosuresThatWriteOuterTempsButCleanOtherwise browseMethodsWithEmptyClosures browseMethodsWithMoreThanOneClosure browseMethodsWithOnlyCleanClosures closuresInfoStringForClass:selector: eliotsClosureMeasurements eliotsClosureMeasurements2 eliotsClosureMeasurements2On: eliotsClosureMeasurementsOn:over:)('removing' removeKey:ifAbsent:)('system attributes' flagInterpretedMethods: isRunningCog isRunningCogit processHasThreadIdInstVar: processPreemptionYields processPreemptionYields:)('query' unusedBlocks)('testing' hasBindingThatBeginsWith: namesBeginningWith:do: namesBeginningWith:do:in:)('classes and traits' classNames nonClassNames)('image format' imageFormatVersion imageFormatVersionFromFile imageFormatVersionFromFileAsIs)!