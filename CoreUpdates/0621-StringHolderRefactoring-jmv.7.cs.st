'From Cuis 2.7 of 3 September 2010 [latest update: #600] on 26 October 2010 at 10:35:16 am'!!ObjectExplorer methodsFor: 'accessing' stamp: 'jmv 10/25/2010 18:00'!explorerFor: anObject 	| window listMorph |	rootObject := anObject.	window := (SystemWindow labelled: (rootObject printStringLimitedTo: 64)) model: self.	window addMorph: (listMorph := SimpleHierarchicalListMorph 						model: self						listGetter: #getList						indexGetter: #getCurrentSelection						indexSetter: #noteNewSelection:						menuGetter: #genericMenu:						keystrokeAction: #explorerKey:from:)		frame: (0 @ 0 corner: 1 @ 0.8).	window 		addMorph: ((PluggableTextMorph 				model: self				editorClass: self editorClass				textGetter: nil				textSetter: nil				selectionGetter: #contentsSelection				menuGetter: #paneMenu:shifted:editorClass:) askBeforeDiscardingEdits: false)		frame: (0 @ 0.8 corner: 1 @ 1).	listMorph autoDeselect: false.	^window! !!ObjectExplorer class methodsFor: 'as yet unclassified' stamp: 'jmv 10/25/2010 19:54'!about	StringHolder new contents: self comment; openLabel: 'about ',self asString! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 10/25/2010 21:28'!findAChangeSorter: evt	"Locate a change sorter, open it, and bring it to the front.  Create one if necessary"	self		findAWindowSatisfying: [ :aWindow |			(aWindow model isMemberOf: ChangeSorter) or: [ aWindow model isKindOf: DualChangeSorter ]]		orMakeOneUsing: [ DualChangeSorter new morphicWindow openInWorld ].! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 10/25/2010 21:28'!findAFileList: evt	"Locate a file list, open it, and bring it to the front.	Create one if necessary, respecting the Preference."	self		findAWindowSatisfying: [ :aWindow |			aWindow model isKindOf: FileList ]		orMakeOneUsing: [			Preferences useFileList2				ifTrue: [ FileList2 prototypicalToolWindow openInWorld ]				ifFalse: [ FileList prototypicalToolWindow openInWorld ]].! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 10/25/2010 21:29'!findAMessageNamesWindow: evt	"Locate a MessageNames tool, open it, and bring it to the front.  Create one if necessary"	self		findAWindowSatisfying: [ :aWindow |			aWindow model isKindOf: MessageNames ]		orMakeOneUsing: [ (MessageNames new inMorphicWindowLabeled: 'Message Names') openInWorld ].! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 10/25/2010 21:29'!findAWindowSatisfying: qualifyingBlock orMakeOneUsing: makeBlock	"Locate a window satisfying a block, open it, and bring it to the front.  Create one if necessary, by using the makeBlock"	| aWindow |	submorphs do: [ :aMorph |		(((aWindow _ aMorph) is: #SystemWindow) and: [ qualifyingBlock value: aWindow ]) ifTrue: [			aWindow isCollapsed ifTrue: [ aWindow expand ].			aWindow activateAndForceLabelToShow.			^ self ]].	"None found, so create one"	makeBlock value.! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 10/25/2010 21:29'!openRecentSubmissionsBrowser: evt	"Locate a recent-submissions browser, open it, and bring it to the front.  Create one if necessary.  Only works in morphic"	self		findAWindowSatisfying: [ :aWindow |			aWindow model isKindOf: RecentMessageSet ]		orMakeOneUsing: [ Utilities recentSubmissionsWindow openInWorld ].! !!Preferences class methodsFor: 'themes' stamp: 'jmv 10/25/2010 18:30'!brightSqueak	"The classic bright Squeak look.  Windows have saturated colors and relatively low contrast; scroll-bars are of the flop-out variety and are on the left.  Many power-user features are enabled."	self setPreferencesFrom:	#(		(annotationPanes true)		(automaticFlapLayout true)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(debugHaloHandle true)		(debugPrintSpaceLog false)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(hiddenScrollBars false)		(inboardScrollbars false)		(logDebuggerStackToFile true)		(menuColorFromWorld false)		(menuKeyboardControl true)		(optionalButtons true)		(personalizedWorldMenu true)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(scrollBarsWithoutMenuButton false)		(selectiveHalos false)		(simpleMenus false)		(smartUpdating true)		(systemWindowEmbedOK false)		(thoroughSenders true)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))! !!Preferences class methodsFor: 'themes' stamp: 'jmv 10/25/2010 18:33'!defaultValueTableForCurrentRelease	"Answer a table defining default values for all the preferences in the release.  Returns a list of (pref-symbol, boolean-symbol) pairs"	^  #(		(alternativeBrowseIt false)		(annotationPanes false)		(automaticFlapLayout true)		(automaticPlatformSettings true)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(canRecordWhilePlaying false)		(caseSensitiveFinds false)		(changeSetVersionNumbers true)		(checkForSlips true)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(conversionMethodsAtFileOut false)		(cpuWatcherEnabled false)		(debugHaloHandle true)		(debugPrintSpaceLog false)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose false)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(hiddenScrollBars false)		(higherPerformance false)		(honorDesktopCmdKeys true)		(inboardScrollbars true)		(logDebuggerStackToFile true)		(menuColorFromWorld false)		(menuKeyboardControl false)  		(modalColorPickers true)		(optionalButtons true)		(personalizedWorldMenu true)		(projectsSentToDisk false)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(scrollBarsWithoutMenuButton false)		(selectiveHalos false)		(showBoundsInHalo false)		(simpleMenus false)		(smartUpdating true)		(soundQuickStart false)		(soundStopWhenDone false)		(soundsEnabled true)		(systemWindowEmbedOK false)		(thoroughSenders true)		(twentyFourHourFileStamps true)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))"Preferences defaultValueTableForCurrentRelease do:	[:pair | (Preferences preferenceAt: pair first ifAbsent: [nil]) ifNotNilDo:			[:pref | pref defaultValue: (pair last == #true)]].Preferences chooseInitialSettings."! !!Preferences class methodsFor: 'themes' stamp: 'jmv 10/25/2010 18:33'!paloAlto	"Similar to the brightSqueak theme, but with a number of idiosyncratic personal settings.   Note that caseSensitiveFinds is true"	self setPreferencesFrom:	#(		(accessOnlineModuleRepositories noOpinion)		(alternativeBrowseIt noOpinion)		(annotationPanes true)		(automaticFlapLayout true)		(automaticPlatformSettings noOpinion)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(canRecordWhilePlaying noOpinion)		(caseSensitiveFinds true)		(changeSetVersionNumbers true)		(checkForSlips true)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(conservativeModuleDeActivation noOpinion)		(conversionMethodsAtFileOut true)		(cpuWatcherEnabled noOpinion)		(debugHaloHandle true)		(debugPrintSpaceLog true)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose true)		(duplicateControlAndAltKeys false)		(extraDebuggerButtons true)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(hiddenScrollBars false)		(higherPerformance noOpinion)		(honorDesktopCmdKeys true)		(inboardScrollbars false)		(logDebuggerStackToFile true)		(menuColorFromWorld false)		(menuKeyboardControl true)  		(modalColorPickers true)		(modularClassDefinitions noOpinion)		(optionalButtons true)		(personalizedWorldMenu true)		(projectsSentToDisk noOpinion)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(scrollBarsWithoutMenuButton false)		(selectiveHalos false)		(showBoundsInHalo false)		(simpleMenus false)		(smartUpdating true)		(soundQuickStart noOpinion)		(soundsEnabled true)		(soundStopWhenDone noOpinion)		(strongModules noOpinion)		(swapControlAndAltKeys noOpinion)		(swapMouseButtons  noOpinion)		(systemWindowEmbedOK false)		(thoroughSenders true)		(twentyFourHourFileStamps false)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'jmv 10/25/2010 20:58'!yellowButtonActivity	"Called when the shifted-menu's 'more' item is chosen"	^self yellowButtonActivity: false! !!StringHolder methodsFor: 'initialize-release' stamp: 'jmv 10/25/2010 19:57'!initialize	"Initialize the state of the receiver with its default contents."	contents _ ''! !!StringHolder methodsFor: 'initialize-release' stamp: 'jmv 10/25/2010 21:35'!openAsMorphLabel: labelString 	"Workspace new openAsMorphLabel: 'Workspace'"	self openInMorphicWindowLabeled: labelString wrap: true! !!StringHolder methodsFor: 'initialize-release' stamp: 'jmv 10/25/2010 21:34'!openInMorphicWindowLabeled: labelString wrap: aBoolean	| window |	window _ (SystemWindow labelled: labelString) model: self.	window addMorph: ((PluggableTextMorph 		model: self 		editorClass: self editorClass		textGetter: #contents 		textSetter: #acceptContents:		selectionGetter: nil 		menuGetter: #paneMenu:shifted:editorClass:)			wrapFlag: aBoolean)				frame: (0@0 corner: 1@1).	^ window openInWorld! !!StringHolder methodsFor: 'initialize-release' stamp: 'jmv 10/25/2010 21:35'!openLabel: aString wrap: aBoolean	"Create a standard system view of the model, me, a StringHolder and open it."	self openInMorphicWindowLabeled: aString wrap: aBoolean! !!CodeHolder methodsFor: 'controls' stamp: 'jmv 10/25/2010 18:32'!optionalButtonRow	"Answer a row of control buttons"	| row buttons widths |	buttons _ OrderedCollection new.	widths _ OrderedCollection new.	self optionalButtonTuples do: [ :tuple | | button |		widths add: tuple first.		button _ PluggableButtonMorph 					model: self					stateGetter: nil					action: tuple third.		button label: tuple second asString.		tuple size > 3 ifTrue: [button setBalloonText: tuple fourth].		tuple size > 4 ifTrue: [button triggerOnMouseDown: tuple fifth].		buttons add: button ].	row _ AlignmentMorph proportional.	row addInRow: buttons widthProportionalTo: widths.	^row! !!ChangeList methodsFor: 'menu actions' stamp: 'jmv 10/25/2010 19:53'!compareToCurrentVersion	"If the current selection corresponds to a method in the system, then spawn a window showing the diffs as text"	| change class s1 s2 differDesc diffWords |	listIndex = 0		ifTrue: [^ self].	change _ changeList at: listIndex.	((class _ change methodClass) notNil			and: [class includesSelector: change methodSelector])		ifTrue: [			s1 _ (class sourceCodeAt: change methodSelector) asString.			s2 _ change string.			s1 = s2				ifTrue: [^ self inform: 'Exact Match'].			diffWords _ self shouldDiffWords.			differDesc _ diffWords				ifTrue: [ 'Words']				ifFalse: [ 'Lines'].			(StringHolder new				contents: (					(DifferenceFinder						displayPatchFrom: s1 to: s2						tryWords: diffWords						prettyPrintedIn: (self showingAnyKindOfPrettyDiffs ifTrue: [class]))							initialFont: Preferences standardCodeFont))				openLabel: 'Comparison to Current Version: ', differDesc, 					(self showingAnyKindOfPrettyDiffs ifTrue: [', using prettyPrint'] ifFalse: [''])]		ifFalse: [self flash]! !!Debugger methodsFor: 'initialize' stamp: 'jmv 10/25/2010 18:33'!customButtonRow	"Answer a button pane affording the user one-touch access to certain functions; the pane is given the formal name 'customButtonPane' by which it can be retrieved by code wishing to send messages to widgets residing on the pane"	| aButton buttons row |	buttons _ OrderedCollection new.	self customButtonSpecs do: [ :tuple | 		aButton := PluggableButtonMorph 					model: self					stateGetter: nil					action: tuple second.		(#(#proceed #restart #send #doStep #stepIntoBlock #fullStack #where) 			includes: tuple second) ifTrue: [aButton askBeforeChanging: true].		aButton label: tuple first asString.		tuple size > 2 ifTrue: [aButton setBalloonText: tuple third].		buttons add: aButton].			row _ AlignmentMorph proportional.	row addInProportionalRow: buttons.	^row! !!FileList methodsFor: 'initialization' stamp: 'jmv 10/25/2010 19:57'!initialize	contents _ self defaultContents! !!Inspector class methodsFor: 'instance creation' stamp: 'jmv 10/25/2010 17:59'!openAsMorphOn: anObject withLabel: aLabel	" Inspector openAsMorphOn: SystemOrganization "	| window inspector |	inspector _ self inspect: anObject.	window _ (SystemWindow labelled: aLabel) model: inspector.	window addMorph: (		PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: inspector 			listGetter: #fieldList			indexGetter: #selectionIndex			indexSetter: #toggleIndex:			menuGetter: #fieldListMenu:			keystrokeAction: #inspectorKey:from:)		frame: (0@0 corner: self horizontalDividerProportion @ self verticalDividerProportion).	window addMorph: (PluggableTextMorph			model: inspector 			editorClass: inspector editorClass 			textGetter: #contents 			textSetter: #accept:			selectionGetter: #contentsSelection 			menuGetter: #paneMenu:shifted:editorClass:)		frame: (self horizontalDividerProportion @0 corner: 1@self verticalDividerProportion).	window addMorph: ((PluggableTextMorph 			model: inspector 			editorClass: inspector editorClass			textGetter: nil 			textSetter: nil			selectionGetter: #contentsSelection 			menuGetter: #paneMenu:shifted:editorClass:)					askBeforeDiscardingEdits: false)		frame: (0@self verticalDividerProportion corner: 1@1).	window setUpdatablePanesFrom: #(fieldList).	^ window! !!TextEditor methodsFor: 'menu messages' stamp: 'jmv 10/25/2010 19:54'!compareToClipboard	"Check to see if whether the receiver's text is the same as the text currently on the clipboard, and inform the user."	| s1 s2 |	s1 _ self clipboardText string.	s2 _ paragraph string.	s1 = s2 ifTrue: [^ self inform: 'Exact match'].	(StringHolder new contents:		(DifferenceFinder displayPatchFrom: s1 to: s2 tryWords: true))			openLabel: 'Comparison to Clipboard Text'! !!TextMorph methodsFor: 'menu' stamp: 'jmv 10/25/2010 20:59'!addCustomMenuItems: aCustomMenu hand: aHandMorph 	"Add text-related menu items to the menu"	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu 		addUpdating: #autoFitString		target: self		action: #autoFitOnOff.	aCustomMenu 		addUpdating: #wrapString		target: self		action: #wrapOnOff! !!TheWorldMenu methodsFor: 'commands' stamp: 'jmv 10/25/2010 21:35'!openTextEditor	StringHolder new openInMorphicWindowLabeled: 'Text Editor' wrap: true! !!TheWorldMenu methodsFor: 'commands' stamp: 'jmv 10/25/2010 21:31'!openTranscript	Transcript openAsMorphLabel: 'Transcript'! !!TheWorldMenu methodsFor: 'commands' stamp: 'jmv 10/25/2010 21:35'!openWorkspace	Workspace new openInMorphicWindowLabeled: 'Workspace' wrap: true! !!TranscriptStream methodsFor: 'initialization' stamp: 'jmv 10/25/2010 21:30'!openAsMorphLabel: labelString 	"Build a morph viewing this transcriptStream"	| window |	window _ (SystemWindow labelled: labelString) model: self.	window addMorph: (PluggableTextMorph 			model: self 			editorClass: self editorClass			textGetter: nil 			textSetter: nil			selectionGetter: nil 			menuGetter: #paneMenu:shifted:editorClass:)		frame: (0@0 corner: 1@1).	^ window openInWorld! !!TranscriptStream methodsFor: 'initialization' stamp: 'jmv 10/25/2010 21:32'!openLabel: aString 	"Open a window on this transcriptStream"	^ self openAsMorphLabel: aString! !!VersionsBrowser methodsFor: 'menu' stamp: 'jmv 10/25/2010 19:54'!compareToOtherVersion	"Prompt the user for a reference version, then spawn a window 	showing the diffs between the older and the newer of the current 	version and the reference version as text."	| change1 change2 s1 s2 differDesc diffWords |	change1 := changeList at: listIndex ifAbsent: [ ^self ].	change2 := ((SelectionMenu				labels: (list copyWithoutIndex: listIndex)				selections: (changeList copyWithoutIndex: listIndex)) startUp) ifNil: [ ^self ].		"compare earlier -> later"	"change1 timeStamp < change2 timeStamp		ifFalse: [ | temp | temp _ change1. change1 _ change2. change2 _ temp ]."	s1 := change1 string.	s2 := change2 string.	s1 = s2		ifTrue: [^ self inform: 'Exact Match' translated].	diffWords _ self shouldDiffWords.	differDesc _ diffWords		ifTrue: [ 'Words']		ifFalse: [ 'Lines'].	(StringHolder new		contents: (DifferenceFinder			displayPatchFrom: s1 to: s2			tryWords: diffWords			prettyPrintedIn: (self showingAnyKindOfPrettyDiffs ifTrue: [classOfMethod])))		openLabel: 			(('Comparison from {1} to {2}: ', differDesc, 				(self showingAnyKindOfPrettyDiffs ifTrue: [', using prettyPrint'] ifFalse: [''])) 					format: { change1 stamp. change2 stamp })! !!ClassCommentVersionsBrowser methodsFor: 'menu' stamp: 'jmv 10/25/2010 19:54'!compareToCurrentVersion	"If the current selection corresponds to a method in the system, then spawn a window showing the diffs as text"	| change s1 s2 differDesc diffWords |	listIndex = 0		ifTrue: [^ self].	change _ changeList at: listIndex.	s1 _ classOfMethod organization classComment.	s2 _ change string.	s1 = s2		ifTrue: [^ self inform: 'Exact Match'].	diffWords _ self shouldDiffWords.	differDesc _ diffWords		ifTrue: [ 'Words']		ifFalse: [ 'Lines'].	(StringHolder new		contents: (DifferenceFinder			displayPatchFrom: s1 to: s2			tryWords: diffWords))				openLabel: 'Comparison to Current Version: ', differDesc! !!Workspace methodsFor: '*Shout-Styling' stamp: 'jmv 10/25/2010 19:52'!toggleStyling	| codeTextMorph |	shouldStyle _ self shouldStyle not.	" Ugly hack, to restyle our contents. "	codeTextMorph _ self dependents		detect: [:dep | (dep isKindOf: PluggableTextMorph)				and: [dep getTextSelector == #contents]].	codeTextMorph setText:		codeTextMorph textMorph text asString asText! !Workspace class removeSelector: #prototypicalToolWindow!Utilities class removeSelector: #steplistToolsWorkspace!TextMorph removeSelector: #shiftedYellowButtonActivity!TextMorph removeSelector: #yellowButtonActivity!TextEditor removeSelector: #pluggableYellowButtonActivity:!TextEditor removeSelector: #shiftedTextPaneMenuRequest!TextEditor removeSelector: #yellowButtonActivity!TestRunner class removeSelector: #prototypicalToolWindow!PackagePaneBrowser class removeSelector: #prototypicalToolWindow!MessageNames class removeSelector: #prototypicalToolWindow!Inspector removeSelector: #trash!Inspector removeSelector: #trash:!ChangeSorter class removeSelector: #prototypicalToolWindow!Browser class removeSelector: #prototypicalToolWindow!CodeHolder removeSelector: #abbreviatedWordingFor:!CodeHolder removeSelector: #menuButton!CodeHolder removeSelector: #offerMenu!StringHolder removeSelector: #codeTextMorph!StringHolder removeSelector: #defaultContents!StringHolder removeSelector: #embeddedInMorphicWindowLabeled:!StringHolder removeSelector: #embeddedInMorphicWindowLabeled:wrap:!StringHolder removeSelector: #offerDurableMenuFrom:shifted:!StringHolder removeSelector: #openAsMorphEditorClass:label:inWorld:!StringHolder removeSelector: #openAsMorphLabel:inWorld:!StringHolder removeSelector: #textContents:!CustomMenu removeSelector: #add:subMenu:target:selector:argumentList:!CustomMenu removeSelector: #invokeOn:!CustomMenu removeSelector: #invokeOn:orSendTo:!SelectionMenu removeSelector: #invokeOn:!SelectionMenu removeSelector: #invokeOn:orSendTo:!ScrollPane removeSelector: #shiftedYellowButtonActivity!ProcessBrowser class removeSelector: #prototypicalToolWindow!Preferences class removeSelector: #abbreviatedBrowserButtons!Preferences class removeSelector: #menuButtonInToolPane!PopUpMenu removeSelector: #nItems!ObjectExplorer removeSelector: #trash!ObjectExplorer removeSelector: #trash:!Morph removeSelector: #containingWindow!DualChangeSorter class removeSelector: #prototypicalToolWindow!Model removeSelector: #trash!Model removeSelector: #trash:!