'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 30 August 2011 at 8:02:47 am'!!ClassBuilder methodsFor: 'validation' stamp: 'jmv 8/28/2011 22:41'!validateClass: srcClass forMoving: iv downTo: dstClass	"Make sure that we don't have any accesses to the instVar left"	srcClass withAllSubclassesDo:[:cls|		(cls == dstClass or:[cls inheritsFrom: dstClass]) ifFalse:[			(cls whichSelectorsAccess: iv) isEmpty ifFalse:[				self notify: (iv printString asText allBold), ' is still used in ', cls name asText allBold,'.Proceed to move it to Undeclared'.			].		].	].	^true! !!Compiler class methodsFor: 'utilities' stamp: 'jmv 8/28/2011 22:41'!recompileAll	"Recompile all classes."	Smalltalk allClasses do: [ :cls | cls compileAll] displayingProgress: 'Recompiling all classes'. ! !!Compiler class methodsFor: 'utilities' stamp: 'jmv 8/28/2011 22:41'!recompileAllFrom: firstName 	"Recompile all classes, starting with given name."	Smalltalk allClassesDo: 		[:class | class name >= firstName			ifTrue: 				[Transcript show: class name; cr.				class compileAll]]	"Compiler recompileAllFrom: 'AAABodyShop'."! !!PositionableStream methodsFor: 'fileIn/Out' stamp: 'jmv 8/28/2011 22:41'!fileInAnnouncing: announcement 	"This is special for reading expressions from text that has been formatted 	with exclamation delimitors. The expressions are read and passed to the 	Compiler. Answer the result of compilation.  Put up a progress report with     the given announcement as the title."	| val chunk |	announcement 		displayProgressAt: Sensor mousePoint		from: 0		to: self size		during: 			[:bar | 			[self atEnd] whileFalse: 					[bar value: self position.					self skipSeparators.										[val := (self peekFor: $!!) 								ifTrue: [									chunk := self nextChunk.									(chunk beginsWith: 'classDefinition: ')										ifFalse: [(Smalltalk actualCompilerClass evaluate: chunk logged: false) scanFrom: self]]								ifFalse: [									chunk := self nextChunk.									self checkForPreamble: chunk.									Smalltalk actualCompilerClass evaluate: chunk logged: true]] 							on: InMidstOfFileinNotification							do: [:ex | ex resume: true].					self skipStyleChunk].			self close].	"Note:  The main purpose of this banner is to flush the changes file."	Smalltalk logChange: '----End fileIn of ' , self name , '----'.	^val! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'jmv 8/28/2011 22:42'!recompileAllFrom: firstName 	"Recompile all classes, starting with given name."	self allClassesDo: 		[:class | class name >= firstName			ifTrue: 				[Transcript show: class name; cr.				class compileAll]]	"Smalltalk recompileAllFrom: 'AAABodyShop'."! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'jmv 8/28/2011 22:42'!removeAllLineFeeds    "Smalltalk removeAllLineFeeds"	"Scan all methods for source code with lineFeeds.	Replaces all occurrences of <CR><LF> by <CR>, noted by beep.	Halts with a message if any other LFs are found."	 | oldCodeString n crlf cr newCodeString oldStamp oldCategory m lf |	crlf _ String crlf.	cr _ String cr.	lf _ String lf.'Scanning sources for LineFeeds.This will take a few moments...'displayProgressAt: Sensor mousePointfrom: 0 to: CompiledMethod instanceCountduring: [:bar | n _ 0. m _ 0.	Smalltalk allBehaviorsDo:		[:cls | 		cls selectors do:			[:selector | (n _ n+1) \\ 100 = 0 ifTrue: [bar value: n].			oldCodeString _ (cls sourceCodeAt: selector) asString.			(oldCodeString indexOf: Character lf startingAt: 1) > 0 ifTrue: [				newCodeString _ oldCodeString copyReplaceAll: crlf with: cr.				newCodeString _ oldCodeString copyReplaceAll: lf with: cr.				oldStamp _ Utilities timeStampForMethod: (cls compiledMethodAt: selector).				oldCategory _ cls whichCategoryIncludesSelector: selector.				cls compile: newCodeString classified: oldCategory withStamp: oldStamp notifying: nil.				m _ m + 1]]].].	Transcript cr; show: m printString , ' methods stripped of LFs.'.! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'jmv 8/28/2011 22:42'!removeTextCode    "Smalltalk removeTextCode"	"Scan all methods for source code that is Text (i.e. with attributes)	Replace it with simpleStrings"	 | oldCodeString n newCodeString oldStamp oldCategory m classComment c o stamp |	'Scanning sources for Text.This will take a few moments...'		displayProgressAt: Sensor mousePoint		from: 0 		to: CompiledMethod instanceCount		during: [:bar | 			n _ 0.			m _ 0.			c _ 0.			Smalltalk allBehaviorsDo: [ :cls | 				cls selectors do: [ :selector  | 					(n _ n+1) \\ 100 = 0 ifTrue: [bar value: n].					oldCodeString _ cls sourceCodeAt: selector.					oldCodeString class = String ifFalse: [						newCodeString _ oldCodeString asString.						oldStamp _ Utilities timeStampForMethod: (cls compiledMethodAt: selector).						oldCategory _ cls whichCategoryIncludesSelector: selector.						cls compile: newCodeString classified: oldCategory withStamp: oldStamp notifying: nil.						m _ m + 1]].				cls isMeta ifFalse: [					o _ cls organization.					classComment _ o classComment.					stamp _ o commentStamp.					classComment class == String ifFalse: [						classComment hasAnyAttribute ifTrue: [							self halt "review" ].						cls classComment: classComment asString stamp: stamp.						c _ c + 1 ]].			].		].		Transcript cr; show: m printString , ' text methods converted to strings.'.		Transcript cr; show: c printString , ' text class comments converted to strings.'.! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'jmv 8/28/2011 22:42'!testDecompiler	"Smalltalk testDecompiler"	"Decompiles the source for every method in the system, and then compiles that source and verifies that it generates (and decompiles to) identical code.  This currently fails in a number of places because some different patterns (esp involving conditionals where the first branch returns) decompile the same."	| methodNode oldMethod newMethod badOnes oldCodeString n |	badOnes _ OrderedCollection new.	'Decompiling all classes...'		displayProgressAt: Sensor mousePoint		from: 0		to: CompiledMethod instanceCount		during: [ :bar |			n _ 0.			Smalltalk allBehaviorsDo: [ :cls |				"Transcript cr; show: cls name."				cls selectors do: [ :selector |					(n _ n + 1) \\ 100 = 0 ifTrue: [ bar value: n ].					oldMethod _ cls compiledMethodAt: selector.					oldCodeString _ (cls decompilerClass new						decompile: selector						in: cls						method: oldMethod) decompileString.					methodNode _ cls compilerClass new						compile: oldCodeString						in: cls						notifying: nil						ifFail: nil.					newMethod _ methodNode generate: #(0 0 0 0 ).					oldCodeString =						(cls decompilerClass new							decompile: selector							in: cls							method: newMethod) decompileString ifFalse: [						Transcript							 cr;							 show: '***' , cls name , ' ' , selector.						badOnes add: cls name , ' ' , selector ]]]].	Smalltalk		browseMessageList: badOnes asArray sort		name: 'Decompiler Discrepancies'.! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'jmv 8/28/2011 22:42'!testFormatter	"Smalltalk testFormatter"	"Reformats the source for every method in the system, and then compiles that source and verifies that it generates identical code.	The formatting used will be classic monochrome."	| newCodeString methodNode oldMethod newMethod badOnes n |	badOnes _ OrderedCollection new.	'Formatting all classes...'		displayProgressAt: Sensor mousePoint		from: 0		to: CompiledMethod instanceCount		during: [ :bar |			n _ 0.			Smalltalk allBehaviorsDo: [ :cls |				"Transcript cr; show: cls name."				cls selectors do: [ :selector |					(n _ n + 1) \\ 100 = 0 ifTrue: [ bar value: n ].					newCodeString _ cls compilerClass new						format: (cls sourceCodeAt: selector)						in: cls						notifying: nil.					methodNode _ cls compilerClass new						compile: newCodeString						in: cls						notifying: nil						ifFail: nil.					newMethod _ methodNode generate: #(0 0 0 0 ).					oldMethod _ cls compiledMethodAt: selector.					oldMethod = newMethod ifFalse: [						Transcript							 cr;							 show: '***' , cls name , ' ' , selector.						badOnes add: cls name , ' ' , selector ]]]].	Smalltalk		browseMessageList: badOnes asArray sort		name: 'Formatter Discrepancies'.! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'jmv 8/28/2011 22:42'!testFormatter2	"Smalltalk testFormatter2"	"Reformats the source for every method in the system, and then verifies that the order of source tokens is unchanged.	The formatting used will be classic monochrome"	| newCodeString badOnes n oldCodeString oldTokens newTokens |	badOnes _ OrderedCollection new.	'Formatting all classes...'		displayProgressAt: Sensor mousePoint		from: 0		to: CompiledMethod instanceCount		during: [ :bar |			n _ 0.			Smalltalk allBehaviorsDo: [ :cls |				"Transcript cr; show: cls name."				cls selectors do: [ :selector |					(n _ n + 1) \\ 100 = 0 ifTrue: [ bar value: n ].					oldCodeString _ (cls sourceCodeAt: selector) asString.					newCodeString _ cls compilerClass new						format: oldCodeString						in: cls						notifying: nil.					oldTokens _ oldCodeString findTokens: Character separators.					newTokens _ newCodeString findTokens: Character separators.					oldTokens = newTokens ifFalse: [						Transcript							 cr;							 show: '***' , cls name , ' ' , selector.						badOnes add: cls name , ' ' , selector ]]]].	Smalltalk		browseMessageList: badOnes asArray sort		name: 'Formatter Discrepancies'.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'jmv 8/28/2011 22:41'!abandonSources    "Smalltalk abandonSources"	"Replaces every method by a copy with the 4-byte source pointer 	replaced by a string of all arg and temp names, followed by its length.	These names can then be used to inform the decompiler.  See stats below"	"wod 11/3/1998: zap the organization before rather than after condensing changes."	 | oldCodeString argsAndTemps oldMethods newMethods m bTotal bCount |	(self confirm:'This method will preserve most temp names(up to about 400 characters) while allowingthe sources file to be discarded.-- CAUTION --If you have backed up your system andare prepared to face the consequences ofabandoning source code files, choose Yes.If you have any doubts, you may choose Noto back out with no harm done.')		==  true ifFalse: [^ self inform: 'Okay - no harm done'].	oldMethods _ OrderedCollection new: CompiledMethod instanceCount.	newMethods _ OrderedCollection new: CompiledMethod instanceCount.	bTotal _ 0.  bCount _ 0.	Smalltalk allBehaviorsDo: [: b | bTotal _ bTotal + 1].'Saving temp names for better decompilation...'	displayProgressAt: Sensor mousePoint	from: 0 to: bTotal	during: [:bar |	Smalltalk allBehaviorsDo:    "for test:  (Array with: Arc with: Arc class) do: "			[:cl |  bar value: (bCount _ bCount + 1).			cl selectors do: [:selector |				m _ cl compiledMethodAt: selector.				m fileIndex > 0 ifTrue:				[oldCodeString _ cl sourceCodeAt: selector.				argsAndTemps _ (cl compilerClass new					parse: oldCodeString in: cl notifying: nil)					tempNames.				oldMethods addLast: m.				newMethods addLast: (m copyWithTempNames: argsAndTemps)]]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	Smalltalk allBehaviorsDo: [:b | b zapOrganization].	Smalltalk condenseChanges.	Preferences disable: #warnIfNoSourcesFile."In a system with 7780 methods, we got 83k of temp names, or around 100k with spaces between.  The order of letter frequency was eatrnoislcmdgpSub, with about 60k falling in the first 11.  This suggests that we could encode in 4 bits, with 0-11 beng most common chars, and 12-15 contributing 2 bits to the next nibble for 6 bits, enough to cover all alphaNumeric with upper and lower case.  If we get 3/4 in 4 bits and 1/4 in 8, then we get 5 bits per char, or about 38% savings (=38k in this case).Summary: about 13 bytes of temp names per method, or 8 with simple compression, plus 1 for the size.  This would be 5 bytes more than the current 4-byte trailer."! !!SystemDictionary methodsFor: 'shrinking' stamp: 'jmv 8/28/2011 22:42'!abandonTempNames	"Replaces every method by a copy with no source pointer or encoded temp names."	"Smalltalk abandonTempNames"	 | continue oldMethods newMethods n m |	continue _ (self confirm:  '-- CAUTION --If you have backed up your system andare prepared to face the consequences ofabandoning all source code, hit Yes.If you have any doubts, hit No,to back out with no harm done.').	continue ifFalse: [^ self inform: 'Okay - no harm done'].	Smalltalk garbageCollect.	oldMethods _ OrderedCollection new.	newMethods _ OrderedCollection new.	n _ 0.	'Removing temp names to save space...'		displayProgressAt: Sensor mousePoint		from: 0 to: CompiledMethod instanceCount		during: [:bar |			Smalltalk allBehaviorsDo: [:cl |				cl selectors do: [:sel |					bar value: (n _ n + 1).					m _ cl compiledMethodAt: sel.					oldMethods addLast: m.					newMethods addLast: (m copyWithTrailerBytes: #(0))]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	Smalltalk closeSourceFiles.	Preferences disable: #warnIfNoChangesFile.	Preferences disable: #warnIfNoSourcesFile.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'jmv 8/28/2011 22:42'!presumedSentMessages	| sent |	"	In addition to those here, if it is desired to preserve some methods from deletion, see #nominallyUnsent:	Smalltalk presumedSentMessages	"	"The following should be preserved for doIts, etc"	sent _ IdentitySet new.	#( rehashWithoutBecome compactSymbolTable		browseAllSelect:  lastRemoval		vScrollBarValue: hScrollBarValue: 		to: removeClassNamed:		dragon: hilberts: mandala: web test3 factorial tinyBenchmarks benchFib		newDepth: restoreAfter: zapAllMethods obsoleteClasses		removeAllUnSentMessages abandonSources removeUnreferencedKeys		zapOrganization condenseChanges browseObsoleteReferences		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:		startTimerEventLoop unusedClasses		unimplemented		reduceCuis		variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		variableWordSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		weakSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		printSpaceAnalysis:on:) do: [ :sel |			sent add: sel].	"The following may be sent by perform: in dispatchOnChar..."	(TextEditor cmdActions) asSet do: [ :sel | sent add: sel].	(SmalltalkEditor cmdActions) asSet do: [ :sel | sent add: sel].	#(beReadOnlyBinding beReadWriteBinding changeSetCategoryClass belongsInAll:) do: [ :sel |		sent add: sel].	^ sent! !!Utilities class methodsFor: 'closure support' stamp: 'jmv 8/28/2011 22:42'!compileUsingClosures	"Utilities compileUsingClosures"	"Recompile the system and do some minimal clean-ups"	| classes compilationErrors |	Preferences setPreference: #allowBlockArgumentAssignment toValue: false.	compilationErrors := Set new.	classes := Smalltalk allClasses reject: [:c| c name == #GeniePlugin].	'Recompiling The System' displayProgressAt: Sensor mousePoint		from: 0 to: classes size during:[:bar |			classes withIndexDo:[:c :i|				bar value: i.				{ c. c class } do:[:b|					"Transcript cr; print: b; endEntry."					b selectors "asArray sort" do: [ :s | 						"Transcript cr; show: b asString, '>>', s."						[b recompile: s from: b] on: Error do:[:ex|							Transcript								cr; nextPutAll: 'COMPILATION ERROR: ';								print: b; nextPutAll: '>>'; nextPutAll: s.							compilationErrors add: (MethodReference class: b selector: s)]]]]].	compilationErrors notEmpty ifTrue:[		Smalltalk			browseMessageList: compilationErrors asArray sort			name: 'Compilation Errors' ]! !!Utilities class methodsFor: 'closure support' stamp: 'jmv 8/28/2011 22:42'!postRecompileCleanup	"Utilities postRecompileCleanup"	"Cleanup after loading closure bootstrap"	"Before doing this, please start a new UI process (for example, by hitting alt-period and closing the debugger)."	| unboundMethods contexts |	World removeAllKnownFailing.	ProcessorScheduler startUp.	WeakArray restartFinalizationProcess.	MethodChangeRecord allInstancesDo:[:x| x noteNewMethod: nil].	Undeclared removeUnreferencedKeys.	Delay startTimerEventLoop.	EventSensor install.	WorldState allInstancesDo:[:ws| ws convertAlarms; convertStepList].	Workspace allInstancesDo:[:ws| ws initializeBindings].	Smalltalk garbageCollect.	Smalltalk		at: #DebuggerMethodMap		ifPresent: [ :dmm | dmm voidMapCache ].	Smalltalk garbageCollect.	unboundMethods _ CompiledMethod unboundMethods.	unboundMethods notEmpty ifTrue: [		unboundMethods inspectWithLabel: 'Unbound Methods'].	Smalltalk at: #BlockContext ifPresent: [ :bc |		contexts _ bc allInstances.		contexts ifNotEmpty: [			contexts inspect. 			self inform: 'There are left-over BlockContexts'.			^self ]].	unboundMethods isEmpty ifTrue:[		self inform:'Congratulations - The bootstrap is now complete.'.	]! !