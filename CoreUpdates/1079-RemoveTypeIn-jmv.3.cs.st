'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 19 September 2011 at 9:24:16 am'!!classDefinition: #TextEditor category: #'System-Text'!Editor subclass: #TextEditor	instanceVariableNames: 'model paragraph markBlock pointBlock beginTypeInIndex emphasisHere lastParenLocation selectionStartBlocks selectionStopBlocks '	classVariableNames: 'ChangeText FindText UndoInterval UndoMessage UndoParagraph UndoSelection Undone '	poolDictionaries: ''	category: 'System-Text'!!Editor methodsFor: 'editing keys' stamp: 'jmv 9/19/2011 09:11'!paste: aKeyboardEvent 	"Replace the current text selection by the text in the shared buffer."	self paste.	^true! !!Editor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:11'!cursorDown: aKeyboardEvent	"Private - Move cursor from position in current line to same position in	next line. If next line too short, put at end. If shift key down,	select."	self		moveCursor: [ :position | | newPos |			newPos _ self sameColumn: position newLine: [ :line | line + 1 ] forward: true.			"Mac standard keystroke"			aKeyboardEvent rawMacOptionKeyPressed ifTrue: [				newPos _ self endOfParagraph: position+1 ].			"Windows / Linux standard keystroke"			aKeyboardEvent controlKeyPressed ifTrue: [				newPos _ self beginningOfNextParagraph: position ].			"Mac standard keystroke"			aKeyboardEvent commandAltKeyPressed ifTrue: [				newPos _ self endOfText ].			newPos ]		forward: true		event: aKeyboardEvent.	^ true! !!Editor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:11'!cursorLeft: aKeyboardEvent	"Private - Move cursor left one character if nothing selected, otherwise move cursor to beginning of selection. If the shift key is down, start selecting or extending current selection. Don't allow cursor past beginning of text"	self		moveCursor: [ :position | | newPos |			newPos _ position - 1 max: 1.			"Mac standard keystroke"			(aKeyboardEvent rawMacOptionKeyPressed or: [				"Windows / Linux standard keystroke"				aKeyboardEvent controlKeyPressed ])					ifTrue: [						newPos _ self previousWordStart: newPos ].			"Mac standard keystroke"			aKeyboardEvent commandAltKeyPressed ifTrue: [				newPos _ self beginningOfLine: position ].			newPos ]		forward: false		event: aKeyboardEvent.	^ true! !!Editor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:11'!cursorPageDown: aKeyboardEvent 	self 		moveCursor: [ :position |			self				sameColumn: position				newLine: [ :lineNo | lineNo + self pageHeight]				forward: true]		forward: true		event: aKeyboardEvent.	^true! !!Editor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:11'!cursorPageUp: aKeyboardEvent 	self 		moveCursor: [ :position |			self				sameColumn: position				newLine: [ :lineNo | lineNo - self pageHeight]				forward: false]		forward: false		event: aKeyboardEvent.	^true! !!Editor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:11'!cursorRight: aKeyboardEvent 	"Private - Move cursor right one character if nothing selected, otherwise move cursor to end of selection. If the shift key is down, start selecting characters or extending already selected characters. 	Don't allow cursor past end of text"	self		moveCursor: [ :position | | newPos s |			newPos _ position + 1.			"Mac standard keystroke"			aKeyboardEvent rawMacOptionKeyPressed ifTrue: [				newPos _ self nextWordEnd: newPos ].			"Windows / Linux standard keystroke"			aKeyboardEvent controlKeyPressed ifTrue: [				newPos _ self nextWordStart: newPos ].			"Mac standard keystroke"			aKeyboardEvent commandAltKeyPressed ifTrue: [				newPos _ self endOfLine: position ].			newPos ]		forward: true		event: aKeyboardEvent.	^ true! !!Editor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:11'!cursorUp: aKeyboardEvent 	"Private - Move cursor from position in current line to same position in	prior line. If prior line too short, put at end"	self		moveCursor: [ :position | | newPos |			newPos _ self sameColumn: position newLine: [ :line | line - 1] forward: false.			"Mac standard keystroke"			(aKeyboardEvent rawMacOptionKeyPressed or: [				"Windows / Linux standard keystroke"				aKeyboardEvent controlKeyPressed ])					ifTrue: [						newPos _ self beginningOfParagraph: newPos-1 ].			"Mac standard keystroke"			aKeyboardEvent commandAltKeyPressed ifTrue: [				newPos _ self beginningOfText ].			newPos ]		forward: false		event: aKeyboardEvent.	^true! !!Editor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:11'!selectWord: aKeyboardEvent	self selectWord.	^ true! !!Editor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/19/2011 09:11'!enter: aKeyboardEvent	"Enter / return key was pressed"	"Process the various Enter / Return keystrokes"		morph acceptOnCR ifTrue: [		^ true].	aKeyboardEvent controlKeyPressed ifTrue: [		^ self cr: aKeyboardEvent ].	aKeyboardEvent shiftPressed ifTrue: [		^ self lf: aKeyboardEvent ].	aKeyboardEvent commandAltKeyPressed ifTrue: [		^ self crlf: aKeyboardEvent ].	^ self crWithIndent: aKeyboardEvent! !!Editor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/19/2011 09:11'!selectAll: aKeyboardEvent 	"select everything, invoked by cmd-a.  1/17/96 sw"	self selectFrom: 1 to: self string size.	^ true! !!SimpleEditor methodsFor: 'events' stamp: 'jmv 9/19/2011 09:12'!mouseDown: evt index: index	evt shiftPressed		ifFalse: [			self markIndex: index pointIndex: index ]		ifTrue: [			self mouseMove: evt ]! !!SimpleEditor methodsFor: 'initialize-release' stamp: 'jmv 9/19/2011 09:14'!resetState 	"Establish the initial conditions for editing the paragraph: place caret 	before first character, set the emphasis to that of the first character,	and save the paragraph for purposes of canceling."	pointIndex _ 1.	"Like pointBlock in EnhancedTextEditor"	markIndex _ 1.	"Like markBlock in EnhancedTextEditor"! !!SimpleEditor methodsFor: 'initialize-release' stamp: 'jmv 9/19/2011 09:07'!stateArray		^ {	self selectionInterval }! !!SimpleEditor methodsFor: 'initialize-release' stamp: 'jmv 9/19/2011 09:07'!stateArrayPut: stateArray	| sel |	sel _ stateArray at: 1.	self selectFrom: sel first to: sel last! !!SimpleEditor methodsFor: 'new selection' stamp: 'jmv 9/19/2011 09:12'!selectFrom: start to: stop	"Select the specified characters inclusive."	self selectInvisiblyFrom: start to: stop! !!SimpleEditor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:12'!cursorEnd: aKeyboardEvent	"Private - Move cursor end of current line."	self		moveCursor: [ :dummy | self endOfText ]		forward: true		event: aKeyboardEvent.	^ true.! !!SimpleEditor methodsFor: 'typing support' stamp: 'jmv 9/19/2011 09:02'!backTo: startIndex	"During typing, backspace to startIndex."	self markIndex: startIndex.	self zapSelectionWith: ''.	self markIndex: self pointIndex! !!SimpleEditor methodsFor: 'typing support' stamp: 'jmv 9/19/2011 09:12'!dispatchOn: aKeyboardEvent	"Carry out the action associated with this character, if any."	| asciiValue |	asciiValue _ aKeyboardEvent keyValue.	"We don't support multiple lines. Therefore, we don't process cr as a #normalCharacter:"	asciiValue = 13 ifTrue: [		^ true].	^ self perform: (KeystrokeActions at: asciiValue + 1) with: aKeyboardEvent! !!SimpleEditor methodsFor: 'typing support' stamp: 'jmv 9/19/2011 09:10'!processKeyStroke: aKeyboardEvent	"Key struck on the keyboard. Find out which one and, if special, carry 	out the associated special action. Otherwise, add the character to the 	stream of characters.  Undoer & Redoer: see closeTypeIn."	(self dispatchOn: aKeyboardEvent) ifTrue: [		^self].	self markIndex: self pointIndex! !!SimpleEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/19/2011 09:09'!forwardDelete: aKeyboardEvent	"Delete forward over the next character.	  Make Undo work on the whole type-in, not just the one char.	wod 11/3/1998: If there was a selection use #zapSelectionWith: rather than #backspace: which was 'one off' in deleting the selection. Handling of things like undo or typeIn area were not fully considered."	| startIndex stopIndex |	startIndex _ self markIndex.	startIndex > string size ifTrue: [		^ false].	self hasSelection ifTrue: [		"there was a selection"		self zapSelectionWith: ''.		^ false].	"Null selection - do the delete forward"	stopIndex := startIndex.	(aKeyboardEvent keyValue = 127 and: [ aKeyboardEvent shiftPressed ])		ifTrue: [ stopIndex := (self nextWordStart: stopIndex) - 1 ].	self selectFrom: startIndex to: stopIndex.	self replaceSelectionWith: ''.	self selectFrom: startIndex to: startIndex-1.	^false! !!TextEditor methodsFor: 'editing keys' stamp: 'jmv 9/19/2011 09:12'!enclose: aKeyboardEvent	"Insert or remove bracket characters around the current selection."	| left right startIndex stopIndex oldSelection which t |	startIndex _ self startIndex.	stopIndex _ self stopIndex.	oldSelection _ self selection.	which _ '([<{"''' indexOf: aKeyboardEvent keyCharacter ifAbsent: [ ^true ].	left _ '([<{"''' at: which.	right _ ')]>}"''' at: which.	t _ self text.	((startIndex > 1 and: [stopIndex <= t size])			and: [ (t at: startIndex-1) = left and: [(t at: stopIndex) = right]])		ifTrue: [			"already enclosed; strip off brackets"			self selectFrom: startIndex-1 to: stopIndex.			self replaceSelectionWith: oldSelection]		ifFalse: [			"not enclosed; enclose by matching brackets"			self replaceSelectionWith:				(Text string: (String with: left), oldSelection string, (String with: right) attributes: emphasisHere).			self selectFrom: startIndex+1 to: stopIndex].	^true! !!TextEditor methodsFor: 'editing keys' stamp: 'jmv 9/19/2011 09:13'!offerColorMenu: aKeyboardEvent 	"The user typed the command key that requests a font change; Offer the color menu."	self offerColorMenu.	^ true! !!TextEditor methodsFor: 'editing keys' stamp: 'jmv 9/19/2011 09:13'!offerFontMenu: aKeyboardEvent 	"The user typed the command key that requests a font change; Offer the font menu.  5/27/96 sw"	self offerFontMenu.	^ true! !!TextEditor methodsFor: 'editing keys' stamp: 'jmv 9/19/2011 09:11'!undo: aKeyboardEvent 	"Undo the last edit."	self undo.	^true! !!TextEditor methodsFor: 'events' stamp: 'jmv 9/19/2011 09:13'!mouseDown: evt 	| clickPoint b |	"Multiple selection of text.	Windows uses Control, Mac uses Command (i.e. commandAlt)	On the Mac, command-button1 is translated to command-button3 by the VM. do:		Preferences disable: #commandClickOpensHalo	to disable this behavior and make command-button1 work for multiple selection. "	(evt controlKeyPressed or: [ evt commandAltKeyPressed ]) ifTrue: [		self selectionInterval size > 0 ifTrue: [			selectionStartBlocks _ selectionStartBlocks copyWith: self startBlock.			selectionStopBlocks _ selectionStopBlocks copyWith: self stopBlock ]]	ifFalse: [		selectionStartBlocks _ #().		selectionStopBlocks _ #() ]	.	clickPoint _ evt position.	b _ paragraph characterBlockAtPoint: clickPoint.	(paragraph clickAt: clickPoint for: model) ifTrue: [		markBlock _ b.		pointBlock _ b.		evt hand releaseKeyboardFocus: self.		^ self ].		evt shiftPressed		ifFalse: [			markBlock _ b.			pointBlock _ b ]! !!TextEditor methodsFor: 'initialize-release' stamp: 'jmv 9/19/2011 09:14'!resetState 	"Establish the initial conditions for editing the paragraph: place caret 	before first character, set the emphasis to that of the first character,	and save the paragraph for purposes of canceling."	markBlock _ paragraph defaultCharacterBlock.	pointBlock _ markBlock.	UndoInterval _ 1 to: 0.	self setEmphasisHereFromText.	selectionStartBlocks _ #().	selectionStopBlocks _ #()! !!TextEditor methodsFor: 'initialize-release' stamp: 'jmv 9/19/2011 09:07'!stateArray	"nothing if not built yet"	markBlock ifNil: [ ^nil ].	^ {		self selectionInterval.		emphasisHere.		selectionStartBlocks.		selectionStopBlocks}! !!TextEditor methodsFor: 'initialize-release' stamp: 'jmv 9/19/2011 09:07'!stateArrayPut: stateArray	| sel |	sel _ stateArray at: 1.	self selectFrom: sel first to: sel last.	emphasisHere _ stateArray at: 2.	selectionStartBlocks _ stateArray at: 3.	selectionStopBlocks _ stateArray at: 4.	morph possiblyChanged! !!TextEditor methodsFor: 'menu messages' stamp: 'jmv 9/19/2011 09:14'!undo	"Reset the state of the paragraph prior to the previous edit.	 If another ParagraphEditor instance did that edit, UndoInterval is invalid;	 just recover the contents of the undo-buffer at the start of the paragraph."	UndoParagraph == paragraph ifFalse: [ "Can't undo another paragraph's edit"		UndoMessage _ Message selector: #undoReplace.		UndoInterval _ 1 to: 0.		Undone _ true].	UndoInterval ~= self selectionInterval ifTrue: [ "blink the actual target"		self selectInterval: UndoInterval].	"Leave a signal of which phase is in progress"	UndoParagraph _ Undone ifTrue: [#redoing] ifFalse: [#undoing].	UndoMessage sentTo: self.	UndoParagraph _ paragraph! !!TextEditor methodsFor: 'new selection' stamp: 'jmv 9/19/2011 09:13'!selectFrom: start to: stop	"Select the specified characters inclusive."	self selectInvisiblyFrom: start to: stop.	self storeSelectionInParagraph.	"Preserve current emphasis if selection is empty"	stop > start ifTrue: [		self setEmphasisHereFromText ]! !!TextEditor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:12'!cursorEnd: aKeyboardEvent 	"Private - Move cursor end of current line."	self		moveCursor: [ :position | | newPos |			newPos _ Preferences wordStyleCursorMovement				ifTrue: [ self endOfLine: position ]				ifFalse: [ self endOfParagraph: position ].			"Mac standard keystrole"					(aKeyboardEvent commandAltKeyPressed or: [				"Windows / Linux standard keystroke"				aKeyboardEvent controlKeyPressed ])					ifTrue: [ newPos _ self endOfText ].			newPos ]		forward: true		event: aKeyboardEvent.	^true! !!TextEditor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:12'!cursorHome: aKeyboardEvent	"Private - Move cursor from position in current line to beginning of	current line. If control key is pressed put cursor at beginning of text"	self		moveCursor: [ :position | | newPos |			newPos _ Preferences wordStyleCursorMovement				ifTrue: [ self beginningOfLine: position ]				ifFalse: [ self beginningOfParagraph: position ].			"Mac standard keystrole"					(aKeyboardEvent commandAltKeyPressed or: [				"Windows / Linux standard keystroke"				aKeyboardEvent controlKeyPressed ])				ifTrue: [ newPos _ self beginningOfText ].			newPos ]		forward: false		event: aKeyboardEvent.	^true! !!TextEditor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:13'!selectCurrentTypeIn: aKeyboardEvent 	"Select what would be replaced by an undo (e.g., the last typeIn)."	self selectInterval: UndoInterval.	^ true! !!TextEditor methodsFor: 'nonediting/nontyping keys' stamp: 'jmv 9/19/2011 09:13'!setSearchString: aKeyboardEvent	"Establish the current selection as the current search string."	| aString |	self lineSelectAndEmptyCheck: [^ true].	aString _  self selection string.	aString size = 0		ifTrue: [ self flash ]		ifFalse: [ self setSearch: aString ].	^ true! !!TextEditor methodsFor: 'typing support' stamp: 'jmv 9/19/2011 09:02'!backTo: startIndex	"During typing, backspace to startIndex."	self markIndex: startIndex.	self zapSelectionWith: self nullText.	markBlock _ pointBlock! !!TextEditor methodsFor: 'typing support' stamp: 'jmv 9/19/2011 09:10'!processKeyStroke: aKeyboardEvent	"Key struck on the keyboard. Find out which one and, if special, carry 	out the associated special action. Otherwise, add the character to the 	stream of characters.  Undoer & Redoer: see closeTypeIn."	(self dispatchOn: aKeyboardEvent) ifTrue: [		self storeSelectionInParagraph.		^self].				self hasSelection ifTrue: [ "save highlighted characters"		UndoSelection _ self selection].	markBlock _ pointBlock.	self storeSelectionInParagraph! !!TextEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/19/2011 09:12'!doAgainMany: aKeyboardEvent 	"Do the previous thing again repeatedly. 1/26/96 sw"	self againOrSame: (UndoMessage sends: #undoAgain:andReselect:typedKey:) many: true.	^ true! !!TextEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/19/2011 09:13'!find: aKeyboardEvent	"Prompt the user for what to find, then find it, searching from the current selection onward.  1/24/96 sw"	self find.	^ true! !!TextEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/19/2011 09:13'!findAgain: aKeyboardEvent 	"Find the desired text again.  1/24/96 sw"	self againOrSame: true many: aKeyboardEvent shiftPressed.	^ true! !!TextEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/19/2011 09:09'!forwardDelete: aKeyboardEvent	"Delete forward over the next character.	  Make Undo work on the whole type-in, not just the one char.	wod 11/3/1998: If there was a selection use #zapSelectionWith: rather than #backspace: which was 'one off' in deleting the selection. Handling of things like undo or typeIn area were not fully considered."	| startIndex usel upara uinterval ind stopIndex |	startIndex _ self markIndex.	startIndex > self text size ifTrue: [		^ false].	self hasSelection ifTrue: [		"there was a selection"		self zapSelectionWith: self nullText.		^ false].	"Null selection - do the delete forward"	uinterval _ UndoInterval copy.	upara _ UndoParagraph copy.	stopIndex := startIndex.	(aKeyboardEvent keyValue = 127 and: [ aKeyboardEvent shiftPressed ])		ifTrue: [stopIndex := (self nextWordStart: stopIndex) - 1].	self selectFrom: startIndex to: stopIndex.	self replaceSelectionWith: self nullText.	self selectFrom: startIndex to: startIndex-1.	UndoParagraph _ upara.  UndoInterval _ uinterval.	UndoMessage selector == #noUndoer ifTrue: [		(UndoSelection is: #Text) ifTrue: [			usel _ UndoSelection.			ind _ startIndex. "UndoInterval startIndex"			usel replaceFrom: usel size + 1 to: usel size with:				(UndoParagraph text copyFrom: ind to: ind).			UndoParagraph text replaceFrom: ind to: ind with: self nullText]].	^false! !!TextEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/19/2011 09:13'!search: aKeyboardEvent	"Invoked by Ctrl-S.  Same as 'again', but always uses the existing FindText	 and ChangeText regardless of the last edit."	self		againOrSame: true "true means use same keys"		many: aKeyboardEvent shiftPressed.	^true! !!SmalltalkEditor methodsFor: 'editing keys' stamp: 'jmv 9/19/2011 09:12'!pasteInitials: aKeyboardEvent 	"Replace the current text selection by an authorship name/date stamp; invoked by cmd-shift-v, easy way to put an authorship stamp in the comments of an editor."	self replace: self selectionInterval with: (Text fromString: Utilities changeStamp) and: [self selectAt: self stopIndex].	^ true! !!SmalltalkEditor methodsFor: 'editing keys' stamp: 'jmv 9/19/2011 09:12'!save: aKeyboardEvent	"Submit the current text.  Equivalent to 'accept' 1/18/96 sw"	self accept.	^ true! !!SmalltalkEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/19/2011 09:12'!argAdvance: aKeyboardEvent	"Invoked by Ctrl-a.  Useful after Ctrl-q.	 Search forward from the end of the selection for a colon followed by		a space.  Place the caret after the space.  If none are found, place the		caret at the end of the text.  Does not affect the undoability of the 	 	previous command."	| start t |	t _ self text.	start _ t findString: ': ' startingAt: self stopIndex.	start = 0 ifTrue: [ start _ t size + 1].	self selectAt: start + 2.	^true! !!SmalltalkEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 9/19/2011 09:12'!doAgainOnce: aKeyboardEvent 	"Do the previous thing again once. 1/26/96 sw"	self again.	^ true! !TextEditor removeSelector: #closeTypeIn!TextEditor removeSelector: #doneTyping!TextEditor removeSelector: #openTypeIn!!classDefinition: #TextEditor category: #'System-Text'!Editor subclass: #TextEditor	instanceVariableNames: 'model paragraph markBlock pointBlock emphasisHere lastParenLocation selectionStartBlocks selectionStopBlocks'	classVariableNames: 'ChangeText FindText UndoInterval UndoMessage UndoParagraph UndoSelection Undone'	poolDictionaries: ''	category: 'System-Text'!SimpleEditor removeSelector: #closeTypeIn!SimpleEditor removeSelector: #doneTyping!SimpleEditor removeSelector: #openTypeIn!