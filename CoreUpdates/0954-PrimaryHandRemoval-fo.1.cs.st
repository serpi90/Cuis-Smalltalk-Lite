'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 26 April 2011 at 4:20:07 pm'!!HaloMorph methodsFor: 'events' stamp: 'FernandoOlivero 4/16/2011 01:34'!popUpFor: aMorph event: evt	"This message is sent by morphs that explicitly request the halo on a button click. Note: anEvent is in aMorphs coordinate frame."	| hand anEvent |	self flag: #workAround.	"We should really have some event/hand here..."	anEvent _ evt				ifNil: 					[hand _ aMorph world activeHand.					hand ifNil: [hand _ aMorph world firstHand]. 					hand lastEvent internalizedToOwnerOf: aMorph from: nil]				ifNotNil: 					[hand _ evt hand.					evt].	self target: aMorph.	hand halo: self.	hand world addMorphFront: self.	positionOffset _ anEvent position 				- (aMorph externalizePositionFromOwner: aMorph position to: owner).	self startStepping! !!HandMorph methodsFor: 'objects from disk' stamp: 'FernandoOlivero 4/16/2011 01:36'!objectForDataStream: refStrm	| dp |	"I am about to be written on an object file.  Write a path to me in the other system instead."	"owned by the project""	(refStrm project world hands includes: self) ifTrue: [		^ self].	"	dp _ DiskProxy global: #World selector: #activeHand args: #().	refStrm replace: self with: dp.	^ dp	"Note, when this file is loaded in an MVC project, this will return nil.  The MenuItemMorph that has this in a field will have that item not work.  Maybe warn the user at load time?"! !!MenuMorph methodsFor: 'control' stamp: 'FernandoOlivero 4/16/2011 01:35'!popUpInWorld: aWorld	"Present this menu under control of the given hand."	^self		popUpAt: aWorld activeHand position		forHand: aWorld activeHand		in: aWorld! !!MenuMorph methodsFor: 'modal control' stamp: 'FernandoOlivero 4/20/2011 13:54'!invokeModalAt: aPoint in: aWorld allowKeyboard: aBoolean	"Invoke this menu and don't return until the user has chosen a value.	See senders of this method for finding out how to use modal menu morphs."	| w oldFocus actHand |	actHand _ aWorld activeHand.	oldFocus _actHand keyboardFocus.	self			popUpAt: aPoint		forHand: actHand 		in: aWorld 		allowKeyboard: aBoolean.	self isModalInvokationDone: false.	w _ aWorld outermostWorldMorph. "containing hand"	[self isInWorld & self isModalInvokationDone not] whileTrue: [w doOneSubCycle].	self delete.	oldFocus ifNotNil: [ actHand newKeyboardFocus: oldFocus ].	^ self modalSelection! !!MVCMenuMorph methodsFor: 'invoking' stamp: 'FernandoOlivero 4/20/2011 13:53'!invokeAt: aPoint in: aWorld allowKeyboard: aBoolean	"Add this menu to the given world centered at the given point. Wait for the user to make a selection and answer it. The selection value returned is an integer in keeping with PopUpMenu, if the menu is converted from an MVC-style menu."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop." 	|actHand w oldFocus |	self flag: #bob.		"is <aPoint> global or local?"	self flag: #arNote.	"<aPoint> is local to aWorld"	actHand _ aWorld activeHand.	oldFocus _ actHand keyboardFocus.	self		popUpAt: aPoint		forHand: actHand		in: aWorld 		allowKeyboard: aBoolean.	done _ false.	w _ aWorld outermostWorldMorph. "containing hand"	[self isInWorld & done not] whileTrue: [w doOneSubCycle].	self delete.	oldFocus ifNotNil: [ actHand newKeyboardFocus: oldFocus ].	^ mvcSelection ! !!ProgressBarMorph methodsFor: 'menu' stamp: 'FernandoOlivero 4/20/2011 13:56'!changeProgressColor: evt	self		changeColorTarget: self		selector: #progressColor: 		originalColor: self progressColor 		hand: evt hand .! !!ProjectX class methodsFor: 'as yet unclassified' stamp: 'FernandoOlivero 4/20/2011 13:58'!interruptNameX: labelString	"Create a Notifier on the active scheduling process with the given label."	| preemptedProcess projectProcess |		ActiveHand ifNotNil:[ActiveHand interrupted].	ActiveWorld _ World. "reinstall active globals"	ActiveHand _ World activeHand.	ActiveHand interrupted. "make sure this one's interrupted too"	ActiveEvent _ nil.	projectProcess _ ProjectX uiProcessX.	"we still need the accessor for a while"	preemptedProcess _ Processor preemptedProcess.	"Only debug preempted process if its priority is >= projectProcess' priority"	preemptedProcess priority < projectProcess priority ifTrue:[		projectProcess suspend.		preemptedProcess _ projectProcess.	] ifFalse:[		preemptedProcess suspend.	].	Debugger openInterrupt: labelString onProcess: preemptedProcess! !!SystemWindow methodsFor: 'top window' stamp: 'FernandoOlivero 4/20/2011 13:58'!activate	"Bring me to the front and make me able to respond to mouse and keyboard"	| candidate |	self activateAndSendTopToBack: false.		candidate _ self.	candidate handlesKeyboard ifFalse: [		[			candidate _ candidate nextMorph.			candidate handlesKeyboard not and: [ candidate ~~  self ] ] whileTrue ].	candidate handlesKeyboard ifTrue: [		self world activeHand newKeyboardFocus: candidate ]! !Morph removeSelector: #primaryHand!