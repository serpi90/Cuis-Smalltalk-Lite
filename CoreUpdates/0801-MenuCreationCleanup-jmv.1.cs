'From Cuis 3.0 of 31 January 2011 [latest update: #790] on 17 February 2011 at 10:06:56 am'!!AbstractHierarchicalList methodsFor: 'as yet unclassified' stamp: 'jmv 2/16/2011 22:27'!genericMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu add: 'no menu yet' target: self selector: #yourself.	^aMenu! !!ObjectExplorer methodsFor: 'accessing' stamp: 'jmv 2/16/2011 22:28'!explorerFor: anObject 	| window listMorph |	rootObject := anObject.	window := (SystemWindow labelled: (rootObject printStringLimitedTo: 64)) model: self.	window		addMorph: (listMorph := SimpleHierarchicalListMorph 			model: self			listGetter: #getList			indexGetter: #getCurrentSelection			indexSetter: #noteNewSelection:			menuGetter: #genericMenu			keystrokeAction: #explorerKey:from:)		frame: (0 @ 0 corner: 1 @ 0.8).	window 		addMorph: ((TextModelMorph textProvider: self)			askBeforeDiscardingEdits: false)		frame: (0 @ 0.8 corner: 1 @ 1).	listMorph autoDeselect: false.	^ window! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 2/16/2011 22:42'!genericMenu	"Borrow a menu from my inspector"	| insideObject parentObject aMenu |	aMenu := MenuMorph new defaultTarget: self.	currentSelection		ifNil: [			aMenu				add: '*nothing selected*'				target: self				selector: #yourself]		ifNotNil: [			insideObject _ self object.			parentObject _ self parentObject.			inspector				ifNil: [inspector _ Inspector new].			inspector inspect: parentObject;				 object: insideObject.			aMenu _ inspector fieldListMenu.			aMenu defaultTarget: inspector.			aMenu items				do: [:i | (#(#inspectSelection #exploreSelection #referencesToSelection #defsOfSelection #objectReferencesToSelection #chasePointers #explorePointers) includes: i selector)						ifTrue: [i target: self]].			aMenu addLine;				add: 'monitor changes'				target: self				selector: #monitor:				argument: currentSelection].	monitorList isEmptyOrNil		ifFalse: [aMenu addLine;				add: 'stop monitoring all'				target: self				selector: #stopMonitoring].	^ aMenu! !!PluggableListMorph methodsFor: 'menu' stamp: 'jmv 2/17/2011 10:04'!getMenu	"Answer the menu for this view"	| aMenu |	menuGetter ifNil: [^ nil].	menuGetter numArgs = 0 ifTrue: [		aMenu _ model perform: menuGetter.		aMenu ifNotNil: [aMenu commandKeyHandler: self ].		^ aMenu ].	^ self error: 'The menuGetter has an unsupported number of arguments'! !!PointerFinder methodsFor: 'morphic ui' stamp: 'jmv 2/17/2011 10:03'!open	| window list |	window _ (SystemWindow labelled: 'Pointer Finder')		model: self.	list _ PluggableListMorph new		doubleClickSelector: #inspectObject;		model: self		listGetter: #pointerList		indexGetter: #pointerListIndex		indexSetter: #pointerListIndex:		menuGetter: #pointerListMenu		keystrokeAction: #arrowKey:from:.	"For doubleClick to work best disable autoDeselect"	list autoDeselect: false.	window addMorph: list frame: (0@0 extent: 1@1).	list color: Color lightMagenta.	window openInWorld! !!PointerFinder methodsFor: 'morphic ui' stamp: 'jmv 2/17/2011 10:03'!pointerListMenu	^ MenuMorph new		defaultTarget: self;		add: 'Inspect (i)' action: #inspectObject;		balloonTextForLastItem: 'Live long and prosper!!';		addLine;		add: 'Search again' action: #searchAgain;		balloonTextForLastItem: 'Search again\for the same object' withCRs;		yourself! !!ProcessBrowser methodsFor: 'process list' stamp: 'jmv 2/17/2011 09:46'!processListMenu	| pw menu |	menu := MenuMorph new defaultTarget: self.	selectedProcess		ifNotNil: [| nameAndRules | 			nameAndRules _ self nameAndRulesForSelectedProcess.			menu addList: {{'inspect (i)'. #inspectProcess}. {'explore (I)'. #exploreProcess}. {'inspect Pointers (P)'. #inspectPointers}}.	(Smalltalk includesKey: #PointerFinder)		ifTrue: [ menu add: 'chase pointers (c)' action: #chasePointers.  ].			nameAndRules second				ifTrue: [menu add: 'terminate (t)' action: #terminateProcess.					selectedProcess isSuspended						ifTrue: [menu add: 'resume (r)' action: #resumeProcess]						ifFalse: [menu add: 'suspend (s)' action: #suspendProcess]].			nameAndRules third				ifTrue: [menu addList: {{'change priority (p)'. #changePriority}. {'debug (d)'. #debugProcess}}].			menu addList: {{'profile messages (m)'. #messageTally}}.			(selectedProcess suspendingList isKindOf: Semaphore)				ifTrue: [menu add: 'signal Semaphore (S)' action: #signalSemaphore].			menu add: 'full stack (k)' action: #moreStack.			menu addLine].	menu addList: {{'find context... (f)'. #findContext}. {'find again (g)'. #nextContext}}.	menu addLine.	menu		add: (self isAutoUpdating				ifTrue: ['turn off auto-update (a)']				ifFalse: ['turn on auto-update (a)'])		action: #toggleAutoUpdate.	menu add: 'update list (u)' action: #updateProcessList.	pw _ Smalltalk at: #CPUWatcher ifAbsent: nil.	pw ifNotNil: [		menu addLine.		pw isMonitoring				ifTrue: [ menu add: 'stop CPUWatcher' action: #stopCPUWatcher ]				ifFalse: [ menu add: 'start CPUWatcher' action: #startCPUWatcher  ]	].	^ menu! !!ProcessBrowser methodsFor: 'stack list' stamp: 'jmv 2/17/2011 09:45'!stackListMenu	| menu aMenu |	aMenu := MenuMorph new defaultTarget: self.	selectedContext		ifNil: [^ aMenu].	menu _ aMenu				labels: 'inspect context (c)explore context (C)inspect receiver (i)explore receiver (I)browse (b)'				lines: #(2 4 )				selections: #(#inspectContext #exploreContext #inspectReceiver #exploreReceiver #browseContext ).	^ menu! !!ProcessBrowser methodsFor: 'views' stamp: 'jmv 2/17/2011 09:47'!asPrototypeInWindow	"Create a pluggable version of me, answer a window"	| window aTextMorph |	window _ SystemWindow new model: self.	window		addMorph: ((PluggableListMorph				model: self				listGetter: #processNameList				indexGetter: #processListIndex				indexSetter: #processListIndex:				menuGetter: #processListMenu				keystrokeAction: #processListKey:from:)				enableDragNDrop: false)		frame: (0 @ 0 extent: 0.5 @ 0.5).	window		addMorph: ((PluggableListMorph				model: self				listGetter: #stackNameList				indexGetter: #stackListIndex				indexSetter: #stackListIndex:				menuGetter: #stackListMenu				keystrokeAction: #stackListKey:from:)				enableDragNDrop: false)		frame: (0.5 @ 0.0 extent: 0.5 @ 0.5).	aTextMorph _ TextModelMorph				textProvider: self				textGetter: #selectedMethod.	window		addMorph: aTextMorph		frame: (0 @ 0.5 corner: 1 @ 1).	window setLabel: 'Process Browser'.	^ window! !!ProcessBrowser methodsFor: 'views' stamp: 'jmv 2/17/2011 09:47'!openAsMorph	"Create a pluggable version of me, answer a window"	| window aTextMorph |	window _ SystemWindow new				model: self.	deferredMessageRecipient _ WorldState.	window		addMorph: ((PluggableListMorph				model: self				listGetter: #processNameList				indexGetter: #processListIndex				indexSetter: #processListIndex:				menuGetter: #processListMenu				keystrokeAction: #processListKey:from:)				enableDragNDrop: false)		frame: (0 @ 0 extent: 0.5 @ 0.5).	window		addMorph: ((PluggableListMorph				model: self				listGetter: #stackNameList				indexGetter: #stackListIndex				indexSetter: #stackListIndex:				menuGetter: #stackListMenu				keystrokeAction: #stackListKey:from:)				enableDragNDrop: false)		frame: (0.5 @ 0.0 extent: 0.5 @ 0.5).	aTextMorph _ TextModelMorph				textProvider: self				textGetter: #selectedMethod.	aTextMorph askBeforeDiscardingEdits: false.	window		addMorph: aTextMorph		frame: (0 @ 0.5 corner: 1 @ 1).	window setUpdatablePanesFrom: #(#processNameList #stackNameList ).	(window setLabel: 'Process Browser') openInWorld.	startedCPUWatcher ifTrue: [ self setUpdateCallbackAfter: 7 ].	^ window! !!SimpleHierarchicalListMorph methodsFor: 'menu' stamp: 'jmv 2/17/2011 10:02'!getMenu	"Answer the menu for this view"	menuGetter ifNil: [^ nil].	menuGetter numArgs = 0 ifTrue: [		^ model perform: menuGetter ].	^ self error: 'The menuGetter has an unsupported number of arguments'! !!SyntaxError methodsFor: 'menu' stamp: 'jmv 2/17/2011 09:48'!listMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^ aMenu labels:'proceeddebug calling processbrowse full'	lines: #()	selections: #(proceed debug browseMethodFull)! !!SyntaxError class methodsFor: 'instance creation' stamp: 'jmv 2/17/2011 09:49'!buildMorphicViewOn: aSyntaxError	"Answer an Morphic view on the given SyntaxError."	| window |	window _ (SystemWindow labelled: 'Syntax Error') model: aSyntaxError.	window addMorph: (PluggableListMorph 			model: aSyntaxError 			listGetter: #list			indexGetter: #listIndex 			indexSetter: nil 			menuGetter: #listMenu)		frame: (0@0 corner: 1@0.15).	window		addMorph: (TextModelMorph withModel: aSyntaxError)		frame: (0@0.15 corner: 1@1).	^ window openInWorldExtent: 380@220! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/17/2011 09:55'!buildTestsList	| column buttonRow bh |	column _ AlignmentMorph proportional.	testsList _ PluggableListMorphOfMany				model: self				listGetter: #tests				primarySelectionGetter: #selectedSuite				primarySelectionSetter: #selectedSuite:				listSelectionGetter: #listSelectionAt:				listSelectionSetter: #listSelectionAt:put:				menuGetter: #listMenu.	testsList autoDeselect: false.	testsList color: Color veryVeryLightGray.	bh _ self defaultButtonPaneHeight.	column		addMorph: testsList		fullFrame: (LayoutFrame				fractions: (0 @ 0 corner: 1 @ 1)				offsets: (0@0 corner: 1 @ bh negated)).	buttonRow _ self optionalButtonRow.	column		addMorph: buttonRow		fullFrame: (LayoutFrame				fractions: (0 @ 1 corner: 1 @ 1)				offsets: (0@bh negated corner: 0@0)).	^ column! !!TestRunner methodsFor: 'menus' stamp: 'jmv 2/17/2011 09:55'!listMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'Test Cases'.	aMenu add: 'select all' target: self selector: #selectAll.	aMenu add: 'deselect all' target: self selector: #deselectAll.	aMenu add: 'toggle selections' target: self selector: #toggleSelections.	aMenu add: 'filter' target: self selector: #setFilter.	running ifNotNil: [		aMenu add: 'stop' target: self selector: #terminateRun		].	selectedSuite > 0 ifTrue: [ | cls |		cls _ (tests at: selectedSuite ifAbsent: ['']) copyUpTo: Character space.		cls _ cls asSymbol.		cls _ (Smalltalk at: cls ifAbsent: nil).		cls ifNotNil: [			aMenu addLine.			aMenu add: 'browse' target: self selector: #browse: argument: cls.		].	].	aMenu addLine.	aMenu add: 'log to Transcript' target: self selector: #showResult.	^aMenu! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 2/16/2011 22:19'!offerShiftedClassListMenu	"Offer the shifted class-list menu."	^ self shiftedClassListMenu popUpInWorld! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 2/16/2011 22:20'!offerUnshiftedClassListMenu	"Offer the shifted class-list menu."	^ self classListMenu popUpInWorld! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 2/16/2011 22:21'!shiftedYellowButtonActivity	"Offer the shifted selector-list menu"	^ self shiftedMessageListMenu popUpInWorld! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 2/16/2011 22:22'!unshiftedYellowButtonActivity	"Offer the unshifted shifted selector-list menu"	^ self messageListMenu popUpInWorld! !!Browser methodsFor: 'class functions' stamp: 'jmv 2/16/2011 22:10'!classListMenu	"Set up the menu to apply to the receiver's class list, honoring the #shifted boolean"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: #(		-		('browse full (b)'			browseMethodFull)		('browse hierarchy (h)'		spawnHierarchy)		('browse protocol (p)'		browseFullProtocol)		-		('fileOut'					fileOutClass)		-		('show hierarchy'			hierarchy)		('show definition'			editClass)		('show comment'			editComment)		-		('inst var refs...'			browseInstVarRefs)		('inst var defs...'			browseInstVarDefs)		-		('class var refs...'			browseClassVarRefs)		('class vars'					browseClassVariables)		('class refs (N)'				browseClassRefs)		-		('rename class ...'			renameClass)		('copy class...'				copyClass)		('remove class (x)'			removeClass)		-		('find method...'				findMethod)		-		('more...'					offerShiftedClassListMenu)).	^ aMenu! !!Browser methodsFor: 'class functions' stamp: 'jmv 2/16/2011 22:10'!shiftedClassListMenu	"Set up the menu to apply to the receiver's class list when the shift key is down"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: #(			-			('unsent methods'			browseUnusedMethods	'browse all methods defined by this class that have no senders')			('unreferenced inst vars'	showUnreferencedInstVars	'show a list of all instance variables that are not referenced in methods')			('unreferenced class vars'	showUnreferencedClassVars	'show a list of all class variables that are not referenced in methods')			('subclass template'			makeNewSubclass		'put a template into the code pane for defining of a subclass of this class')			-			('sample instance'			makeSampleInstance		'give me a sample instance of this class, if possible')			('inspect instances'			inspectInstances			'open an inspector on all the extant instances of this class')			('inspect subinstances'		inspectSubInstances		'open an inspector on all the extant instances of this class and of all of its subclasses')			-			('add all meths to current chgs'		addAllMethodsToCurrentChangeSet																'place all the methods defined by this class into the current change set')			('create inst var accessors'	createInstVarAccessors	'compile instance-variable access methods for any instance variables that do not yet have them')			-			('more...'					offerUnshiftedClassListMenu	'return to the standard class-list menu')).	^ aMenu! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/16/2011 22:20'!buildMorphicClassList	| myClassList |	(myClassList := PluggableListMorph new)		model: self		listGetter: #classList		indexGetter: #classListIndex		indexSetter: #classListIndex:		menuGetter: #classListMenu		keystrokeAction: #classListKey:from:.	myClassList borderWidth: 0.	myClassList enableDragNDrop: false.	myClassList doubleClickSelector: #browseSelectionInPlace.	^myClassList! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/16/2011 22:29'!buildMorphicMessageCatList	| myMessageCatList |	(myMessageCatList := PluggableMessageCategoryListMorph new)		model: self		listGetter: #messageCategoryList		indexGetter: #messageCategoryListIndex		indexSetter: #messageCategoryListIndex:		menuGetter: #messageCategoryMenu		keystrokeAction: #arrowKey:from:		rawListGetter: #rawMessageCategoryList.	myMessageCatList enableDragNDrop: false.	^myMessageCatList! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/16/2011 22:22'!buildMorphicMessageList	"Build a morphic message list, with #messageList as its list-getter"	| aListMorph |	(aListMorph := PluggableListMorph new)		model: self		listGetter: #messageList		indexGetter: #messageListIndex		indexSetter: #messageListIndex:		menuGetter: #messageListMenu		keystrokeAction: #messageListKey:from:.	aListMorph enableDragNDrop: false.	^aListMorph! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/16/2011 22:31'!buildMorphicSystemCatList	| dragNDropFlag myCatList |	dragNDropFlag := false.	(myCatList := PluggableListMorph new)		model: self		listGetter: #systemCategoryList		indexGetter: #systemCategoryListIndex		indexSetter: #systemCategoryListIndex:		menuGetter: #systemCategoryMenu		keystrokeAction: #systemCatListKey:from:.	myCatList enableDragNDrop: dragNDropFlag.	^myCatList! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/16/2011 22:20'!openAsMorphClassEditing: editString 	"Create a pluggable version a Browser on just a single class."	| window dragNDropFlag hSepFrac switchHeight mySingletonClassList switches c |	window := SystemWindow new model: self.	dragNDropFlag := false.	hSepFrac := 0.3.	switchHeight _ StrikeFont default height + 10.	mySingletonClassList := PluggableListMorph 				model: self				listGetter: #classListSingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				menuGetter: #classListMenu				keystrokeAction: #classListKey:from:.	mySingletonClassList enableDragNDrop: dragNDropFlag.	self 		addLowerPanesTo: window		at: (0 @ hSepFrac corner: 1 @ 1)		with: editString.	window addMorph: mySingletonClassList		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 0.5 @ 0)				offsets: (0 @ 0 corner: 0 @ switchHeight)).	switches _ self buildMorphicSwitches.	c _ switches color.	window addMorph: switches		fullFrame: (LayoutFrame fractions: (0.5 @ 0 corner: 1.0 @ 0)				offsets: (0 @ 0 corner: 0 @ switchHeight)).	switches color: c.	window addMorph: self buildMorphicMessageCatList		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 0.5 @ hSepFrac)				offsets: (0 @ switchHeight corner: 0 @ 0)).	window addMorph: self buildMorphicMessageList		fullFrame: (LayoutFrame fractions: (0.5 @ 0 corner: 1.0 @ hSepFrac)				offsets: (0 @ switchHeight corner: 0 @ 0)).	window setUpdatablePanesFrom: #(#messageCategoryList #messageList).	^window! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/16/2011 22:22'!openAsMorphMessageEditing: editString	"Create a pluggable version a Browser that shows just one message"	| window mySingletonMessageList verticalOffset nominalFractions |	window := SystemWindow new model: self.	mySingletonMessageList := PluggableListMorph 				model: self				listGetter: #messageListSingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				menuGetter: #messageListMenu				keystrokeAction: #messageListKey:from:.	mySingletonMessageList enableDragNDrop: false.	verticalOffset := 25.	nominalFractions := 0 @ 0 corner: 1 @ 0.	window addMorph: mySingletonMessageList		fullFrame: (LayoutFrame fractions: nominalFractions				offsets: (0 @ 0 corner: 0 @ verticalOffset)).	verticalOffset := self 				addOptionalAnnotationsTo: window				at: nominalFractions				plus: verticalOffset.	verticalOffset := self 				addOptionalButtonsTo: window				at: nominalFractions				plus: verticalOffset.	window addMorph: (self buildMorphicCodePaneWith: editString)		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 1 @ 1)				offsets: (0 @ verticalOffset corner: 0 @ 0)).	^window! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/16/2011 22:29'!openAsMorphMsgCatEditing: editString 	"Create a pluggable version a Browser on just a message category."	| window hSepFrac |	window := SystemWindow new model: self.	hSepFrac := 0.3.	window 		addMorph: ((PluggableListMorph 				model: self				listGetter: #messageCatListSingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				menuGetter: #messageCategoryMenu) 					enableDragNDrop: false)		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 1 @ 0)				offsets: (0 @ 0 corner: 0 @ 25)).	window addMorph: self buildMorphicMessageList		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 1 @ hSepFrac)				offsets: (0 @ 25 corner: 0 @ 0)).	self 		addLowerPanesTo: window		at: (0 @ hSepFrac corner: 1 @ 1)		with: editString.	window setUpdatablePanesFrom: #(#messageCatListSingleton #messageList).	^window! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/16/2011 22:31'!openAsMorphSysCatEditing: editString 	"Create a pluggable version of all the views for a Browser, including views and controllers."	| window hSepFrac switchHeight mySingletonList nextOffsets |	window _ SystemWindow new model: self.	hSepFrac _ 0.3.	switchHeight _ Preferences standardCodeFont height + 10.	mySingletonList _ PluggableListMorph 				model: self				listGetter: #systemCategorySingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				menuGetter: #systemCatSingletonMenu				keystrokeAction: #systemCatSingletonKey:from:.	mySingletonList enableDragNDrop: false.	mySingletonList hideScrollBarsIndefinitely.	window addMorph: mySingletonList		fullFrame: (LayoutFrame fractions: (0 @ 0 corner: 1 @ 0)				offsets: (0 @ 0 corner: 0 @ switchHeight)).	self 		addClassAndSwitchesTo: window		at: (0 @ 0 corner: 0.3333 @ hSepFrac)		plus: switchHeight.	nextOffsets _ 0 @ switchHeight corner: 0 @ 0.	window addMorph: self buildMorphicMessageCatList		fullFrame: (LayoutFrame 				fractions: (0.3333 @ 0 corner: 0.6666 @ hSepFrac)				offsets: nextOffsets).	window addMorph: self buildMorphicMessageList		fullFrame: (LayoutFrame fractions: (0.6666 @ 0 corner: 1 @ hSepFrac)				offsets: nextOffsets).	self 		addLowerPanesTo: window		at: (0 @ hSepFrac corner: 1 @ 1)		with: editString.	window 		setUpdatablePanesFrom: #(#classList #messageCategoryList #messageList).	^window! !!Browser methodsFor: 'message category functions' stamp: 'jmv 2/16/2011 22:29'!messageCategoryMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu labels:'browsefileOutreorganizealphabetizeremove empty categoriescategorize all uncategorizednew category...rename...remove'	lines: #(2 7)	selections:		#(buildMessageCategoryBrowser fileOutMessageCategories		editMessageCategories alphabetizeMessageCategories removeEmptyCategories		categorizeAllUncategorizedMethods addCategory renameCategory removeMessageCategory).	^aMenu! !!Browser methodsFor: 'message functions' stamp: 'jmv 2/16/2011 22:14'!messageListMenu	"Answer the message-list menu"	"Changed by emm to include menu-item for breakpoints"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList:#(			('what to show...'				offerWhatToShowMenu)                	('toggle break on entry'		toggleBreakOnEntry)            		-			('browse full (b)' 				browseMethodFull)			('browse hierarchy (h)'			classHierarchy)			('browse method (O)'			openSingleMessageBrowser)			('browse protocol (p)'			browseFullProtocol)			-			('fileOut'						fileOutMessage)			-			('senders of... (n)'				browseSendersOfMessages)			('implementors of... (m)'			browseMessages)			('inheritance (i)'					methodHierarchy)			('versions (v)'					browseVersions)			-			('inst var refs...'					browseInstVarRefs)			('inst var defs...'				browseInstVarDefs)			('class var refs...'				browseClassVarRefs)			('class variables'				browseClassVariables)			('class refs (N)'					browseClassRefs)			-			('remove method (x)'			removeMessage)			-			('more...'						shiftedYellowButtonActivity)).	^ aMenu! !!Browser methodsFor: 'message functions' stamp: 'jmv 2/16/2011 22:12'!shiftedMessageListMenu	"Fill aMenu with the items appropriate when the shift key is held down"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addStayUpIcons.	aMenu addList: #(		('toggle diffing (D)'						toggleDiffing)		('implementors of sent messages'			browseAllMessages)		-		('local senders of...'						browseLocalSendersOfMessages)		('local implementors of...'				browseLocalImplementors)		-		('spawn sub-protocol'					spawnProtocol)		('spawn full protocol'					spawnFullProtocol)		-		('sample instance'						makeSampleInstance)		('inspect instances'						inspectInstances)		('inspect subinstances'					inspectSubInstances)).	self addExtraShiftedItemsTo: aMenu.	aMenu addList: #(		-		('change category...'					changeCategory)).	self canShowMultipleMessageCategories ifTrue: [aMenu addList:		 #(('show category (C)'						showHomeCategory))].	aMenu addList: #(		-		('change sets with this method'			findMethodInChangeSets)		('revert to previous version'				revertToPreviousVersion)		('remove from current change set'		removeFromCurrentChanges)		('revert & remove from changes'		revertAndForget)		('add to current change set'				adoptMessageInCurrentChangeset)		('copy up or copy down...'				copyUpOrCopyDown)		-		('more...' 								unshiftedYellowButtonActivity)).	^ aMenu! !!Browser methodsFor: 'system category functions' stamp: 'jmv 2/16/2011 22:30'!systemCatSingletonMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^ aMenu labels:'browse allbrowsefileOutupdaterename...remove' 	lines: #(2 3)	selections:		#(browseAllClasses buildSystemCategoryBrowser		fileOutSystemCategory updateSystemCategories		renameSystemCategory removeSystemCategory)! !!Browser methodsFor: 'system category functions' stamp: 'jmv 2/16/2011 22:31'!systemCategoryMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.^ aMenu labels:'find class... (f)recent classes... (r)browse allbrowsefileOutreorganizealphabetizeupdateadd item...rename...removemove to topmove upmove downmove to bottom' 	lines: #(2 4 5 7 11)	selections:		#(findClass recent browseAllClasses buildSystemCategoryBrowser		fileOutSystemCategory		editSystemCategories alphabetizeSystemCategories updateSystemCategories		addSystemCategory renameSystemCategory removeSystemCategory 		moveSystemCategoryTop moveSystemCategoryUp 		moveSystemCategoryDown moveSystemCategoryBottom)! !!ChangeList methodsFor: 'initialization-release' stamp: 'jmv 2/16/2011 22:33'!openAsMorphName: labelString multiSelect: multiSelect 	"Open a morphic view for the messageSet, whose label is labelString. 	The listView may be either single or multiple selection type"	| window listHeight listPane |	listHeight _ 0.4.	window _ (SystemWindow labelled: labelString)				model: self.	listPane _ multiSelect				ifTrue: [PluggableListMorphOfMany						model: self						listGetter: #list						primarySelectionGetter: #listIndex						primarySelectionSetter: #toggleListIndex:						listSelectionGetter: #listSelectionAt:						listSelectionSetter: #listSelectionAt:put:						menuGetter: (self showsVersions								ifTrue: [#versionsMenu]								ifFalse: [#changeListMenu])]				ifFalse: [PluggableListMorph						model: self						listGetter: #list						indexGetter: #listIndex						indexSetter: #toggleListIndex:						menuGetter: (self showsVersions								ifTrue: [#versionsMenu]								ifFalse: [#changeListMenu])].	listPane keystrokeActionSelector: #changeListKey:from:.	window		addMorph: listPane		frame: (0 @ 0 extent: 1 @ listHeight).	self		addLowerPanesTo: window		at: (0 @ listHeight corner: 1 @ 1)		with: nil.	^ window openInWorld! !!ChangeList methodsFor: 'menu actions' stamp: 'jmv 2/16/2011 22:32'!changeListMenu	"Fill aMenu up so that it comprises the primary changelist-browser menu"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addTitle: 'change list'.	aMenu addStayUpIcons.	aMenu addList: #(	('fileIn selections'							fileInSelections							'import the selected items into the image')	('fileOut selections...	'					fileOutSelections						'create a new file containing the selected items')	-	('compare to current'						compareToCurrentVersion				'open a separate window which shows the text differences between the on-file version and the in-image version.' )	('toggle diffing (D)'							toggleDiffing							'start or stop showing diffs in the code pane.')	-	('select conflicts with any changeset'		selectAllConflicts						'select methods in the file which also occur in any change-set in the system')	('select conflicts with current changeset'	selectConflicts							'select methods in the file which also occur in the current change-set')	('select conflicts with...'						selectConflictsWith						'allows you to designate a file or change-set against which to check for code conflicts.')	-	('select unchanged methods'				selectUnchangedMethods				'select methods in the file whose in-image versions are the same as their in-file counterparts' )	('select methods equivalent to current'		selectEquivalentMethods				'select methods in the file whose in-image versions have the same behavior as their in-file counterparts' )	('select new methods'						selectNewMethods						'select methods in the file that do not current occur in the image')	('select methods for absent classes'		selectMethodsForAbsentClasses		'select methods in the file for classes that are not defined in the image')	('select methods for this class'				selectMethodsForThisClass			'select all methods in the file that belong to the currently-selected class')	('select removals of sent methods'			selectRemovalsOfSent					'select all method removals of methods that have some sender in the image')	-	('select all (a)'								selectAll									'select all the items in the list')	('deselect all'								deselectAll								'deselect all the items in the list')	('invert selections'							invertSelections							'select every item that is not currently selected, and deselect every item that *is* currently selected')	-	('browse all versions of single selection'	browseVersions							'open a version browser showing the versions of the currently selected method')	('browse all versions of selections'			browseAllVersionsOfSelections		'open a version browser showing all the versions of all the selected methods')	('browse current versions of selections'	browseCurrentVersionsOfSelections 'open a message-list browser showing the current (in-image) counterparts of the selected methods')	('destroy current methods of selections'	destroyCurrentCodeOfSelections	'remove (*destroy*) the in-image counterparts of all selected methods')	-	('remove doIts'								removeDoIts								'remove all items that are doIts rather than methods')	('remove older versions'					removeOlderMethodVersions			'remove all but the most recent versions of methods in the list')	('remove up-to-date versions'				removeExistingMethodVersions		'remove all items whose code is the same as the counterpart in-image code')	('remove empty class comments'			removeEmptyClassComments			'remove all empty class comments')	('remove selected items'					removeSelections						'remove the selected items from the change-list')	('remove unselected items'					removeNonSelections					'remove all the items not currently selected from the change-list')).	^ aMenu! !!ChangeSorter methodsFor: 'creation' stamp: 'jmv 2/16/2011 22:24'!openAsMorphIn: window rect: rect	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."	| csListHeight msgListHeight csMsgListHeight |	csListHeight _ 0.25.	msgListHeight _ 0.25.	csMsgListHeight _ csListHeight + msgListHeight.	self addDependent: window.		"so it will get changed: #relabel"	window addMorph: ((PluggableListMorphByItem 				model: self				listGetter: #changeSetList				indexGetter: #currentCngSet				indexSetter: #showChangeSetNamed:				menuGetter: #changeSetMenu				keystrokeAction: #changeSetListKey:from:)			autoDeselect: false)		frame: (((0@0 extent: 0.5@csListHeight)			scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableListMorphByItem 				model: self				listGetter: #classList				indexGetter: #currentClassName				indexSetter: #currentClassName:				menuGetter: #classListMenu				keystrokeAction: #classListKey:from:)		frame: (((0.5@0 extent: 0.5@csListHeight)			scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableListMorphByItem 				model: self				listGetter: #messageList				indexGetter: #currentSelector				indexSetter: #currentSelector:				menuGetter: #messageMenu				keystrokeAction: #messageListKey:from:)		frame: (((0@csListHeight extent: 1@msgListHeight)			scaleBy: rect extent) translateBy: rect origin).	 self addLowerPanesTo: window		at: (((0@csMsgListHeight corner: 1@1) scaleBy: rect extent) translateBy: rect origin)		with: nil.! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 2/16/2011 22:09'!changeSetMenu	"Set up aMenu to hold commands for the change-set-list pane.  This could be for a single or double changeSorter"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'Change Set'.	aMenu addStayUpIcons.	aMenu add: 'make changes go to me (m)' action: #newCurrent.	aMenu addLine.	aMenu add: 'new change set... (n)' action: #newSet.	aMenu add: 'find...(f)' action: #findCngSet.	aMenu add: 'select change set...' action: #chooseCngSet.	aMenu addLine.	aMenu add: 'rename change set (r)' action: #rename.	aMenu add: 'file out (o)' action: #fileOut.	aMenu add: 'browse methods (b)' action: #browseChangeSet.	aMenu add: 'browse change set (B)' action: #openChangeSetBrowser.	aMenu addLine.	parent		ifNotNil: 			[aMenu add: 'copy all to other side (c)' action: #copyAllToOther.			aMenu add: 'submerge into other side' action: #submergeIntoOtherSide.			aMenu add: 'subtract other side (-)' action: #subtractOtherSide.			aMenu addLine].	myChangeSet hasPreamble		ifTrue: 			[aMenu add: 'edit preamble (p)' action: #addPreamble.			aMenu add: 'remove preamble' action: #removePreamble]		ifFalse: [aMenu add: 'add preamble (p)' action: #addPreamble].	myChangeSet hasPostscript		ifTrue: 			[aMenu add: 'edit postscript...' action: #editPostscript.			aMenu add: 'remove postscript' action: #removePostscript]		ifFalse: [aMenu add: 'add postscript...' action: #editPostscript].	aMenu addLine.	aMenu add: 'destroy change set (x)' action: #remove.	aMenu addLine.	aMenu add: 'more...' action: #offerShiftedChangeSetMenu.	^ aMenu! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 2/16/2011 22:16'!offerShiftedChangeSetMenu	"Offer the shifted version of the change set menu"	self shiftedChangeSetMenu popUpInWorld! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 2/16/2011 22:17'!offerUnshiftedChangeSetMenu	"Offer the unshifted version of the change set menu"	self changeSetMenu popUpInWorld! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 2/16/2011 22:08'!shiftedChangeSetMenu	"Set up aMenu to hold items relating to the change-set-list pane when the shift key is down"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'Change set (shifted)'.	aMenu addStayUpIcons.	"CONFLICTS SECTION"	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	parent ifNotNil:		[aMenu add: 'conflicts with change set opposite' action: #methodConflictsWithOtherSide.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in the one on the opposite side of the change sorter.'.			aMenu add: 'conflicts with category opposite' action: #methodConflictsWithOppositeCategory.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in ANY change set in the category list on the opposite side of this change sorter, other of course than this change set itself.  (Caution -- this could be VERY slow)'].	aMenu addLine.	"CHECKS SECTION"	aMenu add: 'check for slips' action: #lookForSlips.	aMenu balloonTextForLastItem: 'Check this change set for halts and references to Transcript.'.	aMenu add: 'check for unsent messages' action: #checkForUnsentMessages.	aMenu balloonTextForLastItem:'Check this change set for messages that are not sent anywhere in the system'.	aMenu add: 'check for uncommented methods' action: #checkForUncommentedMethods.	aMenu balloonTextForLastItem:'Check this change set for methods that do not have comments'.	aMenu add: 'check for uncommented classes' action: #checkForUncommentedClasses.	aMenu balloonTextForLastItem:'Check for classes with code in this changeset which lack class comments'.	Utilities authorInitialsPerSe isEmptyOrNil ifFalse:		[aMenu add: 'check for other authors' action: #checkForAlienAuthorship.		aMenu balloonTextForLastItem:'Check this change set for methods whose current authoring stamp does not start with "', Utilities authorInitials, '"'.	aMenu add: 'check for any other authors' action: #checkForAnyAlienAuthorship.	aMenu balloonTextForLastItem:'Check this change set for methods any of whose authoring stamps do not start with "', Utilities authorInitials, '"'].	aMenu add: 'check for uncategorized methods' action: #checkForUnclassifiedMethods.	aMenu balloonTextForLastItem:'Check to see if any methods in the selected change set have not yet been assigned to a category.  If any are found, open a browser on them.'.	aMenu addLine.	aMenu add: 'inspect change set' action: #inspectChangeSet.	aMenu balloonTextForLastItem: 'Open an inspector on this change set. (There are some details in a change set which you don''t see in a change sorter.)'.	aMenu add: 'update' action: #update.	aMenu balloonTextForLastItem: 'Update the display for this change set.  (This is done automatically when you activate this window, so is seldom needed.)'.	aMenu add: 'promote to top of list' action: #promoteToTopChangeSet.	aMenu balloonTextForLastItem:'Make this change set appear first in change-set lists in all change sorters.'.	aMenu add: 'trim history' action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.  NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'view affected class categories' action: #viewAffectedClassCategories.	aMenu balloonTextForLastItem: ' Show class categories affected by any contained change'.		aMenu add: 'remove contained in class categories...' action: #removeContainedInClassCategories.	aMenu balloonTextForLastItem: ' Drops any changes in given class categories'.	aMenu add: 'clear this change set' action: #clearChangeSet.	aMenu balloonTextForLastItem: 'Reset this change set to a pristine state where it holds no information. CAUTION: this is destructive and irreversible!!'.	aMenu add: 'uninstall this change set' action: #uninstallChangeSet.	aMenu balloonTextForLastItem: 'Attempt to uninstall this change set. CAUTION: this may not work completely and is irreversible!!'.	aMenu addLine.	aMenu add: 'file into new...' action: #fileIntoNewChangeSet.	aMenu balloonTextForLastItem: 'Load a fileout from disk and place its changes into a new change set (seldom needed -- much better to do this from a file-list browser these days.)'.	aMenu add: 'reorder all change sets' action: #reorderChangeSets.	aMenu balloonTextForLastItem:'Applies a standard reordering of all change-sets in the system -- at the bottom will come the sets that come with the release; next will come all the numbered updates; finally, at the top, will come all other change sets'.	aMenu addLine.	aMenu add: 'more...' action: #offerUnshiftedChangeSetMenu.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!ChangeSorter methodsFor: 'class list' stamp: 'jmv 2/16/2011 22:10'!classListMenu	"Fill aMenu with items appropriate for the class list"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'class list'.	aMenu addStayUpIcons.	parent notNil		ifTrue: [aMenu addList: #( "These two only apply to dual change sorters"			('copy class chgs to other side'			copyClassToOther)				('move class chgs to other side'			moveClassToOther))].	aMenu addList: #(			-			('delete class from change set (d)'		forgetClass)			('remove class from system (x)'			removeClass)			-			('browse full (b)'						browseMethodFull)			('browse hierarchy (h)'					spawnHierarchy)			('browse protocol (p)'					browseFullProtocol)			-			('fileOut'								fileOutClass)			-			('inst var refs...'						browseInstVarRefs)			('inst var defs...'						browseInstVarDefs)			('class var refs...'						browseClassVarRefs)			('class vars'								browseClassVariables)			('class refs (N)'							browseClassRefs)			-			('more...'								offerShiftedClassListMenu)).	^ aMenu! !!ChangeSorter methodsFor: 'class list' stamp: 'jmv 2/16/2011 22:10'!shiftedClassListMenu	"Fill aMenu with items appropriate for the class list"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'class list'.	aMenu addStayUpIcons.	aMenu addList: #(			-			('unsent methods'						browseUnusedMethods)			('unreferenced inst vars'				showUnreferencedInstVars)			('unreferenced class vars'				showUnreferencedClassVars)			-			('sample instance'						makeSampleInstance)			('inspect instances'						inspectInstances)			('inspect subinstances'					inspectSubInstances)			-			('more...'								offerUnshiftedClassListMenu )).	^ aMenu! !!ChangeSorter methodsFor: 'message list' stamp: 'jmv 2/16/2011 22:14'!messageListMenu	"Fill aMenu with items appropriate for the message list; could be for a single or double changeSorter"	^ self messageMenu! !!ChangeSorter methodsFor: 'message list' stamp: 'jmv 2/16/2011 22:14'!messageMenu	"Fill aMenu with items appropriate for the message list; could be for a single or double changeSorter"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'message list'.	aMenu addStayUpIcons.	parent ifNotNil:		[aMenu addList: #(			('copy method to other side'			copyMethodToOther)			('move method to other side'			moveMethodToOther))].	aMenu addList: #(			('delete method from changeSet (d)'	forget)			-			('remove method from system (x)'	removeMessage)				-			('browse full (b)'					browseMethodFull)			('browse hierarchy (h)'				spawnHierarchy)			('browse method (O)'				openSingleMessageBrowser)			('browse protocol (p)'				browseFullProtocol)			-			('fileOut'							fileOutMessage)			-			('senders of... (n)'					browseSendersOfMessages)			('implementors of... (m)'				browseMessages)			('inheritance (i)'					methodHierarchy)			('versions (v)'						browseVersions)			-			('more...'							shiftedYellowButtonActivity)).	^ aMenu! !!ChangeSorter methodsFor: 'message list' stamp: 'jmv 2/16/2011 22:13'!shiftedMessageListMenu	"Fill aMenu with items appropriate for the message list; could be for a single or double changeSorter"	^ self shiftedMessageMenu! !!ChangeSorter methodsFor: 'message list' stamp: 'jmv 2/16/2011 22:12'!shiftedMessageMenu	"Arm the menu so that it holds items appropriate to the message-list while the shift key is down.  Answer the menu."	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: #(		-		('toggle diffing (D)'					toggleDiffing)		('implementors of sent messages'		browseAllMessages)		('change category...'				changeCategory)			-		('sample instance'					makeSampleInstance)		('inspect instances'					inspectInstances)		('inspect subinstances'				inspectSubInstances)		-		('change sets with this method'		findMethodInChangeSets)		('revert to previous version'			revertToPreviousVersion)		('revert & remove from changes'	revertAndForget)		-		('more...'							unshiftedYellowButtonActivity)).	^aMenu! !!ChangeSetBrowser methodsFor: 'initialization' stamp: 'jmv 2/16/2011 22:24'!openAsMorphIn: window rect: rect	"Add a set of changeSetBrowser views to the given top view offset by the given amount"	| aHeight |	aHeight _ 0.25.	self addDependent: window.		"so it will get changed: #relabel"	window addMorph: (PluggableListMorphByItem 				model: self				listGetter: #classList				indexGetter: #currentClassName				indexSetter: #currentClassName:				menuGetter: #classListMenu				keystrokeAction: #classListKey:from:)		frame: (((0.0@0 extent: 0.5 @ aHeight)			scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableListMorphByItem 				model: self				listGetter: #messageList				indexGetter: #currentSelector				indexSetter: #currentSelector:				menuGetter: #messageMenu				keystrokeAction: #messageListKey:from:)		frame: (((0.5@0 extent: 0.5 @ aHeight)			scaleBy: rect extent) translateBy: rect origin).	 self addLowerPanesTo: window		at: (((0@aHeight corner: 1@1) scaleBy: rect extent) translateBy: rect origin)		with: nil! !!ChangeSetBrowser methodsFor: 'menu' stamp: 'jmv 2/16/2011 22:08'!shiftedChangeSetMenu	"Set up aMenu to hold items relating to the change-set-list pane when the shift key is down"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'Change set (shifted)'.	aMenu addStayUpIcons.	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	aMenu addLine.	aMenu add: 'check for slips' action: #lookForSlips.	aMenu balloonTextForLastItem: 'Check this change set for halts and references to Transcript.'.	aMenu add: 'check for unsent messages' action: #checkForUnsentMessages.	aMenu balloonTextForLastItem:'Check this change set for messages that are not sent anywhere in the system'.	aMenu add: 'check for uncommented methods' action: #checkForUncommentedMethods.	aMenu balloonTextForLastItem:'Check this change set for methods that do not have comments'.	aMenu add: 'check for uncommented classes' action: #checkForUncommentedClasses.	aMenu balloonTextForLastItem:'Check for classes with code in this changeset which lack class comments'.	Utilities authorInitialsPerSe isEmptyOrNil ifFalse:		[aMenu add: 'check for other authors' action: #checkForAlienAuthorship.		aMenu balloonTextForLastItem:'Check this change set for methods whose current authoring stamp does not start with "', Utilities authorInitials, '"'.		aMenu add: 'check for any other authors' action: #checkForAnyAlienAuthorship.		aMenu balloonTextForLastItem:'Check this change set for methods any of whose previous authoring stamps do not start with "', Utilities authorInitials, '"'].	aMenu add: 'check for uncategorized methods' action: #checkForUnclassifiedMethods.	aMenu balloonTextForLastItem:'Check to see if any methods in the selected change set have not yet been assigned to a category.  If any are found, open a browser on them.'.	aMenu addLine.	aMenu add: 'inspect change set' action: #inspectChangeSet.	aMenu balloonTextForLastItem: 'Open an inspector on this change set. (There are some details in a change set which you don''t see in a change sorter.)'.	aMenu add: 'trim history' action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.  NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'clear this change set' action: #clearChangeSet.	aMenu balloonTextForLastItem: 'Reset this change set to a pristine state where it holds no information. CAUTION: this is destructive and irreversible!!'.	aMenu add: 'uninstall this change set' action: #uninstallChangeSet.	aMenu balloonTextForLastItem: 'Attempt to uninstall this change set. CAUTION: this may not work completely and is irreversible!!'.	aMenu addLine.	aMenu add: 'more...' action: #offerUnshiftedChangeSetMenu.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!Debugger methodsFor: 'initialize' stamp: 'jmv 2/16/2011 22:36'!openFullMorphicLabel: aLabelString	"Open a full morphic debugger with the given label"	| window aListMorph oldContextStackIndex |	oldContextStackIndex _ contextStackIndex.	self expandStack. "Sets contextStackIndex to zero."	window _ (SystemWindow labelled: aLabelString) model: self.	aListMorph _ PluggableListMorph		model: self 		listGetter: #contextStackList		indexGetter: #contextStackIndex		indexSetter: #toggleContextStackIndex:		menuGetter: #contextStackMenu		keystrokeAction: #contextStackKey:from:.	window addMorph: aListMorph		frame: (0@0 corner: 1@0.25).	self addLowerPanesTo: window at: (0@0.25 corner: 1@0.8) with: nil.	window addMorph: (		PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: self receiverInspector			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			menuGetter: #fieldListMenu			keystrokeAction: #inspectorKey:from:)		frame: (0@0.8 corner: 0.2@1).	window addMorph: (TextModelMorph 			textProvider: self receiverInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection)		frame: (0.2@0.8 corner: 0.5@1).	window addMorph: (		PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: self contextVariablesInspector 			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			menuGetter: #fieldListMenu			keystrokeAction: #inspectorKey:from:)		frame: (0.5@0.8 corner: 0.7@1).	window addMorph: (TextModelMorph 			textProvider: self contextVariablesInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection)		frame: (0.7@0.8 corner: 1@1).	window openInWorld.	self toggleContextStackIndex: oldContextStackIndex.	^ window ! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 2/16/2011 22:15'!contextStackMenu	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: {			{'fullStack (f)'.			#fullStack}.			{'restart (r)'.			#restart}.			{'proceed (p)'.			#proceed}.			{'step (t)'.				#doStep}.			{'step through (T)'.		#stepIntoBlock}.			{'send (e)'.				#send}.			{'where (w)'.			#where}.			{'peel to first like this'.		#peelToFirst}.			#-.			{'return entered value'.		#returnValue}.			#-.			{'toggle break on entry'.	#toggleBreakOnEntry}.			{'senders of... (n)'.			#browseSendersOfMessages}.			{'implementors of... (m)'.	#browseMessages}.			{'inheritance (i)'.		#methodHierarchy}.			#-.			{'versions (v)'.			#browseVersions}.			{'inst var refs...'.		#browseInstVarRefs}.			#-.			{'inst var defs...'.		#browseInstVarDefs}.			{'class var refs...'.		#browseClassVarRefs}.			{'class variables'.		#browseClassVariables}.			#-.			{'class refs (N)'.		#browseClassRefs}.			{'browse full (b)'.		#browseMethodFull}.			{'file out '.				#fileOutMessage}.			#-.			{'more...'.				#shiftedYellowButtonActivity}.		}.	^aMenu! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 2/16/2011 22:15'!messageListMenu	"The context-stack menu takes the place of the message-list menu in the debugger, so pass it on"	^ self contextStackMenu! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 2/16/2011 22:13'!shiftedContextStackMenu	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: {			{'browse class hierarchy'.				#classHierarchy}.			{'browse class'.						#browseClass}.			{'browse method (O)'.					#openSingleMessageBrowser}.			{'implementors of sent messages'.		#browseAllMessages}.			{'change sets with this method'.		#findMethodInChangeSets}.			#-.			{'inspect instances'.					#inspectInstances}.			{'inspect subinstances'.				#inspectSubInstances}.			#-.			{'revert to previous version'.			#revertToPreviousVersion}.			{'remove from current change set'.	#removeFromCurrentChanges}.			{'revert & remove from changes'.		#revertAndForget}.			#-.			{'more...'.								#unshiftedYellowButtonActivity}. 		}.	^aMenu! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 2/16/2011 22:13'!shiftedMessageListMenu	"The context-stack menu takes the place of the message-list menu in the debugger, so pass it on"	^ self shiftedContextStackMenu! !!FileContentsBrowser methodsFor: 'creation' stamp: 'jmv 2/16/2011 22:30'!openAsMorph	"Create a pluggable version of all the views for a Browser, including views and controllers."	| window aListExtent next mySingletonList |	window _ SystemWindow new model: self.	self packages size = 1		ifTrue: [			aListExtent _ 0.333333 @ 0.34.			self systemCategoryListIndex: 1.			mySingletonList _ PluggableListMorph 					model: self 					listGetter: #systemCategorySingleton					indexGetter: #indexIsOne 					indexSetter: #indexIsOne:					menuGetter: #packageListMenu					keystrokeAction: #packageListKey:from:.			mySingletonList hideScrollBarsIndefinitely.			window addMorph: mySingletonList frame: (0@0 extent: 1.0@0.06).			next := 0@0.06]		ifFalse: [			aListExtent _ 0.25 @ 0.4.			window addMorph: (PluggableListMorph 					model: self 					listGetter: #systemCategoryList					indexGetter: #systemCategoryListIndex 					indexSetter: #systemCategoryListIndex:					menuGetter: #packageListMenu					keystrokeAction: #packageListKey:from:)				frame: (0@0 extent: aListExtent).			next := aListExtent x @ 0].	self addClassAndSwitchesTo: window at: (next extent: aListExtent) plus: 0.	next := next + (aListExtent x @ 0).	window addMorph: (PluggableListMorph 			model: self 			listGetter: #messageCategoryList			indexGetter: #messageCategoryListIndex 			indexSetter: #messageCategoryListIndex:			menuGetter: #messageCategoryMenu)		frame: (next extent: aListExtent).	next := next + (aListExtent x @ 0).	window addMorph: (PluggableListMorph 			model: self 			listGetter: #messageList			indexGetter: #messageListIndex 			indexSetter: #messageListIndex:			menuGetter: #messageListMenu			keystrokeAction: #messageListKey:from:)		frame: (next extent: aListExtent).	self addLowerPanesTo: window at: (0@0.4 corner: 1@1) with: nil.	^ window! !!FileContentsBrowser methodsFor: 'menus' stamp: 'jmv 2/16/2011 22:11'!classListMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu 		labels:'definitioncommentbrowse full (b)class refs (N)fileInfileOutrename...removeremove existing'		lines: #(2 4 6 8)		selections: #(editClass editComment browseMethodFull browseClassRefs fileInClass fileOutClass renameClass removeClass removeUnmodifiedCategories).	^aMenu! !!FileContentsBrowser methodsFor: 'menus' stamp: 'jmv 2/16/2011 22:29'!messageCategoryMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu 		labels:'fileInfileOutreorganizeadd item...rename...removeremove existing'		lines: #(2 3 6)		selections: #(fileInMessageCategories fileOutMessageCategories editMessageCategories addCategory renameCategory removeMessageCategory removeUnmodifiedMethods).	^aMenu! !!FileContentsBrowser methodsFor: 'menus' stamp: 'jmv 2/16/2011 22:15'!messageListMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu 		labels:'fileInfileOutsenders (n)implementors (m)method inheritance (h)versions (v)remove'		lines: #(2 6)		selections: #(fileInMessage fileOutMessagebrowseSenders browseImplementors methodHierarchy browseVersionsremoveMessage).	^aMenu! !!FileContentsBrowser methodsFor: 'menus' stamp: 'jmv 2/16/2011 22:30'!packageListMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^ aMenu 		labels:'find class... (f)fileInfile into new changesetfileOutremoveremove existing'		lines: #(1 4 5)		selections: #(findClass fileInPackage fileIntoNewChangeSet fileOutPackage removePackage removeUnmodifiedClasses)! !!FileContentsBrowser methodsFor: 'menus' stamp: 'jmv 2/16/2011 22:11'!shiftedClassListMenu	"Answer the class list menu"	^ self classListMenu! !!FileList methodsFor: 'file list menu' stamp: 'jmv 2/17/2011 07:59'!fileListMenu	^fileName		ifNil: [ self noFileSelectedMenu ]		ifNotNil: [ self fileSelectedMenu ]! !!FileList methodsFor: 'file list menu' stamp: 'jmv 2/17/2011 07:56'!fileSelectedMenu	| firstItems secondItems thirdItems n1 n2 n3 services aMenu |	aMenu := MenuMorph new defaultTarget: self.	firstItems _ self itemsForFile: self fullName.	secondItems _ self itemsForAnyFile.	thirdItems _ self itemsForNoFile.	n1 _ firstItems size.	n2 _ n1 + secondItems size.	n3 _ n2 + thirdItems size.	services _ firstItems, secondItems, thirdItems, self serviceAllFileOptions.	services do: [ :svc | svc addDependent: self ].	^ aMenu 		addServices2: services 		for: self		extraLines: (Array with: n1 with: n2 with: n3)! !!FileList methodsFor: 'file list menu' stamp: 'jmv 2/16/2011 22:16'!fullFileListMenu	"Fill the menu with all possible items for the file list pane, regardless of selection."	| lastProvider aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'all possible file operations'.	aMenu addStayUpIcons.	lastProvider _ nil.	(self itemsForFile: 'a.*') do: [ :svc |		(lastProvider notNil and: [svc provider ~~ lastProvider])			ifTrue: [ aMenu addLine ].		svc addServiceFor: self toMenu: aMenu.		aMenu submorphs last setBalloonText: svc description.		lastProvider _ svc provider.		svc addDependent: self.	].	^aMenu! !!FileList methodsFor: 'file list menu' stamp: 'jmv 2/17/2011 07:56'!noFileSelectedMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^ aMenu		addServices: self itemsForNoFile 		for: self		extraLines: #()		! !!FileList methodsFor: 'file list menu' stamp: 'jmv 2/16/2011 22:23'!offerAllFileOptions	"Put up a menu offering all possible file options, whatever the suffix of the current selection may be.  Specially useful if you're wanting to keep the menu up"	self fullFileListMenu popUpInWorld! !!FileList methodsFor: 'to be transformed in registration' stamp: 'jmv 2/17/2011 08:01'!volumeMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^ aMenu addList: {			{'recent...' translated.		#recentDirs}.			#-.			{'delete directory...' translated.	#deleteDirectory}}.! !!FileList methodsFor: 'private' stamp: 'jmv 3/1/2010 11:24'!recentDirs	"Put up a menu and let the user select from the list of recently visited directories."	| dirName |	RecentDirs isEmpty ifTrue: [^self].	dirName := (SelectionMenu selections: RecentDirs) startUp.	dirName ifNil: [^self].	self directory: (FileDirectory on: dirName)! !!FileList class methodsFor: 'instance creation' stamp: 'jmv 2/17/2011 07:57'!addButtonsAndFileListPanesTo: window at: upperFraction plus: offset forFileList: aFileList 	| fileListMorph column buttonHeight fileListTop divider dividerDelta buttons |	fileListMorph _ PluggableListMorph				model: aFileList				listGetter: #fileList				indexGetter: #fileListIndex				indexSetter: #fileListIndex:				menuGetter: #fileListMenu.	fileListMorph enableDrag: true; enableDrop: false.	aFileList wantsOptionalButtons		ifTrue: [			buttons _ aFileList optionalButtonRow.			divider _ BorderedSubpaneDividerMorph forBottomEdge.			dividerDelta _ 0.			fileListMorph borderColor: Color transparent.			dividerDelta _ 3.			column _ AlignmentMorph proportional.			buttonHeight _ self defaultButtonPaneHeight.			column				addMorph: buttons				fullFrame: (LayoutFrame						fractions: (0 @ 0 corner: 1 @ 0)						offsets: (0 @ 0 corner: 0 @ buttonHeight)).			column				addMorph: divider				fullFrame: (LayoutFrame						fractions: (0 @ 0 corner: 1 @ 0)						offsets: (0 @ buttonHeight corner: 0 @ buttonHeight + dividerDelta)).			column				addMorph: fileListMorph				fullFrame: (LayoutFrame						fractions: (0 @ 0 corner: 1 @ 1)						offsets: (0 @ buttonHeight + dividerDelta corner: 0 @ 0)).			window				addMorph: column				fullFrame: (LayoutFrame						fractions: upperFraction						offsets: (0 @ offset corner: 0 @ 0)).			column borderWidth: 2]		ifFalse: [			fileListTop _ 0.			window				addMorph: fileListMorph				frame: (0.3 @ fileListTop corner: 1 @ 0.3)].! !!FileList class methodsFor: 'instance creation' stamp: 'jmv 2/17/2011 08:01'!addVolumesAndPatternPanesTo: window at: upperFraction plus: offset forFileList: aFileList 	| column patternHeight volumeListMorph patternMorph divider dividerDelta |	column _ AlignmentMorph proportional.	patternHeight _ 25.	volumeListMorph _ (PluggableListMorph				model: aFileList				listGetter: #volumeList				indexGetter: #volumeListIndex				indexSetter: #volumeListIndex:				menuGetter: #volumeMenu)				autoDeselect: false.	volumeListMorph enableDrag: false; enableDrop: true.	patternMorph _ TextModelMorph				textProvider: aFileList				textGetter: #pattern				textSetter: #pattern:.	patternMorph acceptOnCR: true.	patternMorph hideScrollBarsIndefinitely.	divider _ BorderedSubpaneDividerMorph new.	dividerDelta _ 0.	volumeListMorph borderColor: Color transparent.	patternMorph borderColor: Color transparent.	dividerDelta _ 3.	column		addMorph: (volumeListMorph autoDeselect: false)		fullFrame: (LayoutFrame				fractions: (0 @ 0 corner: 1 @ 1)				offsets: (0 @ 0 corner: 0 @ patternHeight negated - dividerDelta)).	column		addMorph: divider		fullFrame: (LayoutFrame				fractions: (0 @ 1 corner: 1 @ 1)				offsets: (0 @ patternHeight negated - dividerDelta corner: 0 @ patternHeight negated)).	column		addMorph: patternMorph		fullFrame: (LayoutFrame				fractions: (0 @ 1 corner: 1 @ 1)				offsets: (0 @ patternHeight negated corner: 0 @ 0)).	window		addMorph: column		fullFrame: (LayoutFrame				fractions: upperFraction				offsets: (0 @ offset corner: 0 @ 0)).	column borderWidth: 2! !!FileList2 methodsFor: 'user interface' stamp: 'jmv 2/17/2011 08:01'!morphicDirectoryTreePaneFiltered: aSymbol	^(SimpleHierarchicalListMorph 		model: self		listGetter: aSymbol		indexGetter: #currentDirectorySelected		indexSetter: #setSelectedDirectoryTo:		menuGetter: #volumeMenu		keystrokeAction: nil)			autoDeselect: false;			enableDrag: false;			enableDrop: true;			yourself		! !!FileList2 methodsFor: 'user interface' stamp: 'jmv 2/17/2011 07:57'!morphicFileListPane	^(PluggableListMorph 		model: self 		listGetter: #fileList 		indexGetter: #fileListIndex		indexSetter: #fileListIndex: 		menuGetter: #fileListMenu)			enableDrag: true;			enableDrop: false;			yourself! !!HierarchyBrowser methodsFor: 'menu messages' stamp: 'jmv 2/16/2011 22:31'!systemCatSingletonMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^ aMenu labels:'find class... (f)browsefileOutupdaterename...remove' 	lines: #(1 3)	selections:		#(findClass buildSystemCategoryBrowser		fileOutSystemCategory updateSystemCategories		renameSystemCategory removeSystemCategory )! !!Inspector methodsFor: 'menu commands' stamp: 'jmv 2/16/2011 22:35'!fieldListMenu	"Arm the supplied menu with items for the field-list of the receiver"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addStayUpIcons.	aMenu addList: #(		('inspect (i)'						inspectSelection)		('explore (I)'					exploreSelection)).	self addCollectionItemsTo: aMenu.	aMenu addList: #(		-		('method refs to this inst var'		referencesToSelection)		('methods storing into this inst var'	defsOfSelection)		('objects pointing to this value'		objectReferencesToSelection)		('chase pointers'						chasePointers)		('explore pointers'					explorePointers)		-		('browse full (b)'						browseMethodFull)		('browse class'						browseClass)		('browse hierarchy (h)'				classHierarchy)		('browse protocol (p)'				browseFullProtocol)		-		('inst var refs...'						browseInstVarRefs)		('inst var defs...'						browseInstVarDefs)		('class var refs...'					classVarRefs)		('class variables'						browseClassVariables)		('class refs (N)'						browseClassRefs)		-		('copy name (c)'						copyName)				('basic inspect'						inspectBasic)).	^ aMenu! !!DictionaryInspector methodsFor: 'menu' stamp: 'jmv 2/16/2011 22:35'!fieldListMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^ aMenu labels:'inspectcopy namereferencesobjects pointing to this valuesenders of this keyrefresh viewadd keyrename keyremovebasic inspect'	lines: #(6 9)	selections: #(inspectSelection copyName selectionReferences objectReferencesToSelection sendersOfSelectedKey refreshView addEntry renameEntry removeSelection inspectBasic)! !!Inspector class methodsFor: 'instance creation' stamp: 'jmv 2/16/2011 22:36'!inMorphicWindowOn: anObject label: aLabel	" Inspector openAsMorphOn: SystemOrganization "	| window inspector |	inspector _ self inspect: anObject.	window _ (SystemWindow labelled: aLabel) model: inspector.	window		addMorph: (PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: inspector 			listGetter: #fieldList			indexGetter: #selectionIndex			indexSetter: #toggleIndex:			menuGetter: #fieldListMenu			keystrokeAction: #inspectorKey:from:)		frame: (0@0 corner: self horizontalDividerProportion @ self verticalDividerProportion).	window		addMorph: (TextModelMorph			textProvider: inspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection)		frame: (self horizontalDividerProportion @0 corner: 1@self verticalDividerProportion).	window		addMorph: ((TextModelMorph textProvider: inspector)			askBeforeDiscardingEdits: false)		frame: (0@self verticalDividerProportion corner: 1@1).	window setUpdatablePanesFrom: #(fieldList).	^ window! !!MessageSet methodsFor: 'private' stamp: 'jmv 2/16/2011 22:22'!buildMorphicMessageList	"Build my message-list object in morphic"	| aListMorph |	aListMorph := PluggableListMorph new.	aListMorph 		model: self		listGetter: #messageList		indexGetter: #messageListIndex		indexSetter: #messageListIndex:		menuGetter: #messageListMenu		keystrokeAction: #messageListKey:from:.	aListMorph enableDragNDrop: false.	^aListMorph! !!MessageNames methodsFor: 'selector list' stamp: 'jmv 2/17/2011 09:38'!selectorListMenu	"Answer the menu associated with the selectorList"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: #(		('senders (n)'					browseSenders		'browse senders of the chosen selector')		('copy selector to clipboard'	copyName			'copy the chosen selector to the clipboard, for subsequent pasting elsewhere')	).	^ aMenu! !!MessageNames methodsFor: 'initialization' stamp: 'jmv 2/17/2011 09:38'!inMorphicWindowWithInitialSearchString: initialString	"Answer a morphic window with the given initial search string, nil if none""MessageNames openMessageNames"	| window selectorListView firstDivider secondDivider horizDivider typeInPane searchButton plugTextMor |	window _ (SystemWindow labelled: 'Message Names') model: self.	firstDivider _ 0.07.	secondDivider _ 0.5.	horizDivider _ 0.5.	typeInPane _ AlignmentMorph proportional height: 14.	plugTextMor _ TextModelMorph 		textProvider: self		textGetter: #searchString 		textSetter: #searchString:.	plugTextMor setProperty: #alwaysAccept toValue: true.	plugTextMor askBeforeDiscardingEdits: false.	plugTextMor acceptOnCR: true.	plugTextMor setTextColor: Color brown.	plugTextMor hideScrollBarsIndefinitely.	plugTextMor textMorph		on: #mouseEnter send: #selectAll to: plugTextMor textMorph.	searchButton _ PluggableButtonMorph new 		model: self;		label: 'Search';		action: #doSearchFrom:;		arguments: {plugTextMor}.	searchButton setBalloonText: 'Type some letters into the pane at right, and then press this Search button (or hit RETURN) and all method selectors that match what you typed will appear in the list pane below.  Click on any one of them, and all the implementors of that selector will be shown in the right-hand pane, and you can view and edit their code without leaving this tool.'.	typeInPane addInRow: { searchButton. plugTextMor. } widthProportionalTo: #(1 3).	initialString isEmptyOrNil ifFalse:		[plugTextMor changeText: initialString].	window addMorph: typeInPane frame: (0@0 corner: horizDivider @ firstDivider).	selectorListView _ PluggableListMorph 		model: self		listGetter: #selectorList		indexGetter: #selectorListIndex		indexSetter: #selectorListIndex:		menuGetter: #selectorListMenu		keystrokeAction: #selectorListKey:from:.	window addMorph: selectorListView frame: (0 @ firstDivider corner: horizDivider @ secondDivider).	window addMorph: self buildMorphicMessageList frame: (horizDivider @ 0 corner: 1@ secondDivider).	self 		addLowerPanesTo: window 		at: (0 @ secondDivider corner: 1@1) 		with: nil.	initialString isEmptyOrNil ifFalse: [		self searchString: initialString ].	^ window! !!PackagePaneBrowser methodsFor: 'initialize-release' stamp: 'jmv 2/17/2011 09:41'!openAsMorphEditing: editString 	"Create a pluggable version of all the views for a Browser, including 	views and controllers."	"PackagePaneBrowser openBrowser"	| listHeight window |	listHeight _ 0.4.	window _ SystemWindow new model: self.	window		addMorph: (PluggableListMorph				model: self				listGetter: #packageList				indexGetter: #packageListIndex				indexSetter: #packageListIndex:				menuGetter: #packageMenu				keystrokeAction: #packageListKey:from:)		frame: (0 @ 0 extent: 0.15 @ listHeight).	window		addMorph: self buildMorphicSystemCatList		frame: (0.15 @ 0 extent: 0.2 @ listHeight).	self		addClassAndSwitchesTo: window		at: (0.35 @ 0 extent: 0.25 @ listHeight)		plus: 0.	window		addMorph: self buildMorphicMessageCatList		frame: (0.6 @ 0 extent: 0.15 @ listHeight).	window		addMorph: self buildMorphicMessageList		frame: (0.75 @ 0 extent: 0.25 @ listHeight).	self		addLowerPanesTo: window		at: (0 @ listHeight corner: 1 @ 1)		with: editString.	window setUpdatablePanesFrom: #(#packageList #systemCategoryList #classList #messageCategoryList #messageList ).	^ window! !!PackagePaneBrowser methodsFor: 'package list' stamp: 'jmv 2/17/2011 09:41'!packageMenu	"Answer a Menu of operations on class packages to be 	displayed when the operate menu button is pressed."	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^aMenu			labels: 'find class...\recent classes...\reorganize\update' withCRs			lines: #(2)			selections: #(#findClass #recent #editSystemCategories #updatePackages)! !!RecentMessageSet methodsFor: 'message functions' stamp: 'jmv 2/16/2011 22:15'!messageListMenu	"Answer the message-list menu"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList:#(			('what to show...'						offerWhatToShowMenu)			-			('browse full (b)' 						browseMethodFull)			('browse hierarchy (h)'					classHierarchy)			('browse method (O)'					openSingleMessageBrowser)			('browse protocol (p)'					browseFullProtocol)			-			('fileOut (o)'							fileOutMessage)			('copy selector (c)'						copySelector)			-			('senders of... (n)'						browseSendersOfMessages)			('implementors of... (m)'					browseMessages)			('inheritance (i)'						methodHierarchy)			('versions (v)'							browseVersions)			-			('inst var refs...'						browseInstVarRefs)			('inst var defs...'						browseInstVarDefs)			('class var refs...'						browseClassVarRefs)			('class variables'						browseClassVariables)			('class refs (N)'							browseClassRefs)			-			('remove method (x)'					removeMessage)			('remove from RecentSubmissions'		removeFromRecentSubmissions)			-			('more...'								shiftedYellowButtonActivity)).	^ aMenu! !!SetInspector methodsFor: 'menu' stamp: 'jmv 2/16/2011 22:35'!fieldListMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^ aMenu labels:'inspectcopy nameobjects pointing to this valuerefresh viewremovebasic inspect'	lines: #( 5 8)	selections: #(inspectSelection copyName objectReferencesToSelection update removeSelection inspectBasic)! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 2/16/2011 21:57'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu := MenuMorph new defaultTarget: self.	menu commandKeyHandler: self.	self colorForDebugging: menu.	menu addStayUpIcons.	self fillIn: menu		from: { 				{ 					'restore display (r)'.					{ 						World.						#restoreMorphicDisplay}.					'repaint the screen -- useful for removing unwanted display artifacts, lingering cursors, etc.'}.				nil}.	Preferences simpleMenus 		ifFalse: 			[self fillIn: menu				from: { 						{ 							'open...'.							{ 								self.								#openWindow}}.						{ 							'windows...'.							{ 								self.								#windowsDo}}.						{ 							'changes...'.							{ 								self.								#changesDo}}}].	self fillIn: menu		from: { 				{ 					'help...'.					{ 						self.						#helpDo}.					'puts up a menu of useful items for updating the system, determining what version you are running, and much else'}.				{ 					'appearance...'.					{ 						self.						#appearanceDo}.					'put up a menu offering many controls over appearance.'}}.	Preferences simpleMenus 		ifFalse: 			[self fillIn: menu				from: { 						{ 							'do...'.							{ 								Utilities.								#offerCommonRequestsInMorphic}.							'put up an editible list of convenient expressions, and evaluate the one selected.'}}].	self fillIn: menu		from: { 				nil.				{ 					'new morph...'.					{ 						self.						#newMorph}.					'Offers a variety of ways to create new objects'}.				}.	Preferences simpleMenus 		ifFalse: 			[self fillIn: menu				from: { 						{ 							'debug...'.							{ 								self.								#debugDo}.							'a menu of debugging items'}}].	self fillIn: menu		from: { 				nil.				{ 					'save'.					{ 						Smalltalk .						#saveSession}.					'save the current version of the image on disk'}.				{ 					'save as...'.					{ 						Smalltalk .						#saveAs}.					'save the current version of the image on disk under a new name.'}.				{ 					'save as new version'.					{ 						Smalltalk .						#saveAsNewVersion}.					'give the current image a new version-stamped name and save it under that name on disk.'}.				{ 					'save and quit'.					{ 						self.						#saveAndQuit}.					'save the current image on disk, and quit out of Squeak.'}.				{ 					'quit'.					{ 						self.						#quitSession}.					'quit out of Squeak.'}}.	^menu! !!VersionsBrowser methodsFor: 'menu' stamp: 'jmv 2/16/2011 22:33'!versionsMenu	"Fill aMenu with menu items appropriate to the receiver"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'Versions' translated.	aMenu addStayUpIcons.	listIndex > 0 ifTrue:[		(list size > 1 ) ifTrue: [ aMenu addTranslatedList: #(			('compare to current'		compareToCurrentVersion		'compare selected version to the current version')			('compare to version...'	compareToOtherVersion		'compare selected version to another selected version'))].		"Note: Revert to selected should be visible for lists of length one for having the ability to revert to an accidentally deleted method"		 aMenu addTranslatedList: #(			('revert to selected version'	fileInSelections					'resubmit the selected version, so that it becomes the current version') )].	aMenu addTranslatedList: #(		('remove from changes'		removeMethodFromChanges	'remove this method from the current change set, if present')		('edit current method (O)'	openSingleMessageBrowser		'open a single-message browser on the current version of this method')				('find original change set'	findOriginalChangeSet			'locate the changeset which originally contained this version')		-		('toggle diffing (D)'			toggleDiffing					'toggle whether or not diffs should be shown here')		('update list'				reformulateList					'reformulate the list of versions, in case it somehow got out of synch with reality')		-		('senders (n)'				browseSenders					'browse all senders of this selector')		('implementors (m)'			browseImplementors			'browse all implementors of this selector')		-		('help...'					offerVersionsHelp				'provide an explanation of the use of this tool')).												^aMenu! !!ClassCommentVersionsBrowser methodsFor: 'menu' stamp: 'jmv 2/16/2011 22:33'!versionsMenu	"Fill aMenu with menu items appropriate to the receiver"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'versions'.	aMenu addStayUpIcons.	^ aMenu addList: #(		('compare to current'		compareToCurrentVersion		'compare selected version to the current version')		('revert to selected version'	fileInSelections					'resubmit the selected version, so that it becomes the current version')		('remove from changes'		removeMethodFromChanges		'remove this method from the current change set, if present')		('edit current method (O)'	openSingleMessageBrowser		'open a single-message browser on the current version of this method')				-		('toggle diffing (D)'			toggleDiffing					'toggle whether or not diffs should be shown here')		('update list'				reformulateList					'reformulate the list of versions, in case it somehow got out of synch with reality')		-		('help...'					offerVersionsHelp				'provide an explanation of the use of this tool'))! !ClassCommentVersionsBrowser removeSelector: #versionsMenu:!VersionsBrowser removeSelector: #versionsMenu:!Utilities class removeSelector: #offerCommonRequests!SetInspector removeSelector: #fieldListMenu:!RecentMessageSet removeSelector: #messageListMenu:!PackagePaneBrowser removeSelector: #packageMenu:!MessageNames removeSelector: #selectorListMenu:!DictionaryInspector removeSelector: #fieldListMenu:!Inspector removeSelector: #fieldListMenu:!HierarchyBrowser removeSelector: #systemCatSingletonMenu:!FileList removeSelector: #fileListMenu:!FileList removeSelector: #fileSelectedMenu:!FileList removeSelector: #fullFileListMenu:!FileList removeSelector: #noFileSelectedMenu:!FileList removeSelector: #volumeMenu:!FileContentsBrowser removeSelector: #classListMenu:!FileContentsBrowser removeSelector: #messageCategoryMenu:!FileContentsBrowser removeSelector: #messageListMenu:!FileContentsBrowser removeSelector: #packageListMenu:!FileContentsBrowser removeSelector: #shiftedClassListMenu:!Debugger removeSelector: #contextStackMenu:!Debugger removeSelector: #debugProceedMenu:!Debugger removeSelector: #doNothing:!Debugger removeSelector: #messageListMenu:!Debugger removeSelector: #shiftedContextStackMenu:!Debugger removeSelector: #shiftedMessageListMenu:!ChangeSetBrowser removeSelector: #shiftedChangeSetMenu:!ChangeSorter removeSelector: #changeSetMenu:!ChangeSorter removeSelector: #classListMenu:!ChangeSorter removeSelector: #messageListMenu:!ChangeSorter removeSelector: #messageMenu:!ChangeSorter removeSelector: #shiftedChangeSetMenu:!ChangeSorter removeSelector: #shiftedClassListMenu:!ChangeSorter removeSelector: #shiftedMessageListMenu:!ChangeSorter removeSelector: #shiftedMessageMenu:!ChangeList removeSelector: #changeListMenu:!Browser removeSelector: #classListMenu:!Browser removeSelector: #messageCategoryMenu:!Browser removeSelector: #messageListMenu:!Browser removeSelector: #shiftedClassListMenu:!Browser removeSelector: #shiftedMessageListMenu:!Browser removeSelector: #systemCatSingletonMenu:!Browser removeSelector: #systemCategoryMenu:!TextProvider removeSelector: #offerMenuFrom:!TestRunner removeSelector: #addModelItemsToWindowMenu:!TestRunner removeSelector: #listMenu:!SyntaxError removeSelector: #listMenu:!ProcessBrowser removeSelector: #processListMenu:!ProcessBrowser removeSelector: #stackListMenu:!PointerFinder removeSelector: #getMenu:!ObjectExplorer removeSelector: #genericMenu:!AbstractHierarchicalList removeSelector: #genericMenu:!