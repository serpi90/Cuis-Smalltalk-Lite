'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 10 June 2011 at 5:03:33 pm'!!classDefinition: #BareTextMorph category: #'Morphic-Text Support'!Morph subclass: #BareTextMorph	instanceVariableNames: 'model wrapFlag paragraph editor pauseBlinking editView acceptOnCR '	classVariableNames: 'AutoCompletter '	poolDictionaries: ''	category: 'Morphic-Text Support'!!BareTextMorph methodsFor: 'accessing' stamp: 'jmv 6/10/2011 14:30'!model	^ model! !!BareTextMorph methodsFor: 'event handling' stamp: 'jmv 6/10/2011 17:02'!keyStroke: evt	(self focusKeyboardFor: evt)		ifTrue: [ ^ self ].			"Maybe disable? Precludes the use of up and down arrows with control,	that are standard keystrokes in Windows to control the cursor.	Problem: At least Mac and Win VM generate ctrl-up and ctrl-down for	mouse wheel events.	I guess most people would prefer the mouse wheel to work properly..."	(editView scrollByKeyboard: evt)		ifTrue: [ ^self ].	AutoCompletter ifNotNil: [		AutoCompletter			codeCompletionAround: [ self processKeyStroke: evt ]			textMorph: self			keyStroke: evt.		^self ].	self processKeyStroke: evt! !!BareTextMorph methodsFor: 'event handling' stamp: 'jmv 6/10/2011 16:56'!processKeyStroke: evt	| action |	(acceptOnCR and: [evt keyCharacter = Character cr])		ifTrue: [^ self editor accept].	self pauseBlinking.	evt keyValue = 13 ifTrue: ["CR - check for special action"		action _ self crAction.		action ifNotNil: [			^action value]].	self handleInteraction: [ editor processKeyStroke: evt ].	self updateFromParagraph.	self eventHandler ifNotNil: [		"like'super keyStroke: evt'"		self eventHandler keyStroke: evt fromMorph: self].	editView scrollSelectionIntoView! !!ClassDescription methodsFor: 'instance variables' stamp: 'jmv 6/10/2011 11:04'!browseClassVarRefs 	"Put up a menu offering all class variable names; if the user chooses one, open up a message-list browser on all methods that refer to the selected class variable"	| lines labelStream allVars index owningClasses |	lines _ OrderedCollection new.	allVars _ OrderedCollection new.	owningClasses _ OrderedCollection new.	labelStream _ WriteStream on: (String new: 200).	self withAllSuperclasses reverseDo: [ :class | | vars |		vars _ class classVarNames asArray sort.		vars do: [ :var |			labelStream nextPutAll: var; cr.			allVars add: var.			owningClasses add: class].		vars isEmpty ifFalse: [ lines add: allVars size ]].	labelStream contents isEmpty ifTrue: [^Beeper beep]. "handle nil superclass better"	labelStream skip: -1 "cut last CR".	index _ (PopUpMenu labels: labelStream contents lines: lines) startUp.	index = 0 ifTrue: [^ self].	Smalltalk browseAllCallsOn:		((owningClasses at: index) classPool associationAt: (allVars at: index))! !!BareTextMorph class methodsFor: 'class initialization' stamp: 'jmv 6/10/2011 17:03'!autoCompletter: aClass	AutoCompletter _ aClass! !!FormCanvas methodsFor: 'drawing-rectangles' stamp: 'jmv 6/10/2011 11:09'!frameRectangle: r color: aColor borderWidth: bw borderStyleSymbol: aSymbol	"	Display getCanvas fillRectangle: (10@10 extent: 300@200) colorOrInfiniteForm: Color white.	Display getCanvas		frameRectangle: (10@10 extent: 300@200)		color: Color green		borderWidth: 2		borderStyleSymbol: #raised.	"	aSymbol == #raised ifTrue: [		^ self			frameRectangle: r			borderWidth: bw			topLeftColor: aColor quiteWhiter			bottomRightColor: aColor quiteBlacker ].	aSymbol == #inset ifTrue: [		^ self			frameRectangle: r			borderWidth: bw			topLeftColor: aColor quiteBlacker			bottomRightColor: aColor quiteWhiter ].		"Unrecognized border style. Draw some border..."	self frameRectangle: r borderWidth: bw color: aColor! !!SmalltalkEditor methodsFor: 'accessing-selection' stamp: 'jmv 6/10/2011 10:54'!selection	"Answer the text that is currently selected.	Redefined for Smalltalk code: if there's no regular selection, and all the selectionBlocks contain the same string,	answer that string."	| t regularSelection allPartsEqual samePart |	t _ self text.	regularSelection _ ( t copyFrom: self startIndex to: self stopIndex - 1 ).	allPartsEqual _ true.	samePart _ nil.	^Text streamContents: [ :strm |		"Multiple selection"		selectionStartBlocks with: selectionStopBlocks do: [ :startBlock :stopBlock | | toAppend |			toAppend _ t copyFrom: startBlock stringIndex to: stopBlock stringIndex - 1.			toAppend size > 0 ifTrue: [				samePart					ifNil: [ samePart _ toAppend ]					ifNotNil: [						allPartsEqual _ allPartsEqual and: [ samePart = toAppend ]].				strm nextPutAll: toAppend.				strm withAttributes: (toAppend attributesAt: toAppend size) do: [ strm cr ]].			].		(allPartsEqual and: [ regularSelection isEmpty ]) ifTrue: [			^samePart ifNil: ['']].		"Regular selection"		strm nextPutAll: regularSelection ]! !!BareTextMorph class reorganize!('new-morph participation' includeInNewMorphMenu)('class initialization' autoCompletter:)!!classDefinition: #BareTextMorph category: #'Morphic-Text Support'!Morph subclass: #BareTextMorph	instanceVariableNames: 'model wrapFlag paragraph editor pauseBlinking editView acceptOnCR'	classVariableNames: 'AutoCompletter'	poolDictionaries: ''	category: 'Morphic-Text Support'!