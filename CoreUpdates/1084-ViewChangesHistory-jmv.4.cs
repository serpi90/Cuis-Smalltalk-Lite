'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 22 September 2011 at 3:01:33 pm'!!classDefinition: #TextEditorTest category: #'System-Tests'!TestCase subclass: #TextEditorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'System-Tests'!!AttributesReplaceCommand methodsFor: 'printing' stamp: 'jmv 9/22/2011 11:31'!printOn: aStream	aStream		nextPutAll: 'replaced attributes'! !!SelectionMenu class methodsFor: 'instance creation' stamp: 'jmv 9/22/2011 11:47'!selections: aList	"Answer an instance of me whose labels and selections are identical.  "	"	(SelectionMenu selections: { '<on>just' . '<on>a' . '<off>test' }) startUp print	"	^ self selections: aList lines: nil! !!TextEditor methodsFor: 'undo & redo' stamp: 'jmv 9/22/2011 14:04'!offerUndoHistory	| index labels current |	current _ model undoRedoCommandsPosition.	labels _ model undoRedoCommands collectWithIndex: [ :each :i | 		(i = current ifTrue: [ '<on>' ] ifFalse: [ '<off>' ]), each printString ].	labels isEmpty ifFalse: [		index _ (PopUpMenu			labelArray: labels			lines: #()) startUp.		index = current ifTrue: [ ^self ].		index < current			ifTrue: [ current - index timesRepeat: [ self undo ]]			ifFalse: [ index - current timesRepeat: [ self redo ]]]! !!TextEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 9/22/2011 11:33'!initializeMenu	"Initialize the mouseButton2 (right button) pop-up menu and corresponding messages."	"TextEditor initialize"	menu _ SelectionMenu fromArray: {		{'Find...(f)'.						#find}.		{'Find Again (g)'.				#findAgain}.		{'Use Selection for Find (h)'.	#setSearchString}.		#-.		{'Undo - multiple (z)'.			#undo}.		{'Redo - multiple (Z)'.			#redo}.		{'Undo / Redo history'.			#offerUndoHistory}.		#-.		{'Copy (c)'.						#copySelection}.		{'Cut (x)'.						#cut}.		{'Paste (v)'.						#paste}.		{'Paste...'.						#pasteRecent}.		#-.		{'Set Font... (k)'.					#offerFontMenu}.		{'Set Alignment...'.				#chooseAlignment}.	}! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 9/22/2011 11:36'!initializeMenu	"Initialize the mouseButton2 (right button) pop-up menu and corresponding messages."	"SmalltalkEditor initialize"	menu _ SelectionMenu fromArray: {		{'Find...(f)'.						#find}.		{'Find Again (g)'.				#findAgain}.		{'Use Selection for Find (h)'.	#setSearchString}.		#-.		{'Undo - multiple (z)'.			#undo}.		{'Redo - multiple (Z)'.			#redo}.		{'Undo / Redo history'.			#offerUndoHistory}.		#-.		{'Copy (c)'.						#copySelection}.		{'Cut (x)'.						#cut}.		{'Paste (v)'.						#paste}.		{'Paste...'.						#pasteRecent}.		#-.		{'Do it (d)'.						#doIt}.		{'Print it (p)'.					#printIt}.		{'Inspect it (i)'.					#inspectIt}.		{'Explore it (I)'.					#exploreIt}.		{'Debug it'.						#debugIt}.		#-.		{'Explain'.						#explain}.		{'Browse it (b)'.					#browseIt}.		{'Senders of it (n)'.				#sendersOfIt}.		{'Implementors of it (m)'.		#implementorsOfIt}.		{'References to it (N)'.			#referencesToIt}.		#-.		{'Accept (s)'.					#accept}.		{'Cancel (l)'.					#cancel}.		#-.		{'Method Strings with it (E)'.	#methodStringsContainingit}.		{'Method Source with it'.		#methodSourceContainingIt}.		{'Class Comments with it'.		#classCommentsContainingIt}.	}! !!TextEditorTest methodsFor: 'testing' stamp: 'jmv 9/22/2011 14:52'!testUndoRedo	"	TextEditorTest new testUndoRedo	"	| editor model paragraph m text1 text0 text2 |	text0 _ ''.	model _ TextModel withText: text0 copy.	editor _ TextEditor new.	m _ BareTextMorph new.	m setEditView: TextModelMorph new.	editor morph: m.	editor instVarNamed: 'emphasisHere' put: Array new.	editor model: model.	paragraph _ Paragraph new.	paragraph setModel: model container: (10@10 extent: 300@300).	editor changeParagraph: paragraph.	paragraph composeAll.	text1 _ 'some words' asText.	editor addString: text1.	self assert: model actualContents = text1.	editor undo.	self assert: model actualContents = text0.	editor redo.	self assert: model actualContents = text1.	text2 _ ' additional inserted stuff' asText.	editor addString: text2.	self assert: model actualContents = (text1, text2).	editor undo.	self assert: model actualContents = text1.	editor undo.	self assert: model actualContents = text0.	editor redo.	self assert: model actualContents = text1.	editor redo.	self assert: model actualContents = (text1, text2).! !!TextModel methodsFor: 'accessing' stamp: 'jmv 9/22/2011 11:48'!undoRedoCommands	^undoRedoCommands contents! !!TextModel methodsFor: 'accessing' stamp: 'jmv 9/22/2011 11:49'!undoRedoCommandsPosition	^undoRedoCommands position! !!TextModel methodsFor: 'undoable commands' stamp: 'jmv 9/22/2011 15:00'!logUndoAndAddAttribute: aTextAttribute from: requestedStart to: requestedStop	"As requested."	| command |	command _ actualContents commandForAddAttribute: aTextAttribute from: requestedStart to: requestedStop.	undoRedoCommands		nextPut: command;		truncateAtPosition.	"To disable redo of previous commands, now invalidated."	command doOn: self! !!TextModel methodsFor: 'undoable commands' stamp: 'jmv 9/22/2011 15:00'!logUndoAndRemoveAttribute: aTextAttribute from: requestedStart to: requestedStop	"As requested."	| command |	command _ actualContents commandForRemoveAttributes: { aTextAttribute } from: requestedStart to: requestedStop.	undoRedoCommands		nextPut: command;		truncateAtPosition.	"To disable redo of previous commands, now invalidated."	command doOn: self! !!TextModel methodsFor: 'undoable commands' stamp: 'jmv 9/22/2011 15:00'!logUndoAndReplaceFrom: start to: stop with: replacement	"As requested."	| command |	command _ actualContents commandForReplaceFrom: start to: stop with: replacement.	undoRedoCommands		nextPut: command;		truncateAtPosition.	"To disable redo of previous commands, now invalidated."	command doOn: self! !!TextModelMorph methodsFor: 'menu commands' stamp: 'jmv 9/22/2011 11:37'!offerUndoHistory	self handleEdit: [ self editor offerUndoHistory ]! !!TextReplaceCommand methodsFor: 'printing' stamp: 'jmv 9/22/2011 11:30'!printOn: aStream	old isEmpty ifTrue: [		^new size = 1			ifTrue: [				aStream nextPutAll: 'typed: '; nextPutAll: new asString surroundedBySingleQuotes]			ifFalse: [				aStream nextPutAll: 'inserted: '; nextPutAll: new asString surroundedBySingleQuotes ]].	new isEmpty ifTrue: [		^aStream nextPutAll: 'deleted: '; nextPutAll: old asString surroundedBySingleQuotes ].	aStream		nextPutAll: 'replaced: ';		nextPutAll: old asString surroundedBySingleQuotes;		nextPutAll: ' with: ';		nextPutAll: new asString surroundedBySingleQuotes ! !!Theme methodsFor: 'menus' stamp: 'jmv 9/22/2011 11:38'!miscellaneousIcons	"Everything else."	^ {		#('restore display (r)' 'set display depth...' 'move windows onscreen' 'Utilities saveDisplay.') -> #displayIcon.		#('changes...' 'dual change sorter' 'change sets with this method' 'find a change sorter' 'recent changes in file' 'Undo / Redo history') -> #changesIcon.		#('print PS to file...' ) -> #printIcon.		#('find again (g)' 'full stack (k)') -> #systemIcon.		#('print it (p)' 'check change set for slips') -> #printIcon.		#('accept (s)' 'make changes go to me (m)') -> #acceptIcon.		#('cancel (l)' ) -> #cancelIcon.		#('debug...' 'debug it' 'toggle break on entry') -> #debugIcon.		#('close' 'close all debuggers' 'close top window') -> #closeIcon.		#('collapse' 'hide taskbar' 'collapse all windows') -> #collapseIcon.		#('expand / contract' 'show taskbar' 'expand all windows') -> #expandIcon.		#('menu') -> #windowMenuIcon.		#('browse all' 'browser' 'browse it (b)' 'MessageTally UI and browse' 'browse recent submissions' 'browse full (b)' 'find changed browsers...' 'browse (b)' 'browse my changes') -> #editFindReplaceIcon.		#('workspace' 'workspace with contents') -> #terminalIcon.		#('text editor' 'edit this list' 'edit postscript...' 'add postscript...') -> #textEditorIcon.		#('file list' 'find a fileList') -> #systemFileManagerIcon.		#('transcript' 'find a transcript' 'Transcript clear.' 'log to transcript') -> #printerIcon.		#('process browser' 'vm statistics' 'MessageTally all Processes') -> #systemMonitorIcon.		#('emergency evaluator' 'conflicts with other change sets' 'check for slips' 'conflicts with change set opposite' 'conflicts with category opposite') -> #emblemImportantIcon.		#('simple change sorter') -> #halfRefreshIcon.		#('SUnit Test Runner') -> #weatherFewCloudsIcon.		#('system fonts...' 'set font... (k)') -> #preferencesDesktopFontIcon.		#('full screen on') -> #viewFullscreenIcon.		#('full screen off') -> #exitFullscreenIcon.		#('set desktop color...') -> #wallpaperIcon.		#('preferences...' 'what to show...') -> #preferencesIcon.		#('command-key help') -> #keyboardShortcutsIcon.		#('world menu help') -> #globeIcon.		#('useful expressions' 'class comments with it' 'check for uncommented methods' 'check for uncommented classes') -> #chatIcon.		#('set author initials...' 'check for other authors' 'check for any other authors') -> #usersIcon.		#('space left') -> #removableMediaIcon.		#('start drawing all again' 'window color...') -> #graphicsIcon.		#('start stepping again') -> #mediaPlaybackStartIcon.		#('file out current change set' 'fileOut' 'file out (o)') -> #fileOutIcon.		#('recently logged changes...' 'versions (v)' 'recent classes... (r)' 'trim history' 'profile messages (m)') -> #clockIcon.		#('senders of it (n)' 'senders of... (n)' 'local senders of...' 'senders (n)') -> #mailForwardIcon.		#('implementors of it (m)' 'implementors of... (m)' 'implementors of sent messages') -> #developmentIcon.		#('references to it (N)') -> #addressBookIcon.		#('class var refs...' 'class refs (N)' 'class variables' 'class vars' 'local implementors of...' 'subclass template') -> #classIcon.		#('inst var refs...' 'inst var defs...' 'sample instance' 'inspect Pointers (P)') -> #instanceIcon.		#('Use Selection for Find (h)' 'rename class ...' 'rename...' 'change title...') -> #saveAsIcon.		#('method source with it' 'browse method (O)' 'check for uncategorized methods') -> #scriptIcon.		#('method strings with it (E)') -> #genericTextIcon.		#('browse hierarchy (h)' 'move to top' 'promote to top of list') -> #goTopIcon.		#('move up' 'make next-to-topmost') -> #goUpIcon.		#('move to bottom' 'send to back' 'send top window to back') -> #goBottomIcon.		#('inheritance (i)' 'move down') -> #goDownIcon.		#('browse protocol (p)' 'spawn sub-protocol') -> #spreadsheetIcon.		#('spawn full protocol') -> #speadsheetTemplateIcon.		#('alphabetize') -> #fontXGenericIcon.		#('browse' 'show category (C)' 'categorize all uncategorized' 'select change set...' 'view affected class categories') -> #packageIcon.		#('remove from current change set' 'remove empty categories' 'subtract other side (-)' 'remove from this browser') -> #listRemoveIcon.		#('add to current change set' 'add all meths to current chgs' 'add preamble (p)') -> #listAddIcon.		#('toggle diffing (D)' 'toggle selections') -> #switchIcon.		#('reorganize' 'create inst var accessors' 'ChangeSorter reorderChangeSets.' 'reorder all change sets' 'by name' 'by size' 'by date') -> #sendReceiveIcon.		#('unsent methods' 'unreferenced class vars' 'unreferenced inst vars' 'Undeclared inspect.' 'Undeclared removeUnreferencedKeys; inspect.' 'ChangeSorter removeEmptyUnnamedChangeSets.' 'check for unsent messages') -> #junkIcon.		#('update' 'turn on auto-update (a)' 'update list (u)') -> #updateIcon.		#('find changed windows...') -> #newWindowIcon.		#('make undraggable') -> #pushPinIcon.		#('Utilities saveScreenshot.') -> #stillCameraIcon.		#('add new directory') -> #newFolderIcon.		#('select all' 'deselect all') -> #selectAllIcon.		#('sort by date') -> #dateIcon.		#('justified') -> #formatJustifyFillIcon.		#('centered') -> #formatJustifyCenterIcon.		#('set alignment...' 'leftFlush') -> #formatJustifyLeftIcon.		#('rightFlush') -> #formatJustifyRightIcon.		#('signal Semaphore (S)') -> #haloHelpIcon.	}! !"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."Editor initialize.Theme current class beCurrent!