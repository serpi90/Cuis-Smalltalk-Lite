'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 23 April 2011 at 11:18:29 pm'!!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 4/23/2011 23:00'!browseHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."self flag: #ojo. "borrar"	Utilities spawnHierarchyForClass: self selectedClassOrMetaClass "OK if nil"		selector: self selectedMessageName! !!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 4/23/2011 23:00'!messageListKey: aChar from: view	"Respond to a Command key.  I am a model with a code pane, and I also	have a listView that has a list of methods.  The view knows how to get	the list and selection."	| sel class |	aChar == $D ifTrue: [^ self toggleDiffing].	sel _ self selectedMessageName.	aChar == $m ifTrue:  "These next two put up a type in if no message selected"		[^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk].	aChar == $n ifTrue: 		[^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllCallsOn: to: Smalltalk].	"The following require a class selection"	(class _ self selectedClassOrMetaClass) ifNil: [^ self arrowKey: aChar from: view].	aChar == $b ifTrue: [^ BrowserWindow fullOnClass: class selector: sel].	aChar == $N ifTrue: [^ self browseClassRefs].	aChar == $i ifTrue: [^ self methodHierarchy].	aChar == $h ifTrue: [^ self browseHierarchy].	aChar == $p ifTrue: [^ self browseFullProtocol].	"The following require a method selection"	sel ifNotNil: 		[aChar == $o ifTrue: [^ self fileOutMessage].		aChar == $c ifTrue: [^ self copySelector].		aChar == $v ifTrue: [^ self browseVersions].		aChar == $O ifTrue: [^ self openSingleMessageBrowser].		aChar == $x ifTrue: [^ self removeMessage]].	^ self arrowKey: aChar from: view! !!CodeWindow methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 22:48'!optionalButtonRow	"Answer a row of control buttons"	| row buttons widths buttonColor |	buttons _ OrderedCollection new.	widths _ OrderedCollection new.	buttonColor _ Theme current buttonColorFrom: self windowColor.	self optionalButtonTuples do: [ :tuple | | button |		widths add: tuple first.		button _ PluggableButtonMorph 					model: self					stateGetter: nil					action: tuple third.		button color: buttonColor.		button label: tuple second asString.		tuple size > 3 ifTrue: [button setBalloonText: tuple fourth].		buttons add: button ].	row _ LayoutMorph newRow.	row color: buttonColor.	row addMorphs: buttons widthProportionalTo: widths.	^row! !!CodeWindow methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 22:56'!optionalButtonTuples	"Answer a tuple buttons, in the format:			button label			selector to send			help message"	| aList |	aList _ #(	(10	'browse'			browseMethodFull				'view this method in a browser')	(11	'senders' 			browseSendersOfMessages	'browse senders of...')	(16	'implementors'		browseMessages				'browse implementors of...')	(12	'versions'			browseVersions					'browse versions')), 	(Preferences decorateBrowserButtons		ifTrue:			[{#(13	'inheritance'		methodHierarchy 	'browse method inheritancegreen: sends to supertan: has override(s)mauve: both of the abovepink: is an override but doesn''t call superpinkish tan: has override(s), also is an override but doesn''t call super' )}]		ifFalse:			[{#(13	'inheritance'		methodHierarchy	'browse method inheritance')}]),	#(	(12	'hierarchy'			browseHierarchy				'browse class hierarchy')	(10	'inst vars'			browseInstVarRefs				'inst var refs...')	(11	'class vars'			browseClassVarRefs			'class var refs...')	(10	'show...'				offerWhatToShowMenu		'menu of what to show in lower pane')).	^ aList! !!BrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 22:51'!fullOnClass: aClass selector: aSelector	"Open a new full browser set to class."	| browser |	browser _ Browser new.	browser setClass: aClass selector: aSelector.	BrowserWindow open: browser label: browser labelString! !!ChangeListWindow methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 23:11'!optionalButtonRow	"Answer a row of buttons to occur in a tool pane"	| row buttons widths buttonColor |	buttons _ OrderedCollection new.	widths _ OrderedCollection new.	buttonColor _ Theme current buttonColorFrom: self windowColor.	self optionalModelButtonTuples do: [ :tuple | | button |		widths add: tuple first.		button _ PluggableButtonMorph 					model: model					stateGetter: nil					action: tuple third.		button color: buttonColor.		button label: tuple second asString.		buttons add: button.		button setBalloonText: tuple fourth].	buttons add: self lineDiffButton.	widths add: 14.	buttons add: self wordDiffButton.	widths add: 16.	model wantsPrettyDiffOption ifTrue: [		buttons add:  self prettyLineDiffButton.		widths add: 21.		buttons add:  self prettyWordDiffButton.		widths add: 23 ].	row _ LayoutMorph newRow.	row color: buttonColor.	row addMorphs: buttons widthProportionalTo: widths.	^row! !!ChangeListWindow methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 23:10'!optionalModelButtonTuples	^#(		(11		'select all' 			selectAll				'select all entries')		(14		'deselect all'		deselectAll			'deselect all entries')		(18		'select conflicts'	selectAllConflicts	'select all methods that occur in any change set')		(19		'file in selections' 	fileInSelections		'file in all selected entries')	)! !!Inspector methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 23:00'!inspectorKey: aChar from: view	"Respond to a Command key issued while the cursor is over my field list"	aChar == $i ifTrue: [^ self selection inspect].	aChar == $I ifTrue: [^ self selection explore].	aChar == $b ifTrue:[^ self browseMethodFull].	aChar == $h ifTrue:[^ self browseHierarchy].	aChar == $p ifTrue: [^ self browseFullProtocol].	aChar == $N ifTrue: [^ self browseClassRefs].	^ self arrowKey: aChar from: view! !!Inspector methodsFor: 'message list menu' stamp: 'jmv 4/23/2011 23:00'!browseHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."	Utilities spawnHierarchyForClass: self selectedClassOrMetaClass "OK if nil"		selector: nil! !!InspectorWindow methodsFor: 'menu building' stamp: 'jmv 4/23/2011 23:00'!fieldListMenu	"Arm the supplied menu with items for the field-list of the receiver"	| aMenu object |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(		('inspect (i)'							inspectSelection)		('explore (I)'						exploreSelection)		('basic inspect'						inspectBasic)		('explore pointers'					exploreObjectPointers)).	object _ model object.	(object isKindOf: Dictionary) ifTrue: [ aMenu addList: #(		-		('senders of this key'				sendersOfSelectedKey)		('add key'							addEntry)		('rename key'						renameEntry)		('remove'							removeSelection			''		model)) ]	ifFalse: [ (object isKindOf: Set) ifTrue: [ aMenu addList: #(		-		('remove'							removeSelection			''		model))]].	aMenu addList: #(		-		('browse full (b)'					browseMethodFull)		('browse hierarchy (h)'				browseHierarchy)		('browse protocol (p)'				browseFullProtocol)).	^ aMenu! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 23:00'!browseHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."	Utilities		spawnHierarchyForClass: model selectedClassOrMetaClass "OK if nil"		selector: nil! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/23/2011 23:00'!browseHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."	Utilities spawnHierarchyForClass: self object class selector: nil! !!ObjectExplorer methodsFor: 'menus' stamp: 'jmv 4/23/2011 23:00'!explorerKey: aChar from: view	currentSelection ifNotNil: [		aChar == $i ifTrue: [^ self inspectSelection].		aChar == $I ifTrue: [^ self exploreSelection].		aChar == $b ifTrue: [^ self browseMethodFull].		aChar == $h ifTrue: [^ self browseHierarchy].		aChar == $p ifTrue: [^ self browseFullProtocol].		aChar == $N ifTrue: [^ self browseClassRefs]].	^ self arrowKey: aChar from: view! !!ObjectExplorerWindow methodsFor: 'building menus' stamp: 'jmv 4/23/2011 23:00'!genericMenu	"Borrow a menu from my inspector"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	model getCurrentSelection		ifNil: [			aMenu				add: '*nothing selected*'				target: self				selector: #yourself]		ifNotNil: [			aMenu addList: #(				('inspect (i)'							inspectSelection)				('explore (I)'						exploreSelection)				('basic inspect'						inspectBasic)				('explore pointers'					exploreObjectPointers)				-				('browse full (b)'					browseMethodFull)				('browse hierarchy (h)'				browseHierarchy)				('browse protocol (p)'				browseFullProtocol)).			aMenu addLine;				add: 'monitor changes'				target: model			"Model!!"				selector: #monitor:				argument: model getCurrentSelection].	model basicMonitorList isEmptyOrNil		ifFalse: [			aMenu addLine;				add: 'stop monitoring all'				target: model			"Model!!"				selector: #stopMonitoring].	^ aMenu! !!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 4/23/2011 23:00'!browseHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."	Utilities		spawnHierarchyForClass: model selectedClass		selector: nil! !!TestRunner methodsFor: 'menus' stamp: 'jmv 4/23/2011 23:16'!invertSelections	selectedSuites _ selectedSuites collect: [ :ea | ea not ].	selectedSuite _ selectedSuites indexOf: true ifAbsent: [0].	self changed: #allSelections .! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 23:17'!optionalButtonRow	| row button buttons widths buttonColor |	buttons _ OrderedCollection new.	widths _ OrderedCollection new.	buttonColor _ Theme current buttonColorFrom: self windowColor.	self optionalModelButtonTuples do: [ :tuple | 		widths add: tuple first.		button _ PluggableButtonMorph 			model: model			stateGetter: nil			action: tuple third.		button color: buttonColor.		button			label: tuple second.		buttons add: button].	row _ LayoutMorph newRow.	row color: buttonColor.	row addMorphs: buttons widthProportionalTo: widths.	^row! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 23:16'!optionalModelButtonTuples	^#(		#(20	'select all' 				#selectAll) 		#(20	'deselect all' 			#deselectAll) 		#(20	'toggle selections' 		#invertSelections)	)! !!TestRunnerWindow methodsFor: 'menu building' stamp: 'jmv 4/23/2011 23:16'!listMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: 'Test Cases'.	aMenu add: 'select all' target: model selector: #selectAll.	aMenu add: 'deselect all' target: model selector: #deselectAll.	aMenu add: 'toggle selections' target: model selector: #invertSelections.	aMenu add: 'filter' target: model selector: #setFilter.	model runButtonState ifTrue: [		aMenu add: 'stop' target: model selector: #terminateRun		].	model selectedSuite > 0 ifTrue: [ | cls |		cls _ (model tests at: model selectedSuite ifAbsent: ['']) copyUpTo: Character space.		cls _ cls asSymbol.		cls _ (Smalltalk at: cls ifAbsent: nil).		cls ifNotNil: [			aMenu addLine.			aMenu add: 'browse' target: self selector: #browse: argument: cls.		].	].	aMenu addLine.	aMenu add: 'log to Transcript' target: model selector: #showResult.	^aMenu! !!VersionsBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/23/2011 23:10'!optionalModelButtonTuples	^#(		(22		'compare to current'		compareToCurrentVersion		'opens a separate window which shows the text differences between the selected version and the current version')		(9		'revert'		fileInSelections		'reverts the method to the version selected')		(24		'remove from changes'		removeMethodFromChanges		'remove this method from the current change set')		(7		'help'		offerVersionsHelp		'further explanation about use of Versions browsers')	)! !VersionsBrowserWindow removeSelector: #buttonSpecs!VersionsBrowserWindow removeSelector: #optionalButtonTuples!TestRunnerWindow removeSelector: #optionalButtonTuples!TestRunner removeSelector: #toggleSelections!ObjectExplorerWindow removeSelector: #classHierarchy!ObjectExplorer removeSelector: #classHierarchy!InspectorWindow removeSelector: #classHierarchy!Inspector removeSelector: #browseClassVarRefs!Inspector removeSelector: #classHierarchy!Debugger removeSelector: #browseMessages!Debugger removeSelector: #browseSendersOfMessages!ChangeListWindow removeSelector: #buttonSpecs!ChangeListWindow removeSelector: #optionalButtonTuples!CodeProvider removeSelector: #addModelItemsToWindowMenu:!CodeProvider removeSelector: #browseClassVarRefs!CodeProvider removeSelector: #browseInstVarRefs!CodeProvider removeSelector: #browseMessages!CodeProvider removeSelector: #browseMethodFull!CodeProvider removeSelector: #browseSendersOfMessages!CodeProvider removeSelector: #classHierarchy!CodeProvider removeSelector: #offerWhatToShowMenu!