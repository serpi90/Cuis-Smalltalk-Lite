'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 30 May 2011 at 10:43:26 pm'!!BlockClosure methodsFor: 'testing' stamp: 'jmv 5/30/2011 22:40'!isClean	"A clean closure is one that doesn't really need the home context because:		- It doesn't send messages to self or super		- It doesn't access any instance variable		- It doesn't access any outer temp		- It doesn't do ^ return"	| recreated |	recreated _ [ Compiler evaluate: self decompile decompileString ] on: UndeclaredVariableWarning do: [ :ex | ^ false ].	Smalltalk		eliotsClosureMeasurementsOn: recreated outerContext method 		over: [ :closuresCount :hasIndirectTemps :anyClosureHasCopied :anyClosureDoesUAR :anyClosureUsesSelf |			closuresCount = 1 ifFalse: [ ^false ].			hasIndirectTemps ifTrue: [ ^ false ].			anyClosureDoesUAR ifTrue: [ ^ false ].			anyClosureUsesSelf ifTrue: [ ^ false ].			anyClosureHasCopied ifTrue: [ ^false ]].	^true! !!BlockClosure methodsFor: 'objects from disk' stamp: 'jmv 5/30/2011 22:40'!objectForDataStream: refStrm	"I am about to be written on an object file.  Write a textual reference instead."	self isClean ifFalse: [		self error: 'Can only serialize clean closures.' ].	^ DiskProxy		global: #Compiler		selector: #evaluate:		args: (Array with: self decompile decompileString)! !!CodeProvider methodsFor: 'annotation' stamp: 'jmv 5/30/2011 21:41'!annotationForSelector: aSelector ofClass: aClass 	"Provide a line of content for an annotation pane, representing  	information about the given selector and class"	| stamp sendersCount implementorsCount aCategory separator aString aList aComment aStream requestList |	aSelector == #Comment		ifTrue: [^ self annotationForClassCommentFor: aClass].	aSelector == #Definition		ifTrue: [^ self annotationForClassDefinitionFor: aClass].	aSelector == #Hierarchy		ifTrue: [^ self annotationForHierarchyFor: aClass].	aStream _ ReadWriteStream on: ''.	requestList _ self annotationRequests.	separator _ requestList size > 1				ifTrue: [self annotationSeparator]				ifFalse: [''].	requestList		do: [:aRequest | 			aRequest == #firstComment				ifTrue: [					aComment _ aClass firstCommentAt: aSelector.					aComment isEmptyOrNil						ifFalse: [aStream nextPutAll: aComment , separator]].			aRequest == #masterComment				ifTrue: [					aComment _ aClass supermostPrecodeCommentFor: aSelector.					aComment isEmptyOrNil						ifFalse: [aStream nextPutAll: aComment , separator]].			aRequest == #documentation				ifTrue: [					aComment _ aClass precodeCommentOrInheritedCommentFor: aSelector.					aComment isEmptyOrNil						ifFalse: [aStream nextPutAll: aComment , separator]].			aRequest == #timeStamp				ifTrue: [					stamp _ self timeStamp.					aStream						nextPutAll: (stamp size > 0								ifTrue: [stamp , separator]								ifFalse: ['no timeStamp' , separator])].			aRequest == #messageCategory				ifTrue: [					aCategory _ aClass organization categoryOfElement: aSelector.					aCategory						ifNotNil: ["woud be nil for a method no longer present,  							e.g. in a recent-submissions browser"							aStream nextPutAll: aCategory , separator]].			aRequest == #sendersCount				ifTrue: [					sendersCount _ Smalltalk numberOfSendersOf: aSelector.					sendersCount _ sendersCount = 1								ifTrue: ['1 sender']								ifFalse: [sendersCount printString , ' senders'].					aStream nextPutAll: sendersCount , separator].			aRequest == #implementorsCount				ifTrue: [					implementorsCount _ Smalltalk numberOfImplementorsOf: aSelector.					implementorsCount _ implementorsCount = 1								ifTrue: ['1 implementor']								ifFalse: [implementorsCount printString , ' implementors'].					aStream nextPutAll: implementorsCount , separator].			aRequest == #priorVersionsCount				ifTrue: [					self						addPriorVersionsCountForSelector: aSelector						ofClass: aClass						to: aStream].			aRequest == #priorTimeStamp				ifTrue: [					stamp _ VersionsBrowser								timeStampFor: aSelector								class: aClass								reverseOrdinal: 2.					stamp						ifNotNil: [aStream nextPutAll: 'prior time stamp: ' , stamp , separator]].			aRequest == #recentChangeSet				ifTrue: [					aString _ ChangeSorter mostRecentChangeSetWithChangeForClass: aClass selector: aSelector.					aString size > 0						ifTrue: [aStream nextPutAll: aString , separator]].			aRequest == #allChangeSets				ifTrue: [					aList _ ChangeSorter allChangeSetsWithClass: aClass selector: aSelector.					aList size > 0						ifTrue: [aList size = 1								ifTrue: [aStream nextPutAll: 'only in change set ']								ifFalse: [aStream nextPutAll: 'in change sets: '].							aList								do: [:aChangeSet | aStream nextPutAll: aChangeSet name , ' ']]						ifFalse: [aStream nextPutAll: 'in no change set'].					aStream nextPutAll: separator].			aRequest == #closuresInfo				ifTrue: [					aString _ aClass closuresInfoAt: aSelector.					aString size > 0						ifTrue: [aStream nextPutAll: aString , separator]].		].	^ aStream contents! !!Preferences class methodsFor: 'parameters' stamp: 'jmv 5/30/2011 22:41'!setDefaultAnnotationInfo	"	Preferences setDefaultAnnotationInfo	"	^ Parameters at: #MethodAnnotations put: #(timeStamp messageCategory implementorsCount sendersCount closuresInfo allChangeSets)! !!SystemDictionary methodsFor: 'retrieving' stamp: 'jmv 5/30/2011 21:37'!numberOfSendersOf: aSymbol	"Answer the count of all the methods that call on aLiteral.	[ (Smalltalk numberOfSendersOf: #open:label:) ] timeToRun	"	| count specialFlag specialByte |	count _ 0.	specialFlag _ self hasSpecialSelector: aSymbol ifTrueSetByte: [ :b | specialByte _ b ].	Cursor wait showWhile: [		self allBehaviorsDo: [:class |			class selectorsAndMethodsDo: [ :sel :method |				((method hasLiteral: aSymbol) or: [specialFlag and: [method scanFor: specialByte]])					ifTrue: [ count _ count + 1 ]			].		]	].	^ count! !"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."	Preferences setDefaultAnnotationInfo!