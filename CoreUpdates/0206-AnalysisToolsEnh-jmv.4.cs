'From Squeak3.7 of ''4 September 2004'' [latest update: #5989] on 22 May 2009 at 1:27:53 pm'!!ProcessBrowser class methodsFor: 'CPU utilization' stamp: 'jmv 5/22/2009 12:49'!dumpPigStackOn: aStream andClose: aBoolean	"Must run forked on its own process, so the monitored behavior is not affected too much"	| promise tally process depth stack suspendedContext |	promise := Processor tallyCPUUsageFor: 1 every: 10.	tally := promise value.	"WorldState addDeferredUIMessage: [self dumpTallyOnTranscript: tally]."	aStream nextPutAll: '====Al processes===='; cr.	self dumpTally: tally on: aStream.	aStream cr; nextPutAll: '====Process using most CPU===='; cr.	process _ tally sortedCounts first value.	(100.0 * (tally occurrencesOf: process) / tally size) rounded printOn: aStream.	aStream		nextPutAll: ' % ';		nextPutAll: (process browserPrintStringWith: (ProcessBrowser nameAndRulesFor: process) first);		cr.	depth _ 20.	stack _ process == Processor activeProcess		ifTrue: [thisContext stackOfSize: depth]		ifFalse: [suspendedContext _ process suspendedContext.			suspendedContext				ifNotNil: [suspendedContext stackOfSize: depth]].	stack 		ifNil: [ aStream nextPutAll: 'No context'; cr]		ifNotNil: [			stack do: [ :c | 				c printOn: aStream.				aStream cr]].	aBoolean ifTrue: [aStream close]! !!ProcessBrowser class methodsFor: 'CPU utilization' stamp: 'jmv 5/22/2009 12:30'!dumpTally: tally on: aStream	"tally is from ProcessorScheduler>>tallyCPUUsageFor:	Dumps lines with percentage of time, hash of process, and a friendly name"	tally sortedCounts do: [ :assoc | | procName |		procName _ (self nameAndRulesFor: assoc value) first.		(((assoc key / tally size) * 100.0) roundTo: 1) printOn: aStream.		aStream			nextPutAll: '%   ';			print: assoc value identityHash; space;			nextPutAll: procName;			cr.	]! !!ProcessBrowser class methodsFor: 'CPU utilization' stamp: 'jmv 5/22/2009 12:30'!dumpTallyOnTranscript: tally	"tally is from ProcessorScheduler>>tallyCPUUsageFor:	Dumps lines with percentage of time, hash of process, and a friendly name"	self dumpTally: tally on: Transcript.	Transcript flush.! !!Utilities class methodsFor: 'vm statistics' stamp: 'jmv 5/22/2009 12:59'!reportCPUandRAM	"Write several text files with useful analysis for profiling purposes.	Overwrites any existing report.	Utilities reportCPUandRAM	"		| stream tally |		"VM statistics (Memory use and GC, mainly)"	stream _ FileStream forceNewFileNamed: 'MemoryStats.txt'.	[ stream nextPutAll: Utilities vmStatisticsReportString ] 		ensure: [ stream close ].		"Process list"	stream _ FileStream forceNewFileNamed: 'ProcessList.txt'.	[		ProcessBrowser new processNameList 			do: [ :each | 				stream nextPutAll: each; cr ]	] ensure: [ stream close ]."Fork all these, so they run in sequence, as the system is back running"[		"Process taking most CPU"	stream _ FileStream forceNewFileNamed: 'ThePig.txt'.	ProcessBrowser dumpPigStackOn: stream andClose: true.		"Tally of all processes"	stream _ FileStream forceNewFileNamed: 'FullTally.txt'.	[		tally _ MessageTally new.		tally spyAllEvery: 1 on: [ (Delay forMilliseconds: 1000) wait ].		tally report: stream ] ensure: [ stream close ].		"Tally of UI (perhaps not useful when having all processes....)"	stream _ FileStream forceNewFileNamed: 'UITally.txt'.	[		tally _ MessageTally new.		tally spyEvery: 1 onProcess: ProjectX uiProcessX forMilliseconds: 1000.		tally report: stream ] ensure: [ stream close ].		"Memory Analysis"	stream _ FileStream forceNewFileNamed: 'MemoryAnalysis.txt'.	[ SpaceTally new printSpaceAnalysis: 1 on: stream ]		ensure: [ stream close ]] forkNamed: 'CPU usage analysis'! !