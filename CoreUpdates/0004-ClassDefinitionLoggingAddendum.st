'From Squeak3.7 of ''4 September 2004'' [latest update: #5989] on 7 April 2008 at 11:48:04 pm'!!FilePackage methodsFor: 'change record types' stamp: 'jmv 4/7/2008 23:32'!classDefinition: chgRec	| string |	string := chgRec string.	^chgRec isMetaClassChange 		ifTrue: [self metaClassDefinition: string with: chgRec]		ifFalse: [self classDefinition: string with: chgRec]! !!PositionableStream methodsFor: 'fileIn/Out' stamp: 'jmv 4/7/2008 23:41'!fileInAnnouncing: announcement 	"This is special for reading expressions from text that has been formatted 	with exclamation delimitors. The expressions are read and passed to the 	Compiler. Answer the result of compilation.  Put up a progress report with     the given announcement as the title."	| val chunk |	announcement 		displayProgressAt: Sensor cursorPoint		from: 0		to: self size		during: 			[:bar | 			[self atEnd] whileFalse: 					[bar value: self position.					self skipSeparators.										[val := (self peekFor: $!!) 								ifTrue: [									chunk := self nextChunk.									(chunk beginsWith: 'classDefinition: ')										ifFalse: [(Compiler evaluate: chunk logged: false) scanFrom: self]]								ifFalse: [									chunk := self nextChunk.									self checkForPreamble: chunk.									Compiler evaluate: chunk logged: true]] 							on: InMidstOfFileinNotification							do: [:ex | ex resume: true].					self skipStyleChunk].			self close].	"Note:  The main purpose of this banner is to flush the changes file."	Smalltalk logChange: '----End fileIn of ' , self name , '----'.	self flag: #ThisMethodShouldNotBeThere.	"sd"	Smalltalk forgetDoIts.	^val! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'jmv 4/7/2008 23:27'!fileOutPSFor: class on: stream 	"Write out removals and initialization for this class."	| dict changeType classRecord currentDef |	classRecord _ changeRecords at: class name ifAbsent: [^ self].	dict _ classRecord methodChangeTypes.	dict keysSortedSafely do:		[:key | changeType _ dict at: key.		(#(remove addedThenRemoved) includes: changeType)			ifTrue: [stream nextChunkPut: class name,						' removeSelector: ', key storeString; cr]			ifFalse: [(key = #initialize and: [class isMeta]) ifTrue:						[stream nextChunkPut: class soleInstance name, ' initialize'; cr]]].	((classRecord includesChangeType: #change)			and: [(currentDef _ class definition) ~= (self fatDefForClass: class)]) ifTrue: [		stream command: 'H3'; nextPut: $!!; nextChunkPut: class definitionPreamble; cr;			nextChunkPut: currentDef; cr; command: '/H3'].	(classRecord includesChangeType: #reorganize) ifTrue:		[class fileOutOrganizationOn: stream.		stream cr]! !!ChangeSet methodsFor: 'private' stamp: 'jmv 4/7/2008 23:15'!fileOutClassDefinition: class on: stream 	"Write out class definition for the given class on the given stream, if the class definition was added or changed."	(self atClass: class includes: #rename) ifTrue: [		stream nextChunkPut: 'Smalltalk renameClassNamed: #', (self oldNameFor: class), ' as: #', class name; cr].	(self atClass: class includes: #change) ifTrue: [ "fat definition only needed for changes"		stream command: 'H3'; nextPut: $!!; nextChunkPut: class definitionPreamble; cr;		nextChunkPut: (self fatDefForClass: class); cr; command: '/H3'.		DeepCopier new checkClass: class.	"If veryDeepCopy weakly copies some inst 			vars in this class, warn author when new ones are added." 	] ifFalse: [		(self atClass: class includes: #add) ifTrue: [ "use current definition for add"			stream command: 'H3'; nextPut: $!!; nextChunkPut: class definitionPreamble; cr;			nextChunkPut: class definition; cr; command: '/H3'.			DeepCopier new checkClass: class.	"If veryDeepCopy weakly copies some inst 				vars in this class, warn author when new ones are added." 		].	].	(self atClass: class includes: #comment) ifTrue:		[class theNonMetaClass organization putCommentOnFile: stream numbered: 0 moveSource: false forClass: class theNonMetaClass.		stream cr].! !