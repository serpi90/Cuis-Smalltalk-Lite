'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 25 April 2011 at 5:27:09 pm'!!classDefinition: #ProcessBrowser category: #'Tools-Debugger'!Model subclass: #ProcessBrowser	instanceVariableNames: 'selectedProcess selectedContext methodText processList processListIndex stackList stackListIndex sourceMap selectedClass selectedSelector searchString autoUpdateProcess deferredMessageRecipient lastUpdate startedCPUWatcher '	classVariableNames: 'Browsers SuspendedProcesses '	poolDictionaries: ''	category: 'Tools-Debugger'!!classDefinition: #ProgressMorph category: #'Morphic-Widgets'!LayoutMorph subclass: #ProgressMorph	instanceVariableNames: 'labelMorph subLabelMorph progress '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!classDefinition: #PreDebugWindow category: #'Morphic-Tools'!CodeWindow subclass: #PreDebugWindow	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Tools'!!classDefinition: #ProcessBrowserWindow category: #'Morphic-Tools'!SystemWindow subclass: #ProcessBrowserWindow	instanceVariableNames: 'isStepping '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Tools'!!classDefinition: #TestRunner category: #'SUnit-UI'!Model subclass: #TestRunner	instanceVariableNames: 'result details passFail failures errors tests lastPass selectedFailureTest selectedErrorTest selectedSuite filter selectedSuites running runSemaphore completedTests totalTests progress progressLabel '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-UI'!!classDefinition: #TestRunnerWindow category: #'Morphic-Tools'!SystemWindow subclass: #TestRunnerWindow	instanceVariableNames: 'passFailText detailsText progress '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Tools'!!Object methodsFor: '*tools-browser' stamp: 'jmv 4/25/2011 11:02'!browseClassHierarchy	| targetClass newBrowser |	targetClass := self class isMeta				ifTrue: [self class theNonMetaClass]				ifFalse: [self class ].	newBrowser _ HierarchyBrowser for: targetClass.	HierarchyBrowserWindow openNoSysCat: newBrowser label: nil.	newBrowser assureSelectionsShow! !!Object methodsFor: 'dependents access' stamp: 'jmv 4/25/2011 14:36'!canDiscardEdits	"Answer true if none of the views on this model has unaccepted edits that matter."self flag: #ojo. "revisar"	self dependents		do: [:each | each canDiscardEdits ifFalse: [^ false]]		without: self.	^ true! !!Object methodsFor: 'dependents access' stamp: 'jmv 4/25/2011 14:36'!hasUnacceptedEdits	"Answer true if any of the views on this object has unaccepted edits."self flag: #ojo. "revisar"	self dependents		do: [:each | each hasUnacceptedEdits ifTrue: [^ true]]		without: self.	^ false! !!LayoutMorphTest methodsFor: 'tests' stamp: 'jmv 4/25/2011 16:46'!testLayout2	"	self new testLayout2	"	| pane row c1 c2 c3 |	pane _ LayoutMorph newColumn separation: 5.	pane color: Color red.	row _ LayoutMorph newRow separation: 5.	row		color: (Color h: 270 s: 0.2 v: 0.6);		addMorph: (c1 _ RectangleMorph new color: (Color h: 120 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8 minorDirectionPadding: #bottom);		addMorph: (c2 _ RectangleMorph new color: (Color h: 90 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec proportionalWidth: 0.8 fixedHeight: 40 minorDirectionPadding: #top);		addMorph: (c3 _ RectangleMorph new color: (Color h: 150 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 0.7 minorDirectionPadding: #center).	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).	pane openInWorld; extent: 400@300.	World doOneCycleNow.	self assert: row width = (pane width - 10).	self assert: row height = (pane height - 10 * 0.9) rounded.	self assert: c1 bounds bottom = (row bounds bottom - 5) description: 'Should be at bottom'.	self assert: c1 width = 20.	self assert: c1 height = (row height - 10 * 0.8) rounded.	self assert: c2 bounds top = (row bounds top + 5) description: 'Should be at top'.	self assert: c2 width = 256.	self assert: c2 height = 40.	self assert: ((c3 bounds top - row bounds top) - (row bounds bottom - c3 bounds bottom)) abs < 2 description: 'Should be centered'.	self assert: c3 width = 30.	self assert: c3 height = (c1 height / 0.8 * 0.7) rounded.	pane delete! !!LayoutMorphTest methodsFor: 'tests' stamp: 'jmv 4/25/2011 16:49'!testLayout3	"	self new testLayout3	"	| pane row innerRow i1 i2 i3 c2 c3 |	pane _ LayoutMorph newColumn separation: 5.	pane color: Color red.	row _ LayoutMorph newRow separation: 5.	innerRow _ LayoutMorph newRow color: Color red;  separation: 5.	innerRow		addMorph: (i1 _ RectangleMorph new  borderWidth: 0)			layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);		addMorph: (i2 _ RectangleMorph new  borderWidth: 0)			layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);		addMorph: (i3 _ RectangleMorph new  borderWidth: 0)			layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 10).	row		color: (Color h: 270 s: 0.2 v: 0.6);		addMorph: innerRow			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 30 minorDirectionPadding: #center);		addMorph: (c2 _ RectangleMorph new color: (Color h: 90 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 40 minorDirectionPadding: #top);		addMorph: (c3 _ RectangleMorph new color: (Color h: 150 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).	pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 200).	pane openInWorld; extent: 400@300.	World doOneCycleNow.	self assert: row bounds left = (pane bounds left + 5).	self assert: row width = (pane width - 10).	self assert: row height = 200.	self assert: innerRow bounds left = (row bounds left + 5).	self assert: (innerRow bounds top - row bounds top) = (row bounds bottom - innerRow bounds bottom) description: 'Should be centered'.	self assert: innerRow width = (pane width - 10 - 10 - 30 - 10 * 0.5) rounded.	self assert: innerRow height = 30.	self assert: i1 bounds left = (innerRow bounds left + 5).	self assert: (i1 bounds top - innerRow bounds top) = (innerRow bounds bottom - i1 bounds bottom) description: 'Should be centered'.	self assert: i1 width = 10.	self assert: i1 height = 10.	self assert: i2 bounds left = (innerRow bounds left + 20).	self assert: (i2 bounds top - innerRow bounds top) = (innerRow bounds bottom - i2 bounds bottom) description: 'Should be centered'.	self assert: i2 width = 10.	self assert: i2 height = 10.	self assert: i3 bounds left = (innerRow bounds left + 35).	self assert: (i3 bounds top - innerRow bounds top) = (innerRow bounds bottom - i3 bounds bottom) description: 'Should be centered'.	self assert: i3 width = (innerRow width - 40).	self assert: i3 height = 10.	self assert: c2 bounds top = (row bounds top + 5) description: 'Should be at top'.	self assert: c2 width = (pane width - 10 - 10 - 30 - 10 * 0.5) rounded.	self assert: c2 height = 40.	self assert: (c3 bounds top - row bounds top) = (row bounds bottom - c3 bounds bottom) description: 'Should be centered'.	self assert: c3 width = 30.	self assert: c3 height = (row height - 10).	pane delete! !!Model methodsFor: 'dependents' stamp: 'jmv 4/25/2011 14:37'!canDiscardEdits	"Answer true if none of the views on this model has unaccepted edits that matter."self flag: #ojo. "revisar"	dependents ifNil: [^ true].	^ super canDiscardEdits! !!Model methodsFor: 'dependents' stamp: 'jmv 4/25/2011 14:36'!hasUnacceptedEdits	"Answer true if any of the views on this model has unaccepted edits."self flag: #ojo. "revisar"	dependents		ifNil: [^ false].	^ super hasUnacceptedEdits! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/25/2011 14:16'!removePostscript	myChangeSet removePostscript.	self showChangeSet: myChangeSet! !!Debugger methodsFor: 'initialize' stamp: 'jmv 4/25/2011 15:37'!openNotifierContents: msgString label: label	"Create and schedule a notifier view with the given label and message. A notifier view shows just the message or the first several lines of the stack, with a menu that allows the user to open a full debugger if so desired."	"NOTE: When this method returns, a new process has been scheduled to run the windows, and thus this notifier, but the previous active porcess has not been suspended.  The sender will do this."	| msg |	Sensor flushKeyboard.	savedCursor _ Sensor currentCursor.	Sensor currentCursor: Cursor normal.	(label beginsWith: 'Space is low')		ifTrue: [msg _ self lowSpaceChoices, (msgString ifNil: [''])]		ifFalse: [msg _ msgString].	PreDebugWindow open: self label: label message: msg.	errorWasInUIProcess _ ProjectX newProcessIfUIX: interruptedProcess.	^self! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/25/2011 16:03'!implement: aMessage inClass: aClass		aClass		compile: aMessage createStubMethod		classified: (self askForCategoryIn: aClass default: 'as yet unclassified').	self selectedContext privRefreshWith: (aClass lookupSelector: aMessage selector).	self selectedContext method numArgs > 0 ifTrue:		[(self selectedContext tempAt: 1) arguments withIndexDo:			[:arg :index|			self selectedContext tempAt: index put: arg]].	self resetContext: self selectedContext! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/25/2011 15:56'!proceed	"Proceed from the interrupted state of the currently selected context."	self okToChange ifFalse: [^ self].	self checkContextSelection.	self resumeProcess! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/25/2011 15:50'!restart	"Proceed from the initial state of the currently selected context. The 	argument is a controller on a view of the receiver. That view is closed."	"Closing now depends on a preference #restartAlsoProceeds - hmm 9/7/2001 16:46"	| ctxt |	self okToChange ifFalse: [^ self].	self checkContextSelection.	ctxt _ interruptedProcess popTo: self selectedContext.	ctxt == self selectedContext ifTrue: [		interruptedProcess restartTop; stepToSendOrReturn].	self resetContext: ctxt! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 4/25/2011 17:26'!returnValue: expression	"Force a return of a given value to the previous context!!"	| previous selectedContext value |	contextStackIndex = 0 ifTrue: [^Beeper beep].	selectedContext _ self selectedContext.	value _ Compiler new 				evaluate: expression				in: selectedContext				to: selectedContext receiver.	previous _ selectedContext sender.	self resetContext: previous.	interruptedProcess popTo: previous value: value! !!Debugger methodsFor: 'private' stamp: 'jmv 4/25/2011 15:47'!resumeProcess	savedCursor		ifNotNil: [Sensor currentCursor: savedCursor].	interruptedProcess isTerminated ifFalse: [		errorWasInUIProcess					ifTrue: [ProjectX resumeProcessX: interruptedProcess]					ifFalse: [interruptedProcess resume]].	"if old process was terminated, just terminate current one"	interruptedProcess _ nil.	World displayWorld.	Smalltalk installLowSpaceWatcher.	"restart low space handler"	errorWasInUIProcess == false		ifFalse: [Processor terminateActive]! !!FileList methodsFor: 'file list' stamp: 'jmv 4/25/2011 14:06'!fileListIndex: anInteger	"Select the file name having the given index, and display its contents."	| item name |	self okToChange ifFalse: [^ self].	listIndex := anInteger.	listIndex = 0 		ifTrue: [fileName := nil]		ifFalse:			[item := self fileNameFromFormattedItem: (list at: anInteger).			(item endsWith: self folderString)				ifTrue:					["remove [...] folder string and open the folder"					name := item copyFrom: 1 to: item size - self folderString size.					listIndex := 0.					brevityState := #FileList.					name first = $^						ifTrue: [self directory: nil]						ifFalse: [self directory: (directory directoryNamed: name)]]				ifFalse: [fileName := item]].  "open the file selected"	brevityState := #needToGetBrief.	self changed: #fileListIndex.	self acceptedContentsChanged.	self changed: #updateButtonRow! !!FileList methodsFor: 'initialization' stamp: 'jmv 4/25/2011 14:01'!universalButtonServices	"Answer a list of services underlying the universal buttons in their initial inception.  For the moment, only the sorting buttons are shown."	^ {self serviceSortByName. self serviceSortByDate. self serviceSortBySize}! !!FileList methodsFor: 'private' stamp: 'jmv 4/25/2011 14:07'!resort: newMode	"Re-sort the list of files."	| name |	listIndex > 0		ifTrue: [name _ self fileNameFromFormattedItem: (list at: listIndex)].	sortAscending _ sortMode = newMode		ifTrue: [ sortAscending not ]		ifFalse: [ newMode = #name].	sortMode _ newMode.	self pattern: pattern.	name ifNotNil: [		fileName _ name.		listIndex _ list findFirst: [:item | (self fileNameFromFormattedItem: item) = name. ].		self changed: #fileListIndex].	listIndex = 0 ifTrue: [		self acceptedContentsChanged ].	self changed: #updateButtonRow! !!FileList methodsFor: 'private' stamp: 'jmv 4/25/2011 14:07'!updateFileList	"Update my files list with file names in the current directory  	that match the pattern.	The pattern string may have embedded newlines or semicolons; these separate different patterns."	| patterns |	patterns _ OrderedCollection new.	Cursor wait showWhile: [	(pattern findTokens: (String with: Character cr with: Character lf with: $;))		do: [ :each |			(each includes: $*) | (each includes: $#)					ifTrue: [ patterns add: each]					ifFalse: [each isEmpty										ifTrue: [ patterns add: '*']										ifFalse: [ patterns add: '*' , each , '*']]].	list _ self listForPatterns: patterns.	listIndex _ 0.	fileName _ nil.	acceptedContentsCache _ ''.	self changed: #fileList.	self changed: #updateButtonRow]! !!HierarchyBrowser class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 11:02'!for: aClass	"Open a new HierarchyBrowser on the given class"	^HierarchyBrowser new initHierarchyForClass: aClass! !!HierarchyBrowser class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 11:04'!for: aClass selector: aSymbol	"Open a new HierarchyBrowser on the given class"	|  newBrowser |	newBrowser _ HierarchyBrowser new initHierarchyForClass: aClass.	newBrowser setSelector: aSymbol.	^newBrowser! !!MessageSet methodsFor: 'message functions' stamp: 'jmv 4/25/2011 16:20'!removeMessageFromBrowser	"Remove the selected message from the browser."	messageListIndex = 0 ifTrue: [^ self].	self deleteFromMessageList: self selection.	self reformulateList.	self changed: #relabel! !!MessageSet methodsFor: 'private' stamp: 'jmv 4/25/2011 16:21'!setFilteredList: newList	"Establish newList as the new list if appropriate, and adjust the window title accordingly; if the new list is of the same size as the old, warn and do nothing"	newList size = 0		ifTrue: [			^ self inform: 'Nothing would be left in the list if you did that'].	newList size = messageList size		ifTrue: [			^ self inform: 'That leaves the list unchanged'].	self initializeMessageList: newList.	self changed: #relabel! !!MessageSet methodsFor: 'accessing' stamp: 'jmv 4/25/2011 16:25'!labelString	^'Filtered: [',		messageList size printString,		']'.! !!MessageNames methodsFor: 'search' stamp: 'jmv 4/25/2011 16:20'!searchString: aString	"Take what the user typed and find all selectors containing it"	searchString _ aString asString.	self changed: #relabel.	selectorList _ nil.	self changed: #selectorList.	self changed: #messageList.	^ true! !!MessageNames methodsFor: 'initialization' stamp: 'jmv 4/25/2011 16:20'!labelString	^ 'Message names containing "', searchString asLowercase, '"'! !!PluggableListMorph methodsFor: 'initialization' stamp: 'jmv 4/25/2011 14:41'!doubleClickSelector: aSymbol	doubleClickSelector _ aSymbol! !!PluggableListMorphOfMany methodsFor: 'event handling' stamp: 'jmv 4/25/2011 11:17'!mouseMove: event 	"The mouse has moved, as characterized by the event provided.  Adjust the scrollbar, and alter the selection as appropriate"	| oldIndex oldVal row |	event position y < bounds top 		ifTrue: [			scrollBar scrollUp: 1.			row := self rowAtLocation: scroller topLeft + (1 @ 1)]		ifFalse: [			row _ event position y > bounds bottom 				ifTrue: [					scrollBar scrollDown: 1.					self rowAtLocation: scroller bounds bottomLeft + (1 @ -1)]				ifFalse: [ self rowAtLocation: event position]].	row = 0 ifTrue: [^super mouseDown: event].	model okToChange ifFalse: [^self].	"No change if model is locked"	dragOnOrOff ifNil: [			"Was not set at mouse down, which means the mouse must have gone down in an area where there was no list item"			dragOnOrOff _ (self listSelectionAt: row) not].	"Set meaning for subsequent dragging of selection"	oldIndex := self getCurrentSelectionIndex.	oldIndex ~= 0 ifTrue: [ oldVal _ self listSelectionAt: oldIndex ].	"Set or clear new primary selection (listIndex)"	dragOnOrOff 		ifTrue: [ self changeModelSelection: row ]		ifFalse: [ self changeModelSelection: 0 ].	"Need to restore the old one, due to how model works, and set new one."	oldIndex ~= 0 ifTrue: [ self listSelectionAt: oldIndex put: oldVal ].		"Select all in between if drag was too fast"	"self listSelectionAt: row put: dragOnOrOff."	(row min: dragStartRow) to: (row max: dragStartRow) do: [ :r |		self listSelectionAt: r put: dragOnOrOff]! !!Preferences class methodsFor: 'themes' stamp: 'jmv 4/25/2011 15:50'!juans	"	Preferences juans	"	self setPreferencesFrom:	#(		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(caseSensitiveFinds true)		(checkForSlips true)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic false)		(menuKeyboardControl true)		(optionalButtons true)		(extraDebuggerButtons true)		(simpleMenus false)		(smartUpdating true)		(subPixelRenderFonts true)		(thoroughSenders true)	)! !!Preferences class methodsFor: 'themes' stamp: 'jmv 4/25/2011 15:50'!slowMachine	self setPreferencesFrom: #(		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(caseSensitiveFinds true)		(checkForSlips false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(menuKeyboardControl false)		(optionalButtons false)		(simpleMenus false)		(smartUpdating false)		(subPixelRenderFonts false)		(thoroughSenders false)	).	ClassicTheme beCurrent! !!Preferences class methodsFor: 'themes' stamp: 'jmv 4/25/2011 15:50'!smalltalk80	"A traditional monochrome Smalltalk-80 look and feel, clean and austere, and lacking many features added to Squeak in recent years. Caution: this theme removes the standard Squeak flaps, turns off the 'smartUpdating' feature that keeps multiple browsers in synch, and much more."	self setPreferencesFrom:	#(		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(caseSensitiveFinds true)		(checkForSlips false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(menuKeyboardControl false)		(optionalButtons false)		(simpleMenus false)		(smartUpdating false)		(thoroughSenders false)	)! !!ProcessBrowser methodsFor: 'initialize-release' stamp: 'jmv 4/25/2011 14:32'!initialize	methodText _ ''.	stackListIndex _ 0.	searchString _ ''.	self updateProcessList; processListIndex: 1! !!ProcessBrowser methodsFor: 'initialize-release' stamp: 'jmv 4/25/2011 13:50'!startCPUWatcher	"Answers whether I started the CPUWatcher"	| pw |	pw _ Smalltalk at: #CPUWatcher ifAbsent: [ ^self ].	pw ifNotNil: [		pw isMonitoring ifFalse: [			pw startMonitoringPeriod: 5 rate: 100 threshold: 0.85.			^true		]	].	^false! !!ProcessBrowser methodsFor: 'initialize-release' stamp: 'jmv 4/25/2011 13:48'!stopCPUWatcher	| pw |	pw _ Smalltalk at: #CPUWatcher ifAbsent: [ ^self ].	pw ifNotNil: [		pw stopMonitoring.		self updateProcessList.	]! !!ProcessBrowser methodsFor: 'initialize-release' stamp: 'jmv 4/25/2011 13:46'!windowIsClosing	CPUWatcher stopMonitoring! !!ProcessBrowser methodsFor: 'process actions' stamp: 'jmv 4/25/2011 14:31'!nameAndRulesFor: aProcess 	"Answer a nickname and two flags: allow-stop, and allow-debug"	^self class nameAndRulesFor: aProcess ! !!ProcessBrowser methodsFor: 'process list' stamp: 'jmv 4/25/2011 14:32'!updateProcessList	| oldSelectedProcess newIndex |	oldSelectedProcess _ selectedProcess.	processList _ selectedProcess _ selectedSelector _ nil.	Smalltalk garbageCollectMost.	"lose defunct processes"	processList _ Process allSubInstances reject: [:each | each isTerminated ].	processList _ processList sort: [ :a :b | a priority >= b priority ].	processList _ WeakArray withAll: processList.	newIndex _ processList				indexOf: oldSelectedProcess				ifAbsent: [ 0 ].	self changed: #processNameList.	self processListIndex: newIndex! !!ProcessBrowser methodsFor: 'stepping' stamp: 'jmv 4/25/2011 14:28'!step	self updateProcessList! !!ProcessBrowser class methodsFor: 'class initialization' stamp: 'jmv 4/25/2011 14:33'!initialize	"ProcessBrowser initialize"	SuspendedProcesses ifNil: [ SuspendedProcesses _ IdentityDictionary new ].	Smalltalk addToStartUpList: self.	Smalltalk addToShutDownList: self! !!ProcessBrowser class methodsFor: 'as yet unclassified' stamp: 'jmv 4/25/2011 14:30'!shutDown	"Remove terminated processes from my suspended list"	SuspendedProcesses ifNotNil: [		SuspendedProcesses keys do: [ :each |			each isTerminated ifTrue: [ SuspendedProcesses removeKey: each ]]]! !!ProgressMorph methodsFor: 'accessing' stamp: 'jmv 4/25/2011 17:17'!label: aString subLabel: otherString	labelMorph contents: aString.	subLabelMorph contents: otherString.	self setupMorphs! !!ProgressMorph methodsFor: 'accessing' stamp: 'jmv 4/25/2011 17:18'!subLabel: aString	subLabelMorph contents: aString! !!ProgressMorph methodsFor: 'initialization' stamp: 'jmv 4/25/2011 17:13'!initLabelMorph	labelMorph _ StringMorph contents: '' font: AbstractFont default! !!ProgressMorph methodsFor: 'initialization' stamp: 'jmv 4/25/2011 17:13'!initSubLabelMorph	subLabelMorph _ StringMorph contents: '' font: AbstractFont default! !!ProgressMorph methodsFor: 'initialization' stamp: 'jmv 4/25/2011 17:15'!initialize	super initialize.	self separation: 0.	self initLabelMorph; initSubLabelMorph; initProgressMorph.	self addMorph: labelMorph.	self addMorph: subLabelMorph.	self addMorph: progress fixedHeight: 15.! !!ProgressMorph methodsFor: 'initialization' stamp: 'jmv 4/25/2011 17:01'!setupMorphs	|  w h |	w _ ((labelMorph width max: subLabelMorph width) max: progress width) + 2.	h _ labelMorph height + subLabelMorph height + progress height + 2.	self bounds: (0@0 extent: w@h).	self borderWidth: 2.	self borderColor: Color black.	self color: Color veryLightGray.	self align: self fullDisplayBounds center with: Display boundingBox center! !!ProgressMorph class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 16:53'!label: aString subLabel: otherString	^self newColumn label: aString subLabel: otherString! !!SimpleHierarchicalListMorph methodsFor: 'initialization' stamp: 'jmv 4/25/2011 14:03'!model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel	self model: anObject.	getListSelector _ getListSel.	getSelectionSelector _ getSelectionSel.	setSelectionSelector _ setSelectionSel.	mainView _ aMainView.	menuGetter _ getMenuSel.	keystrokeActionSelector _ keyActionSel.	autoDeselect _ true.	self list: self getList.! !!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 4/25/2011 13:21'!browseClassFromIt	"Launch a hierarchy browser for the class indicated by the current selection.  If multiple classes matching the selection exist, let the user choose among them."	| aClass |	self lineSelectAndEmptyCheck: [^ self].	aClass _ Utilities classFromPattern: (self selection string copyWithout: Character cr) withCaption: 'choose a class to browse...'.	aClass ifNil: [^ morph flash].	HierarchyBrowserWindow		onClass: aClass		selector: nil! !!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 3/21/2011 17:49'!browseIt	"Launch a browser for the current selection, if appropriate"	| aSymbol anEntry browser |	Preferences alternativeBrowseIt ifTrue: [^ self browseClassFromIt].	self lineSelectAndEmptyCheck: [^ self].	(aSymbol _ self selectedSymbol) ifNil: [^ morph flash].	aSymbol first isUppercase		ifTrue: [			anEntry _ (Smalltalk				at: aSymbol				ifAbsent: [					Smalltalk browseAllImplementorsOf: aSymbol.					^ nil]).			anEntry ifNil: [^ morph flash].			(anEntry isKindOf: Class)				ifFalse:	[anEntry _ anEntry class].			browser _ Browser new.			browser setClass: anEntry selector: nil.			BrowserWindow open: browser label:'System Browser' ]		ifFalse:			[Smalltalk browseAllImplementorsOf: aSymbol]! !!SystemWindow methodsFor: 'label' stamp: 'jmv 5/13/2009 17:33'!setLabel: aString	labelString _ aString.	self invalidateTitleArea! !!SystemWindow methodsFor: 'open/close' stamp: 'jmv 4/25/2011 15:20'!initialExtent	^ RealEstateAgent standardWindowExtent! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 13:56'!methodHierarchy	"Create and schedule a method browser on the hierarchy of implementors."	| list tab stab aClassNonMeta isMeta theClassOrMeta aClass sel |	aClass _ model selectedClassOrMetaClass.	sel _ model selectedMessageName.	aClass ifNil: [ ^ self ].	sel ifNil: [ ^ self ].	aClassNonMeta _ aClass theNonMetaClass.	isMeta _ aClassNonMeta ~~ aClass.	list _ OrderedCollection new.	tab _ ''.	aClass allSuperclasses reverseDo: [ :cl |		(cl includesSelector: sel) ifTrue: [ list addLast: tab , cl name , ' ' , sel ].		tab _ tab , '  ' ].	aClassNonMeta		allSubclassesWithLevelDo: [ :cl :level |			theClassOrMeta _ isMeta				ifTrue: [ cl class ]				ifFalse: [ cl ].			(theClassOrMeta includesSelector: sel) ifTrue: [				stab _ ''.				1					to: level					do: [ :i |						stab _ stab , '  ' ].				list addLast: tab , stab , theClassOrMeta name , ' ' , sel ]]		startingLevel: 0.	Smalltalk		browseMessageList: list		name: 'Inheritance of ' , sel.! !!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 14:40'!buildMorphicWindow	"Open a full morphic debugger with the given label"	| upperMorph bottomMorph1 bottomMorph2 bottomMorph3 bottomMorph4 bottomMorph |	upperMorph _ PluggableListMorph		model: model 		listGetter: #contextStackList		indexGetter: #contextStackIndex		indexSetter: #toggleContextStackIndex:		mainView: self		menuGetter: #contextStackMenu		keystrokeAction: #contextStackKey:from:.	bottomMorph1 _ PluggableListMorph			model: model receiverInspector			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			mainView: self			menuGetter: #receiverFieldListMenu			keystrokeAction: #inspectorKey:from:.	bottomMorph2 _ TextModelMorph 			textProvider: model receiverInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection.	bottomMorph3 _ PluggableListMorph			model: model contextVariablesInspector 			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			mainView: self			menuGetter: #contextFieldListMenu			keystrokeAction: #inspectorKey:from:.	bottomMorph4 _ TextModelMorph 			textProvider: model contextVariablesInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection.	bottomMorph _ LayoutMorph newRow.	bottomMorph		addMorph: bottomMorph1 proportionalWidth: 0.2;		addAdjusterAndMorph: bottomMorph2 proportionalWidth: 0.3;		addAdjusterAndMorph: bottomMorph3 proportionalWidth: 0.2;		addAdjusterAndMorph: bottomMorph4 proportionalWidth: 0.3.	self layoutMorph		addMorph: upperMorph proportionalHeight: 0.25;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.55;		addAdjusterAndMorph: bottomMorph proportionalHeight: 0.2! !!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 15:54'!customButtonRow	"Answer a button pane affording the user one-touch access to certain functions; the pane is given the formal name 'customButtonPane' by which it can be retrieved by code wishing to send messages to widgets residing on the pane"	| button buttons row buttonColor |		buttons _ OrderedCollection new.	buttonColor _ Theme current buttonColorFrom: self windowColor.	"button with target = self"	button _ PluggableButtonMorph 		model: self		stateGetter: nil		action: #proceed.	button color: buttonColor.	button label: 'Proceed'.	button setBalloonText: 'close the debugger and proceed.'.	buttons add: button.	"buttons with model target"	self customButtonSpecs do: [ :tuple |		button _ PluggableButtonMorph 					model: model					stateGetter: nil					action: tuple second.		button color: buttonColor.		button label: tuple first asString.		tuple size > 2 ifTrue: [button setBalloonText: tuple third].		buttons add: button].	row _ LayoutMorph newRow.	row color: buttonColor.	row addMorphs: buttons.	^row! !!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 15:54'!customButtonSpecs	"Answer an array of elements of the form wording, selector, help-message, that characterize the custom button row of a debugger."	^#(		('Restart'		restart				'reset this context to its start.')		('Into'			send					'step Into message sends')		('Over'			doStep				'step Over message sends')		('Through'		stepIntoBlock		'step into a block')		('Full Stack'		fullStack				'show full stack')		('Where'		where					'select current pc range'))! !!DebuggerWindow methodsFor: 'menu building' stamp: 'jmv 4/25/2011 17:25'!contextStackMenu	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList: #(			('fullStack (f)'				fullStack					''		model)			('restart (r)'					restart					''		model)			('proceed (p)'				proceed)			('step (t)'					doStep					''		model)			('step through (T)'			stepIntoBlock			''		model)			('send (e)'					send						''		model)			('where (w)'					where						''		model)			('peel to first like this'		peelToFirst				''		model)			-			('return entered value'		returnValue)			('toggle break on entry'	toggleBreakOnEntry	''		model)		).	^aMenu! !!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 13:17'!contextClassHierarchy	HierarchyBrowserWindow		onClass: model contextVariablesInspector selectedClassOrMetaClass		selector: nil! !!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 13:57'!exploreContextSelection	model contextVariablesInspector selectionIndex = 0 ifTrue: [^ self flash].	^ model contextVariablesInspector selection explore! !!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 13:57'!exploreReceiverSelection	model receiverInspector selectionIndex = 0 ifTrue: [^ self flash].	^ model receiverInspector  selection explore! !!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 16:14'!proceed	"Proceed execution of the receiver's model, starting after the expression at 	which an interruption occurred."	Smalltalk okayToProceedEvenIfSpaceIsLow ifTrue: [		"current process might get terminated..."		[ self delete ] fork.		model proceed ]! !!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 13:18'!receiverClassHierarchy	HierarchyBrowserWindow		onClass: model receiverInspector selectedClassOrMetaClass		selector: nil! !!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 17:26'!returnValue	| expression |	expression _ FillInTheBlank request: 'Enter expression for return value:'.	model returnValue: expression! !!DebuggerWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 4/25/2011 15:51'!contextStackKey: aChar from: view	"Respond to a keystroke in the context list"	aChar == $e ifTrue: [^ model send].	aChar == $t ifTrue: [^ model doStep].	aChar == $T ifTrue: [^ model stepIntoBlock].	aChar == $p ifTrue: [^ self proceed].	aChar == $r ifTrue: [^ model restart].	aChar == $f ifTrue: [^ model fullStack].	aChar == $w ifTrue: [^ model where].	^ self messageListKey: aChar from: view! !!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 14:02'!morphicDirectoryTreePane	^(SimpleHierarchicalListMorph 		model: model		listGetter: #initialDirectoryList		indexGetter: #currentDirectorySelected		indexSetter: #setSelectedDirectoryTo:		mainView: self		menuGetter: #volumeMenu		keystrokeAction: nil)			autoDeselect: false;			enableDrag: false;			enableDrop: true;			yourself! !!FileListWindow methodsFor: 'updating' stamp: 'jmv 4/25/2011 14:09'!update: aSymbol	super update: aSymbol.	aSymbol = #updateButtonRow		ifTrue: [ self updateButtonRow]! !!FileListWindow methodsFor: 'updating' stamp: 'jmv 4/25/2011 14:09'!updateButtonRow	| row |	row _ self 		findDeepSubmorphThat: [:m | m hasProperty: #buttonRow]		ifAbsent: [^self].			self updateButtonRow: row! !!HierarchyBrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 13:17'!onClass: aClass selector: aSymbol	"Open a new full browser set to class.	HierarchyBrowserWindow onClass: Morph selector: #submorphs	HierarchyBrowserWindow onClass: Morph selector: nil	"	| newBrowser |	newBrowser _ HierarchyBrowser for: aClass selector: aSymbol.	HierarchyBrowserWindow openNoSysCat: newBrowser label: newBrowser labelString.	newBrowser assureSelectionsShow! !!InspectorWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 14:40'!buildMorphicWindow	" Inspector openAsMorphOn: SystemOrganization "	| contentsText list upperRow evaluatorText |	list _ PluggableListMorph			model: model 			listGetter: #fieldList			indexGetter: #selectionIndex			indexSetter: #toggleIndex:			mainView: self			menuGetter: #fieldListMenu			keystrokeAction: #inspectorKey:from:.	contentsText _ TextModelMorph			textProvider: model			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection.	evaluatorText _ (TextModelMorph textProvider: model)			askBeforeDiscardingEdits: false.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: list proportionalWidth: 0.3;		addAdjusterAndMorph: contentsText proportionalWidth: 0.7.	self layoutMorph		addMorph: upperRow proportionalHeight: 0.7;		addAdjusterAndMorph: evaluatorText proportionalHeight: 0.3.	self setLabel: model object defaultLabelForInspector.	self setUpdatablePanesFrom: #(fieldList)! !!InspectorWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 15:19'!initialExtent	^250@200! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 13:19'!browseHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."	HierarchyBrowserWindow		onClass: model selectedClassOrMetaClass		selector: nil! !!ObjectExplorerWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 13:20'!buildMorphicWindow	| listMorph textMorph |	.listMorph _ SimpleHierarchicalListMorph 			model: model			listGetter: #getList			indexGetter: #getCurrentSelection			indexSetter: #noteNewSelection:			mainView: self			menuGetter: #genericMenu			keystrokeAction: #explorerKey:from:.	listMorph autoDeselect: false.	textMorph _ (TextModelMorph textProvider: model)			askBeforeDiscardingEdits: false.	self layoutMorph		addMorph: listMorph proportionalHeight: 0.8;		addAdjusterAndMorph: textMorph proportionalHeight: 0.2.	self setLabel: (model rootObject printStringLimitedTo: 64)! !!ObjectExplorerWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 15:19'!initialExtent	^300@500! !!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 13:19'!browseHierarchy	"Create and schedule a class list browser on the receiver's hierarchy."	HierarchyBrowserWindow		onClass: model selectedClass		selector: nil! !!PreDebugWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 15:57'!buildMorphicWindowMessage: messageString	| notifyPane |	model expandStack.	messageString		ifNil: [			notifyPane _ PluggableListMorph				model: model				listGetter: #contextStackList				indexGetter: #contextStackIndex				indexSetter: nil				mainView: self				menuGetter: nil				keystrokeAction: nil ]		ifNotNil: [			notifyPane _ TextModelMorph withText: messageString.			notifyPane askBeforeDiscardingEdits: false ].	self layoutMorph		addMorph: (self buttonRowForPreDebugWindow: model) proportionalHeight: 0.2;		addAdjusterAndMorph: notifyPane proportionalHeight: 0.8.	self widgetsColor: Theme current debugger! !!PreDebugWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 15:40'!buttonRowForPreDebugWindow: aDebugger	| row aButton quads buttons |	buttons _ OrderedCollection new.	quads _ OrderedCollection withAll: self preDebugButtonQuads.	(aDebugger interruptedContext selector == #doesNotUnderstand:) ifTrue: [		quads add: { 'Create'. #createMethod. #magenta. 'create the missing method' }	].	quads do: [ :quad |		aButton _ PluggableButtonMorph new model: self.		aButton color: Color transparent.		aButton action: quad second.		aButton label: quad first.		aButton color: (Color colorFrom: quad third) muchLighter.		aButton setBalloonText: quad fourth.		buttons add: aButton].		row _ LayoutMorph newRow.	row addMorphs: buttons.	^row! !!PreDebugWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 15:34'!preDebugButtonQuads	^{	{'Proceed'.		#proceed. 	#blue. 	'continue execution'}.	{'Abandon'.		#abandon. 	#black.	'abandon this execution by closing this window'}.	{'Debug'.		#debug.		#red. 		'bring up a debugger'}}! !!PreDebugWindow methodsFor: 'button actions' stamp: 'jmv 4/25/2011 15:45'!abandon	"abandon the debugger from its pre-debug notifier"	self delete! !!PreDebugWindow methodsFor: 'button actions' stamp: 'jmv 4/25/2011 16:03'!askForSuperclassOf: aClass toImplement: aSelector ifCancel: cancelBlock	| classes chosenClassIndex |	classes _ aClass withAllSuperclasses.	chosenClassIndex _ PopUpMenu		withCaption: 'Define #', aSelector, ' in which class?'		chooseFrom: (classes collect: [:c | c name]).	chosenClassIndex = 0 ifTrue: [^ cancelBlock value].	^ classes at: chosenClassIndex! !!PreDebugWindow methodsFor: 'button actions' stamp: 'jmv 4/25/2011 16:02'!createMethod	"Should only be called when this Debugger was created in response to a	MessageNotUnderstood exception. Create a stub for the method that was	missing and proceed into it."		| msg chosenClass ctx |	ctx _ model interruptedContext.	msg _ ctx tempAt: 1.	chosenClass _ self		askForSuperclassOf: ctx receiver class		toImplement: msg selector		ifCancel: [^self].	model implement: msg inClass: chosenClass.	self debug! !!PreDebugWindow methodsFor: 'button actions' stamp: 'jmv 4/25/2011 16:05'!debug	"Open a full DebuggerView."	| m |	m _ model.	self model: nil.  "so close won't release me."	m breakDependents.	self delete.	m openFullMorphicLabel: self label! !!PreDebugWindow methodsFor: 'button actions' stamp: 'jmv 4/25/2011 16:14'!proceed	"Proceed execution of the receiver's model, starting after the expression at 	which an interruption occurred."	Smalltalk okayToProceedEvenIfSpaceIsLow ifTrue: [		"current process might get terminated..."		[self delete] fork.		model proceed. ]! !!PreDebugWindow class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 15:39'!open: model label: aString message: messageString	|  window extentToUse |	window _ self new.	window		model: model;		buildMorphicWindowMessage: messageString.	aString ifNotNil: [ window setLabel: aString ].	extentToUse _ 560 @ 300.	"nice and wide to show plenty of the error msg"	 window openInWorldExtent: extentToUse! !!ProcessBrowserWindow methodsFor: 'initialization' stamp: 'jmv 4/25/2011 14:24'!initialize	super initialize.	isStepping _ false.! !!ProcessBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 13:47'!buildMorphicWindow	"Create a pluggable version of me, answer a window"	| aTextMorph list1 list2 upperRow |	list1 _ (PluggableListMorph				model: model				listGetter: #processNameList				indexGetter: #processListIndex				indexSetter: #processListIndex:				mainView: self				menuGetter: #processListMenu				keystrokeAction: #processListKey:from:)			enableDragNDrop: false.	list2 _ (PluggableListMorph				model: model				listGetter: #stackNameList				indexGetter: #stackListIndex				indexSetter: #stackListIndex:				mainView: self				menuGetter: #stackListMenu				keystrokeAction: #stackListKey:from:)			enableDragNDrop: false.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: list1 proportionalWidth: 0.5;		addAdjusterAndMorph: list2 proportionalWidth: 0.5.	aTextMorph _ TextModelMorph				textProvider: model				textGetter: #selectedMethod.	aTextMorph askBeforeDiscardingEdits: false.	self layoutMorph		addMorph: upperRow proportionalHeight: 0.5;		addAdjusterAndMorph: aTextMorph proportionalHeight: 0.5.	self setUpdatablePanesFrom: #(#processNameList #stackNameList ).	self setLabel: 'Process Browser'! !!ProcessBrowserWindow methodsFor: 'updating' stamp: 'jmv 4/25/2011 13:51'!setUpdateCallbackAfter: seconds	[		(Delay forSeconds: seconds) wait.		WorldState addDeferredUIMessage: [ model updateProcessList ]] fork! !!ProcessBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/25/2011 14:31'!processListMenu	| pw menu |	menu _ MenuMorph new defaultTarget: self.	model selectedProcess		ifNotNil: [ :selectedProcess |			| nameAndRules | 			nameAndRules _ model nameAndRulesForSelectedProcess.			menu addList: #(				('inspect (i)'					#inspectProcess)				('explore (I)'				#exploreProcess)				('inspect Pointers (P)'		#inspectPointers)).			nameAndRules second				ifTrue: [					menu add: 'terminate (t)' target: model action: #terminateProcess.					selectedProcess isSuspended						ifTrue: [menu add: 'resume (r)' target: model action: #resumeProcess]						ifFalse: [menu add: 'suspend (s)' target: model action: #suspendProcess]].			nameAndRules third				ifTrue: [					menu addList: #(						('change priority (p)'		 	#changePriority)						('debug (d)'						#debugProcess))].			menu addList: #(('profile messages (m)'	#messageTally)).			(selectedProcess suspendingList isKindOf: Semaphore)				ifTrue: [menu add: 'signal Semaphore (S)' target: model action: #signalSemaphore].			menu add: 'full stack (k)' target: model action: #moreStack.			menu addLine].	menu addList: #(		('find context... (f)'		#findContext)		('find again (g)'			#nextContext		''		model)).	menu addLine.	menu		add: (isStepping				ifTrue: ['turn off auto-update (a)']				ifFalse: ['turn on auto-update (a)'])		action: #toggleAutoUpdate.	menu add: 'update list (u)' target: model action: #updateProcessList.	pw _ Smalltalk at: #CPUWatcher ifAbsent: nil.	pw ifNotNil: [		menu addLine.		pw isMonitoring				ifTrue: [ menu add: 'stop CPUWatcher' action: #stopCPUWatcher ]				ifFalse: [ menu add: 'start CPUWatcher' action: #startCPUWatcher  ]].	^ menu! !!ProcessBrowserWindow methodsFor: 'menu building' stamp: 'jmv 4/25/2011 14:25'!toggleAutoUpdate	isStepping		ifTrue: [ self stopAutoUpdate ]		ifFalse: [ self startAutoUpdate ].! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 14:30'!startAutoUpdate	self startStepping.	isStepping _ true! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 13:50'!startCPUWatcher	model startCPUWatcher ifTrue: [		self setUpdateCallbackAfter: 7 ]! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 14:30'!stopAutoUpdate	self stopStepping.	isStepping _ false! !!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 14:25'!stopCPUWatcher	model stopCPUWatcher! !!ProcessBrowserWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 4/25/2011 14:22'!processListKey: aKey from: aView 	^ aKey caseOf: {		[$i] -> [self inspectProcess].		[$I] -> [self exploreProcess].		[$P] -> [self inspectPointers].		[$t] -> [model terminateProcess].		[$r] -> [model resumeProcess].		[$s] -> [model suspendProcess].		[$d] -> [self debugProcess].		[$p] -> [self changePriority].		[$m] -> [self messageTally].		[$f] -> [self findContext].		[$g] -> [model nextContext].		[$a] -> [self toggleAutoUpdate].		[$u] -> [model updateProcessList].		[$S] -> [model signalSemaphore].		[$k] -> [model moreStack]}		 otherwise: []! !!ProcessBrowserWindow methodsFor: 'stepping' stamp: 'jmv 4/25/2011 14:21'!stepTime	"Update 5 times per second."	^ 200! !!TaskbarTest methodsFor: 'test cases' stamp: 'jmv 4/25/2011 16:49'!testHorizontalAlignment		self should: [ taskbar bounds left = World bounds left ]! !!TaskbarTest methodsFor: 'test cases' stamp: 'jmv 4/25/2011 16:49'!testVerticalAlignment		self should: [ taskbar bounds bottom = World bounds bottom ]! !!TestRunner methodsFor: 'accessing' stamp: 'jmv 4/25/2011 16:36'!completedFraction	^completedTests / totalTests! !!TestRunner methodsFor: 'accessing' stamp: 'jmv 4/25/2011 16:36'!progressLabel	^progressLabel! !!TestRunner methodsFor: 'processing' stamp: 'jmv 4/25/2011 16:43'!runSuite: suite	running ifNotNil: [ ^self inform: 'already running' ].	suite addDependent: self.	totalTests _ suite tests size.	completedTests _ 0.	runSemaphore initSignals.	running _ [            [ result _ suite run ]	            ensure: [		            running _ nil.				suite removeDependent: self.				runSemaphore signal.				WorldState addDeferredUIMessage: [					self updateWindow: result.			      	self changed: #runTests.			      	self changed: #runOneTest.				].	            ].     ] newProcess.	self runWindow.      self changed: #runTests.      self changed: #runOneTest.      running	      priority: Processor userBackgroundPriority;	      resume.! !!TestRunner methodsFor: 'updating' stamp: 'jmv 4/25/2011 16:42'!update: aParameter 	"updates come in from another thread"	(aParameter isKindOf: TestCase)		ifTrue: [			WorldState addDeferredUIMessage: [				completedTests _ completedTests + 1.				progressLabel _ aParameter printString.				self changed: #progress ]]		ifFalse: [ super update: aParameter ]! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 17:22'!buildLowerPanes	| failuresList errorsList column |	progress _ ProgressMorph label: '' subLabel: ''.	self buildPassFailText.	self buildDetailsText.	failuresList _ self buildFailuresList.	errorsList _ self buildErrorsList.	column _ LayoutMorph newColumn.	column		addMorph: progress fixedHeight: 50;		addAdjusterAndMorph: passFailText fixedHeight: 26;		addAdjusterAndMorph: detailsText fixedHeight: 26;		addAdjusterAndMorph: failuresList proportionalHeight: 0.6;		addAdjusterAndMorph: errorsList proportionalHeight: 0.6.	^ column! !!TestRunnerWindow methodsFor: 'updating' stamp: 'jmv 4/25/2011 17:19'!update: aSymbol	super update: aSymbol.	aSymbol == #runTests ifTrue: [		self updateColors ].	aSymbol == #progress ifTrue: [		model ifNotNil: [			progress label: 'Test progress' subLabel: model progressLabel.			progress done: model completedFraction asFloat ]]! !!TestRunnerWindow methodsFor: 'updating' stamp: 'jmv 4/25/2011 17:23'!updateColors	| aTestResult theColor |	theColor _ self windowColor.	model ifNotNil: [		model runButtonState ifFalse: [			aTestResult _ model result.			theColor _ aTestResult errors size + aTestResult failures size = 0				ifTrue: [ Color green lighter ]				ifFalse: [					aTestResult errors size > 0						ifTrue: [ Color red lighter ]						ifFalse: [ Color yellow lighter ]]].		self updatePartColors: theColor ]! !Utilities class removeSelector: #methodHierarchyBrowserForClass:selector:!Utilities class removeSelector: #spawnHierarchyForClass:selector:!!classDefinition: #TestRunnerWindow category: #'Morphic-Tools'!SystemWindow subclass: #TestRunnerWindow	instanceVariableNames: 'passFailText detailsText progress'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Tools'!TestRunner removeSelector: #installProgressWatcher!TestRunner removeSelector: #removeProgressWatcher!TestRunner removeSelector: #updateProgressWatcher:!!classDefinition: #TestRunner category: #'SUnit-UI'!Model subclass: #TestRunner	instanceVariableNames: 'result details passFail failures errors tests lastPass selectedFailureTest selectedErrorTest selectedSuite filter selectedSuites running runSemaphore completedTests totalTests progressLabel'	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-UI'!ProcessBrowserWindow removeSelector: #step!!classDefinition: #ProcessBrowserWindow category: #'Morphic-Tools'!SystemWindow subclass: #ProcessBrowserWindow	instanceVariableNames: 'isStepping'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Tools'!!ProcessBrowserWindow reorganize!('initialization' initialize)('GUI building' buildMorphicWindow)('updating' setUpdateCallbackAfter:)('menu building' processListMenu stackListMenu toggleAutoUpdate)('menu commands' browseContext changePriority debugProcess exploreContext exploreProcess exploreReceiver findContext inspectContext inspectPointers inspectProcess inspectReceiver messageTally startAutoUpdate startCPUWatcher stopAutoUpdate stopCPUWatcher)('keyboard shortcuts' processListKey:from: stackListKey:from:)('stepping' stepTime)!PreDebugWindow class removeSelector: #buttonRowForPreDebugWindow:!PreDebugWindow class removeSelector: #openMorphicNotifierLabelled:message:debugger:!PreDebugWindow class removeSelector: #preDebugButtonQuads!!PreDebugWindow class reorganize!('instance creation' open:label:message:)!PreDebugWindow removeSelector: #buildMorphicWindowLabel:message:!!PreDebugWindow reorganize!('GUI building' buildMorphicWindowMessage: buttonRowForPreDebugWindow: preDebugButtonQuads)('button actions' abandon askForSuperclassOf:toImplement:ifCancel: createMethod debug proceed)!!HierarchyBrowserWindow class reorganize!('GUI building' onClass:selector:)!!FileListWindow reorganize!('GUI building' buildMorphicWindow buttonToTriggerIn:for: morphicDirectoryTreePane morphicFileContentsPane morphicFileListPane morphicPatternPane optionalButtonRow updateButtonRow: windowColor)('menu building' fileListMenu fileSelectedMenu noFileSelectedMenu volumeMenu)('updating' update: updateButtonRow)('updaing')!DebuggerWindow class removeSelector: #buttonRowForPreDebugWindow:!DebuggerWindow class removeSelector: #openMorphicNotifierLabelled:message:debugger:!DebuggerWindow class removeSelector: #preDebugButtonQuads!!DebuggerWindow class reorganize!('as yet unclassified')!CodeWindow removeSelector: #windowColor!SystemWindow removeSelector: #applyModelExtent!ProgressMorph removeSelector: #defaultBounds!!classDefinition: #ProgressMorph category: #'Morphic-Widgets'!LayoutMorph subclass: #ProgressMorph	instanceVariableNames: 'labelMorph subLabelMorph progress'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!ProcessBrowser initialize!ProcessBrowser class removeSelector: #startUp!ProcessBrowser removeSelector: #changePriority!ProcessBrowser removeSelector: #debugProcess!ProcessBrowser removeSelector: #exploreProcess!ProcessBrowser removeSelector: #findContext!ProcessBrowser removeSelector: #hasView!ProcessBrowser removeSelector: #inspectPointers!ProcessBrowser removeSelector: #inspectProcess!ProcessBrowser removeSelector: #isAutoUpdating!ProcessBrowser removeSelector: #isAutoUpdatingPaused!ProcessBrowser removeSelector: #messageTally!ProcessBrowser removeSelector: #pauseAutoUpdate!ProcessBrowser removeSelector: #processListKey:from:!ProcessBrowser removeSelector: #setUpdateCallbackAfter:!ProcessBrowser removeSelector: #startAutoUpdate!ProcessBrowser removeSelector: #startedCPUWatcher!ProcessBrowser removeSelector: #stopAutoUpdate!ProcessBrowser removeSelector: #toggleAutoUpdate!!classDefinition: #ProcessBrowser category: #'Tools-Debugger'!Model subclass: #ProcessBrowser	instanceVariableNames: 'selectedProcess selectedContext methodText processList processListIndex stackList stackListIndex selectedClass selectedSelector searchString'	classVariableNames: 'SuspendedProcesses'	poolDictionaries: ''	category: 'Tools-Debugger'!!ProcessBrowser reorganize!('accessing' pointers processList processListIndex processListIndex: searchString selectedMethod selectedProcess selectedSelector stackList stackListIndex stackListIndex: text)('initialize-release' initialize startCPUWatcher stopCPUWatcher windowIsClosing)('menus' selectedClass)('message handling')('process actions' nameAndRulesFor: nameAndRulesForSelectedProcess resumeProcess signalSemaphore suspendProcess terminateProcess wasProcessSuspendedByProcessBrowser:)('process list' findContext: nextContext notify:at:in: prettyNameForProcess: processNameList updateProcessList)('stack list' changeStackListTo: moreStack pcRange selectedContext stackNameList updateStackList updateStackList:)('updating')('views' editorClass)('stepping' step)!Preferences class removeSelector: #cpuWatcherEnabled!Preferences class removeSelector: #restartAlsoProceeds!ObjectExplorer removeSelector: #initialExtent!Morph removeSelector: #initialExtent!MessageSet removeSelector: #adjustWindowTitleAfterFiltering!Inspector removeSelector: #initialExtent!HierarchyBrowser class removeSelector: #newFor:!!HierarchyBrowser class reorganize!('instance creation' for: for:selector:)!HierarchyBrowser removeSelector: #systemCatSingletonKey:from:!FileList removeSelector: #optionalButtonSpecs!FileList removeSelector: #updateButtonRow!FileContentsBrowser removeSelector: #browseMethodFull!FileContentsBrowser removeSelector: #classListKey:from:!FileContentsBrowser removeSelector: #findClass!FileContentsBrowser removeSelector: #messageListKey:from:!FileContentsBrowser removeSelector: #methodHierarchy!FileContentsBrowser removeSelector: #packageListKey:from:!Debugger removeSelector: #abandon!Debugger removeSelector: #abandon:!Debugger removeSelector: #askForSuperclassOf:toImplement:ifCancel:!Debugger removeSelector: #createMethod!Debugger removeSelector: #debug!Debugger removeSelector: #debugAt:!Debugger removeSelector: #initialExtent!Debugger removeSelector: #proceed:!Debugger removeSelector: #resumeProcess:!Debugger removeSelector: #returnValue!ChangeSorter removeSelector: #classListKey:from:!ChangeSorter removeSelector: #findCngSet!ChangeSorter removeSelector: #messageListKey:from:!ChangeList class removeSelector: #getRecentLocatorWithPrompt:!ChangeList removeSelector: #selectSuchThat!Browser removeSelector: #classNotFound!Browser removeSelector: #findClass!Browser removeSelector: #systemCatSingletonKey:from:!CodeProvider removeSelector: #addContentsTogglesTo:!CodeProvider removeSelector: #browseClassRefs!CodeProvider removeSelector: #browseFullProtocol!CodeProvider removeSelector: #browseHierarchy!CodeProvider removeSelector: #browseImplementors!CodeProvider removeSelector: #browseSenders!CodeProvider removeSelector: #classListKey:from:!CodeProvider removeSelector: #getSelectorAndSendQuery:to:!CodeProvider removeSelector: #getSelectorAndSendQuery:to:with:!CodeProvider removeSelector: #messageListKey:from:!CodeProvider removeSelector: #methodHierarchy!CodeProvider removeSelector: #openSingleMessageBrowser!CodeProvider removeSelector: #packageListKey:from:!CodeProvider removeSelector: #selectMessageAndEvaluate:!CodeProvider removeSelector: #sendQuery:to:!CodeProvider removeSelector: #spawnHierarchy!CodeProvider removeSelector: #systemCatListKey:from:!CPUWatcher class removeSelector: #monitorPreferenceChanged!CPUWatcher class removeSelector: #startUp!AbstractHierarchicalList removeSelector: #update:!Model removeSelector: #containingWindow!Model removeSelector: #topView!DisplayObject removeSelector: #initialExtent!ChangeSet removeSelector: #postscriptHasDependents!ArrayLiteralTest removeSelector: #array!Object removeSelector: #initialExtent!