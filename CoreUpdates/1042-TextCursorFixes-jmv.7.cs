'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 27 June 2011 at 1:43:28 pm'!"Change Set:		1042-TextCursorFixes-jmvDate:			27 June 2011Author:			Juan VuletichWe'll break existing Paragraph instances, so better close all windows."World submorphsDo: [ :a | a delete ].!!classDefinition: #Paragraph category: #'System-Text'!Object subclass: #Paragraph	instanceVariableNames: 'model container lines positionWhenComposed maxRightX selectionStartBlocks selectionStopBlocks focused editor showCaret caretRect lastCaretRect lastCaretRectNeedsRedraw '	classVariableNames: ''	poolDictionaries: ''	category: 'System-Text'!!BareTextMorph methodsFor: 'drawing' stamp: 'jmv 6/27/2011 13:28'!drawOn: aCanvas	"Draw the receiver on a canvas"	| fauxBounds |	false ifTrue: [self debugDrawLineRectsOn: aCanvas].  "show line rects for debugging"	"Hack here:  The canvas expects bounds to carry the location of the text, but we also need to communicate clipping."	fauxBounds _ bounds topLeft corner: self innerBounds bottomRight.	aCanvas paragraph: self paragraph bounds: fauxBounds color: color.	"Drawing the paragraph might change the #lastCaretRect, and therefor might	require a second update."	paragraph lastCaretRectNeedsRedraw ifTrue: [		paragraph lastCaretRect ifNotNil: [ :r | self invalidRect: r ]]! !!BareTextMorph methodsFor: 'blinking cursor' stamp: 'jmv 6/27/2011 11:30'!onBlinkCursor	"Blink the cursor"	paragraph ifNil: [ ^nil ].	paragraph showCaret: paragraph showCaret not | pauseBlinking.	pauseBlinking _ false.	paragraph lastCaretRect ifNotNil: [ :r | self invalidRect: r].! !!BareTextMorph methodsFor: 'blinking cursor' stamp: 'jmv 6/27/2011 13:21'!pauseBlinking	"Show a solid cursor (non blinking) for a short while"	pauseBlinking _ true.	paragraph ifNotNil: [		"Show cursor right now if needed"		paragraph showCaret ifFalse: [			paragraph showCaret: true.			paragraph lastCaretRect ifNotNil: [ :r | self invalidRect: r ]]]! !!BareTextMorph methodsFor: 'blinking cursor' stamp: 'jmv 6/27/2011 13:22'!startBlinking	"And show the cursor"	pauseBlinking _ true.	"Start blinking in a short while"	paragraph ifNotNil: [ paragraph showCaret: true ].	self		startStepping: #onBlinkCursor		at: Time millisecondClockValue		arguments: nil		stepTime: 500.! !!BareTextMorph methodsFor: 'blinking cursor' stamp: 'jmv 6/27/2011 11:30'!stopBlinking	"And do not show cursor anymore."	self stopSteppingSelector: #onBlinkCursor.	paragraph ifNotNil: [		"Hide cursor right now if needed"		paragraph showCaret ifTrue: [			paragraph showCaret: false.			paragraph lastCaretRect ifNotNil: [ :r | self invalidRect: r ]]]! !!FormCanvas methodsFor: 'testing' stamp: 'jmv 6/27/2011 13:09'!isFullyVisible: aRectangle	"Optimization"	(aRectangle right + origin x) > clipRect right	ifTrue: [^ false].	(aRectangle left + origin x) < clipRect left		ifTrue: [^ false].	(aRectangle bottom + origin y) > clipRect bottom	ifTrue: [^ false].	(aRectangle top + origin y) < clipRect top		ifTrue: [^ false].	^ true! !!OneLineEditorMorph methodsFor: 'drawing' stamp: 'jmv 6/27/2011 13:14'!displayInsertionMarkAtX: x top: top bottom: bottom emphasis: emphasis on: aCanvas	| caretColor x1 isBold isItalic x0 h w halfW r |	isBold _ emphasis allMask: 1.	isItalic _ emphasis allMask: 2.	caretColor _ Theme current insertionPoint.	h _ bottom - top.	w _ isBold		ifTrue: [ h // 25 + 2 ]		ifFalse: [ h // 30 + 1 ].	halfW _ w // 2.	isItalic		ifTrue: [				x0 _ x - (h * 1 // 22) - 3.			x1 _ x + (h * 4 // 22 ) - 3.			isBold ifTrue: [				x0 _ x0 - 3.				x1 _ x1 - 3 ]]		ifFalse: [			x0 _ x.			x1 _ x].	x0 < halfW ifTrue: [		x1 _ x1 - x0 + halfW.		x0 _ halfW ].	r _ bounds right-halfW-1.	r < x1 ifTrue: [		x0 _ x0 + r - x1.		x1 _ r.		].	caretRect _ x0-halfW@ top corner: x1+halfW+1 @ bottom.	aCanvas		line: x0@(bottom-halfW) to: x1@(top+halfW)		width: w color: caretColor! !!OneLineEditorMorph methodsFor: 'drawing' stamp: 'jmv 6/27/2011 13:14'!drawCaretOn: aCanvas	"Essentially copied from #displayInsertionMarkAtX:top:bottom:emphasis:on:"	|  top bottom x |	showCaret ifTrue: [		top _ bounds top.		bottom _ top + self baseFont height.		x _ (self fontToUse widthOfString: contents from: 1 to: editor startIndex-1) + bounds left.		self displayInsertionMarkAtX: x top: top bottom: bottom emphasis: emphasis on: aCanvas ]! !!Paragraph methodsFor: 'access' stamp: 'jmv 6/27/2011 13:27'!lastCaretRect	"Warning: Could be not updated, it is the one for when the caret was last drawn."	^lastCaretRect! !!Paragraph methodsFor: 'access' stamp: 'jmv 6/27/2011 13:28'!lastCaretRectNeedsRedraw	^lastCaretRectNeedsRedraw! !!Paragraph methodsFor: 'display' stamp: 'jmv 6/27/2011 13:27'!displayInsertionMarkAtX: x top: top bottom: bottom emphasis: emphasis on: aCanvas	| caretColor x1 isBold isItalic x0 h w halfW r newCaretRect |	isBold _ emphasis allMask: 1.	isItalic _ emphasis allMask: 2.	caretColor _ Theme current insertionPoint.	h _ bottom - top.	w _ isBold		ifTrue: [ h // 25 + 2 ]		ifFalse: [ h // 30 + 1 ].	halfW _ w // 2.	isItalic		ifTrue: [				x0 _ x - (h * 1 // 22) - 3.			x1 _ x + (h * 4 // 22 ) - 3.			isBold ifTrue: [				x0 _ x0 - 3.				x1 _ x1 - 3 ]]		ifFalse: [			x0 _ x.			x1 _ x].	x0 < halfW ifTrue: [		x1 _ x1 - x0 + halfW.		x0 _ halfW ].	r _ container right-halfW-1.	r < x1 ifTrue: [		x0 _ x0 + r - x1.		x1 _ r.		].	lastCaretRectNeedsRedraw _ false.	newCaretRect _ x0-halfW@ top corner: x1+halfW+1 @ bottom.	lastCaretRect ifNotNil: [		lastCaretRect = newCaretRect ifFalse: [			"If we are actually drawing the last position of the text cursor,			but not the current one, request redraw."			((aCanvas isVisible: lastCaretRect) and: [(aCanvas isFullyVisible: newCaretRect) not ])				ifTrue: [					lastCaretRectNeedsRedraw _ true ]]].	lastCaretRect _ newCaretRect.	aCanvas		line: x0@(bottom-halfW) to: x1@(top+halfW)		width: w color: caretColor! !!Paragraph methodsFor: 'display' stamp: 'jmv 6/27/2011 13:27'!displaySelectionStartBlock: startBlock stopBlock: stopBlock InLine: line on: aCanvas	| leftX rightX idx caretFont t b caretAttributes |	startBlock ifNil: [^self].	"No selection"	startBlock = stopBlock 		ifTrue: [			"Only show caret on line where clicked"			startBlock textLine first = line first ifFalse: [				^self ].			leftX _ startBlock left.			idx _ startBlock stringIndex.			caretAttributes _ editor ifNotNil: [ editor currentAttributes ].			caretFont _ caretAttributes				ifNil: [ self text fontAt: idx ]				ifNotNil: [ self text fontIfApplying: caretAttributes ].			b _ line top + line baseline + caretFont descent.			t _ line top + line baseline - caretFont ascent.			showCaret ifTrue: [				self					displayInsertionMarkAtX: leftX					top: t					bottom: b					emphasis: caretFont emphasis					on: aCanvas ]]		ifFalse: [			"Test entire selection before or after here"			(stopBlock stringIndex < line first 				or: [startBlock stringIndex > (line last + 1)])					ifTrue: [^self].	"No selection on this line"			(stopBlock stringIndex = line first 				and: [stopBlock textLine ~= line])					ifTrue: [^self].	"Selection ends on line above"			(startBlock stringIndex = (line last + 1) 				and: [stopBlock textLine ~= line])					ifTrue: [^self].			lastCaretRect _ nil.			lastCaretRectNeedsRedraw _ false.			leftX _ (startBlock stringIndex < line first 				ifTrue: [ line ]				ifFalse: [ startBlock ]) left.			rightX _ (stopBlock stringIndex > (line last + 1) or: [					stopBlock stringIndex = (line last + 1) 						and: [stopBlock textLine ~= line]]) 				ifTrue: [line right]				ifFalse: [stopBlock left].			aCanvas				fillRectangle: (leftX @ line top corner: rightX @ line bottom)				colorOrInfiniteForm: self selectionColor].	"Selection begins on line below"! !!Paragraph methodsFor: 'initialization' stamp: 'jmv 6/27/2011 13:28'!initialize	focused _ false.	showCaret _ false.	positionWhenComposed _ 0@0.	selectionStartBlocks _ #().	selectionStopBlocks _ #().	lastCaretRectNeedsRedraw _ false! !Paragraph removeSelector: #caretRect!Paragraph removeSelector: #displayThinInsertionMarkAtX:top:bottom:emphasis:on:!!classDefinition: #Paragraph category: #'System-Text'!Object subclass: #Paragraph	instanceVariableNames: 'model container lines positionWhenComposed maxRightX selectionStartBlocks selectionStopBlocks focused editor showCaret lastCaretRect lastCaretRectNeedsRedraw'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Text'!OneLineEditorMorph removeSelector: #displayThinInsertionMarkAtX:top:bottom:emphasis:on:!