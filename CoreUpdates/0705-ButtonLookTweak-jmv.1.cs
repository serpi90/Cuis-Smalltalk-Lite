'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 9 December 2010 at 9:28:54 am'!!PluggableButtonMorph methodsFor: 'drawing' stamp: 'jmv 12/9/2010 09:28'!drawRoundGradientLookOn: aCanvas	| w f center x y r colorForButton colorForLabel rect colorForButtonGradient lh height left top width bottomLeftForm bottomRightForm gradientForm topLeftForm topRightForm labelMargin l availableW targetSize |	aCanvas		fillRectangle: bounds		fillStyle: 			"(color adjustSaturation: -0.3 brightness: 0)"			(Color h: color hue s: color saturation * 0.3 v: color brightness "*0+ 0.8").	rect _ bounds insetBy: 2@3.	colorForButton _ self fillStyle asColor.	colorForLabel _ Theme current buttonLabel.	self isPressed		ifFalse: [			self mouseIsOver				ifTrue: [ "colorForButton _ colorForButton adjustSaturation: 0.0 brightness: 0.0" ]				ifFalse: [					"colorForButton _ colorForButton adjustSaturation: -0.02 brightness: 0.03"					colorForButton _ Color h: colorForButton hue s: colorForButton saturation * 0.5 v: colorForButton brightness.					colorForLabel _ colorForLabel adjustSaturation: -0.15 brightness: 0.15					].			colorForButtonGradient _ colorForButton * Theme current buttonGradientBottomFactor.			gradientForm _ self class buttonGradient.			topLeftForm _ self class roundedCornerTL.			topRightForm _ self class roundedCornerTR.			bottomLeftForm _ self class roundedCornerBL.			bottomRightForm _ self class roundedCornerBR ]		ifTrue: ["			c _ c adjustSaturation: -0.15 brightness: 0.0."			colorForButton _ colorForButton adjustSaturation: 0.1 brightness: -0.1.			colorForButtonGradient _ colorForButton * Theme current buttonGradientTopFactor.			colorForLabel _ colorForLabel adjustSaturation: 0.0 brightness: -0.07.			gradientForm _ self class buttonGradientPressed.			topLeftForm _ self class roundedCornerTLPressed.			topRightForm _ self class roundedCornerTRPressed.			bottomLeftForm _ self class roundedCornerBLPressed.			bottomRightForm _ self class roundedCornerBRPressed ].			lh _ gradientForm form height.	r _ topLeftForm width.	left _ rect left + r.	top _ rect top.	width _ rect width - r-r.	height _ rect height -r min: lh.	aCanvas fillRectangle: (left@top extent: width@height)  infiniteForm: gradientForm multipliedBy: colorForButton.	aCanvas image: topLeftForm multipliedBy: colorForButton in: (rect topLeft extent: r@height).	aCanvas image: topRightForm multipliedBy: colorForButton in: (rect topRight - (r@0)extent: r@height).	aCanvas fillRectangle: (rect origin + (0@height) extent: rect width@(rect height-height-r)) fillStyle: colorForButtonGradient.	aCanvas image: bottomLeftForm multipliedBy: colorForButton at: rect bottomLeft - (0@r).	aCanvas image: bottomRightForm multipliedBy: colorForButton at: rect bottomRight - (r@r) .	aCanvas fillRectangle: (rect bottomLeft+(r@ r negated) corner:  rect bottomRight - (r@0) ) fillStyle: colorForButtonGradient.				f _ self fontToUse.	center _ bounds center.	label ifNotNil: [		labelMargin _ 7.		w _ f widthOfString: label.		availableW _ bounds width-labelMargin-labelMargin.		availableW >= w			ifTrue: [				l _ label ]			ifFalse: [				x _ bounds left + labelMargin.				targetSize _ label size * availableW // w.				l _ label squeezedTo: targetSize.				(f widthOfString: l) > availableW ifTrue: [					targetSize _ targetSize - 1.					l _ label squeezedTo: targetSize ]].				w _ f widthOfString: l.		x _ center x - (w // 2).		y _ center y - (f height // 2).		aCanvas			drawStringEmbossed: l			in: (x@y extent: bounds extent - (labelMargin*2-2@4))			font: f			color: colorForLabel ]! !