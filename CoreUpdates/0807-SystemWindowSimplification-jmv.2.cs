'From Cuis 3.0 of 31 January 2011 [latest update: #790] on 21 February 2011 at 11:30:25 pm'!!LightWidget methodsFor: 'halos and balloon help' stamp: 'jmv 2/21/2011 23:00'!balloonHelpTextForHandle: aHandle	"Answer a string providing balloon help for the given halo handle"	|  itsSelector |	itsSelector _ aHandle eventHandler firstMouseSelector.	#(		(chooseEmphasisOrAlignment			'Emphasis & alignment')		(chooseFont								'Change font')		(maybeDismiss:with:					'Remove')		(doDebug:with:							'Debug')		(doDup:with:								'Duplicate')		(doMenu:with:							'Menu')		(doGrab:with:								'Pick up')		(doRecolor:with:							'Change color')		(maybeDoDup:with:						'Duplicate')		(mouseDownInCollapseHandle:with:	'Collapse')		(mouseDownOnHelpHandle:			'Help')		(startDrag:with:							'Move')		(startGrow:with:							'Change size') 		(startRot:with:							'Rotate')) 	do: [ :pair |		itsSelector == pair first ifTrue: [^ pair last]].	(itsSelector == #mouseDownInDimissHandle:with:) ifTrue: [		'Remove from screen'].	^ 'unknown halo handle'! !!Morph methodsFor: 'halos and balloon help' stamp: 'jmv 2/21/2011 23:00'!balloonHelpTextForHandle: aHandle	"Answer a string providing balloon help for the given halo handle"	|  itsSelector |	itsSelector _ aHandle eventHandler firstMouseSelector.	#(		(chooseEmphasisOrAlignment			'Emphasis & alignment')		(chooseFont								'Change font')		(maybeDismiss:with:					'Remove')		(doDebug:with:							'Debug')		(doDup:with:								'Duplicate')		(doMenu:with:							'Menu')		(doGrab:with:								'Pick up')		(doRecolor:with:							'Change color')		(maybeDoDup:with:						'Duplicate')		(mouseDownInCollapseHandle:with:	'Collapse')		(mouseDownOnHelpHandle:			'Help')		(startDrag:with:							'Move')		(startGrow:with:							'Change size') 		(startRot:with:							'Rotate')) 	do:		[ :pair | itsSelector == pair first ifTrue: [^ pair last]].	(itsSelector == #mouseDownInDimissHandle:with:) ifTrue: [			'Remove from screen'].	^ 'unknown halo handle'! !!Morph methodsFor: 'testing' stamp: 'jmv 2/21/2011 23:06'!shouldDropOnMouseUp	| former |	"	former _ self formerPosition ifNil:[^false].	^(former dist: self position) > 10	"^true! !!Preferences class methodsFor: 'themes' stamp: 'jmv 2/21/2011 23:11'!juans	"	Preferences juans	"	self setPreferencesFrom:	#(		(annotationPanes true)		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips true)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(menuKeyboardControl true)		(optionalButtons true)		(extraDebuggerButtons true)		(restartAlsoProceeds false)		(simpleMenus false)		(smartUpdating true)		(subPixelRenderFonts true)		(thoroughSenders true)	)! !!Preferences class methodsFor: 'themes' stamp: 'jmv 2/21/2011 23:11'!slowMachine	self setPreferencesFrom:	#(		(annotationPanes false)		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(menuKeyboardControl false)		(optionalButtons false)		(restartAlsoProceeds false)		(simpleMenus false)		(smartUpdating false)		(subPixelRenderFonts false)		(thoroughSenders false)	)! !!Preferences class methodsFor: 'themes' stamp: 'jmv 2/21/2011 23:11'!smalltalk80	"A traditional monochrome Smalltalk-80 look and feel, clean and austere, and lacking many features added to Squeak in recent years. Caution: this theme removes the standard Squeak flaps, turns off the 'smartUpdating' feature that keeps multiple browsers in synch, and much more."	self setPreferencesFrom:	#(		(annotationPanes false)		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(menuKeyboardControl false)		(optionalButtons false)		(restartAlsoProceeds false)		(simpleMenus false)		(smartUpdating false)		(thoroughSenders false)	)! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'jmv 2/21/2011 23:21'!spawnPaneFrameHandle: event 	| resizer localPt side growingPane newBounds adjoiningPanes limit cursor |	(self world firstSubmorph isKindOf: NewHandleMorph) 		ifTrue: [^self	"Prevent multiple handles"].	(self innerBounds containsPoint: event cursorPoint) 			ifFalse: [ ^self	"in label or top of top pane"].	growingPane _ self paneWithLongestSide: [:s | side _ s]				near: event cursorPoint.	growingPane ifNil: [^self].	"don't resize pane side coincident with window side - RAA 5 jul 2000"	(growingPane perform: side) = (self innerBounds perform: side) 		ifTrue: [^self].	(side == #top and: [growingPane top = self innerBounds top]) ifTrue: [^self].	adjoiningPanes _ paneMorphs 				select: [ :pane | pane bounds bordersOn: growingPane bounds along: side ].	limit _ adjoiningPanes isEmpty 				ifFalse: [					(adjoiningPanes collect: [:pane | pane bounds perform: side]) 						perform: ((#(#top #left) includes: side) ifTrue: [#max] ifFalse: [#min])]				ifTrue: [ bounds perform: side].	cursor _ Cursor resizeForEdge: side.	resizer _ NewHandleMorph new				followHand: event hand					forEachPointDo: [ :p | 						localPt _ self internalizePositionFromWorld: p.						newBounds _ growingPane bounds 							withSideOrCorner: side							setToPoint: localPt							minExtent: 40 @ self minPaneHeightForReframe							limit: limit.						self 							reframePanesAdjoining: growingPane							along: side							to: newBounds]					lastPointDo: [:p | ]					withCursor: cursor.	event hand world addMorphInLayer: resizer.	resizer startStepping! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'jmv 2/21/2011 23:21'!spawnReframeHandle: event	"The mouse has crossed a pane border.  Spawn a reframe handle."	| resizer localPt pt ptName newBounds cursor |	owner ifNil: [^self	"Spurious mouseLeave due to delete"].	self isCollapsed ifTrue: [^self].	((self world ifNil: [^self]) firstSubmorph isKindOf: NewHandleMorph) 		ifTrue: [^self	"Prevent multiple handles"].	pt _ event cursorPoint.	"prevent spurios mouse leave when dropping morphs"	owner 		morphsInFrontOf: self		overlapping: (pt - 2 extent: 4 @ 4)		do: [:m | (m is: #HandMorph) ifFalse: [(m fullContainsPoint: pt) ifTrue: [^self]]].	bounds forPoint: pt		closestSideDistLen: [ :side :dist :len | 			"Check for window side adjust"			dist <= 2 ifTrue: [ptName _ side]].	ptName ifNil: ["Check for pane border adjust"			^self spawnPaneFrameHandle: event].	#(#topLeft #bottomRight #bottomLeft #topRight) do: [ :corner | 			"Check for window corner adjust"			(pt dist: (bounds perform: corner)) < 20 ifTrue: [ptName _ corner]].	cursor _ Cursor resizeForEdge: ptName.	resizer _ NewHandleMorph new				followHand: event hand					forEachPointDo: [ :p | 						localPt _ self internalizePositionFromWorld: p.						newBounds _ bounds 									withSideOrCorner: ptName									setToPoint: localPt									minExtent: self minimumExtent.						self bounds: newBounds]					lastPointDo: [ :p | ]					withCursor: cursor.	event hand world addMorphInLayer: resizer.	resizer startStepping! !SystemWindow removeSelector: #doFastFrameDrag:!SystemWindow removeSelector: #doFastWindowReframe:!SystemWindow removeSelector: #fastFramingOn!SystemWindow removeSelector: #handlesMouseDown:!SystemWindow removeSelector: #mouseDown:!SystemWindow removeSelector: #mouseMove:!Rectangle removeSelector: #newRectButtonPressedDo:!Preferences class removeSelector: #fastDragWindowForMorphic!HaloMorph removeSelector: #doDirection:with:!