'From Cuis 3.0 of 31 January 2011 [latest update: #790] on 25 February 2011 at 12:14:36 pm'!!classDefinition: #FileContentsBrowser category: #'Tools-File Contents Browser'!Browser subclass: #FileContentsBrowser	instanceVariableNames: 'packages thePackage '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-File Contents Browser'!!classDefinition: #FileList2 category: #'Tools-FileList'!FileList subclass: #FileList2	instanceVariableNames: 'showDirsInFileList currentDirectorySelected fileSelectionBlock dirSelectionBlock optionalButtonSpecs modalView directoryChangeBlock ok '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-FileList'!!classDefinition: #LayoutSpec category: #'Morphic-Layouts'!Object subclass: #LayoutSpec	instanceVariableNames: 'morph fixedWidth fixedHeight minorDirectionPadding proportionalWidth proportionalHeight '	classVariableNames: 'Default '	poolDictionaries: ''	category: 'Morphic-Layouts'!!classDefinition: #FillInTheBlankMorph category: #'Morphic-Windows'!Morph subclass: #FillInTheBlankMorph	instanceVariableNames: 'response done textPane responseUponCancel '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!classDefinition: #SystemWindow category: #'Morphic-Windows'!PluggableMorph subclass: #SystemWindow	instanceVariableNames: 'labelString paneMorphs collapsedFrame fullFrame isCollapsed updatablePanes widgetsColor layoutMorph '	classVariableNames: 'CloseIcon CollapseIcon ExpandIcon MenuIcon RoundedCornerBL RoundedCornerBR RoundedCornerTL RoundedCornerTR TitleGradient TopWindow '	poolDictionaries: ''	category: 'Morphic-Windows'!!classDefinition: #TestRunner category: #'SUnit-UI'!Model subclass: #TestRunner	instanceVariableNames: 'result details passFail failures errors tests passFailText detailsText lastPass testsList selectedFailureTest selectedErrorTest selectedSuite filter selectedSuites running runSemaphore completedTests totalTests progress '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-UI'!!classDefinition: #BrowserCommentTextMorph category: #'Tools-Browser'!TextModelMorph subclass: #BrowserCommentTextMorph	instanceVariableNames: 'browserWindow browserLowerPane separator '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Browser'!!classDefinition: #TranscriptMorph category: #'Morphic-Widgets'!Morph subclass: #TranscriptMorph	instanceVariableNames: 'form '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!Behavior methodsFor: 'methods' stamp: 'jmv 2/24/2011 15:10'!closuresInfoAt: selector	^Smalltalk closuresInfoStringForClass: self selector: selector! !!Behavior methodsFor: 'methods' stamp: 'jmv 2/24/2011 15:09'!stampAt: selector	^(self compiledMethodAt: selector ifAbsent: [ ^'' ]) timeStamp! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'jmv 2/25/2011 10:13'!fileOut	"File out the receiver, to a file whose name is a function of the  	change-set name and either of the date & time or chosen to have a  	unique numeric tag, depending on the preference  	'changeSetVersionNumbers'"	| slips nameToUse |	self checkForConversionMethods.	nameToUse := Preferences changeSetVersionNumbers				ifTrue: [self defaultChangeSetDirectory nextNameFor: self name extension: 'cs']				ifFalse: [(self name , FileDirectory dot , Utilities dateTimeSuffix , FileDirectory dot , 'cs') asFileName].	Cursor write		showWhile: [			| file |			file := self defaultChangeSetDirectory newFileNamed: nameToUse.			[				file timeStamp.				self fileOutPreambleOn: file.				self fileOutOn: file.				self fileOutPostscriptOn: file]					ensure: [file close]].	Preferences checkForSlips		ifFalse: [^ self].	slips := self checkForSlips.	(slips size > 0			and: [(PopUpMenu withCaption: 'Methods in this fileOut have haltsor references to the Transcriptor other ''slips'' in them.Would you like to browse them?' chooseFrom: 'Ignore\Browse slips')					= 2])		ifTrue: [Smalltalk browseMessageList: slips name: 'Possible slips in ' , name]! !!ChangeSet class methodsFor: 'defaults' stamp: 'jmv 2/25/2011 10:12'!defaultChangeSetDirectory	"Answer the directory in which to store ChangeSets. "		^ FileDirectory default! !!CodeProvider methodsFor: 'annotation' stamp: 'jmv 2/24/2011 15:10'!annotationForSelector: aSelector ofClass: aClass 	"Provide a line of content for an annotation pane, representing  	information about the given selector and class"	| stamp sendersCount implementorsCount aCategory separator aString aList aComment aStream requestList |	aSelector == #Comment		ifTrue: [^ self annotationForClassCommentFor: aClass].	aSelector == #Definition		ifTrue: [^ self annotationForClassDefinitionFor: aClass].	aSelector == #Hierarchy		ifTrue: [^ self annotationForHierarchyFor: aClass].	aStream _ ReadWriteStream on: ''.	requestList _ self annotationRequests.	separator _ requestList size > 1				ifTrue: [self annotationSeparator]				ifFalse: [''].	requestList		do: [:aRequest | 			aRequest == #firstComment				ifTrue: [aComment _ aClass firstCommentAt: aSelector.					aComment isEmptyOrNil						ifFalse: [aStream nextPutAll: aComment , separator]].			aRequest == #masterComment				ifTrue: [aComment _ aClass supermostPrecodeCommentFor: aSelector.					aComment isEmptyOrNil						ifFalse: [aStream nextPutAll: aComment , separator]].			aRequest == #documentation				ifTrue: [aComment _ aClass precodeCommentOrInheritedCommentFor: aSelector.					aComment isEmptyOrNil						ifFalse: [aStream nextPutAll: aComment , separator]].			aRequest == #timeStamp				ifTrue: [stamp _ self timeStamp.					aStream						nextPutAll: (stamp size > 0								ifTrue: [stamp , separator]								ifFalse: ['no timeStamp' , separator])].			aRequest == #messageCategory				ifTrue: [aCategory _ aClass organization categoryOfElement: aSelector.					aCategory						ifNotNil: ["woud be nil for a method no longer present,  							e.g. in a recent-submissions browser"							aStream nextPutAll: aCategory , separator]].			aRequest == #sendersCount				ifTrue: [sendersCount _ (Smalltalk allCallsOn: aSelector) size.					sendersCount _ sendersCount = 1								ifTrue: ['1 sender']								ifFalse: [sendersCount printString , ' senders'].					aStream nextPutAll: sendersCount , separator].			aRequest == #implementorsCount				ifTrue: [implementorsCount _ Smalltalk numberOfImplementorsOf: aSelector.					implementorsCount _ implementorsCount = 1								ifTrue: ['1 implementor']								ifFalse: [implementorsCount printString , ' implementors'].					aStream nextPutAll: implementorsCount , separator].			aRequest == #priorVersionsCount				ifTrue: [self						addPriorVersionsCountForSelector: aSelector						ofClass: aClass						to: aStream].			aRequest == #priorTimeStamp				ifTrue: [stamp _ VersionsBrowser								timeStampFor: aSelector								class: aClass								reverseOrdinal: 2.					stamp						ifNotNil: [aStream nextPutAll: 'prior time stamp: ' , stamp , separator]].			aRequest == #recentChangeSet				ifTrue: [aString _ ChangeSorter mostRecentChangeSetWithChangeForClass: aClass selector: aSelector.					aString size > 0						ifTrue: [aStream nextPutAll: aString , separator]].			aRequest == #allChangeSets				ifTrue: [aList _ ChangeSorter allChangeSetsWithClass: aClass selector: aSelector.					aList size > 0						ifTrue: [aList size = 1								ifTrue: [aStream nextPutAll: 'only in change set ']								ifFalse: [aStream nextPutAll: 'in change sets: '].							aList								do: [:aChangeSet | aStream nextPutAll: aChangeSet name , ' ']]						ifFalse: [aStream nextPutAll: 'in no change set'].					aStream nextPutAll: separator].			aRequest == #closuresInfo				ifTrue: [					aString _ aClass closuresInfoAt: aSelector.					aString size > 0						ifTrue: [aStream nextPutAll: aString , separator]].		].	^ aStream contents! !!CodeProvider methodsFor: 'annotation' stamp: 'jmv 2/24/2011 12:02'!buildMorphicAnnotationsPane	| aTextMorph |	aTextMorph _ TextModelMorph		textProvider: self		textGetter: #annotation.	aTextMorph		askBeforeDiscardingEdits: false;		borderWidth: 0;		hideScrollBarsIndefinitely.	^aTextMorph! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 2/24/2011 13:17'!showUnreferencedClassVars	"Search for all class variables known to the selected class, and put up a 	list of those that have no references anywhere in the system. The 	search includes superclasses, so that you don't need to navigate your 	way to the class that defines each class variable in order to determine 	whether it is unreferenced"	| cls aList |	(cls _ self selectedClass)		ifNil: [^ self].	aList _ cls allUnreferencedClassVariables.	aList size = 0		ifTrue: [^ self inform: 'There are no unreferencedclass variables in' , cls name].	Transcript cr; nextPutAll: 'Unreferenced class variable(s) in ', cls name; cr.	aList do: [:el | Transcript tab; nextPutAll: el; cr].	(SelectionMenu labels: aList selections: aList)		startUpWithCaption: 'Unreferencedclass variables in ' , cls name! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 2/24/2011 13:16'!showUnreferencedInstVars	"Search for all instance variables known to the selected class, and put up a list of those that have no references anywhere in the system.  The search includes superclasses, so that you don't need to navigate your way to the class that defines each inst variable in order to determine whether it is unreferenced"	| cls aList |	(cls _ self selectedClassOrMetaClass) ifNil: [^ self].	aList _ cls allUnreferencedInstanceVariables.	aList size = 0 ifTrue: [^ self inform: 'There are no unreferencedinstance variables in', cls name].	Transcript cr; nextPutAll: 'Unreferenced instance variable(s) in ', cls name; cr.	aList do: [:el | Transcript tab; nextPutAll: el; cr].	(SelectionMenu labels: aList selections: aList) startUpWithCaption: 'Unreferencedinstance variables in ', cls name! !!CodeProvider methodsFor: 'commands' stamp: 'jmv 2/24/2011 20:13'!spawnHierarchy	"Create and schedule a new hierarchy browser on the currently selected class or meta."	| newBrowser aSymbol aBehavior messageCatIndex selectedClassOrMetaClass |	(selectedClassOrMetaClass _ self selectedClassOrMetaClass)		ifNil: [^ self].	newBrowser _ HierarchyBrowser new initHierarchyForClass: selectedClassOrMetaClass.	((aSymbol _ self selectedMessageName) notNil and: [(MessageSet isPseudoSelector: aSymbol) not])		ifTrue: [			aBehavior _ selectedClassOrMetaClass.			messageCatIndex _ aBehavior organization numberOfCategoryOfElement: aSymbol.			newBrowser messageCategoryListIndex: messageCatIndex + 1.			newBrowser messageListIndex:				((aBehavior organization listAtCategoryNumber: messageCatIndex) indexOf: aSymbol)].	Browser		openBrowserView: newBrowser buildNoSysCatMorphicWindow		label: newBrowser labelString.	newBrowser assureSelectionsShow! !!CodeProvider methodsFor: 'construction' stamp: 'jmv 2/24/2011 21:46'!buildLowerPanes	| codeAndButtons codeButtonsAndAnnotations |	codeAndButtons _ LayoutMorph newColumn.	codeAndButtons		addMorph: self optionalButtonRow fixedHeight: self defaultButtonPaneHeight;		addAdjusterAndMorph: self buildMorphicCodePane proportionalHeight: 1.0.	codeButtonsAndAnnotations _ LayoutMorph newColumn.	codeButtonsAndAnnotations		addMorph: self buildMorphicAnnotationsPane fixedHeight: self defaultAnnotationPaneHeight;		addAdjusterAndMorph: codeAndButtons proportionalHeight: 1.0.	^codeButtonsAndAnnotations! !!CodeProvider methodsFor: 'construction' stamp: 'jmv 2/24/2011 14:05'!buildMorphicCodePane	"Construct the pane that shows the code.	Respect the Preference for standardCodeFont."	^(TextModelMorph		textProvider: self		textGetter: #acceptedContents		textSetter: #contents:notifying:		selectionGetter: #contentsSelection)			borderWidth: 0; yourself! !!CodeProvider methodsFor: 'controls' stamp: 'jmv 2/24/2011 12:20'!optionalButtonRow	"Answer a row of control buttons"	| row buttons widths buttonColor |	buttons _ OrderedCollection new.	widths _ OrderedCollection new.	buttonColor _ Theme current buttonColorFrom: self class windowColor.	self optionalButtonTuples do: [ :tuple | | button |		widths add: tuple first.		button _ PluggableButtonMorph 					model: self					stateGetter: nil					action: tuple third.		button color: buttonColor.		button label: tuple second asString.		tuple size > 3 ifTrue: [button setBalloonText: tuple fourth].		buttons add: button ].	row _ LayoutMorph newRow.	row color: buttonColor.	row addMorphs: buttons widthProportionalTo: widths.	^row! !!CodeProvider methodsFor: 'diffs' stamp: 'jmv 2/25/2011 09:18'!lineDiffButton	"Return a checkbox that lets the user decide whether regular diffs should be shown or not"	| outerButton button |	outerButton _ LayoutMorph newRow.	outerButton		padding: #center;		separation: 3;		borderWidth: 2;		borderColor: #raised.	outerButton color: Color transparent.	button _ UpdatingThreePhaseButtonMorph checkBox.	button		 target: self;		 actionSelector: #toggleLineDiffing;		 getSelector: #showingLineDiffs.	outerButton		addMorph: button fixedWidth: 18;		addMorph: (StringMorph contents: 'lineDiffs' color: Theme current buttonLabel) lock			proportionalWidth: 1.	outerButton setBalloonText: 'Show code differences from the previous version, line by line.'.	^ outerButton! !!CodeProvider methodsFor: 'diffs' stamp: 'jmv 2/25/2011 09:19'!prettyLineDiffButton	"Return a checkbox that lets the user decide whether prettyDiffs should be shown or not"	| outerButton button |	outerButton _ LayoutMorph newRow.	outerButton		padding: #center;		separation: 3;		borderWidth: 2;		borderColor: #raised.	outerButton color: Color transparent.	button _ UpdatingThreePhaseButtonMorph checkBox.	button		 target: self;		 actionSelector: #togglePrettyLineDiffing;		 getSelector: #showingPrettyLineDiffs.	outerButton		addMorph: button fixedWidth: 18;		addMorph: (StringMorph contents: 'linePrettyDiffs' color: Theme current buttonLabel) lock			proportionalWidth: 1.	(self isKindOf: VersionsBrowser)		ifTrue: [ outerButton setBalloonText: 'Show pretty-printed code differences from the previous version, line by line.' ]		ifFalse: [ outerButton setBalloonText: 'Show pretty-printed code differences between the file-based method and the in-memory version, line by line.' ].	^ outerButton.! !!CodeProvider methodsFor: 'diffs' stamp: 'jmv 2/25/2011 09:20'!prettyWordDiffButton	"Return a checkbox that lets the user decide whether prettyDiffs should be shown or not"	| outerButton button |	outerButton _ LayoutMorph newRow.	outerButton		padding: #center;		separation: 3;		borderWidth: 2;		borderColor: #raised.	outerButton color: Color transparent.	button _ UpdatingThreePhaseButtonMorph checkBox.	button		 target: self;		 actionSelector: #togglePrettyWordDiffing;		 getSelector: #showingPrettyWordDiffs.	outerButton		addMorph: button fixedWidth: 18;		addMorph: (StringMorph contents: 'wordPrettyDiffs' color: Theme current buttonLabel) lock			proportionalWidth: 1.	(self isKindOf: VersionsBrowser)		ifTrue: [ outerButton setBalloonText: 'Show pretty-printed code differences from the previous version, word by word.' ]		ifFalse: [ outerButton setBalloonText: 'Show pretty-printed code differences between the file-based method and the in-memory version, word by word.' ].	^ outerButton.! !!CodeProvider methodsFor: 'diffs' stamp: 'jmv 2/25/2011 09:22'!wordDiffButton	"Return a checkbox that lets the user decide whether regular diffs should be shown or not"	| outerButton button |	outerButton _ LayoutMorph newRow.	outerButton		padding: #center;		separation: 3;		borderWidth: 2;		borderColor: #raised.	outerButton color: Color transparent.	button _ UpdatingThreePhaseButtonMorph checkBox.	button		 target: self;		 actionSelector: #toggleWordDiffing;		 getSelector: #showingWordDiffs.	outerButton		addMorph: button fixedWidth: 18;		addMorph: (StringMorph contents: 'wordDiffs' color: Theme current buttonLabel) lock			proportionalWidth: 1.	outerButton setBalloonText: 'Show code differences from the previous version, word by word.'.	^ outerButton.! !!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 2/24/2011 15:08'!timeStamp	"Answer the time stamp for the chosen class and method, if any, else an empty string"	|  selector  |	(selector _ self selectedMessageName) ifNotNil: [		^self selectedClassOrMetaClass 			ifNil: [				String new]			ifNotNil: [				self selectedClassOrMetaClass stampAt: selector]].	^ String new! !!Browser methodsFor: 'class comment pane' stamp: 'jmv 2/24/2011 14:07'!buildMorphicCommentPane	"Construct the pane that shows the class comment.	Respect the Preference for standardCodeFont."	| commentPane |	commentPane := BrowserCommentTextMorph				textProvider: self				textGetter: #classCommentText				textSetter: #newClassComment:.	commentPane borderWidth: 0; styler: nil.	^ commentPane! !!Browser methodsFor: 'class functions' stamp: 'jmv 2/24/2011 12:19'!buildMorphicSwitches	| instanceSwitch commentSwitch classSwitch row buttonColor |	instanceSwitch := PluggableButtonMorph 				model: self				stateGetter: #instanceMessagesIndicated				action: #indicateInstanceMessages.	instanceSwitch		label: 'instance';		borderWidth: 0.	commentSwitch := PluggableButtonMorph 				model: self				stateGetter: #classCommentIndicated				action: #plusButtonHit.	commentSwitch		label: '?' asText allBold;		setBalloonText: 'class comment';		borderWidth: 0.	classSwitch := PluggableButtonMorph 				model: self				stateGetter: #classMessagesIndicated				action: #indicateClassMessages.	classSwitch		label: 'class';		borderWidth: 0.	row _ LayoutMorph newRow.	row		addMorph: instanceSwitch proportionalWidth: 0.45;		addMorph: commentSwitch proportionalWidth: 0.22;		addMorph: classSwitch proportionalWidth: 0.33.	buttonColor _ Theme current buttonColorFrom: self class windowColor.	row color: buttonColor.	{ 		instanceSwitch.		commentSwitch.		classSwitch} do: [:m | 				m color: buttonColor ].	^row! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/24/2011 16:50'!buildMorphicClassColumn	| column |	column _ LayoutMorph newColumn.	column		addMorphUseAll: self buildMorphicClassList;		addAdjusterAndMorph: self buildMorphicSwitches fixedHeight:  StrikeFont default height *2-4.	^column! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/24/2011 14:06'!buildMorphicClassList	| myClassList |	(myClassList := PluggableListMorph new)		model: self		listGetter: #classList		indexGetter: #classListIndex		indexSetter: #classListIndex:		menuGetter: #classListMenu		keystrokeAction: #classListKey:from:.	myClassList borderWidth: 0.	myClassList enableDragNDrop: false.	myClassList doubleClickSelector: #browseSelectionInPlace.	^myClassList! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/24/2011 14:07'!buildMorphicMessageCatList	| myMessageCatList |	(myMessageCatList := PluggableMessageCategoryListMorph new)		model: self		listGetter: #messageCategoryList		indexGetter: #messageCategoryListIndex		indexSetter: #messageCategoryListIndex:		menuGetter: #messageCategoryMenu		keystrokeAction: #arrowKey:from:		rawListGetter: #rawMessageCategoryList.	myMessageCatList borderWidth: 0; enableDragNDrop: false.	^myMessageCatList! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/24/2011 21:42'!buildMorphicMessageList	"Build a morphic message list, with #messageList as its list-getter"	| aListMorph |	aListMorph := PluggableListMorph		model: self		listGetter: #messageList		indexGetter: #messageListIndex		indexSetter: #messageListIndex:		menuGetter: #messageListMenu		keystrokeAction: #messageListKey:from:.	aListMorph borderWidth: 0; enableDragNDrop: false.	^aListMorph! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/24/2011 14:08'!buildMorphicSystemCatList	| dragNDropFlag myCatList |	dragNDropFlag := false.	(myCatList := PluggableListMorph new)		model: self		listGetter: #systemCategoryList		indexGetter: #systemCategoryListIndex		indexSetter: #systemCategoryListIndex:		menuGetter: #systemCategoryMenu		keystrokeAction: #systemCatListKey:from:.	myCatList borderWidth: 0; enableDragNDrop: dragNDropFlag.	^myCatList! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/25/2011 09:30'!buildMorphicWindow	"Create a pluggable version of all the morphs for a Browser in Morphic"	| window upperPanes |	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: self buildMorphicSystemCatList proportionalWidth: 0.25;		addAdjusterAndMorph: self buildMorphicClassColumn proportionalWidth: 0.25;		addAdjusterAndMorph: self buildMorphicMessageCatList proportionalWidth: 0.25;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.25.		window _ SystemWindow new model: self.	window beColumn.	window layoutMorph addMorph: upperPanes proportionalHeight: 0.4.	window layoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6.	window setUpdatablePanesFrom: #(systemCategoryList classList messageCategoryList messageList).	self changed: #editSelection.	^ window! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 2/25/2011 09:31'!buildNoSysCatMorphicWindow	"A Browser without the class categories list"	| window mySingletonList upperPanes |	mySingletonList _ PluggableListMorph 				model: self				listGetter: #systemCategorySingleton				indexGetter: #indexIsOne				indexSetter: #indexIsOne:				menuGetter: #systemCatSingletonMenu				keystrokeAction: #systemCatSingletonKey:from:.	mySingletonList borderWidth: 0; enableDragNDrop: false.	mySingletonList hideScrollBarsIndefinitely.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: self buildMorphicClassColumn proportionalWidth: 0.33;		addAdjusterAndMorph: self buildMorphicMessageCatList proportionalWidth: 0.33;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.34.		window _ SystemWindow new model: self.	window beColumn.	window layoutMorph addMorph: mySingletonList fixedHeight: Preferences standardCodeFont height + 10.	window layoutMorph addAdjusterAndMorph: upperPanes proportionalHeight: 0.4.	window layoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6.	window setUpdatablePanesFrom: #(classList messageCategoryList messageList).	self changed: #editSelection.	^ window! !!Browser methodsFor: 'message category functions' stamp: 'jmv 2/24/2011 20:14'!messageCategoryMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu labels:'fileOutreorganizealphabetizeremove empty categoriescategorize all uncategorizednew category...rename...remove'	lines: #(1 6)	selections:		#(fileOutMessageCategories		editMessageCategories alphabetizeMessageCategories removeEmptyCategories		categorizeAllUncategorizedMethods addCategory renameCategory removeMessageCategory).	^aMenu! !!Browser methodsFor: 'system category functions' stamp: 'jmv 2/24/2011 16:28'!browseAllClasses	"Create and schedule a new browser on all classes alphabetically."	| newBrowser |	newBrowser _ HierarchyBrowser new initAlphabeticListing.	self class		openBrowserView: newBrowser buildNoSysCatMorphicWindow		label: 'All Classes Alphabetically'! !!Browser methodsFor: 'system category functions' stamp: 'jmv 2/24/2011 16:35'!openSystemCategoryBrowser	"Create and schedule a new system category browser with initial textual 	contents set to aString."	| newBrowser |	systemCategoryListIndex > 0		ifTrue: [			newBrowser _ Browser new.			newBrowser systemCategoryListIndex: systemCategoryListIndex.			newBrowser setClass: self selectedClassOrMetaClass selector: self selectedMessageName.			self class				openBrowserView: newBrowser buildNoSysCatMorphicWindow				label: 'Classes in category ', newBrowser selectedSystemCategoryName]! !!Browser methodsFor: 'system category functions' stamp: 'jmv 2/24/2011 16:40'!systemCatSingletonMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^ aMenu labels:'find class... (f)browse allbrowsefileOutupdaterename...remove' 	lines: #(1 3 4)	selections:		#(findClass browseAllClasses openSystemCategoryBrowser		fileOutSystemCategory updateSystemCategories		renameSystemCategory removeSystemCategory)! !!Browser methodsFor: 'system category functions' stamp: 'jmv 2/24/2011 16:30'!systemCategoryMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.^ aMenu labels:'find class... (f)recent classes... (r)browse allbrowsefileOutreorganizealphabetizeupdateadd item...rename...removemove to topmove upmove downmove to bottom' 	lines: #(2 4 5 7 11)	selections:		#(findClass recent browseAllClasses openSystemCategoryBrowser		fileOutSystemCategory		editSystemCategories alphabetizeSystemCategories updateSystemCategories		addSystemCategory renameSystemCategory removeSystemCategory 		moveSystemCategoryTop moveSystemCategoryUp 		moveSystemCategoryDown moveSystemCategoryBottom)! !!Browser methodsFor: 'construction' stamp: 'jmv 2/24/2011 21:38'!buildLowerPanes	| codeAndButtons codeButtonsAndAnnotations comment separator |	comment _ self buildMorphicCommentPane.	separator _ LayoutAdjustingMorph new.	comment separator: separator.	codeAndButtons _ LayoutMorph newColumn.	codeAndButtons		addMorph: self optionalButtonRow fixedHeight: self defaultButtonPaneHeight;		addAdjusterAndMorph: self buildMorphicCodePane proportionalHeight: 1.0;		addMorph: separator fixedHeight: 4;		addMorph: comment fixedHeight: 100.	codeButtonsAndAnnotations _ LayoutMorph newColumn.	codeButtonsAndAnnotations		addMorph: self buildMorphicAnnotationsPane fixedHeight: self defaultAnnotationPaneHeight;		addAdjusterAndMorph: codeAndButtons proportionalHeight: 1.0.	^codeButtonsAndAnnotations! !!Browser class methodsFor: 'instance creation' stamp: 'jmv 2/24/2011 16:08'!fullOnClass: aClass selector: aSelector	"Open a new full browser set to class."	| brow classToUse |	classToUse _ Preferences browseToolClass.	brow _ classToUse new.	brow setClass: aClass selector: aSelector.	classToUse 		openBrowserView: brow buildMorphicWindow		label: brow labelString! !!Browser class methodsFor: 'instance creation' stamp: 'jmv 2/24/2011 16:07'!openBrowser	"Create and schedule a BrowserView with default browser label. The	view consists of five subviews, starting with the list view of system	categories of SystemOrganization. The initial text view part is empty."	| br |	br _ self new.	self		openBrowserView: br buildMorphicWindow		label: br defaultBrowserTitle! !!Browser class methodsFor: 'instance creation' stamp: 'jmv 2/24/2011 10:23'!openBrowserView: aBrowserView label: aString 	"Schedule aBrowserView, labelling the view aString."	(aBrowserView setLabel: aString) openInWorld! !!ChangeList methodsFor: 'initialization-release' stamp: 'jmv 2/24/2011 21:52'!buildMorphicWindowMultiSelect: multiSelect	"Open a morphic view for the messageSet, whose label is labelString. 	The listView may be either single or multiple selection type"	| window listPane |	listPane _ multiSelect				ifTrue: [					PluggableListMorphOfMany						model: self						listGetter: #list						primarySelectionGetter: #listIndex						primarySelectionSetter: #toggleListIndex:						listSelectionGetter: #listSelectionAt:						listSelectionSetter: #listSelectionAt:put:						menuGetter: (self showsVersions								ifTrue: [#versionsMenu]								ifFalse: [#changeListMenu])]				ifFalse: [					PluggableListMorph						model: self						listGetter: #list						indexGetter: #listIndex						indexSetter: #toggleListIndex:						menuGetter: (self showsVersions								ifTrue: [#versionsMenu]								ifFalse: [#changeListMenu])].	listPane borderWidth: 0; keystrokeActionSelector: #changeListKey:from:.		window _ SystemWindow new model: self.	window beColumn.	window layoutMorph addAdjusterAndMorph: listPane proportionalHeight: 0.4.	window layoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6.	^ window! !!ChangeList methodsFor: 'menu actions' stamp: 'jmv 2/24/2011 14:08'!buildMorphicCodePane	^(TextModelMorph		textProvider: self		textGetter: #acceptedContents)			borderWidth: 0; yourself! !!ChangeList methodsFor: 'menu actions' stamp: 'jmv 2/24/2011 12:20'!optionalButtonRow	"Answer a row of buttons to occur in a tool pane"	| row buttons widths buttonColor |	buttons _ OrderedCollection new.	widths _ OrderedCollection new.	buttonColor _ Theme current buttonColorFrom: self class windowColor.	self buttonSpecs do: [ :tuple | | button |		widths add: tuple first.		button _ PluggableButtonMorph 					model: self					stateGetter: nil					action: tuple third.		button color: buttonColor.		button label: tuple second asString.		buttons add: button.		button setBalloonText: tuple fourth].	buttons add: self lineDiffButton.	widths add: 14.	buttons add: self wordDiffButton.	widths add: 16.	self wantsPrettyDiffOption ifTrue: [		buttons add:  self prettyLineDiffButton.		widths add: 21.		buttons add:  self prettyWordDiffButton.		widths add: 23 ].	row _ LayoutMorph newRow.	row color: buttonColor.	row addMorphs: buttons widthProportionalTo: widths.	^row! !!ChangeList class methodsFor: 'instance creation' stamp: 'jmv 2/24/2011 21:54'!open: aChangeList name: aString multiSelect: multiSelect	"Create a standard system view for the messageSet, whose label is aString.	The listView may be either single or multiple selection type"	Browser 		openBrowserView: (aChangeList buildMorphicWindowMultiSelect: multiSelect)		label: aString! !!ChangeSorter methodsFor: 'creation' stamp: 'jmv 2/24/2011 22:11'!buildMorphicUIIn: aLayoutMorph	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."	| list1 list2 list3 upperPanes |	list1 _ (PluggableListMorphByItem 				model: self				listGetter: #changeSetList				indexGetter: #currentCngSet				indexSetter: #showChangeSetNamed:				menuGetter: #changeSetMenu				keystrokeAction: #changeSetListKey:from:)			autoDeselect: false;			borderWidth: 0.	list2 _ (PluggableListMorphByItem 				model: self				listGetter: #classList				indexGetter: #currentClassName				indexSetter: #currentClassName:				menuGetter: #classListMenu				keystrokeAction: #classListKey:from:)			borderWidth: 0.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: list1 proportionalWidth: 0.5;		addAdjusterAndMorph: list2 proportionalWidth: 0.5.	list3 _ (PluggableListMorphByItem 				model: self				listGetter: #messageList				indexGetter: #currentSelector				indexSetter: #currentSelector:				menuGetter: #messageMenu				keystrokeAction: #messageListKey:from:)			borderWidth: 0.	aLayoutMorph addMorph: upperPanes proportionalHeight: 0.25.	aLayoutMorph addAdjusterAndMorph: list3 proportionalHeight: 0.25.	aLayoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.5! !!ChangeSorter methodsFor: 'creation' stamp: 'jmv 2/24/2011 22:12'!buildMorphicWindow	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."	| window |	myChangeSet ifNil: [self myChangeSet: ChangeSet current]. 	window _ SystemWindow new model: self.	window beColumn.	self buildMorphicUIIn: window layoutMorph.	self addDependent: window.		"so it will get changed: #relabel"	window setLabel: self labelString.	^window! !!ChangeSorter methodsFor: 'creation' stamp: 'jmv 2/24/2011 22:29'!openAsMorph	"ChangeSorter new openAsMorph"	^ self buildMorphicWindow openInWorld.! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 2/24/2011 22:19'!changeSetListKey: aChar from: view	"Respond to a Command key.  I am a model with a listView that has a list of changeSets."	aChar == $c ifTrue: [^ self copyAllToOther].	aChar == $D ifTrue: [^ self toggleDiffing]. 	aChar == $f ifTrue: [^ self findCngSet].	aChar == $m ifTrue: [^ self newCurrent].	aChar == $n ifTrue: [^ self newSet].	aChar == $o ifTrue: [^ self fileOut].	aChar == $p ifTrue: [^ self addPreamble].	aChar == $r ifTrue: [^ self rename].	aChar == $x ifTrue: [^ self remove].	aChar == $- ifTrue: [^ self subtractOtherSide].	^ self messageListKey: aChar from: view! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 2/24/2011 22:19'!changeSetMenu	"Set up aMenu to hold commands for the change-set-list pane.  This could be for a single or double changeSorter"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'Change Set'.	aMenu addStayUpIcons.	aMenu add: 'make changes go to me (m)' action: #newCurrent.	aMenu addLine.	aMenu add: 'new change set... (n)' action: #newSet.	aMenu add: 'find...(f)' action: #findCngSet.	aMenu add: 'select change set...' action: #chooseCngSet.	aMenu addLine.	aMenu add: 'rename change set (r)' action: #rename.	aMenu add: 'file out (o)' action: #fileOut.	aMenu addLine.	parent		ifNotNil: 			[aMenu add: 'copy all to other side (c)' action: #copyAllToOther.			aMenu add: 'submerge into other side' action: #submergeIntoOtherSide.			aMenu add: 'subtract other side (-)' action: #subtractOtherSide.			aMenu addLine].	myChangeSet hasPreamble		ifTrue: 			[aMenu add: 'edit preamble (p)' action: #addPreamble.			aMenu add: 'remove preamble' action: #removePreamble]		ifFalse: [aMenu add: 'add preamble (p)' action: #addPreamble].	myChangeSet hasPostscript		ifTrue: 			[aMenu add: 'edit postscript...' action: #editPostscript.			aMenu add: 'remove postscript' action: #removePostscript]		ifFalse: [aMenu add: 'add postscript...' action: #editPostscript].	aMenu addLine.	aMenu add: 'destroy change set (x)' action: #remove.	aMenu addLine.	aMenu add: 'more...' action: #offerShiftedChangeSetMenu.	^ aMenu! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 2/25/2011 10:13'!fileIntoNewChangeSet	"Obtain a file designation from the user, and file its contents into a  	new change set whose name is a function of the filename. Show the  	new set and leave the current changeSet unaltered."	| aNewChangeSet stream |	self okToChange		ifFalse: [^ self].	stream := StandardFileMenu oldFileStreamFrom: ChangeSet defaultChangeSetDirectory.	stream		ifNil: [^ self].	aNewChangeSet := self class				newChangesFromStream: stream				named: (FileDirectory localNameFor: stream name).	aNewChangeSet		ifNotNil: [self showChangeSet: aNewChangeSet]! !!Debugger methodsFor: 'initialize' stamp: 'jmv 2/25/2011 09:43'!buildLowerPanes	| codeAndButtons codeButtonsAndAnnotations twoRowsOfButtons |	twoRowsOfButtons _ LayoutMorph newColumn.	twoRowsOfButtons		addMorph: self optionalButtonRow proportionalHeight: 0.5;		addAdjusterAndMorph: self customButtonRow proportionalHeight: 0.5.	codeAndButtons _ LayoutMorph newColumn.	codeAndButtons		addMorph: twoRowsOfButtons fixedHeight: self defaultButtonPaneHeight * 2;		addAdjusterAndMorph: self buildMorphicCodePane proportionalHeight: 1.0.	codeButtonsAndAnnotations _ LayoutMorph newColumn.	codeButtonsAndAnnotations		addMorph: self buildMorphicAnnotationsPane fixedHeight: self defaultAnnotationPaneHeight;		addAdjusterAndMorph: codeAndButtons proportionalHeight: 1.0.	^codeButtonsAndAnnotations! !!Debugger methodsFor: 'initialize' stamp: 'jmv 2/24/2011 22:44'!buildMorphicWindow	"Open a full morphic debugger with the given label"	| window upperMorph bottomMorph1 bottomMorph2 bottomMorph3 bottomMorph4 bottomMorph |	upperMorph _ (PluggableListMorph		model: self 		listGetter: #contextStackList		indexGetter: #contextStackIndex		indexSetter: #toggleContextStackIndex:		menuGetter: #contextStackMenu		keystrokeAction: #contextStackKey:from:)			borderWidth: 0.	bottomMorph1 _ (PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: self receiverInspector			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			menuGetter: #fieldListMenu			keystrokeAction: #inspectorKey:from:)		borderWidth: 0.	bottomMorph2 _ (TextModelMorph 			textProvider: self receiverInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection)		borderWidth: 0.	bottomMorph3 _ (PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: self contextVariablesInspector 			listGetter: #fieldList			indexGetter: #selectionIndex 			indexSetter: #toggleIndex:			menuGetter: #fieldListMenu			keystrokeAction: #inspectorKey:from:)		borderWidth: 0.	bottomMorph4 _ (TextModelMorph 			textProvider: self contextVariablesInspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection)		borderWidth: 0.	bottomMorph _ LayoutMorph newRow.	bottomMorph		addMorph: bottomMorph1 proportionalWidth: 0.2;		addAdjusterAndMorph: bottomMorph2 proportionalWidth: 0.3;		addAdjusterAndMorph: bottomMorph3 proportionalWidth: 0.2;		addAdjusterAndMorph: bottomMorph4 proportionalWidth: 0.3.	window _ SystemWindow new model: self.	window beColumn.	window layoutMorph addMorph: upperMorph proportionalHeight: 0.25.	window layoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.55.	window layoutMorph addAdjusterAndMorph: bottomMorph proportionalHeight: 0.2.	^ window ! !!Debugger methodsFor: 'initialize' stamp: 'jmv 2/25/2011 09:34'!buttonRowForPreDebugWindow	| row aButton quads buttons |	buttons _ OrderedCollection new.	quads _ OrderedCollection withAll: self preDebugButtonQuads.	(self interruptedContext selector == #doesNotUnderstand:) ifTrue: [		quads add: { 'Create'. #createMethod. #magenta. 'create the missing method' }	].	quads do: [ :quad |		aButton _ PluggableButtonMorph new model: self.		aButton color: Color transparent.		aButton action: quad second.		aButton label: quad first.		aButton color: (Color colorFrom: quad third) muchLighter.		aButton setBalloonText: quad fourth.		buttons add: aButton].		row _ LayoutMorph newRow.	row addMorphs: buttons.	^row! !!Debugger methodsFor: 'initialize' stamp: 'jmv 2/25/2011 09:44'!customButtonRow	"Answer a button pane affording the user one-touch access to certain functions; the pane is given the formal name 'customButtonPane' by which it can be retrieved by code wishing to send messages to widgets residing on the pane"	| button buttons row buttonColor |		buttons _ OrderedCollection new.	buttonColor _ Theme current buttonColorFrom: self class windowColor.	self customButtonSpecs do: [ :tuple | 		button := PluggableButtonMorph 					model: self					stateGetter: nil					action: tuple second.		button color: buttonColor.		button label: tuple first asString.		tuple size > 2 ifTrue: [button setBalloonText: tuple third].		buttons add: button].	row _ LayoutMorph newRow.	row color: buttonColor.	row addMorphs: buttons.	^row! !!Debugger methodsFor: 'initialize' stamp: 'jmv 2/24/2011 22:42'!openFullMorphicLabel: aLabelString	"Open a full morphic debugger with the given label"	| window oldContextStackIndex |	oldContextStackIndex _ contextStackIndex.	self expandStack. "Sets contextStackIndex to zero."	window _ self buildMorphicWindow.	window openInWorld.	self toggleContextStackIndex: oldContextStackIndex.	^ window ! !!Debugger methodsFor: 'initialize' stamp: 'jmv 2/25/2011 12:03'!openNotifierContents: msgString label: label	"Create and schedule a notifier view with the given label and message. A notifier view shows just the message or the first several lines of the stack, with a menu that allows the user to open a full debugger if so desired."	"NOTE: When this method returns, a new process has been scheduled to run the windows, and thus this notifier, but the previous active porcess has not been suspended.  The sender will do this."	| msg |	Sensor flushKeyboard.	savedCursor _ Sensor currentCursor.	Sensor currentCursor: Cursor normal.	(label beginsWith: 'Space is low')		ifTrue: [msg _ self lowSpaceChoices, (msgString ifNil: [''])]		ifFalse: [msg _ msgString].	self openMorphicNotifierLabelled: label message: msg.	errorWasInUIProcess _ ProjectX newProcessIfUIX: interruptedProcess.	^self! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 2/25/2011 12:04'!openMorphicNotifierLabelled: label message: messageString	| notifyPane window extentToUse |	self expandStack.	messageString		ifNil: [			notifyPane _ PluggableListMorph				model: self				listGetter: #contextStackList				indexGetter: #contextStackIndex				indexSetter: #debugAt:				menuGetter: nil				keystrokeAction: nil ]		ifNotNil: [			notifyPane _ TextModelMorph withText: messageString.			notifyPane askBeforeDiscardingEdits: false ].	notifyPane borderWidth: 0.	window _ SystemWindow new model: self.	window beColumn.	window layoutMorph				addMorph: self buttonRowForPreDebugWindow		proportionalHeight: 0.2;				addAdjusterAndMorph: notifyPane		proportionalHeight: 0.8.	window setLabel: label.	extentToUse _ 650 @ 320.	"nice and wide to show plenty of the error msg"	^ window openInWorldExtent: extentToUse.! !!Debugger methodsFor: 'context stack menu' stamp: 'jmv 2/24/2011 20:16'!shiftedContextStackMenu	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addList: {			{'browse class hierarchy'.				#classHierarchy}.			{'browse method (O)'.					#openSingleMessageBrowser}.			{'implementors of sent messages'.		#browseAllMessages}.			{'change sets with this method'.		#findMethodInChangeSets}.			#-.			{'inspect instances'.					#inspectInstances}.			{'inspect subinstances'.				#inspectSubInstances}.			#-.			{'revert to previous version'.			#revertToPreviousVersion}.			{'remove from current change set'.	#removeFromCurrentChanges}.			{'revert & remove from changes'.		#revertAndForget}.			#-.			{'more...'.								#openMenu}. 		}.	^aMenu! !!DeepCopier methodsFor: 'like fullCopy' stamp: 'jmv 2/24/2011 20:36'!warnIverNotCopiedIn: aClass sel: sel	"Warn the user to update veryDeepCopyWith: or veryDeepInner:"	self inform: ('An instance variable was added to to class ', aClass name, ',\and it is not copied in the method ', sel, '.\Please rewrite it to handle all instance variables.\See DeepCopier class comment.') withCRs.	Browser fullOnClass: aClass selector: sel! !!DualChangeSorter methodsFor: 'initialization' stamp: 'jmv 2/24/2011 22:29'!openAsMorph	^ self buildMorphicWindow openInWorld! !!DualChangeSorter methodsFor: 'creation' stamp: 'jmv 2/24/2011 22:28'!buildMorphicWindow	| window left right |	leftCngSorter _ ChangeSorter new myChangeSet: ChangeSet current.	leftCngSorter parent: self.	rightCngSorter _ ChangeSorter new myChangeSet: ChangeSorter secondaryChangeSet.	rightCngSorter parent: self.	window _ SystemWindow new model: self.	window beRow.	left _ LayoutMorph newColumn.	leftCngSorter buildMorphicUIIn: left.	right _ LayoutMorph newColumn.	rightCngSorter buildMorphicUIIn: right.	window setLabel: leftCngSorter labelString.	window layoutMorph addMorph: left proportionalWidth: 0.5.	window layoutMorph addAdjusterAndMorph: right proportionalWidth: 0.5.	^ window! !!FileContentsBrowser methodsFor: 'accessing' stamp: 'jmv 2/24/2011 17:06'!selectedPackage	^thePackage! !!FileContentsBrowser methodsFor: 'accessing' stamp: 'jmv 2/24/2011 17:04'!thePackage: aPackage	thePackage _ aPackage! !!FileContentsBrowser methodsFor: 'removing' stamp: 'jmv 2/24/2011 17:06'!removeUnmodifiedClasses	self okToChange ifFalse: [ ^ self ].	thePackage classes copy do: [ :theClass |		Cursor wait showWhile: [ theClass removeAllUnmodified ].		theClass hasChanges ifFalse: [ thePackage removeClass: theClass ]].	self classListIndex: 0.	self changed: #classList! !!FileContentsBrowser methodsFor: 'class list' stamp: 'jmv 2/24/2011 17:06'!findClass	| pattern foundClass classNames index foundPackage |	self okToChange ifFalse: [^ self classNotFound].	pattern _ (FillInTheBlank request: 'Class Name?') asLowercase.	pattern isEmpty ifTrue: [^ self].	classNames := Set new.	classNames addAll: thePackage classes keys.	classNames := classNames asArray select: 		[:n | (n asLowercase indexOfSubCollection: pattern startingAt: 1) > 0].	classNames isEmpty ifTrue: [^ self].	index _ classNames size = 1				ifTrue:	[1]				ifFalse:	[(PopUpMenu labelArray: classNames lines: #()) startUp].	index = 0 ifTrue: [^ self].	foundPackage := nil.	foundClass := nil.		(thePackage classes includesKey: (classNames at: index)) ifTrue:[			foundClass := thePackage classes at: (classNames at: index).			foundPackage := thePackage].	foundClass ifNotNil: [	 	self systemCategoryListIndex: (self systemCategoryList indexOf: foundPackage packageName asSymbol).		self classListIndex: (self classList indexOf: foundClass name) ]! !!FileContentsBrowser methodsFor: 'infoView' stamp: 'jmv 2/24/2011 15:31'!annotation	| info |	info _ self infoViewContents.	^info isEmpty		ifTrue: [ super annotation ]		ifFalse: [ info, self annotationSeparator, super annotation ]! !!FileContentsBrowser methodsFor: 'creation' stamp: 'jmv 2/25/2011 09:30'!buildMorphicWindow	"Create a pluggable version of all the views for a Browser, including views and controllers."	| window list1 list2 upperPanes |	contentsSymbol _ self defaultDiffsSymbol.  "#showDiffs or #prettyDiffs"	window _ SystemWindow new model: self.	self systemCategoryListIndex: 1.	list1 _ PluggableListMorph 			model: self 			listGetter: #systemCategorySingleton			indexGetter: #indexIsOne 			indexSetter: #indexIsOne:			menuGetter: #packageListMenu			keystrokeAction: #packageListKey:from:.	list1 hideScrollBarsIndefinitely.	list1 borderWidth: 0.		list2 _ PluggableListMorph 			model: self 			listGetter: #messageCategoryList			indexGetter: #messageCategoryListIndex 			indexSetter: #messageCategoryListIndex:			menuGetter: #messageCategoryMenu.	list2 borderWidth: 0.	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: self buildMorphicClassColumn proportionalWidth: 0.33;		addAdjusterAndMorph: list2 proportionalWidth: 0.33;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.34.	window _ SystemWindow new model: self.	window beColumn.	window layoutMorph addMorph: list1 fixedHeight: Preferences standardCodeFont height + 10.	window layoutMorph addAdjusterAndMorph: upperPanes proportionalHeight: 0.4.	window layoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6.	self changed: #editSelection.	^ window! !!FileContentsBrowser methodsFor: 'menus' stamp: 'jmv 2/24/2011 17:02'!packageListMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	^ aMenu 		labels:'find class... (f)fileInfile into new changesetfileOutremove existing'		lines: #(1 4 5)		selections: #(findClass fileInPackage fileIntoNewChangeSet fileOutPackage removeUnmodifiedClasses)! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'jmv 2/24/2011 17:12'!browseFile: aFilename	"Open a file contents browser on a file of the given name"	| package organizer browser |	aFilename ifNil: [^ Beeper beep].	Cursor wait showWhile: [		organizer _ SystemOrganizer defaultList: Array new.		package _ FilePackage fromFileNamed: aFilename.		organizer 			classifyAll: package classes keys 			under: package packageName.		(browser := self new)			systemOrganizer: organizer;			thePackage: package].	self		openBrowserView: browser buildMorphicWindow		label: 'File Contents Browser'! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'jmv 2/24/2011 17:12'!browseStream: aStream named: aString	| package organizer browser |	Cursor wait showWhile: [		organizer _ SystemOrganizer defaultList: Array new.		package _ (FilePackage new fullName: aString; fileInFrom: aStream).		organizer 			classifyAll: package classes keys 			under: package packageName.		(browser := self new)			systemOrganizer: organizer;			thePackage: package].	self		openBrowserView: browser buildMorphicWindow		label: 'File Contents Browser'.! !!FileList methodsFor: 'file list menu' stamp: 'jmv 2/24/2011 16:58'!itemsForNoFile	| services |	services := OrderedCollection new: 6.	services add: self serviceSortByName.	services add: self serviceSortBySize.	services add: (self serviceSortByDate useLineAfter: true).	services add: self serviceAddNewFile.	services add: self serviceAddNewDirectory.	^ services		! !!FileList methodsFor: 'initialization' stamp: 'jmv 2/24/2011 12:20'!optionalButtonRow	"Answer the button row associated with a file list"	| row buttonColor |	row _ LayoutMorph newRow.	buttonColor _ Theme current buttonColorFrom: self class windowColor.	row setProperty: #buttonRow toValue: true.  "Used for dynamic retrieval later on"	row color: buttonColor.	self updateButtonRow: row.	^row! !!FileList methodsFor: 'initialization' stamp: 'jmv 2/24/2011 12:34'!updateButtonRow: row	"Dynamically update the contents of the button row, if any."	| buttons |	row removeAllMorphs.	buttons _ OrderedCollection new.	self universalButtonServices do: [ :service |		buttons add: (service buttonToTriggerIn: self) ].	self dynamicButtonServices do: [ :service | 		buttons add: (service buttonToTriggerIn: self).		service addDependent: self].	row addMorphs: buttons.! !!FileList class methodsFor: 'instance creation' stamp: 'jmv 2/25/2011 11:52'!buildMorphicWindowOn: aFileStream	"Open a morphic view of a FileList on the given file."	| fileModel window |	fileModel _ FileList new setFileStream: aFileStream.	"closes the stream"	window _ SystemWindow new model: fileModel.	window beColumn; setLabel: aFileStream fullName.	window layoutMorph		addMorph: ((TextModelMorph 			textProvider: fileModel			textGetter: #acceptedContents 			textSetter: #put:			selectionGetter: #contentsSelection)				borderWidth: 0)		proportionalHeight: 1.	^ window openInWorld! !!FileList class methodsFor: 'instance creation' stamp: 'jmv 2/25/2011 11:52'!openEditorOn: aFileStream	"Open an editor on the given FileStream."	^ (self buildMorphicWindowOn: aFileStream) openInWorld! !!FileList2 methodsFor: 'initialization' stamp: 'jmv 2/25/2011 10:21'!directory: dir	"Set the path of the volume to be displayed."	self okToChange ifFalse: [^ self].	self modelSleep.	directory _ dir.	self modelWakeUp.	sortMode ifNil: [		sortMode _ #date.		sortAscending _ false ].	volList _ Array with: '[]'.	directory ifNotNil: [		volList _ volList, directory pathParts.  "Nesting suggestion from RvL"	].	volList _ volList withIndexCollect: [:each :i | ( String new: i-1 withAll: $ ), each].	self changed: #relabel.	self changed: #volumeList.	self pattern: pattern! !!FileList2 methodsFor: 'user interface' stamp: 'jmv 2/25/2011 11:21'!morphicDirectoryTreePaneFiltered: aSymbol	^(SimpleHierarchicalListMorph 		model: self		listGetter: aSymbol		indexGetter: #currentDirectorySelected		indexSetter: #setSelectedDirectoryTo:		menuGetter: #volumeMenu		keystrokeAction: nil)			autoDeselect: false;			enableDrag: false;			enableDrop: true;			borderWidth: 0;			yourself		! !!FileList2 methodsFor: 'user interface' stamp: 'jmv 2/25/2011 11:21'!morphicFileContentsPane	^(TextModelMorph 		textProvider: self		textGetter: #acceptedContents 		textSetter: #put:		selectionGetter: #contentsSelection)			borderWidth: 0! !!FileList2 methodsFor: 'user interface' stamp: 'jmv 2/25/2011 11:20'!morphicFileListPane	^(PluggableListMorph 		model: self 		listGetter: #fileList 		indexGetter: #fileListIndex		indexSetter: #fileListIndex: 		menuGetter: #fileListMenu)			enableDrag: true;			enableDrop: false;			borderWidth: 0;			yourself! !!FileList2 methodsFor: 'user interface' stamp: 'jmv 2/25/2011 11:19'!morphicPatternPane	^(TextModelMorph 		textProvider: self		textGetter: #pattern 		textSetter: #pattern:)			borderWidth: 0! !!FileList2 class methodsFor: 'instance creation' stamp: 'jmv 2/25/2011 10:16'!morphicView	^ self morphicViewOnDirectory: FileDirectory default! !!FileList2 class methodsFor: 'instance creation' stamp: 'jmv 2/25/2011 11:20'!morphicViewOnDirectory: aFileDirectory	| aFileList window middleRow upperRow |	aFileList _ self new directory: aFileDirectory.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: aFileList morphicPatternPane proportionalWidth: 0.3;		addAdjusterAndMorph: aFileList optionalButtonRow proportionalWidth: 0.7.	middleRow _ LayoutMorph newRow.	middleRow		addMorph: aFileList morphicDirectoryTreePane proportionalWidth: 0.5;		addAdjusterAndMorph: aFileList morphicFileListPane proportionalWidth: 0.5.	window _ SystemWindow new model: aFileList.	window beColumn.	window layoutMorph addMorph: upperRow fixedHeight: self defaultButtonPaneHeight.	window layoutMorph addAdjusterAndMorph: middleRow proportionalHeight: 0.4.	window layoutMorph addAdjusterAndMorph: aFileList morphicFileContentsPane proportionalHeight: 0.6.	window setLabel: aFileDirectory pathName.	aFileList postOpen.	^ window ! !!HierarchyBrowser methodsFor: 'initialization' stamp: 'tk 4/3/98 11:09'!classListIndex: newIndex	"Cause system organization to reflect appropriate category"	| newClassName ind |	newIndex ~= 0 ifTrue:		[newClassName _ (classList at: newIndex) copyWithout: $ .		systemCategoryListIndex _			systemOrganizer numberOfCategoryOfElement: newClassName].	ind _ super classListIndex: newIndex.	self changed: #systemCategorySingleton.	^ ind! !!ClassListBrowser methodsFor: 'initialization' stamp: 'jmv 2/24/2011 16:41'!initForClassesNamed: nameList title: aTitle	"Initialize the receiver for the class-name-list and title provided"	self systemOrganizer: SystemOrganization.	metaClassIndicated _ false.	defaultTitle _ aTitle.	classList _ nameList copy.	self		class openBrowserView: self buildNoSysCatMorphicWindow		label: aTitle	"ClassListBrowser new initForClassesNamed: #(Browser CategoryViewer) title: 'Frogs'"! !!HierarchyBrowser class methodsFor: 'as yet unclassified' stamp: 'jmv 2/24/2011 16:43'!newFor: aClass	"Open a new HierarchyBrowser on the given class"	|  newBrowser |	newBrowser _ HierarchyBrowser new initHierarchyForClass: aClass.	Browser openBrowserView: newBrowser buildNoSysCatMorphicWindow		label: newBrowser labelString.	newBrowser assureSelectionsShow"HierarchyBrowser newFor: Boolean"! !!Inspector methodsFor: 'menu commands' stamp: 'jmv 2/24/2011 20:17'!fieldListMenu	"Arm the supplied menu with items for the field-list of the receiver"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu addStayUpIcons.	aMenu addList: #(		('inspect (i)'						inspectSelection)		('explore (I)'					exploreSelection)).	self addCollectionItemsTo: aMenu.	aMenu addList: #(		-		('method refs to this inst var'		referencesToSelection)		('methods storing into this inst var'	defsOfSelection)		('objects pointing to this value'		objectReferencesToSelection)		('chase pointers'					chasePointers)		('explore pointers'					explorePointers)		-		('browse full (b)'					browseMethodFull)		('browse hierarchy (h)'				classHierarchy)		('browse protocol (p)'				browseFullProtocol)		-		('inst var refs...'						browseInstVarRefs)		('inst var defs...'					browseInstVarDefs)		('class var refs...'					classVarRefs)		('class variables'					browseClassVariables)		('class refs (N)'						browseClassRefs)		-		('copy name (c)'					copyName)				('basic inspect'						inspectBasic)).	^ aMenu! !!Inspector class methodsFor: 'instance creation' stamp: 'jmv 2/25/2011 11:42'!inMorphicWindowOn: anObject label: aLabel	" Inspector openAsMorphOn: SystemOrganization "	| window inspector contentsText list upperRow evaluatorText |	inspector _ self inspect: anObject.	list _ PluggableListMorph new			doubleClickSelector: #inspectSelection;			model: inspector 			listGetter: #fieldList			indexGetter: #selectionIndex			indexSetter: #toggleIndex:			menuGetter: #fieldListMenu			keystrokeAction: #inspectorKey:from:.	list borderWidth: 0.	contentsText _ TextModelMorph			textProvider: inspector			textGetter: #acceptedContents 			textSetter: #accept:			selectionGetter: #contentsSelection.	contentsText borderWidth: 0.	evaluatorText _ (TextModelMorph textProvider: inspector)			askBeforeDiscardingEdits: false;			borderWidth: 0.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: list proportionalWidth: 0.3;		addAdjusterAndMorph: contentsText proportionalWidth: 0.7.	window _ SystemWindow new model: inspector.	window beColumn.	window layoutMorph addMorph: upperRow proportionalHeight: 0.7.	window layoutMorph addAdjusterAndMorph: evaluatorText proportionalHeight: 0.3.	window setLabel: aLabel.	window setUpdatablePanesFrom: #(fieldList).	^ window! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 2/24/2011 11:13'!fixedOrMorphHeight: aNumber	"aNumber is taken as the fixed height to use.	No proportional part."	fixedHeight		ifNotNil: [ fixedHeight _ aNumber ]		ifNil: [ morph height: aNumber ].	proportionalHeight _ nil! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 2/24/2011 11:13'!fixedOrMorphWidth: aNumber	"aNumber is taken as the fixed width to use.	No proportional part."	fixedWidth		ifNotNil: [ fixedWidth _ aNumber ]		ifNil: [ morph width: aNumber ].	proportionalWidth _ nil! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 2/24/2011 11:15'!proportionalHeight: aNumberOrNil maybeMinimum: otherNumberOrNil	"Alternatives: same as in #proportionalWidth:minimum:, see comment there"	proportionalHeight _ aNumberOrNil.	fixedHeight ifNotNil: [ fixedHeight _ otherNumberOrNil ]! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 2/24/2011 11:15'!proportionalWidth: aNumberOrNil maybeMinimum: otherNumberOrNil	"Alternatives:		- proportionalWidth notNil, fixedWidth notNil	->		Use fraction of available space, take fixedWidth as minimum desired width		- proportionalWidth isNil, fixedWidth isNil		->		Use current morph width		- proportionalWidth isNil, fixedWidth notNil	->		Use fixedWidth		- proportionalWidth notNil, fixedWidth isNil	->		NOT VALID"	proportionalWidth _ aNumberOrNil.	fixedWidth ifNotNil: [ fixedWidth _ otherNumberOrNil ]! !!LayoutSpec methodsFor: 'layout' stamp: 'jmv 2/24/2011 11:36'!heightFor: availableSpace	"If proportional is zero, answer stored fixed extent, or actual morph extent if undefined.	Otherwise, we do proportional layout, and the stored extent is a minimum extent.	If there is no minimum extent, it should be set to zero."	proportionalHeight ifNotNil: [		^fixedHeight max: (proportionalHeight * availableSpace) rounded ].	^ self fixedHeight! !!LayoutSpec methodsFor: 'layout' stamp: 'jmv 2/24/2011 11:36'!widthFor: availableSpace	"If proportional is zero, answer stored fixed extent, or actual morph extent if undefined.	Otherwise, we do proportional layout, and the stored extent is a minimum extent.	If there is no minimum extent, it should be set to zero."	proportionalWidth ifNotNil: [		^fixedWidth max: (proportionalWidth * availableSpace) rounded ].	^ self fixedWidth! !!LayoutSpec methodsFor: 'testing' stamp: 'jmv 2/24/2011 11:09'!isProportionalHeight	^proportionalHeight notNil! !!LayoutSpec methodsFor: 'testing' stamp: 'jmv 2/24/2011 11:09'!isProportionalWidth	^proportionalWidth notNil! !!LayoutSpec class methodsFor: 'instance creation' stamp: 'jmv 2/24/2011 12:29'!keepMorphExtent	^self new		useMorphWidth;		useMorphHeight! !!MessageSet methodsFor: 'private' stamp: 'jmv 2/24/2011 14:05'!buildMorphicMessageList	"Build my message-list object in morphic"	| aListMorph |	aListMorph := PluggableListMorph new.	aListMorph 		model: self		listGetter: #messageList		indexGetter: #messageListIndex		indexSetter: #messageListIndex:		menuGetter: #messageListMenu		keystrokeAction: #messageListKey:from:.	aListMorph enableDragNDrop: false.	^aListMorph borderWidth: 0; yourself! !!MessageSet methodsFor: 'private' stamp: 'jmv 2/25/2011 09:31'!buildMorphicWindow	"Answer a morphic window with the given label that can display the receiver"	| window |	window _ SystemWindow new model: self.	window beColumn.	window layoutMorph addMorph: self buildMorphicMessageList proportionalHeight: 0.2.	window layoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.8.	window setUpdatablePanesFrom: #(messageList).	self changed: #editSelection.	^ window! !!MessageNames methodsFor: 'initialization' stamp: 'jmv 2/25/2011 09:31'!buildMorphicWindow	"Answer a morphic window with the given initial search string, nil if none""MessageNames openMessageNames"	| window selectorListView firstRow searchButton textMorph secondRow |	textMorph _ TextModelMorph 		textProvider: self		textGetter: #searchString 		textSetter: #searchString:.	textMorph setProperty: #alwaysAccept toValue: true.	textMorph askBeforeDiscardingEdits: false.	textMorph acceptOnCR: true.	textMorph setTextColor: Color brown.	textMorph hideScrollBarsIndefinitely.	textMorph textMorph		on: #mouseEnter send: #selectAll to: textMorph textMorph.	searchButton _ PluggableButtonMorph new 		model: self;		label: 'Search';		action: #doSearchFrom:;		arguments: {textMorph}.	searchButton setBalloonText: 'Type some letters into the pane at right, and then press this Search button (or hit RETURN) and all method selectors that match what you typed will appear in the list pane below.  Click on any one of them, and all the implementors of that selector will be shown in the right-hand pane, and you can view and edit their code without leaving this tool.'.	firstRow _ LayoutMorph newRow.	firstRow		addMorph: searchButton proportionalWidth: 0.25;		addMorph: textMorph proportionalWidth: 0.75.	selectorListView _ (PluggableListMorph 		model: self		listGetter: #selectorList		indexGetter: #selectorListIndex		indexSetter: #selectorListIndex:		menuGetter: #selectorListMenu		keystrokeAction: #selectorListKey:from:)			borderWidth: 0.	secondRow _  LayoutMorph newRow.	secondRow		addMorph: selectorListView proportionalWidth: 0.5;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.5.	window _ SystemWindow new model: self.	window beColumn.	window layoutMorph addMorph: firstRow fixedHeight: self defaultButtonPaneHeight+4.	window layoutMorph addAdjusterAndMorph: secondRow proportionalHeight: 0.5.	window layoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.5.	self changed: #editSelection.	window setLabel: 'MessageNames'.	^ window! !!MessageSet class methodsFor: 'instance creation' stamp: 'jmv 2/24/2011 22:48'!open: aMessageSet name: aString 	"Create a standard system view for the messageSet, aMessageSet, whose label is aString."	^ (aMessageSet buildMorphicWindow setLabel: aString) openInWorld! !!MessageNames class methodsFor: 'instance creation' stamp: 'jmv 2/24/2011 22:58'!openMessageNames	"Open a new instance of the receiver in the active world"	self new buildMorphicWindow openInWorld	"MessageNames openMessageNames"! !!Morph methodsFor: 'e-toy support' stamp: 'jmv 2/25/2011 11:31'!embeddedInMorphicWindowLabeled: labelString 	| window |	window := SystemWindow new beColumn.	window setLabel: labelString.	window setWindowColor: self color.	window layoutMorph addMorph: self proportionalHeight: 1.	^window! !!Morph methodsFor: 'layout-properties' stamp: 'jmv 2/24/2011 20:10'!layoutSpec	"Layout specific. Return the layout spec describing where the  	receiver should appear in a proportional layout"	| aNew |	self hasExtension		ifTrue: [ self extension layoutSpec ifNotNil: [ :ls | ^ ls ]].	aNew _ LayoutSpec keepMorphExtent.	aNew morph: self.	self assureExtension layoutSpec: aNew.	^aNew! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 2/25/2011 11:02'!createAcceptButton	"create the [accept] button"	| result buttonColor theme |	theme _ Theme current.	theme useUniformColors		ifTrue: [ buttonColor _ theme buttonColorFrom: theme defaultWindowColor ]		ifFalse: [ buttonColor _ theme acceptButton].	result _ PluggableButtonMorph new		 model: self;		 color: buttonColor;		 label: 'Accept';		 action: #accept.	result bounds: (29@90 corner: 122@117).	self addMorph: result.	^ result! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 2/25/2011 11:02'!createCancelButton	"create the [cancel] button"	| result buttonColor theme |	theme _ Theme current.	theme useUniformColors		ifTrue: [ buttonColor _ theme buttonColorFrom: theme defaultWindowColor ]		ifFalse: [ buttonColor _ theme buttonColorFrom: theme cancelButton ].	result _ PluggableButtonMorph new		 model: self;		 color: buttonColor;		 label: 'Cancel';		 action: #cancel.	result bounds: (149@90 corner: 242@117).	self addMorph: result.	^ result! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 2/25/2011 11:04'!createQueryTextMorph: queryString 	"create the queryTextMorph"	| result |	result := StringMorph new contents: queryString.	result lock.	result bounds: ( 15@4 corner: 169@18).	self addMorph: result.	^ result! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 2/25/2011 11:06'!createTextPaneExtent: answerExtent acceptBoolean: acceptBoolean	"create the textPane"	| result |	result := TextModelMorph				textProvider: self				textGetter: #response				textSetter: #response:				selectionGetter: #selectionInterval.	result extent: answerExtent.	result borderWidth: 1; borderColor: Color lightGray.	result hasUnacceptedEdits: true.	result acceptOnCR: acceptBoolean.	result bounds: (2@25 corner: 269@84).	self addMorph: result.	^ result! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 2/25/2011 11:01'!initialize	super initialize.	self setDefaultParameters.	self extent: 271@121.	responseUponCancel := ''	! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 2/25/2011 10:53'!setDefaultParameters	"change the receiver's appareance parameters"	self color: Theme current menu! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 2/25/2011 11:00'!setQuery: queryString initialAnswer: initialAnswer answerExtent: answerExtent acceptOnCR: acceptBoolean 	response := initialAnswer.	done := false.	self removeAllMorphs.	self createQueryTextMorph: queryString.	self createAcceptButton.	self createCancelButton.	textPane := self				createTextPaneExtent: answerExtent				acceptBoolean: acceptBoolean	! !!LayoutAdjustingMorph methodsFor: 'accessing' stamp: 'jmv 2/24/2011 12:59'!adoptWidgetsColor: paneColor	super adoptWidgetsColor: paneColor.	paneColor ifNotNil: [ self color: paneColor ]! !!LayoutMorph methodsFor: 'initialization' stamp: 'jmv 2/24/2011 12:18'!initialize	super initialize.	separation _ 0! !!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 2/24/2011 12:19'!separation: aNumber	separation _ aNumber! !!LayoutMorph methodsFor: 'layout' stamp: 'jmv 2/24/2011 11:39'!layoutSubmorphsVerticallyIn: boundsForLayout	"Compute a new layout based on the given layout bounds."	| usableHeight sumOfFixed normalizationFactor availableForPropHeight heights t usableWidth boundsLeft boundsBottom b l r |	usableHeight _ boundsForLayout height - ((submorphs size + 1) * separation).	sumOfFixed _ submorphs sum: [ :m | m layoutSpec fixedHeight ].	availableForPropHeight _ usableHeight - sumOfFixed.	padding ifNil: [		availableForPropHeight = 0 ifFalse: [			self height: self height - availableForPropHeight.			^ self doLayoutIfNeeded ]].	normalizationFactor _ self proportionalHeightNormalizationFactor.	availableForPropHeight _ availableForPropHeight * normalizationFactor.	heights _ submorphs collect: [ :m | m layoutSpec heightFor: availableForPropHeight ].	t _ ((usableHeight - heights sum) * (padding ifNil: [0]) + separation max: 0) +  boundsForLayout top.	usableWidth _ boundsForLayout width - (2*separation) max: 0.	boundsLeft _ boundsForLayout left.		boundsBottom _ boundsForLayout bottom.	submorphs size to: 1 by: -1 do: [ :index | | m h w ls |			m _ submorphs at: index.			h _ heights at: index.			"major direction"			b _ t + h min: boundsBottom.			"minor direction"			ls _ m layoutSpec.			w _ (ls widthFor: usableWidth) min: usableWidth.			l _ (usableWidth - w) * ls minorDirectionPadding + separation + boundsLeft.			r _ l + w.			"Set bounds and adjust major direction for next step"			m bounds: (l rounded @ t rounded corner: r rounded @ b rounded).			h > 0 ifTrue: [				t _ b + separation min: boundsBottom ]]! !!LayoutMorph methodsFor: 'submorphs-add/remove' stamp: 'jmv 2/24/2011 14:42'!addAdjusterMorph	"So the user can adjust layout"	"twekear para ui grande..."	| thickness |	thickness _ 4.	direction == #horizontal ifTrue: [		self			addMorph: LayoutAdjustingMorph new			layoutSpec: (LayoutSpec fixedWidth: thickness) ].	direction == #vertical ifTrue: [		self			addMorph: LayoutAdjustingMorph new			layoutSpec: (LayoutSpec fixedHeight: thickness)]! !!LayoutMorph methodsFor: 'private' stamp: 'jmv 2/24/2011 10:08'!minPaneHeightForReframe	^StrikeFont default height + 10! !!LayoutMorph methodsFor: 'private' stamp: 'jmv 2/24/2011 10:08'!minPaneWidthForReframe	^Preferences scrollbarThickness * 3! !!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 2/24/2011 17:55'!adjustHorizontallyBy: aLayoutAdjustMorph at: aPoint	| delta l ls r rs lNewWidth rNewWidth i lCurrentWidth rCurrentWidth doNotResizeBelow |	doNotResizeBelow _ self minPaneWidthForReframe.	i _ submorphs indexOf: aLayoutAdjustMorph.	l _ self submorphs at: i +1.	ls _ l layoutSpec.	lCurrentWidth _ l width max: 1.	"avoid division by zero"	r _ self submorphs at: i - 1.	rs _ r layoutSpec.	rCurrentWidth _ r width max: 1.	"avoid division by zero"	delta _ aPoint x - aLayoutAdjustMorph center x.	delta _ delta max: doNotResizeBelow - lCurrentWidth.	delta _ delta min: rCurrentWidth - doNotResizeBelow.	delta = 0 ifTrue: [ ^self ].	rNewWidth _ rCurrentWidth - delta.	lNewWidth _ lCurrentWidth + delta.	(ls isProportionalWidth and: [ rs isProportionalWidth ])		ifTrue: [	"If both proportional, update them"			ls				proportionalWidth: (lNewWidth / lCurrentWidth * ls proportionalWidth)				maybeMinimum: lNewWidth.			rs				proportionalWidth: (rNewWidth / rCurrentWidth * rs proportionalWidth)				maybeMinimum: rNewWidth ]		ifFalse: ["If at least one is fixed, update only the fixed"			ls isProportionalWidth ifFalse: [				ls fixedOrMorphWidth: lNewWidth ].			rs isProportionalWidth ifFalse: [				rs fixedOrMorphWidth: rNewWidth ]].	self layoutAndComputeFullBounds! !!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 2/24/2011 17:55'!adjustVerticallyBy: aLayoutAdjustMorph at: aPoint	| delta t ts b bs tNewHeight bNewHeight i tCurrentHeight bCurrentHeight doNotResizeBelow |	doNotResizeBelow _ self minPaneHeightForReframe.	i _ submorphs indexOf: aLayoutAdjustMorph.	t _ self submorphs at: i +1.	ts _ t layoutSpec.	tCurrentHeight _ t height max: 1.	"avoid division by zero"	b _ self submorphs at: i - 1.	bs _ b layoutSpec.	bCurrentHeight _ b height max: 1.	"avoid division by zero"	delta _ aPoint y - aLayoutAdjustMorph center y.	delta _ delta max: doNotResizeBelow - tCurrentHeight.	delta _ delta min: bCurrentHeight - doNotResizeBelow.	delta = 0 ifTrue: [ ^self ].	tNewHeight _ tCurrentHeight + delta.	bNewHeight _ bCurrentHeight - delta.	(ts isProportionalHeight and: [ bs isProportionalHeight ])		ifTrue: [	"If both proportional, update them"			ts				proportionalHeight: (tNewHeight / tCurrentHeight * ts proportionalHeight)				maybeMinimum: tNewHeight.			bs				proportionalHeight: (bNewHeight / bCurrentHeight * bs proportionalHeight)				maybeMinimum: bNewHeight ]		ifFalse: ["If at least one is fixed, update only the fixed"			ts isProportionalHeight ifFalse: [				ts fixedOrMorphHeight: tNewHeight ].			bs isProportionalHeight ifFalse: [				bs fixedOrMorphHeight: bNewHeight ]].	self layoutAndComputeFullBounds! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/24/2011 14:53'!addAdjusterAndMorph: aMorph fixedHeight: aNumber	"Convenience method.	Add others as necessary."	self addAdjusterAndMorph: aMorph layoutSpec: (LayoutSpec fixedHeight: aNumber)! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/24/2011 14:47'!addAdjusterAndMorph: aMorph layoutSpec: aLayoutSpec	"Add a submorph, at the bottom or right, with aLayoutSpec"	self		addAdjusterMorph;		addMorph: aMorph layoutSpec: aLayoutSpec! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/24/2011 14:55'!addAdjusterAndMorph: aMorph proportionalHeight: aNumber	"Convenience method.	Add others as necessary."	self addAdjusterAndMorph: aMorph layoutSpec: (LayoutSpec proportionalHeight: aNumber)! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/24/2011 14:47'!addAdjusterAndMorph: aMorph proportionalWidth: aNumber	"Convenience method.	Add others as necessary."	self addAdjusterAndMorph: aMorph layoutSpec: (LayoutSpec proportionalWidth: aNumber)! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/24/2011 14:54'!addMorph: aMorph fixedHeight: aNumber	"Convenience method.	Add others as necessary."	self addMorph: aMorph layoutSpec: (LayoutSpec fixedHeight: aNumber)! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/25/2011 09:15'!addMorph: aMorph fixedWidth: aNumber	"Convenience method.	Add others as necessary."	self addMorph: aMorph layoutSpec: (LayoutSpec fixedWidth: aNumber)! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/24/2011 14:56'!addMorph: aMorph proportionalHeight: aNumber	"Convenience method.	Add others as necessary."	self addMorph: aMorph layoutSpec: (LayoutSpec proportionalHeight: aNumber)! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/24/2011 14:47'!addMorph: aMorph proportionalWidth: aNumber	"Convenience method.	Add others as necessary."	self addMorph: aMorph layoutSpec: (LayoutSpec proportionalWidth: aNumber)! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/24/2011 14:52'!addMorphUseAll: aMorph	"Convenience method.	Add others as necessary."	self addMorph: aMorph layoutSpec: LayoutSpec useAll! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/24/2011 14:48'!addMorphs: morphs	"All morphs are made equal width"	morphs do: [ :m |		self addMorph: m proportionalWidth: 1 ]! !!LayoutMorph methodsFor: 'convenience methods' stamp: 'jmv 2/24/2011 14:48'!addMorphs: morphs widthProportionalTo: widths	"Widths can be in any arbitrary unit. The actual widths will be proportional to them."	| factor |	factor _ 1.0 / widths sum.	morphs with: widths do: [ :m :w |		self addMorph: m proportionalWidth: w*factor ]! !!LayoutMorph methodsFor: 'testing' stamp: 'jmv 2/25/2011 10:48'!is: aSymbol	^ aSymbol == #LayoutMorph or: [ super is: aSymbol ]! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 2/24/2011 12:21'!example1"	self example1"| pane row |pane _ LayoutMorph newColumn separation: 5.pane color: Color red.row _ LayoutMorph newRow.row	color: Color red;	addMorph: (RectangleMorph new color: (Color h: 60 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 10); 	addMorph: (RectangleMorph new color: (Color blue))		layoutSpec: (LayoutSpec proportionalWidth: 0.8);	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.4);	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.15);	addMorph: (RectangleMorph new color: (Color h: 60 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).pane addMorph: row layoutSpec: LayoutSpec useAll.row _ LayoutMorph newRow separation: 5.row	color: Color red;	addMorph: (RectangleMorph new color: (Color blue))		layoutSpec: (LayoutSpec proportionalWidth: 0.8);	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.4);	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.2).pane addMorph: row layoutSpec: LayoutSpec useAll.row _ LayoutMorph newRow separation: 5.row	color: Color red;	addMorph: (RectangleMorph new color: (Color h: 120 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);	addMorph: (RectangleMorph new color: (Color h: 90 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);	addMorph: (RectangleMorph new color: (Color h: 150 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).pane openInWorld! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 2/24/2011 14:45'!example11"	self example11"| pane row |pane _ LayoutMorph newColumn separation: 5.pane color: Color red.row _ LayoutMorph newRow separation: 5.row	color: Color red;	addMorph: (RectangleMorph new color: (Color h: 60 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 10);	addAdjusterMorph; 	addMorph: (RectangleMorph new color: (Color blue))		layoutSpec: (LayoutSpec proportionalWidth: 0.8);	addAdjusterMorph; 	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.4);	addAdjusterMorph; 	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.15);	addAdjusterMorph; 	addMorph: (RectangleMorph new color: (Color h: 60 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).pane addMorph: row layoutSpec: LayoutSpec useAll.row _ LayoutMorph newRow separation: 5.row	color: Color red;	addMorph: (RectangleMorph new color: (Color blue))		layoutSpec: (LayoutSpec proportionalWidth: 0.8);	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.4);	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.2).pane addMorph: row layoutSpec: LayoutSpec useAll.row _ LayoutMorph newRow separation: 5.row	color: Color red;	addMorph: (RectangleMorph new color: (Color h: 120 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);	addMorph: (RectangleMorph new color: (Color h: 90 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);	addMorph: (RectangleMorph new color: (Color h: 150 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).pane openInWorld! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 2/24/2011 12:22'!example13	"	self example13	"	| pane row innerRow |	pane _ LayoutMorph newColumn separation: 5.	pane color: Color red.	row _ LayoutMorph newRow separation: 5.	innerRow _ (LayoutMorph newRow separation: 5) color: Color red.	innerRow		addMorph: RectangleMorph new layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);		addMorph: RectangleMorph new layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);		addMorph: RectangleMorph new layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 10).	row		color: (Color h: 270 s: 0.2 v: 0.6);		addMorph: innerRow			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 30 minorDirectionPadding: #center);addMorph: LayoutAdjustingMorph new layoutSpec: (LayoutSpec fixedWidth: 5); 		addMorph: (RectangleMorph new color: (Color h: 90 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 40 minorDirectionPadding: #top);addMorph: LayoutAdjustingMorph new layoutSpec: (LayoutSpec fixedWidth: 5); 		addMorph: (RectangleMorph new color: (Color h: 150 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).	pane openInWorld! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 2/24/2011 12:22'!example2	"	self example2	"	| pane row |	pane _ LayoutMorph newColumn separation: 5.	pane color: Color red.	row _ LayoutMorph newRow separation: 5.	row		color: (Color h: 270 s: 0.2 v: 0.6);		addMorph: (RectangleMorph new color: (Color h: 120 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8 minorDirectionPadding: #bottom);		addMorph: (RectangleMorph new color: (Color h: 90 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec proportionalWidth: 0.8 fixedHeight: 40 minorDirectionPadding: #top);		addMorph: (RectangleMorph new color: (Color h: 150 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 0.7 minorDirectionPadding: #center).	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).	pane openInWorld! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 2/24/2011 12:22'!example3	"	self example3	"	| pane row innerRow |	pane _ LayoutMorph newColumn separation: 5.	pane color: Color red.	row _ LayoutMorph newRow separation: 5.	innerRow _ (LayoutMorph newRow separation: 5) color: Color red.	innerRow		addMorph: RectangleMorph new layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);		addMorph: RectangleMorph new layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);		addMorph: RectangleMorph new layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 10).	row		color: (Color h: 270 s: 0.2 v: 0.6);		addMorph: innerRow			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 30 minorDirectionPadding: #center);		addMorph: (RectangleMorph new color: (Color h: 90 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 40 minorDirectionPadding: #top);		addMorph: (RectangleMorph new color: (Color h: 150 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).	pane openInWorld! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 2/24/2011 12:22'!example4	"	self example4"	| pane |	pane _ LayoutMorph newColumn separation: 5.	pane padding: #shrink.	pane color: Color red.	pane		addMorph:			(LimitedHeightTextMorph new				 maxHeight: 48;				 model: (TextModel new contents: 'This is some text to test the morph.'))		layoutSpec: LayoutSpec new useMorphHeight.	pane		addMorph:			(LimitedHeightTextMorph new				 maxHeight: 48;				 model: (TextModel new contents: 'This is some text to test the morph.'))		layoutSpec: LayoutSpec new useMorphHeight.	pane		addMorph:			(LimitedHeightTextMorph new				 maxHeight: 48;				 model: (TextModel new contents: 'This is some text to test the morph.'))		layoutSpec: LayoutSpec new useMorphHeight.	pane openInWorld.! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 2/24/2011 12:22'!example5	"	self example5"	| pane |	pane _ LayoutMorph newColumn separation: 5.	pane padding: #shrink.	pane color: Color red.	pane		addMorph:			(LimitedHeightTextMorph new				 maxHeight: 48;				 model: (TextModel new contents: 'This is some text to test the morph.')).	pane		addMorph:			(LimitedHeightTextMorph new				 maxHeight: 48;				 model: (TextModel new contents: 'This is some text to test the morph.')).	pane		addMorph:			(LimitedHeightTextMorph new				 maxHeight: 48;				 model: (TextModel new contents: 'This is some text to test the morph.')).	pane openInWorld.! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 2/24/2011 12:23'!example6	"	Useful example contributed by Ken Dickey	All these should look the same, right? (mmmh this should be a test...)	self example6	"| pane rect1 rect2 |pane _ LayoutMorph newRow separation: 5. "1"pane color: Color lightGreen; left: 120; top: 50; 	  width: 180; height: 100.pane addMorph: '1' asMorph.rect1 := RectangleMorph new color: (Color lightOrange); 	width: 20; height: 30.pane addMorph: rect1.rect2 := RectangleMorph new color: (Color cyan); 	width: 20; height: 30.pane addMorph: rect2.pane openInWorld.pane _ LayoutMorph newRow separation: 5. "2"pane color: Color lightGreen; left: 320; top: 50; 	  width: 180; height: 100.pane addMorph: '2' asMorph.rect1 := RectangleMorph new color: (Color lightOrange);	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 minorDirectionPadding: #center).pane addMorph: rect1.rect2 := RectangleMorph new color: (Color cyan).pane addMorph: rect2	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 minorDirectionPadding: #center).pane openInWorld.pane _ LayoutMorph newRow separation: 5. "3"pane color: Color lightGreen; left: 520; top: 50; 	  width: 180; height: 100.pane addMorph: '3' asMorph.rect1 := RectangleMorph new color: (Color lightOrange).pane addMorph: rect1          layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 minorDirectionPadding: #center).rect2 := RectangleMorph new color: (Color cyan);	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 minorDirectionPadding: #center).pane addMorph: rect2.pane openInWorld.! !!MenuMorph methodsFor: 'construction' stamp: 'jmv 2/25/2011 10:46'!addStayUpIcons	| closeBox pinBox w |	(self valueOfProperty: #hasStayUpIcons ifAbsent: [ false ])		ifTrue: [		 	self removeProperty: #needsStayUpIcons.			^self ].	titleMorph ifNil: [		"Title not yet there. Flag ourself, so this method is called again when adding title."		self setProperty: #needsStayUpIcons toValue: true.		^ self].	closeBox := IconicButton new target: self;		actionSelector: #delete;		labelGraphic: self class closeIcon;		color: Color transparent;		extent: 14 @ 16;		borderWidth: 0.	pinBox := IconicButton new target: self;		actionSelector: #stayUp:;		arguments: {true};		labelGraphic: self class pushPinIcon;		color: Color transparent;		extent: 14 @ 15;		borderWidth: 0.	w _ (titleMorph hasSubmorphs ifTrue: [ titleMorph firstSubmorph width ] ifFalse: [ 0 ]) + 42.	self addMorphFront: 		(LayoutMorph newRow			height: (titleMorph height max: 19);			width: w;	"Make room for buttons"			color: Color transparent;			addMorph: closeBox fixedWidth: 16;			addMorph: titleMorph proportionalWidth: 1;			addMorph: pinBox fixedWidth: 16).	self setProperty: #hasStayUpIcons toValue: true.	self removeProperty: #needsStayUpIcons! !!MenuMorph methodsFor: 'menu' stamp: 'jmv 2/25/2011 10:47'!removeStayUpBox	| box |	submorphs isEmpty ifTrue: [^self].	(submorphs first is: #LayoutMorph) ifFalse: [^self].	box := submorphs first submorphs first.	(box isKindOf: IconicButton) 		ifTrue: [			box				labelGraphic: (Form extent: box extent depth: 8);				shedSelvedge;				borderWidth: 0;				lock]! !!ObjectExplorer methodsFor: 'accessing' stamp: 'jmv 2/25/2011 11:35'!explorerFor: anObject 	| window listMorph textMorph |	rootObject _ anObject	.listMorph _ SimpleHierarchicalListMorph 			model: self			listGetter: #getList			indexGetter: #getCurrentSelection			indexSetter: #noteNewSelection:			menuGetter: #genericMenu			keystrokeAction: #explorerKey:from:.	listMorph autoDeselect: false; borderWidth: 0.	textMorph _ (TextModelMorph textProvider: self)			askBeforeDiscardingEdits: false; borderWidth: 0.	window _ SystemWindow new model: self.	window beColumn.	window layoutMorph addMorph: listMorph proportionalHeight: 0.8.	window layoutMorph addAdjusterAndMorph: textMorph proportionalHeight: 0.2.	window setLabel: (rootObject printStringLimitedTo: 64).	^ window! !!PackagePaneBrowser methodsFor: 'initialize-release' stamp: 'jmv 2/24/2011 16:14'!buildMorphicPackageList	^(PluggableListMorph		model: self		listGetter: #packageList		indexGetter: #packageListIndex		indexSetter: #packageListIndex:		menuGetter: #packageMenu		keystrokeAction: #packageListKey:from:)			borderWidth: 0; yourself! !!PackagePaneBrowser methodsFor: 'initialize-release' stamp: 'jmv 2/25/2011 09:31'!buildMorphicWindow	"Create a pluggable version of all the morphs for a Browser in Morphic"	"PackagePaneBrowser openBrowser"	| window upperPanes |	upperPanes _ LayoutMorph newRow.	upperPanes		addMorph: self buildMorphicPackageList proportionalWidth: 0.2;		addAdjusterAndMorph: self buildMorphicSystemCatList proportionalWidth: 0.15;		addAdjusterAndMorph: self buildMorphicClassColumn proportionalWidth: 0.25;		addAdjusterAndMorph: self buildMorphicMessageCatList proportionalWidth: 0.15;		addAdjusterAndMorph: self buildMorphicMessageList proportionalWidth: 0.25.	window _ SystemWindow new model: self.	window beColumn.	window layoutMorph addMorph: upperPanes proportionalHeight: 0.4.	window layoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6.	window setUpdatablePanesFrom: #(systemCategoryList classList messageCategoryList messageList).	self changed: #editSelection.	^ window! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 2/24/2011 22:29'!findAChangeSorter: evt	"Locate a change sorter, open it, and bring it to the front.  Create one if necessary"	self		findAWindowSatisfying: [ :aWindow |			(aWindow model isMemberOf: ChangeSorter) or: [ aWindow model isKindOf: DualChangeSorter ]]		orMakeOneUsing: [ DualChangeSorter new buildMorphicWindow openInWorld ].! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 2/25/2011 10:09'!findAFileList: evt	"Locate a file list, open it, and bring it to the front.	Create one if necessary, respecting the Preference."	self		findAWindowSatisfying: [ :aWindow |			aWindow model isKindOf: FileList ]		orMakeOneUsing: [			FileList2 openMorphicViewInWorld ]! !!PluggableButtonMorph class methodsFor: 'example' stamp: 'jmv 2/25/2011 10:24'!example	"PluggableButtonMorph example openInWorld"	| s1 s2 s3 b1 b2 b3 row |	s1 _ Switch new.	s2 _ Switch new turnOn.	s3 _ Switch new.	s2 onAction: [s3 turnOff].	s3 onAction: [s2 turnOff].	b1 _ (PluggableButtonMorph model: s1 stateGetter: #isOn action: #switch) label: 'S1'.	b2 _ (PluggableButtonMorph model: s2 stateGetter: #isOn action: #turnOn) label: 'S2'.	b3 _ (PluggableButtonMorph model: s3 stateGetter: #isOn action: #turnOn) label: 'S3'.	b1 color: Color lightRed.	b2 color: Color lightRed.	b3 color: Color lightRed.	row _ LayoutMorph newRow		addMorphs: (Array with: b1 with: b2 with: b3);		extent: 120@35.	^ row! !!PointerFinder methodsFor: 'morphic ui' stamp: 'jmv 2/25/2011 11:36'!open	| window list |	list _ PluggableListMorph new		doubleClickSelector: #inspectObject;		model: self		listGetter: #pointerList		indexGetter: #pointerListIndex		indexSetter: #pointerListIndex:		menuGetter: #pointerListMenu		keystrokeAction: #arrowKey:from:.	"For doubleClick to work best disable autoDeselect"	list autoDeselect: false.	list color: Color lightMagenta.	window _ SystemWindow new model: self.	window beColumn.	window setLabel: 'Pointer Finder'.	window layoutMorph addMorph: list proportionalHeight: 1.	window openInWorld! !!Preferences class methodsFor: 'hard-coded prefs' stamp: 'jmv 2/24/2011 16:15'!browseToolClass	^ Preferences browserShowsPackagePane		ifTrue:			[PackagePaneBrowser]		ifFalse:			[Browser]! !!Preferences class methodsFor: 'themes' stamp: 'jmv 2/24/2011 23:04'!juans	"	Preferences juans	"	self setPreferencesFrom:	#(		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips true)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(menuKeyboardControl true)		(optionalButtons true)		(extraDebuggerButtons true)		(restartAlsoProceeds false)		(simpleMenus false)		(smartUpdating true)		(subPixelRenderFonts true)		(thoroughSenders true)	)! !!Preferences class methodsFor: 'themes' stamp: 'jmv 2/24/2011 23:04'!slowMachine	self setPreferencesFrom:	#(		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(menuKeyboardControl false)		(optionalButtons false)		(restartAlsoProceeds false)		(simpleMenus false)		(smartUpdating false)		(subPixelRenderFonts false)		(thoroughSenders false)	)! !!Preferences class methodsFor: 'themes' stamp: 'jmv 2/24/2011 23:05'!smalltalk80	"A traditional monochrome Smalltalk-80 look and feel, clean and austere, and lacking many features added to Squeak in recent years. Caution: this theme removes the standard Squeak flaps, turns off the 'smartUpdating' feature that keeps multiple browsers in synch, and much more."	self setPreferencesFrom:	#(		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(menuKeyboardControl false)		(optionalButtons false)		(restartAlsoProceeds false)		(simpleMenus false)		(smartUpdating false)		(thoroughSenders false)	)! !!ProcessBrowser methodsFor: 'stack list' stamp: 'jmv 2/24/2011 20:18'!browseContext	selectedContext		ifNil: [^ self].	Browser fullOnClass: self selectedClass selector: self selectedSelector! !!ProcessBrowser methodsFor: 'views' stamp: 'jmv 2/25/2011 11:59'!openAsMorph	"Create a pluggable version of me, answer a window"	| window aTextMorph list1 list2 upperRow |	deferredMessageRecipient _ WorldState.	list1 _ (PluggableListMorph				model: self				listGetter: #processNameList				indexGetter: #processListIndex				indexSetter: #processListIndex:				menuGetter: #processListMenu				keystrokeAction: #processListKey:from:)			enableDragNDrop: false;			borderWidth: 0.	list2 _ (PluggableListMorph				model: self				listGetter: #stackNameList				indexGetter: #stackListIndex				indexSetter: #stackListIndex:				menuGetter: #stackListMenu				keystrokeAction: #stackListKey:from:)			enableDragNDrop: false;			borderWidth: 0.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: list1 proportionalWidth: 0.5;		addAdjusterAndMorph: list2 proportionalWidth: 0.5.	aTextMorph _ TextModelMorph				textProvider: self				textGetter: #selectedMethod.	aTextMorph askBeforeDiscardingEdits: false; borderWidth: 0.	window _ SystemWindow new model: self.	window beColumn.	window layoutMorph		addMorph: upperRow proportionalHeight: 0.5;		addAdjusterAndMorph: aTextMorph proportionalHeight: 0.5.	window setUpdatablePanesFrom: #(#processNameList #stackNameList ).	(window setLabel: 'Process Browser') openInWorld.	startedCPUWatcher ifTrue: [ self setUpdateCallbackAfter: 7 ].	^ window! !!PseudoClass methodsFor: 'methods' stamp: 'jmv 2/24/2011 15:10'!closuresInfoAt: selector	^''! !!PseudoClass methodsFor: 'methods' stamp: 'jmv 2/24/2011 15:19'!compiledMethodAt: selector ifAbsent: aBlock	^aBlock value! !!PseudoClass methodsFor: 'methods' stamp: 'jmv 2/24/2011 15:12'!stampAt: selector	| record |	record _ (self sourceCode at: selector).	^(record is: #Text)		ifTrue: [ '']		ifFalse: [ record stamp ]! !!PseudoClass methodsFor: 'compatibility' stamp: 'jmv 2/24/2011 15:21'!browseClassVarRefs! !!PseudoClass methodsFor: 'compatibility' stamp: 'jmv 2/24/2011 15:27'!category	^nil! !!PseudoClass methodsFor: 'compatibility' stamp: 'jmv 2/24/2011 15:22'!chooseInstVarThenDo: aBlock! !!ScrollBar methodsFor: 'geometry' stamp: 'jmv 2/24/2011 10:04'!extent: newExtent	newExtent = bounds extent ifTrue: [^ self].	bounds isWide		ifTrue: [ super extent: (newExtent x max: 14) @ newExtent y ]		ifFalse: [ super extent: newExtent x @ (newExtent y max: 14) ].			self flag: #jmv.	"Most times it is not necessary to recreate the buttons"	self removeAllMorphs.	self		initializeUpButton;		initializeDownButton;		initializePagingArea.	self initializeSlider! !!ScrollPane methodsFor: 'geometry' stamp: 'jmv 2/24/2011 09:56'!hScrollBarWidth	"Return the width of the horizontal scrollbar"	| w |		w _ bounds width - (2 * borderWidth).	self vIsScrollbarShowing		ifTrue: [ w _ w - Preferences scrollbarThickness ].	^w! !!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 2/24/2011 16:06'!browseIt	"Launch a browser for the current selection, if appropriate"	| aSymbol anEntry brow |	Preferences alternativeBrowseIt ifTrue: [^ self browseClassFromIt].	self lineSelectAndEmptyCheck: [^ self].	(aSymbol _ self selectedSymbol) ifNil: [^ morph flash].	aSymbol first isUppercase		ifTrue:			[anEntry _ (Smalltalk				at: aSymbol				ifAbsent:					[ Smalltalk browseAllImplementorsOf: aSymbol.					^ nil]).			anEntry ifNil: [^ morph flash].			(anEntry isKindOf: Class)				ifFalse:	[anEntry _ anEntry class].			brow _ Preferences browseToolClass new.			brow setClass: anEntry selector: nil.			brow class				openBrowserView: brow buildMorphicWindow				label: 'System Browser' ]		ifFalse:			[Smalltalk browseAllImplementorsOf: aSymbol]! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 2/24/2011 22:22'!initializeMenu	"Initialize the mouseButton2 (right button) pop-up menu and corresponding messages."	"SmalltalkEditor initialize"	menu _ SelectionMenu fromArray: {		{'find...(f)'.				#find}.		{'find again (g)'.			#findAgain}.		{'set search string (h)'.	#setSearchString}.		#-.		{'do again (j)'.			#again}.		{'undo (z)'.				#undo}.		#-.		{'copy (c)'.				#copySelection}.		{'cut (x)'.				#cut}.		{'paste (v)'.				#paste}.		{'paste...'.				#pasteRecent}.		#-.		{'do it (d)'.				#doIt}.		{'print it (p)'.			#printIt}.		{'inspect it (i)'.			#inspectIt}.		{'explore it (I)'.			#exploreIt}.		{'debug it'.				#debugIt}.		#-.		{'explain'.					#explain}.		{'browse it (b)'.				#browseIt}.		{'senders of it (n)'.			#sendersOfIt}.		{'implementors of it (m)'.	#implementorsOfIt}.		{'references to it (N)'.		#referencesToIt}.		#-.		{'accept (s)'.				#accept}.		{'cancel (l)'.					#cancel}.		#-.		{'method strings with it (E)'.	#methodStringsContainingit}.		{'method source with it'.		#methodSourceContainingIt}.		{'class comments with it'.		#classCommentsContainingIt}.	}! !!SystemWindow methodsFor: 'drawing' stamp: 'jmv 2/24/2011 16:01'!drawWindowBodyOn: aCanvas roundCorners: doRoundCorners widgetsColor: widgetsColor	"Title area is not inside window borders"	| r bl tl tr he tw bw |	doRoundCorners		ifFalse: [			borderColor class == Symbol				ifTrue: [					" This would of course be much better...					aCanvas fillRectangle: bounds fillStyle: self fillStyle borderWidth: borderWidth borderStyleSymbol: borderColor					"					aCanvas fillRectangle: bounds fillStyle: self fillStyle borderWidth: borderWidth borderStyleSymbol: borderColor baseColorForBorder: self raisedColor ]				ifFalse: [					aCanvas fillRectangle: bounds fillStyle: self fillStyle borderWidth: borderWidth borderStyleSymbol: #simple baseColorForBorder: borderColor ]]		ifTrue: [			r _ Theme current roundedWindowRadius.			aCanvas image: SystemWindow roundedCornerBL multipliedBy: widgetsColor at: bounds bottomLeft - (0@r).			aCanvas image: SystemWindow roundedCornerBR multipliedBy: widgetsColor at: bounds bottomRight - (r@r) .			aCanvas fillRectangle: self innerBounds fillStyle: self fillStyle.			tl _ bounds topLeft + (0@self labelHeight).			tr _ bounds topRight + (borderWidth negated@self labelHeight).			bl _ bounds bottomLeft + (r@borderWidth negated).			he _ borderWidth@(bounds height - self labelHeight - r).			tw _ bounds width@borderWidth.			bw _ bounds width - r - r@borderWidth.			aCanvas fillRectangle: (tl extent: he) fillStyle: widgetsColor.			aCanvas fillRectangle: (tr extent: he) fillStyle: widgetsColor.			aCanvas fillRectangle: (bl extent: bw) fillStyle: widgetsColor.			aCanvas fillRectangle: (tl extent: tw) fillStyle: widgetsColor ]! !!SystemWindow methodsFor: 'geometry' stamp: 'jmv 2/24/2011 09:51'!minPaneHeightForReframe	^StrikeFont default height + 10! !!SystemWindow methodsFor: 'geometry' stamp: 'jmv 2/24/2011 10:03'!minPaneWidthForReframe	^Preferences scrollbarThickness * 3! !!SystemWindow methodsFor: 'panes' stamp: 'jmv 2/24/2011 10:31'!addMorph: aMorph fullFrame: aLayoutFrame	"Intentar NO necesitar mas paneMorphs !!"	super addMorph: aMorph fullFrame: aLayoutFrame.	paneMorphs _ paneMorphs copyReplaceFrom: 1 to: 0 with: (Array with: aMorph).	aMorph adoptWidgetsColor: self widgetsColor.	(aMorph is: #BorderedMorph) ifTrue: [		aMorph borderWidth: 2; borderColor: #inset; color: Color transparent ]! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'jmv 2/24/2011 13:59'!collapseOrExpand	"Collapse or expand the window, depending on existing state"	| cf |	isCollapsed		ifTrue: [			"Expand -- restore panes to morphics structure"			isCollapsed _ false.			self activate.  "Bring to frint first"			Preferences collapseWindowsInPlace				ifTrue: [					fullFrame := fullFrame align: fullFrame topLeft with: bounds topLeft]				ifFalse: [					collapsedFrame _ bounds].			self bounds: fullFrame.			layoutMorph ifNotNil: [ layoutMorph show ]]		ifFalse: [			"Collapse -- remove panes from morphics structure"			isCollapsed _ true.			fullFrame _ bounds.			"First save latest fullFrame"			layoutMorph ifNotNil: [ layoutMorph hide ].			cf := self getCollapsedFrame.			(collapsedFrame isNil and: [Preferences collapseWindowsInPlace not]) ifTrue: [				collapsedFrame _ cf].			self bounds: cf].	self layoutChanged! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'jmv 2/24/2011 10:06'!reframePanesAdjoining: growingPane along: side to: aDisplayBox 	| delta newRect minDim theMin horiz |	growingPane ifNil: [^ self].  "As from click outside"	newRect _ aDisplayBox.	horiz _ #(left right) includes: side.	theMin _ horiz ifTrue: [self minPaneWidthForReframe] ifFalse: [self minPaneHeightForReframe].	"First check that this won't make any pane smaller than theMin screen dots"	minDim _ (((paneMorphs select: [:pane | pane bounds bordersOn: growingPane bounds along: side])		collect: [:pane | pane bounds adjustTo: newRect along: side]) copyWith: aDisplayBox)			inject: 999 into:				[:was :rect | was min: (horiz ifTrue: [rect width] ifFalse: [rect height])].	"If so, amend newRect as required"	minDim > theMin ifFalse: [		delta _ minDim - theMin.		newRect _ newRect withSide: side setTo: 				((newRect perform: side) > (growingPane bounds perform: side)					ifTrue: [(newRect perform: side) + delta]					ifFalse: [(newRect perform: side) - delta])].	"Now adjust all adjoining panes for real"	paneMorphs do:		[:pane | (pane bounds bordersOn: growingPane bounds along: side) ifTrue:			[pane bounds: (pane bounds adjustTo: newRect along: side)]].	"And adjust the growing pane itself"	growingPane bounds: newRect.	"Finally force a recomposition of the whole window"	self setPaneRectsFromBounds.	self extent: self extent! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'jmv 2/24/2011 09:52'!spawnPaneFrameHandle: event 	| resizer localPt side growingPane newBounds adjoiningPanes limit cursor |	(self world firstSubmorph isKindOf: NewHandleMorph) 		ifTrue: [^self	"Prevent multiple handles"].	(self innerBounds containsPoint: event cursorPoint) 			ifFalse: [ ^self	"in label or top of top pane"].	growingPane _ self paneWithLongestSide: [:s | side _ s]				near: event cursorPoint.	growingPane ifNil: [^self].	"don't resize pane side coincident with window side - RAA 5 jul 2000"	(growingPane perform: side) = (self innerBounds perform: side) 		ifTrue: [^self].	(side == #top and: [growingPane top = self innerBounds top]) ifTrue: [^self].	adjoiningPanes _ paneMorphs 				select: [ :pane | pane bounds bordersOn: growingPane bounds along: side ].	limit _ adjoiningPanes isEmpty 				ifFalse: [					(adjoiningPanes collect: [:pane | pane bounds perform: side]) 						perform: ((#(#top #left) includes: side) ifTrue: [#max] ifFalse: [#min])]				ifTrue: [ bounds perform: side].	cursor _ Cursor resizeForEdge: side.	resizer _ NewHandleMorph new				followHand: event hand					forEachPointDo: [ :p | 						localPt _ self internalizePositionFromWorld: p.						newBounds _ growingPane bounds 							withSideOrCorner: side							setToPoint: localPt							minExtent: self minPaneWidthForReframe @ self minPaneHeightForReframe							limit: limit.						self 							reframePanesAdjoining: growingPane							along: side							to: newBounds]					lastPointDo: [:p | ]					withCursor: cursor.	event hand world addMorphInLayer: resizer.	resizer startStepping! !!SystemWindow methodsFor: 'layout' stamp: 'jmv 2/24/2011 12:20'!beColumn	layoutMorph _ LayoutMorph newColumn.	self addMorph: layoutMorph! !!SystemWindow methodsFor: 'layout' stamp: 'jmv 2/24/2011 12:20'!beRow	layoutMorph _ LayoutMorph newRow.	self addMorph: layoutMorph! !!SystemWindow methodsFor: 'layout' stamp: 'jmv 2/24/2011 10:19'!layoutAndComputeFullBounds	"Compute a new layout of submorphs based on the given layout bounds."	| lb |	submorphs isEmpty ifTrue: [		^fullBounds _ bounds].	lb _ self layoutBounds.	layoutMorph ifNotNil: [		layoutMorph bounds: lb ].	self submorphsDo: [ :m | 		m doesLayout ifTrue: [			m applyLayoutFrameIn: lb ]].	fullBounds _ self computeFullBounds! !!SystemWindow methodsFor: 'layout' stamp: 'jmv 2/24/2011 10:39'!layoutMorph	^layoutMorph! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/25/2011 10:38'!buildDetailsText	detailsText _ TextModelMorph		textProvider: self		textGetter: #details.	detailsText hideScrollBarsIndefinitely; borderWidth: 0.	^detailsText! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/25/2011 10:39'!buildErrorsList	^ (PluggableListMorph		model: self		listGetter: #errorsList		indexGetter: #selectedErrorTest		indexSetter: #debugErrorTest:) borderWidth: 0! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/25/2011 10:39'!buildFailuresList	^ (PluggableListMorph		model: self		listGetter: #failuresList		indexGetter: #selectedFailureTest		indexSetter: #debugFailureTest:) borderWidth: 0! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/25/2011 10:41'!buildLowerPanes	| failuresList errorsList column |	self buildPassFailText.	self buildDetailsText.	failuresList _ self buildFailuresList.	errorsList _ self buildErrorsList.	column _ LayoutMorph newColumn.	column		addMorph: passFailText fixedHeight: 26;		addAdjusterAndMorph: detailsText fixedHeight: 26;		addAdjusterAndMorph: failuresList proportionalHeight: 0.6;		addAdjusterAndMorph: errorsList proportionalHeight: 0.6.	^ column! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/25/2011 10:44'!buildMorphicWindow	"TestRunner new openAsMorph"	| window |	window _ SystemWindow new model: self.	window beColumn.	window layoutMorph addMorph: self buildUpperControls proportionalHeight: 0.25.	window layoutMorph addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.75.	window setLabel: self windowLabel.	self refreshWindow.	window extent: 460 @ 400.	^window! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/25/2011 10:38'!buildPassFailText	passFailText _ TextModelMorph		textProvider: self		textGetter: #passFail.	passFailText hideScrollBarsIndefinitely; borderWidth: 0.	^ passFailText! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/25/2011 10:35'!buildUpperControls	| refreshButton filterButton stopButton runOneButton runButton row column1 column2 column3 theTestsList |	refreshButton _ self buildRefreshButton.	filterButton _ self buildFilterButton.	stopButton _ self buildStopButton.	column1 _ LayoutMorph newColumn.	column1 addMorphs: { refreshButton . filterButton . stopButton }.	theTestsList _ PluggableListMorphOfMany				model: self				listGetter: #tests				primarySelectionGetter: #selectedSuite				primarySelectionSetter: #selectedSuite:				listSelectionGetter: #listSelectionAt:				listSelectionSetter: #listSelectionAt:put:				menuGetter: #listMenu.	theTestsList autoDeselect: false.	theTestsList color: Color veryVeryLightGray.	column2 _ LayoutMorph newColumn.	column2		addMorph: theTestsList proportionalHeight: 1;		addMorph: self optionalButtonRow fixedHeight: self defaultButtonPaneHeight.	runOneButton _ self buildRunOneButton.	runButton _ self buildRunButton.		column3 _ LayoutMorph newColumn.	column3 addMorphs: { runOneButton . runButton }.		row _ LayoutMorph newRow.	row		addMorph: column1 fixedWidth: 80;		addMorph: column2 proportionalWidth: 1;		addMorph: column3 fixedWidth: 120.	^row! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/25/2011 10:25'!openAsMorph	"TestRunner new openAsMorph"	^self buildMorphicWindow openInWorld.! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/24/2011 12:20'!optionalButtonRow	| row button buttons widths buttonColor |	buttons _ OrderedCollection new.	widths _ OrderedCollection new.	buttonColor _ Theme current buttonColorFrom: self class windowColor.	self optionalButtonTuples do: [ :tuple | 		widths add: tuple first.		button _ PluggableButtonMorph 			model: self			stateGetter: nil			action: tuple third.		button color: buttonColor.		button			label: tuple second.		buttons add: button].	row _ LayoutMorph newRow.	row color: buttonColor.	row addMorphs: buttons widthProportionalTo: widths.	^row! !!TestRunner methodsFor: 'menus' stamp: 'jmv 2/25/2011 12:08'!installProgressWatcher	progress _ ProgressMorph label: 'Test progress'.	progress openInWorld! !!TextModel methodsFor: 'initialize-release' stamp: 'jmv 2/25/2011 11:44'!openInMorphicWindowLabeled: labelString wrap: aBoolean	| window |	window _ SystemWindow new model: self.	window beColumn; setLabel: labelString.	window layoutMorph		addMorph: ((TextModelMorph withModel: self)			wrapFlag: aBoolean;			borderWidth: 0)		proportionalHeight: 1.	^ window openInWorld! !!SyntaxError class methodsFor: 'instance creation' stamp: 'jmv 2/25/2011 12:13'!buildMorphicViewOn: aSyntaxError	"Answer an Morphic view on the given SyntaxError."	| window list text |	list _ (PluggableListMorph 			model: aSyntaxError 			listGetter: #list			indexGetter: #listIndex 			indexSetter: nil 			menuGetter: #listMenu) borderWidth: 0.	text _ (TextModelMorph withModel: aSyntaxError) borderWidth: 0.				window _ SystemWindow new model: aSyntaxError.	window beColumn; setLabel: 'Syntax Error'.	window layoutMorph		addMorph: list proportionalHeight: 0.15;		addAdjusterAndMorph: text proportionalHeight: 0.85.	^ window openInWorldExtent: 380@220! !!BrowserCommentTextMorph methodsFor: 'displaying' stamp: 'jmv 2/24/2011 13:21'!hidePane	self hide.	self layoutSpec fixedHeight: 0.	separator ifNotNil: [ separator hide ]! !!BrowserCommentTextMorph methodsFor: 'displaying' stamp: 'jmv 2/24/2011 13:21'!showPane	self show.	self layoutSpec fixedHeight: 100.	separator ifNotNil: [ separator show ]! !!BrowserCommentTextMorph methodsFor: 'updating' stamp: 'jmv 2/24/2011 13:18'!update: anAspect	super update: anAspect.	anAspect == #editSelection ifFalse: [ ^self ].	(model textProvider editSelection == #editClass)		ifTrue: [ self showPane ]		ifFalse: [ self hidePane ]! !!BrowserCommentTextMorph methodsFor: 'accessing' stamp: 'jmv 2/24/2011 13:20'!separator: aMorph	separator _ aMorph! !!TheWorldMenu methodsFor: 'commands' stamp: 'jmv 2/24/2011 22:29'!openChangeSorter1	ChangeSorter new buildMorphicWindow openInWorld: myWorld! !!TheWorldMenu methodsFor: 'commands' stamp: 'jmv 2/24/2011 22:29'!openChangeSorter2	DualChangeSorter new buildMorphicWindow openInWorld: myWorld! !!TheWorldMenu methodsFor: 'commands' stamp: 'jmv 2/25/2011 10:09'!openFileList	FileList2 openMorphicViewInWorld! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 2/24/2011 22:20'!changesMenu        "Build the changes menu for the world."        | menu |        menu _ self menu: 'changes...'.        self fillIn: menu from: {                { 'file out current change set' . { ChangeSet current . #verboseFileOut}.                                'Write the current change set out to a file whose name reflects the change set name and the current date & time.'}.                { 'create new change set...' . { ChangeSorter . #newChangeSet}. 'Create a new change set and make it the current one.'}.                { 'check change set for slips' . { self  . #lookForSlips}.                                'Check the current change set for halts, references to the Transcript, etc., and if any such thing is found, open up a message-list browser detailing all possible slips.'}.                nil.                { 'simple change sorter' . {self. #openChangeSorter1}.  'Open a 3-paned changed-set viewing tool'}.                { 'dual change sorter' . {self. #openChangeSorter2}.                                'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'}.                nil.                { 'browse recent submissions' . { Utilities . #browseRecentSubmissions}.                                'Open a new recent-submissions browser.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions.'}.                { 'find recent submissions' . { #myWorld . #openRecentSubmissionsBrowser:}.                                'Make an open recent-submissions browser be the front-window, expanding a collapsed one or creating a new one if necessary.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted, latest first.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions at the top of the browser.'}.			nil.                { 'recently logged changes...' . { ChangeList . #browseRecentLog}.'Open a change-list browser on the latter part of the changes log.  You can use this browser to recover logged changes which were not saved in your image, in the event of a crash or other interruption.'}.                { 'recent log file...' . { Smalltalk . #writeRecentToFile}.                                'Create a file holding the logged changes (going as far back as you wish), and open a window on that file.'}.                nil.                { 'save world as morph file' . {self. #saveWorldInFile}. 'Save a file that, when reloaded, reconstitutes the current World.'}.                nil.        }.        ^ menu! !!TranscriptMorph class methodsFor: 'instance creation' stamp: 'jmv 2/25/2011 11:46'!openWindow	"	TranscriptMorph openWindow	"	| win |	win _ SystemWindow new.	win		setLabel: 'Transcript';		model: Transcript;		widgetsColor: Theme current transcript;		beColumn.	win layoutMorph		addMorph: TranscriptMorph new proportionalHeight: 1.	win openInWorld! !!Utilities class methodsFor: 'recent method submissions' stamp: 'jmv 2/24/2011 22:48'!recentSubmissionsWindow	"Answer a SystemWindow holding recent submissions"	| recentMessages messageSet |	recentMessages _ RecentSubmissions copy reversed.	messageSet _ RecentMessageSet messageList: recentMessages.	messageSet autoSelectString: nil.	^ (messageSet  buildMorphicWindow setLabel:  'Recent submissions -- youngest first') applyModelExtent	"Utilities recentSubmissionsWindow openInHand"! !!classDefinition: #TranscriptMorph category: #'Morphic-Widgets'!Morph subclass: #TranscriptMorph	instanceVariableNames: 'form'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!BrowserCommentTextMorph removeSelector: #hideOrShowPane!BrowserCommentTextMorph removeSelector: #lowerPane!BrowserCommentTextMorph removeSelector: #lowerPane:!BrowserCommentTextMorph removeSelector: #noteNewOwner:!BrowserCommentTextMorph removeSelector: #window!!classDefinition: #BrowserCommentTextMorph category: #'Tools-Browser'!TextModelMorph subclass: #BrowserCommentTextMorph	instanceVariableNames: 'separator'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Browser'!!BrowserCommentTextMorph reorganize!('displaying' hidePane showPane)('updating' update:)('accessing' separator:)!TextModelMorph removeSelector: #browseChangeSetsWithSelector!TestRunner class removeSelector: #initializedInstance!TestRunner removeSelector: #buildTestsList!TestRunner removeSelector: #morphicWindow!TestRunner removeSelector: #wantsOptionalButtons!!classDefinition: #TestRunner category: #'SUnit-UI'!Model subclass: #TestRunner	instanceVariableNames: 'result details passFail failures errors tests passFailText detailsText lastPass selectedFailureTest selectedErrorTest selectedSuite filter selectedSuites running runSemaphore completedTests totalTests progress'	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-UI'!SystemWindow removeSelector: #addPaneMorph:!SystemWindow removeSelector: #paneMorphSatisfying:!SystemWindow removeSelector: #paneMorphs!!classDefinition: #SystemWindow category: #'Morphic-Windows'!PluggableMorph subclass: #SystemWindow	instanceVariableNames: 'labelString paneMorphs collapsedFrame fullFrame isCollapsed updatablePanes widgetsColor layoutMorph'	classVariableNames: 'CloseIcon CollapseIcon ExpandIcon MenuIcon RoundedCornerBL RoundedCornerBR RoundedCornerTL RoundedCornerTR TitleGradient TopWindow'	poolDictionaries: ''	category: 'Morphic-Windows'!SmalltalkEditor removeSelector: #browseChangeSetsWithSelector!!PseudoClass reorganize!('class' classComment: classPool comment comment: commentString commentString: definition definition: metaClass renameTo: sharedPools)('accessing' allCallsOn allInstVarNames allSuperclasses compilerClass fullName instVarNames name name: organization realClass theNonMetaClass)('removing' removeAllUnmodified removeUnmodifiedMethods:)('private' allSubclassesWithLevelDo:startingLevel: confirmRemovalOf: evaluate: makeSureClassExists: makeSureSuperClassExists: parserClass)('testing' exists hasChanges hasComment hasDefinition hasMetaclass isMeta nameExists needsInitialize)('fileIn/fileOut' fileIn fileInCategory: fileInDefinition fileInMethod: fileInMethods fileInMethods: fileOut fileOutCategory: fileOutDefinitionOn: fileOutMethod: fileOutMethods:on: fileOutMethodsOn: fileOutOn:)('errors' classNotDefined)('categories' removeCategory: removedCategoryName whichCategoryIncludesSelector:)('methods' addMethodChange: closuresInfoAt: compiledMethodAt:ifAbsent: methodChange: removeMethod: removeSelector: selectors sourceCode sourceCodeAt: sourceCodeAt:put: sourceCodeTemplate stampAt:)('printing' literalScannedAs:notifying: printOn:)('testing method dictionary' bindingOf: includesSelector:)('compatibility' browseClassVarRefs category chooseInstVarThenDo:)!ProcessBrowser removeSelector: #asPrototypeInWindow!ProcessBrowser removeSelector: #buildMorphicWindow!Preferences class removeSelector: #annotationPanes!Preferences class removeSelector: #useFileList2!PackagePaneBrowser removeSelector: #openAsMorphX!ObjectExplorer removeSelector: #openBrowser:!LayoutMorph removeSelector: #addAdjusterThenMorph:layoutSpec:!LayoutMorph removeSelector: #addAdjustingMorph!LayoutMorph removeSelector: #addAdjustingThenMorph:layoutSpec:!LayoutMorph removeSelector: #addAdjustingThenMorph:proportionalWidth:!LayoutMorph removeSelector: #addInRow:widthProportionalTo:!!LayoutMorph reorganize!('initialization' defaultBorderWidth defaultColor initialize initializeAsColumn initializeAsRow)('accessing' direction padding: separation:)('layout' layoutAndComputeFullBounds layoutSubmorphsHorizontallyIn: layoutSubmorphsVerticallyIn:)('submorphs-add/remove' addAdjusterMorph addMorph:layoutSpec:)('private' minPaneHeightForReframe minPaneWidthForReframe proportionalHeightNormalizationFactor proportionalWidthNormalizationFactor)('adjust' adjustBy:at: adjustHorizontallyBy:at: adjustVerticallyBy:at:)('convenience methods' addAdjusterAndMorph:fixedHeight: addAdjusterAndMorph:layoutSpec: addAdjusterAndMorph:proportionalHeight: addAdjusterAndMorph:proportionalWidth: addMorph:fixedHeight: addMorph:fixedWidth: addMorph:proportionalHeight: addMorph:proportionalWidth: addMorphUseAll: addMorphs: addMorphs:widthProportionalTo:)('testing' is:)!!classDefinition: #FillInTheBlankMorph category: #'Morphic-Windows'!Morph subclass: #FillInTheBlankMorph	instanceVariableNames: 'response done textPane responseUponCancel'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!Morph removeSelector: #addMorph:layoutFractions:!MessageNames removeSelector: #inMorphicWindow!MessageSet removeSelector: #inMorphicWindowLabeled:!LayoutSpec removeSelector: #maybeProportionalHeight:fixedOrMinimum:!LayoutSpec removeSelector: #maybeProportionalWidth:fixedOrMinimum:!!classDefinition: #LayoutSpec category: #'Morphic-Layouts'!Object subclass: #LayoutSpec	instanceVariableNames: 'morph fixedWidth fixedHeight minorDirectionPadding proportionalWidth proportionalHeight'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Layouts'!Inspector class removeSelector: #horizontalDividerProportion!Inspector class removeSelector: #verticalDividerProportion!Inspector removeSelector: #browseClass!HierarchyBrowser removeSelector: #systemCatSingletonMenu!FileList2 class removeSelector: #addFullPanesTo:from:!FileList2 class removeSelector: #initialize!FileList2 class removeSelector: #modalFileSelector!FileList2 class removeSelector: #modalFolderSelector!FileList2 class removeSelector: #modalFolderSelector:!FileList2 class removeSelector: #morphicViewFileSelector!FileList2 class removeSelector: #morphicViewFileSelectorForSuffixes:!FileList2 class removeSelector: #morphicViewFolderSelector!FileList2 class removeSelector: #morphicViewFolderSelector:!FileList2 class removeSelector: #morphicViewNoFile!FileList2 class removeSelector: #prototypicalToolWindow!FileList2 class removeSelector: #textRow:!FileList2 class removeSelector: #useFileList2preferenceChanged!!FileList2 class reorganize!('instance creation' morphicView morphicViewOnDirectory: openMorphicViewInWorld)('utility')!FileList2 removeSelector: #cancelHit!FileList2 removeSelector: #fileSelectionBlock:!FileList2 removeSelector: #getSelectedDirectory!FileList2 removeSelector: #getSelectedFile!FileList2 removeSelector: #modalView:!FileList2 removeSelector: #okHit!FileList2 removeSelector: #okayAndCancelServices!FileList2 removeSelector: #optionalButtonSpecs!FileList2 removeSelector: #optionalButtonSpecs:!FileList2 removeSelector: #serviceCancel!FileList2 removeSelector: #serviceOkay!FileList2 removeSelector: #servicesForFolderSelector!!classDefinition: #FileList2 category: #'Tools-FileList'!FileList subclass: #FileList2	instanceVariableNames: 'showDirsInFileList currentDirectorySelected fileSelectionBlock dirSelectionBlock'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-FileList'!FileList class removeSelector: #addButtonsAndFileListPanesTo:at:plus:forFileList:!FileList class removeSelector: #addVolumesAndPatternPanesFor:!FileList class removeSelector: #addVolumesAndPatternPanesTo:at:plus:forFileList:!FileList class removeSelector: #buttonsAndFileListPanesFor:!FileList class removeSelector: #cleanObsoleteReaders!FileList class removeSelector: #isReaderNamedRegistered:!FileList class removeSelector: #open!FileList class removeSelector: #openAsMorph!FileList class removeSelector: #openMorphOn:!FileList class removeSelector: #prototypicalToolWindow!FileList class removeSelector: #volumesAndPatternPanesFor:!FileList removeSelector: #isFileSelected!FileList removeSelector: #serviceBrowseCodeFiles!FileList removeSelector: #wantsOptionalButtons!FileDirectory class removeSelector: #searchAllFilesForAString!FileContentsBrowser class removeSelector: #browseFiles:!FileContentsBrowser class removeSelector: #selectAndBrowseFile:!FileContentsBrowser removeSelector: #addLowerPanesTo:at:!FileContentsBrowser removeSelector: #createViews!FileContentsBrowser removeSelector: #openAsMorph!FileContentsBrowser removeSelector: #packages!FileContentsBrowser removeSelector: #packages:!FileContentsBrowser removeSelector: #removePackage!!classDefinition: #FileContentsBrowser category: #'Tools-File Contents Browser'!Browser subclass: #FileContentsBrowser	instanceVariableNames: 'thePackage'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-File Contents Browser'!DualChangeSorter removeSelector: #morphicWindow!!DualChangeSorter reorganize!('initialization' okToChange open openAsMorph)('other' isLeftSide: labelString modelWakeUp other:)('self-updating' stepIn: wantsSteps)('creation' buildMorphicWindow)!Debugger removeSelector: #addOptionalButtonsTo:at:plus:!Debugger removeSelector: #buildMorphicNotifierLabelled:message:!Debugger removeSelector: #wantsOptionalButtons!ChangeSorter class removeSelector: #browseChangeSetsWithSelector:!ChangeSorter removeSelector: #browseChangeSet!ChangeSorter removeSelector: #morphicWindow!ChangeSorter removeSelector: #openAsMorphIn:rect:!ChangeSorter removeSelector: #openChangeSetBrowser!ChangeSorter removeSelector: #wantsOptionalButtons!ChangeList class removeSelector: #openAsMorph:name:multiSelect:!ChangeList removeSelector: #openAsMorphName:multiSelect:!!ChangeList reorganize!('construction')('initialization-release' addItem:text: buildMorphicWindowMultiSelect: buttonSpecs initialize wantsPrettyDiffOption)('scanning' scanCategory scanCategory:class:meta:stamp: scanFile:from:to:)('menu actions' browseAllVersionsOfSelections browseCurrentVersionsOfSelections browseVersions buildMorphicCodePane changeListKey:from: changeListMenu compareToCurrentVersion deselectAll destroyCurrentCodeOfSelections fileInSelections fileOutSelections invertSelections optionalButtonRow removeDoIts removeEmptyClassComments removeExistingMethodVersions removeNonSelections removeOlderMethodVersions removeSelections selectAll selectAllConflicts selectConflicts selectConflicts: selectConflictsWith selectEquivalentMethods selectMethodsForAbsentClasses selectMethodsForThisClass selectNewMethods selectRemovalsOfSent selectSuchThat selectSuchThat: selectUnchangedMethods)('viewing access' acceptedStringOrText annotation contentsDiffedFromCurrent contentsSymbolQuints diffedVersionContents list listIndex listSelectionAt: listSelectionAt:put: selectedClass selectedClassOrMetaClass selectedMessageName toggleListIndex: undiffedContents)('accessing' changeList currentChange file setLostMethodPointer: showsVersions)('*Shout-Styling' shoutAboutToStyle:)!Browser class removeSelector: #newOnClass:!Browser class removeSelector: #newOnClass:label:!Browser class removeSelector: #newOnClass:selector:!Browser class removeSelector: #openMessageBrowserForClass:selector:editString:!Browser removeSelector: #addClassAndSwitchesTo:at:plus:!Browser removeSelector: #addLowerPanesTo:at:!Browser removeSelector: #buildMessageCategoryBrowser!Browser removeSelector: #buildMorphicCommentPane2!Browser removeSelector: #buildSysCatMorphicWindow!Browser removeSelector: #buildSystemCategoryBrowser!Browser removeSelector: #buildSystemCategoryBrowserEditString:!Browser removeSelector: #morphicClassColumn!Browser removeSelector: #openAsMorphClass!Browser removeSelector: #openAsMorphMessage!Browser removeSelector: #openAsMorphMsgCat!Browser removeSelector: #openAsMorphSysCat!Browser removeSelector: #openAsMorphX!Browser removeSelector: #selectMessageCategoryNamed:!CodeProvider removeSelector: #addLowerPanesTo:at:!CodeProvider removeSelector: #addOptionalAnnotationsTo:at:plus:!CodeProvider removeSelector: #addOptionalButtonsTo:at:plus:!CodeProvider removeSelector: #browseClass!CodeProvider removeSelector: #wantsAnnotationPane!CodeProvider removeSelector: #wantsOptionalButtons!ChangeSet class removeSelector: #browseChangedMessages!ChangeSet class removeSelector: #defaultChangeSetDirectory:!ChangeSet class removeSelector: #promptForDefaultChangeSetDirectoryIfNecessary!!Behavior reorganize!('initialize-release' forgetDoIts obsolete superclass:methodDictionary:format:)('accessing' classDepth compilerClass decompilerClass evaluatorClass format methodDict name parserClass sourceCodeTemplate subclassDefinerClass typeOfClass)('testing' canZapMethodDictionary instSize instSpec isBehavior isBits isBytes isFixed isMeta isObsolete isPointers isVariable isWeak isWords shouldNotBeRedefined sourceMatchesBytecodeAt:)('copying' copyOfMethodDictionary deepCopy postCopy)('printing' literalScannedAs:notifying: longPrintOn: printHierarchy printOn: printWithClosureAnalysisOn: storeLiteral:on:)('compiling' allowUnderscoreAssignments allowUnderscoreSelectors binding compile: compile:notifying: compileAll compileAllFrom: decompile: defaultMethodTrailer instVarNamesAndOffsetsDo: recompile: recompile:from: recompileChanges recompileNonResidentMethod:atSelector:from: variablesAndOffsetsDo:)('instance creation' basicNew basicNew: initializedInstance new new:)('accessing class hierarchy' allSubclasses allSubclassesWithLevelDo:startingLevel: allSuperclasses subclasses superclass superclass: withAllSubclasses withAllSuperclasses)('accessing method dictionary' >> addSelector:withMethod: addSelector:withMethod:notifying: addSelectorSilently:withMethod: allSelectors changeRecordsAt: compiledMethodAt: compiledMethodAt:ifAbsent: compress firstCommentAt: firstPrecodeCommentFor: lookupSelector: methodDict: methodDictionary methodDictionary: methodHeaderFor: methodsDo: precodeCommentOrInheritedCommentFor: removeSelector: removeSelectorSilently: selectorAtMethod:setClass: selectors selectorsAndMethodsDo: selectorsDo: sourceCodeAt: sourceCodeAt:ifAbsent: sourceMethodAt: sourceMethodAt:ifAbsent: standardMethodHeaderFor: supermostPrecodeCommentFor: zapAllMethods)('accessing instances and variables' allClassVarNames allInstVarNames allInstances allSharedPools allSubInstances allowsSubInstVars classVarNames inspectAllInstances inspectSubInstances instVarNames instanceCount sharedPools someInstance)('testing class hierarchy' includesBehavior: inheritsFrom: kindOfSubclass)('testing method dictionary' allUnsentMessages bindingOf: canUnderstand: classBindingOf: hasMethods includesSelector: thoroughWhichSelectorsReferTo:special:byte: whichClassIncludesSelector: whichSelectorsAccess: whichSelectorsReferTo: whichSelectorsReferTo:special:byte: whichSelectorsStoreInto:)('enumerating' allInstancesDo: allSubInstancesDo: allSubclassesDo: allSubclassesDoGently: allSuperclassesDo: selectSuperclasses: withAllSubclassesDo: withAllSuperAndSubclassesDoGently: withAllSuperclassesDo:)('user interface' allLocalCallsOn: allUnreferencedInstanceVariables crossReference unreferencedInstanceVariables withAllSubAndSuperclassesDo:)('private' basicCompile:notifying:trailer:ifFail: basicRemoveSelector: becomeCompact becomeCompactSimplyAt: becomeUncompact flushCache indexIfCompact setFormat: spaceUsed)('system startup' shutDown shutDown: startUp startUp:)('obsolete subclasses' addObsoleteSubclass: obsoleteSubclasses removeAllObsoleteSubclasses removeObsoleteSubclass:)('*system-support' allCallsOn)('as yet unclassified' environment)('methods' closuresInfoAt: stampAt:)!ArrayLiteralTest removeSelector: #array!Object removeSelector: #browse!Smalltalk removeClassNamed: #AlignmentMorph!Smalltalk removeClassNamed: #ChangeSetBrowser!Smalltalk removeClassNamed: #ChangedMessageSet!