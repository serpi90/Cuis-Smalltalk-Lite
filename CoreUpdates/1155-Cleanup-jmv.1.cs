'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 2 December 2011 at 9:48:33 am'!!CharacterSet class methodsFor: 'instance creation' stamp: 'jmv 12/2/2011 09:42'!                allCharacters	"return a set containing all characters"	| set |	set _ self new.	0 to: 255 do: [ :ascii | set add: (Character value: ascii) ].	^set! !!CharacterSet class methodsFor: 'instance creation' stamp: 'jmv 12/2/2011 09:42'!                  separators	"return a set containing just the whitespace characters"	| set |	set _ self new.	set addAll: Character separators.	^set! !!MIDISynth methodsFor: 'as yet unclassified' stamp: 'jmv 12/2/2011 09:43'!       initialize	midiParser _ MIDIInputParser on: nil.	channels _ (1 to: 16) collect: [:ch | MIDISynthChannel new]! !!Morph methodsFor: 'accessing - extension' stamp: 'jmv 12/2/2011 09:43'!  initializeExtension	"private - initializes the receiver's extension"	self privateExtension: MorphExtension new! !!Random class methodsFor: 'instance creation' stamp: 'jmv 12/2/2011 09:43'!                              seed: anInteger	^ self new seed: anInteger! !!ScorePlayer methodsFor: 'initialization' stamp: 'jmv 12/2/2011 09:44'!       initialize	super initialize.	score _ MIDIScore new.	instruments _ Array new.	overallVolume _ 0.5.	leftVols _ Array new.	rightVols _ Array new.	muted _ Array new.	rate _ 1.0.	repeat _ false.	durationInTicks _ 100! !!String class methodsFor: 'initialization' stamp: 'jmv 12/2/2011 09:42'!                   initialize	"	String initialize	"	| order newOrder lowercase |	"Case insensitive compare sorts null, space, digits, letters, all the rest..."	newOrder _ Array new: 256.	order _ -1.	newOrder at: 0+1 put:  (order _ order+1).	32 to: 63 do: [ :c |		newOrder at: c + 1 put: (order _ order+1)].	Character uppercaseLowercaseAndUnaccentedLetters do: [ :upperAndLowercase |		order _ order+1.		newOrder at: upperAndLowercase first asciiValue + 1 put: order.		upperAndLowercase size > 1 ifTrue: [			newOrder at: upperAndLowercase second asciiValue + 1 put: order ]].	1 to: newOrder size do: [ :i |		(newOrder at: i) ifNil: [			newOrder at: i put: (order _ order+1)]].	CaseInsensitiveOrder _ newOrder asByteArray.		"Case sensitive compare sorts null, space, digits, letters, all the rest..."	newOrder _ Array new: 256.	order _ -1.	newOrder at: 0+1 put:  (order _ order+1).	32 to: 63 do: [ :c |		newOrder at: c + 1 put: (order _ order+1)].	Character uppercaseLowercaseAndUnaccentedLetters do: [ :upperAndLowercase |		upperAndLowercase size > 1 ifTrue: [			newOrder at: upperAndLowercase first asciiValue + 1 put: (order _ order+1) ]].	Character uppercaseLowercaseAndUnaccentedLetters do: [ :upperAndLowercase |		lowercase _ upperAndLowercase size = 1			ifTrue: [ upperAndLowercase first ]			ifFalse: [ upperAndLowercase second ].		newOrder at: lowercase asciiValue + 1 put: (order _ order+1) ].	1 to: newOrder size do: [ :i |		(newOrder at: i) ifNil: [			newOrder at: i put: (order _ order+1)]].	order = 255 ifFalse: [self error: 'order problem'].	CaseSensitiveOrder _ newOrder asByteArray.	"a table for translating to lower case"	LowercasingTable _ String withAll: (Character allCharacters collect: [:c | c asLowercase]).	"a table for translating to upper case"	UppercasingTable _ String withAll: (Character allCharacters collect: [:c | c asUppercase]).	"a table for testing tokenish (for fast numArgs)"	Tokenish _ String withAll: (Character allCharacters collect:									[:c | c tokenish ifTrue: [c] ifFalse: [$~]]).	"CR and LF--characters that terminate a line"	CSLineEnders _ CharacterSet new.	CSLineEnders add: Character cr.	CSLineEnders add: Character lf. 	"separators and non-separators"	CSSeparators _ CharacterSet separators.	CSNonSeparators _ CSSeparators complement! !TestResult class removeSelector: #new!TestResource class removeSelector: #new!String initialize!CharacterSet class removeSelector: #empty!