'From Cuis 3.1 of 4 March 2011 [latest update: #850] on 16 March 2011 at 3:28:14 pm'!!classDefinition: #OneLineEditorMorph category: #'Morphic-Basic'!Morph subclass: #OneLineEditorMorph	instanceVariableNames: 'font emphasis contents editor showCaret caretRect pauseBlinking '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!!Editor methodsFor: 'private' stamp: 'jmv 3/16/2011 10:44'!sameColumn: start newLine: lineBlock forward: isForward	"See comment in other implementors."	self subclassResponsibility! !!OneLineEditorMorph methodsFor: 'accessing' stamp: 'jmv 3/16/2011 10:34'!contents	^contents! !!OneLineEditorMorph methodsFor: 'accessing' stamp: 'jmv 3/16/2011 10:41'!contents: newContents 	contents _ (newContents is: #Text)		ifTrue: [			emphasis := newContents emphasisAt: 1.			 newContents string]		ifFalse: [			contents = newContents ifTrue: [^self].	"no substantive change"			newContents].	editor _ nil.	self fitContents.	self redrawNeeded! !!OneLineEditorMorph methodsFor: 'drawing' stamp: 'jmv 3/16/2011 11:06'!displayThinInsertionMarkAtX: x top: top bottom: bottom emphasis: emphasis on: aCanvas	| caretColor x1 isBold isItalic x0 h w halfW r |	isBold _ emphasis allMask: 1.	isItalic _ emphasis allMask: 2.	caretColor _ Theme current insertionPoint.	h _ bottom - top.	w _ isBold		ifTrue: [ h // 25 + 2 ]		ifFalse: [ h // 30 + 1 ].	halfW _ w // 2.	isItalic		ifTrue: [				x0 _ x - (h * 1 // 22) - 3.			x1 _ x + (h * 4 // 22 ) - 3.			isBold ifTrue: [				x0 _ x0 - 3.				x1 _ x1 - 3 ]]		ifFalse: [			x0 _ x.			x1 _ x].	x0 < halfW ifTrue: [		x1 _ x1 - x0 + halfW.		x0 _ halfW ].	r _ bounds right-halfW-1.	r < x1 ifTrue: [		x0 _ x0 + r - x1.		x1 _ r.		].	caretRect _ x0-halfW@ top corner: x1+halfW+1 @ bottom.	aCanvas		line: x0@(bottom-halfW) to: x1@(top+halfW)		width: w color: caretColor! !!OneLineEditorMorph methodsFor: 'drawing' stamp: 'jmv 3/16/2011 11:06'!drawCaretOn: aCanvas	"Essentially copied from #displayInsertionMarkAtX:top:bottom:emphasis:on:"	|  top bottom x |	showCaret ifTrue: [		top _ bounds top.		bottom _ top + self baseFont height.		x _ (self fontToUse widthOfString: contents from: 1 to: editor startIndex-1) + bounds left.		self displayThinInsertionMarkAtX: x top: top bottom: bottom emphasis: emphasis on: aCanvas ]! !!OneLineEditorMorph methodsFor: 'event handling' stamp: 'jmv 3/16/2011 11:01'!handlesMouseOver: evt	"implements #mouseEnter: and/or #mouseLeave:"	^true! !!OneLineEditorMorph methodsFor: 'event handling' stamp: 'jmv 3/16/2011 11:09'!keyStroke: evt	"Handle a keystroke event."	(self focusKeyboardFor: evt)		ifTrue: [ ^ self ].	"CR - check for special action	Note: Code below assumes that this was some	input field reacting on CR. Break the keyboard	focus so that the receiver can be safely deleted.	jmv - Currently not implemented"	"	evt keyValue = 13 ifTrue: [		action _ self crAction.		action ifNotNil: [			evt hand newKeyboardFocus: nil.			^action value ] ].	"	self pauseBlinking.	self handleInteraction: [ editor processKeyStroke: evt ].	self updateFromContents.	super keyStroke: evt  "sends to keyStroke event handler, if any"! !!OneLineEditorMorph methodsFor: 'event handling' stamp: 'jmv 3/16/2011 11:08'!keyboardFocusChange: aBoolean 	aBoolean		ifTrue: [			"A hand is wanting to send us characters..."			editor ifNil: [ self editor ].	"Forces install"			self startBlinking ]		ifFalse: [ self stopBlinking ].	self redrawNeeded! !!OneLineEditorMorph methodsFor: 'event handling' stamp: 'jmv 3/16/2011 11:01'!mouseEnter: event	super mouseEnter: event.	Preferences focusFollowsMouse		ifTrue: [ event hand newKeyboardFocus: self ]! !!OneLineEditorMorph methodsFor: 'event handling' stamp: 'jmv 3/16/2011 11:11'!mouseUp: evt	super mouseUp: evt.	self pauseBlinking! !!OneLineEditorMorph methodsFor: 'typing/selecting keys' stamp: 'jmv 3/16/2011 10:45'!selectAll	self editor selectAll.	self redrawNeeded! !!OneLineEditorMorph methodsFor: 'blink cursor' stamp: 'jmv 3/16/2011 11:05'!onBlinkCursor	"Blink the cursor"	showCaret _ showCaret not | pauseBlinking.	pauseBlinking _ false.	caretRect ifNotNil: [ :r | self invalidRect: r]! !!OneLineEditorMorph methodsFor: 'blink cursor' stamp: 'jmv 3/16/2011 11:07'!pauseBlinking	"Show a solid cursor (non blinking) for a short while"	pauseBlinking _ true.	"Show cursor right now if needed"	showCaret ifFalse: [		showCaret _ true.		caretRect ifNotNil: [ :r | self invalidRect: r ]]! !!OneLineEditorMorph methodsFor: 'blink cursor' stamp: 'jmv 3/16/2011 11:07'!startBlinking	"And show the cursor"	pauseBlinking _ true.	"Start blinking in a short while"	showCaret _ true.	self		startStepping: #onBlinkCursor		at: Time millisecondClockValue		arguments: nil		stepTime: 500.! !!OneLineEditorMorph methodsFor: 'blink cursor' stamp: 'jmv 3/16/2011 11:08'!stopBlinking	"And do not show cursor anymore."	self stopSteppingSelector: #onBlinkCursor.	"Hide cursor right now if needed"	showCaret ifTrue: [		showCaret _ false.		caretRect ifNotNil: [ :r | self invalidRect: r ]]! !!OneLineEditorMorph class methodsFor: 'instance creation' stamp: 'jmv 3/16/2011 10:25'!contents: aString	" 'StringMorph contents: str' is faster than 'StringMorph new contents: str' 	(OneLineEditorMorph contents: 'Some string') openInWorld	"	^ self contents: aString font: nil! !!SimpleEditor methodsFor: 'private' stamp: 'jmv 3/16/2011 10:44'!sameColumn: start newLine: lineBlock forward: isForward	"See comment in other implementors."	^start! !!classDefinition: #OneLineEditorMorph category: #'Morphic-Basic'!Morph subclass: #OneLineEditorMorph	instanceVariableNames: 'font emphasis contents editor showCaret pauseBlinking caretRect'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!