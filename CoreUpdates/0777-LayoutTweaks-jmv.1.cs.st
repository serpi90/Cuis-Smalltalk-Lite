'From Cuis 3.0 of 18 January 2011 [latest update: #768] on 21 January 2011 at 5:16:09 pm'!!classDefinition: #LayoutSpec category: #'Morphic-Layouts'!Object subclass: #LayoutSpec	instanceVariableNames: 'fixedWidth fixedHeight minorDirectionPadding proportionalWidth proportionalHeight '	classVariableNames: 'Default '	poolDictionaries: ''	category: 'Morphic-Layouts'!!LayoutSpec class methodsFor: 'instance creation' stamp: 'jmv 1/21/2011 17:14'!keepMorphExtent	"This will be used if no other is specified... Avoid creating many instances."	Default ifNil: [		Default _self new			useMorphWidth;			useMorphHeight ].	^Default! !!Morph methodsFor: 'layout-properties' stamp: 'jmv 1/21/2011 17:08'!layoutSpec	"Layout specific. Return the layout spec describing where the  	receiver should appear in a proportional layout"	self hasExtension		ifTrue: [ self extension layoutSpec ifNotNil: [ :ls | ^ ls ]].	"If no other is specified..."	^LayoutSpec keepMorphExtent! !!LayoutMorph methodsFor: 'layout' stamp: 'jmv 1/21/2011 17:11'!layoutSubmorphsHorizontallyIn: boundsForLayout	"Compute a new layout based on the given layout bounds."	| usableWidth sumOfFixed sumOfProportional normalizationFactor availableForPropWidth widths l usableHeight boundsTop boundsRight r t b |	usableWidth _ boundsForLayout width - ((submorphs size + 1) * separation).	sumOfFixed _ submorphs sum: [ :m | m layoutSpec fixedWidthFor: m ].	availableForPropWidth _ usableWidth - sumOfFixed.	padding ifNil: [		availableForPropWidth = 0 ifFalse: [			self width: self width - availableForPropWidth.			^ self doLayoutIfNeeded ]].	sumOfProportional _ submorphs sum: [ :m | m layoutSpec proportionalWidth ].	normalizationFactor _ 1.0 / (sumOfProportional max: 1.0).	availableForPropWidth _ availableForPropWidth * normalizationFactor.	widths _ submorphs collect: [ :m | m layoutSpec widthOf: m for: availableForPropWidth ].	l _ ((usableWidth - widths sum) * (padding ifNil: [0]) + separation max: 0) +  boundsForLayout left.	usableHeight _ boundsForLayout height - (2*separation) max: 0.	boundsTop _ boundsForLayout top.		boundsRight _ boundsForLayout right.	submorphs size to: 1 by: -1 do: [ :index | | m w h ls |			m _ submorphs at: index.			w _ widths at: index.			"major direction"			r _ l + w min: boundsRight.			"minor direction"			ls _ m layoutSpec.			h _ (ls heightOf: m for: usableHeight) min: usableHeight.			t _ (usableHeight - h) * ls minorDirectionPadding + separation + boundsTop.			b _ t + h.			"Set bounds and adjust major direction for next step"			m bounds: (l rounded @ t rounded corner: r rounded @ b rounded).			w > 0 ifTrue: [				l _ r + separation min: boundsRight ]]! !!LayoutMorph methodsFor: 'layout' stamp: 'jmv 1/21/2011 17:12'!layoutSubmorphsVerticallyIn: boundsForLayout	"Compute a new layout based on the given layout bounds."	| usableHeight sumOfFixed sumOfProportional normalizationFactor availableForPropHeight heights t usableWidth boundsLeft boundsBottom b l r |	usableHeight _ boundsForLayout height - ((submorphs size + 1) * separation).	sumOfFixed _ submorphs sum: [ :m | m layoutSpec fixedHeightFor: m ].	availableForPropHeight _ usableHeight - sumOfFixed.	padding ifNil: [		availableForPropHeight = 0 ifFalse: [			self height: self height - availableForPropHeight.			^ self doLayoutIfNeeded ]].	sumOfProportional _ submorphs sum: [ :m | m layoutSpec proportionalHeight ].	normalizationFactor _ 1.0 / (sumOfProportional max: 1.0).	availableForPropHeight _ availableForPropHeight * normalizationFactor.	heights _ submorphs collect: [ :m | m layoutSpec heightOf: m for: availableForPropHeight ].	t _ ((usableHeight - heights sum) * (padding ifNil: [0]) + separation max: 0) +  boundsForLayout top.	usableWidth _ boundsForLayout width - (2*separation) max: 0.	boundsLeft _ boundsForLayout left.		boundsBottom _ boundsForLayout bottom.	submorphs size to: 1 by: -1 do: [ :index | | m h w ls |			m _ submorphs at: index.			h _ heights at: index.			"major direction"			b _ t + h min: boundsBottom.			"minor direction"			ls _ m layoutSpec.			w _ (ls widthOf: m for: usableWidth) min: usableWidth.			l _ (usableWidth - w) * ls minorDirectionPadding + separation + boundsLeft.			r _ l + w.			"Set bounds and adjust major direction for next step"			m bounds: (l rounded @ t rounded corner: r rounded @ b rounded).			h > 0 ifTrue: [				t _ b + separation min: boundsBottom ]]! !!LayoutMorph methodsFor: 'submorphs-add/remove' stamp: 'jmv 1/21/2011 17:00'!addMorph: aMorph layoutSpec: aLayoutSpec	"Add a submorph, at the bottom or right, with aLayoutSpec"	aMorph layoutSpec: aLayoutSpec.	self addMorph: aMorph! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 1/21/2011 17:16'!example6	"	Useful example contributed by Ken Dickey	All these should look the same, right? (mmmh this should be a test...)	self example6	"| pane rect1 rect2 |pane _ LayoutMorph newRow. "1"pane color: Color lightGreen; left: 120; top: 50; 	  width: 180; height: 100.pane addMorph: '1' asMorph.rect1 := RectangleMorph new color: (Color lightOrange); 	width: 20; height: 30.pane addMorph: rect1.rect2 := RectangleMorph new color: (Color cyan); 	width: 20; height: 30.pane addMorph: rect2.pane openInWorld.pane _ LayoutMorph newRow. "2"pane color: Color lightGreen; left: 320; top: 50; 	  width: 180; height: 100.pane addMorph: '2' asMorph.rect1 := RectangleMorph new color: (Color lightOrange);	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 minorDirectionPadding: #center).pane addMorph: rect1.rect2 := RectangleMorph new color: (Color cyan).pane addMorph: rect2	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 minorDirectionPadding: #center).pane openInWorld.pane _ LayoutMorph newRow. "3"pane color: Color lightGreen; left: 520; top: 50; 	  width: 180; height: 100.pane addMorph: '3' asMorph.rect1 := RectangleMorph new color: (Color lightOrange).pane addMorph: rect1          layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 minorDirectionPadding: #center).rect2 := RectangleMorph new color: (Color cyan);	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 minorDirectionPadding: #center).pane addMorph: rect2.pane openInWorld.! !!LayoutSpec class reorganize!('instance creation' fixedHeight: fixedWidth: fixedWidth:fixedHeight: fixedWidth:fixedHeight:minorDirectionPadding: fixedWidth:proportionalHeight: fixedWidth:proportionalHeight:minorDirectionPadding: keepMorphExtent morphHeightProportionalWidth: morphWidthProportionalHeight: proportionalHeight: proportionalWidth: proportionalWidth:fixedHeight: proportionalWidth:fixedHeight:minorDirectionPadding: proportionalWidth:proportionalHeight: proportionalWidth:proportionalHeight:minorDirectionPadding: useAll)!!classDefinition: #LayoutSpec category: #'Morphic-Layouts'!Object subclass: #LayoutSpec	instanceVariableNames: 'fixedWidth fixedHeight minorDirectionPadding proportionalWidth proportionalHeight'	classVariableNames: 'Default'	poolDictionaries: ''	category: 'Morphic-Layouts'!