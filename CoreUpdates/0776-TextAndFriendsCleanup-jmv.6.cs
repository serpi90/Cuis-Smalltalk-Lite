'From Cuis 3.0 of 18 January 2011 [latest update: #768] on 21 January 2011 at 3:02:12 pm'!!classDefinition: #TextEmphasis category: #'System-TextAttributes'!TextAttribute subclass: #TextEmphasis	instanceVariableNames: 'emphasisCode setMode '	classVariableNames: ''	poolDictionaries: ''	category: 'System-TextAttributes'!!TextEmphasis commentStamp: '<historical>' prior: 0!A TextEmphasis, encodes a characteristic applicable to all fonts.  The encoding is as follows:	1	bold	2	itallic	4	underlined			8	struck out!!StrikeFont methodsFor: 'emphasis' stamp: 'jmv 1/21/2011 10:47'!emphasized: code	"Answer a copy of the receiver with emphasis set to include code."	| derivative addedEmphasis derivedFrom safeCode |	self isBaseFont ifFalse: [ ^self baseFont emphasized: (code bitOr: emphasis) ].	code = 0 ifTrue: [ ^ self ].		derivativeFonts ifNil: [derivativeFonts := Array new: 16].	derivative _ derivativeFonts at: (safeCode _ code min: derivativeFonts size).	derivative ifNotNil: [^ derivative].  "Already have this style"	"Dont have it -- derive from another with one with less emphasis"	addedEmphasis _ 1 bitShift: safeCode highBit - 1.	derivedFrom _ self emphasized: safeCode - addedEmphasis.  "Order is Bold, Italic, Underlined"	derivative _ derivedFrom copy.	addedEmphasis = 1 ifTrue: [   "Compute synthetic bold version of the font"		derivative			ensureCleanBold;			name: derivedFrom name , 'B';			makeBoldGlyphs ].	addedEmphasis = 2 ifTrue: [   "Compute synthetic italic version of the font"		derivative			name: derivedFrom name , 'I';			makeItalicGlyphs ].	addedEmphasis = 4 ifTrue: [   "Compute underlined version of the font"		derivative			name: derivedFrom name , 'U';			makeUnderlinedGlyphs ].	addedEmphasis = 8 ifTrue: [   "Compute struck-out version of the font"		derivative			name: derivedFrom name , 'X';			makeStruckOutGlyphs ].	derivative baseFont: self.	derivative emphasis: safeCode.	derivativeFonts at: safeCode put: derivative.	^ derivative! !!StrikeFont methodsFor: 'emphasis' stamp: 'jmv 1/21/2011 12:51'!reset	"Reset the cache of derivative emphasized fonts"		derivativeFonts ifNotNil: [		derivativeFonts withIndexDo: [ :f :i |			(f notNil and: [ f isSynthetic ]) 				ifTrue: [ derivativeFonts at: i put: nil ]].		derivativeFonts size > 16 ifTrue: [			derivativeFonts _ derivativeFonts copyFrom: 1 to: 16 ]].	"	derivativeFonts _ Array new: 32.	#('B' 'I' 'BI') doWithIndex:		[:tag :index | 		(style _ TextStyle named: self familyName) ifNotNil:			[(font _ style fontArray				detect: [:each | each name = (self name , tag)]				ifNone: [nil]) ifNotNil: [derivativeFonts at: index put: font]]]	"! !!StrikeFont methodsFor: 'derivatives - emphasis' stamp: 'jmv 1/21/2011 10:50'!struckOut	^self emphasized: 8! !!String methodsFor: 'converting' stamp: 'jmv 1/21/2011 14:47'!withLineEndings: lineEndingString	"assume the string is textual, and that CR, LF, and CRLF are all 	valid line endings.  Replace each occurence with lineEndingString"	| cr lf crlf inPos outPos outString lineEndPos newOutPos lineEndingSize |	cr _ Character cr.	lf _ Character linefeed.	crlf _ CharacterSet new.	crlf add: cr; add: lf.	inPos _ 1.	outPos _ 1.	lineEndingSize _ lineEndingString size.	"This could be extremely inefficient if lineEndingString size > 1"	outString _ String new: self size * lineEndingSize.	[		lineEndPos _ self indexOfAnyOf: crlf startingAt: inPos ifAbsent: [0].		lineEndPos ~= 0 ] whileTrue: [			newOutPos _ outPos + (lineEndPos - inPos).			outString replaceFrom: outPos to: newOutPos - 1 with: self startingAt: inPos.			1 to: lineEndingSize do: [ :i |				outString at: newOutPos put: (lineEndingString at: i).				newOutPos _ newOutPos + 1 ].			outPos _ newOutPos.			((self at: lineEndPos) = cr and: [ lineEndPos < self size and: [ (self at: lineEndPos+1) = lf ] ]) ifTrue: [				"CRLF ending"				inPos _ lineEndPos + 2 ]			ifFalse: [ 				"CR or LF ending"				inPos _ lineEndPos + 1 ]. ].	"no more line endings.  copy the rest"	newOutPos _ outPos + (self size - inPos).	outString replaceFrom: outPos to: newOutPos with: self startingAt: inPos.	^outString copyFrom: 1 to: newOutPos! !!StringMorph methodsFor: 'menu' stamp: 'jmv 1/21/2011 10:51'!changeEmphasis	| reply aList |	aList _ #(normal bold italic underlined struckOut).	reply _ (SelectionMenu labelList: aList selections: aList) startUp.	reply ifNotNil:[		self emphasis: (TextEmphasis perform: reply) emphasisCode.	].! !!Text class methodsFor: 'private' stamp: 'jmv 1/21/2011 12:57'!addAttribute: att toArray: others	"Add a new text attribute to an existing set"	"NOTE: The use of reset and isSet in this code is a specific	hack for merging TextKerns.	(jmv: it also means that TextEmphasis normal is not added. Same for TextColor black)"	att reset.	^ Array streamContents: [ :strm |		others do: [ :other |			(att dominates: other) ifFalse: [strm nextPut: other ]].		att isSet ifTrue: [ strm nextPut: att ]]! !!TextAttribute methodsFor: 'testing' stamp: 'jmv 1/21/2011 11:37'!dominatedByNormalEmphasis	"Subclasses may override if TextEmphasis normal (i.e. cmd-0) should turn them off"	^ false! !!TextAttribute methodsFor: 'testing' stamp: 'jmv 1/21/2011 11:32'!isSet	"Respond true to include this attribute in the text"	^ true! !!TextAction methodsFor: 'testing' stamp: 'jmv 1/21/2011 11:37'!dominatedByNormalEmphasis	"TextEmphasis normal (i.e. cmd-0) should turn off active text"	^ true! !!TextColor methodsFor: 'testing' stamp: 'jmv 1/21/2011 11:33'!isSet	"Do not include Color black, as it is the default color."	^color ~= Color black! !!TextEditor methodsFor: 'attributes' stamp: 'jmv 1/21/2011 11:25'!changeEmphasisOrAlignment	| menuStrings aList reply  code align menuList startIndex attribute |	startIndex _ self startIndex.	aList _ #(normal bold italic underlined struckOut leftFlush centered rightFlush justified).		align _ paragraph text alignmentAt: startIndex.	code _ paragraph text emphasisAt: startIndex.	menuList _ WriteStream on: Array new.	menuList nextPut: (code isZero ifTrue:['<on>'] ifFalse:['<off>']), 'normal' translated.	menuList nextPutAll: (#(bold italic underlined struckOut) collect:[:emph|		(code anyMask: (TextEmphasis perform: emph) emphasisCode)			ifTrue: [ '<on>', emph asString translated ]			ifFalse: [ '<off>', emph asString translated ]]).	menuList nextPutAll: (#(leftFlush centered rightFlush justified) collectWithIndex: [ :type :i |		align = (i-1)			ifTrue: [ '<on>', type asString translated ]			ifFalse: [ '<off>', type asString translated ]]).	menuStrings _ menuList contents.	aList _ #(normal bold italic underlined struckOut leftFlush centered rightFlush justified).	reply _ (SelectionMenu labelList: menuStrings lines: #(1 5) selections: aList) startUpWithoutKeyboard.	reply ifNotNil: [		(#(leftFlush centered rightFlush justified) includes: reply)			ifTrue: [				attribute _TextAlignment perform: reply]			ifFalse: [				attribute _ TextEmphasis perform: reply].		((menuStrings at: (aList indexOf: reply)) beginsWith: '<on>')			ifTrue: [ self unapplyAttribute: attribute ]			ifFalse: [ self applyAttribute:  attribute ]].	^ true! !!TextEditor methodsFor: 'editing keys' stamp: 'jmv 1/21/2011 11:15'!changeEmphasis: aKeyboardEvent	"Change the emphasis of the current selection or prepare to accept characters with the change in emphasis."	"control 0..9 -> 0..9"	| keyCode attributeToAdd attributeToRemove oldAttributes |	keyCode _ ('0123456'		indexOf: aKeyboardEvent keyCharacter		ifAbsent: [ 1 ]) - 1.	oldAttributes _ emphasisHere.	keyCode = 0 ifTrue: [ attributeToAdd _ TextEmphasis normal ].	(keyCode between: 1 and: 4) ifTrue: [		attributeToAdd _ TextEmphasis perform: (#(#bold #italic #underlined #struckOut ) at: keyCode).		oldAttributes do: [ :oldAtt |			oldAtt = attributeToAdd ifTrue: [				attributeToAdd _ nil.				attributeToRemove _ oldAtt ]]].	keyCode = 5 ifTrue: [ attributeToAdd _ TextKern kern: -1 ].	keyCode = 6 ifTrue: [ attributeToAdd _ TextKern kern: 1 ].	attributeToAdd ifNotNil: [ self applyAttribute: attributeToAdd ].	attributeToRemove ifNotNil: [ self unapplyAttribute: attributeToRemove ].	^ true.! !!TextEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 1/21/2011 12:48'!initializeCmdKeyShortcuts	"Initialize the (unshifted) command-key (or alt-key if not on Mac) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor test"	"	Editor initialize	"	| cmds |	self initializeBasicCmdKeyShortcuts.				'0123456'		do: [ :char | cmdActions at: char asciiValue + 1 put: #changeEmphasis:].		cmds := #(		$8	#offerColorMenu:		$k	#offerFontMenu:		$u	#align:		$K	#changeStyle:	).	1 to: cmds size		by: 2		do: [ :i | cmdActions at: (cmds at: i) asciiValue + 1 put: (cmds at: i + 1)]! !!TextEmphasis methodsFor: 'as yet unclassified' stamp: 'jmv 1/21/2011 11:39'!dominates: other	(emphasisCode = 0 and: [ other dominatedByNormalEmphasis ]) ifTrue: [^ true].	^ (other class == self class)		and: [ emphasisCode = other emphasisCode ]! !!TextEmphasis methodsFor: 'as yet unclassified' stamp: 'jmv 1/21/2011 11:17'!emphasisCode: int	emphasisCode _ int! !!TextEmphasis methodsFor: 'testing' stamp: 'jmv 1/21/2011 11:38'!dominatedByNormalEmphasis	"TextEmphasis normal (i.e. cmd-0) should turn off emphasis"	^ true! !!TextEmphasis methodsFor: 'testing' stamp: 'jmv 1/21/2011 11:32'!isSet	^ emphasisCode ~= 0! !!TextEmphasis class methodsFor: 'as yet unclassified' stamp: 'jmv 1/21/2011 11:00'!struckOut	^ self new emphasisCode: 8! !!TextKern methodsFor: 'testing' stamp: 'jmv 1/21/2011 11:39'!dominatedByNormalEmphasis	"TextEmphasis normal (i.e. cmd-0) should turn off kerning"	^ true! !!TextKern methodsFor: 'testing' stamp: 'jmv 1/21/2011 11:33'!isSet	^ active! !TextKern removeSelector: #dominatedByCmd0!TextKern removeSelector: #set!TextEmphasis class removeSelector: #narrow!TextEmphasis removeSelector: #dominatedByCmd0!TextEmphasis removeSelector: #set!TextEmphasis removeSelector: #turnOff!!classDefinition: #TextEmphasis category: #'System-TextAttributes'!TextAttribute subclass: #TextEmphasis	instanceVariableNames: 'emphasisCode'	classVariableNames: ''	poolDictionaries: ''	category: 'System-TextAttributes'!TextAction removeSelector: #dominatedByCmd0!TextAttribute removeSelector: #dominatedByCmd0!TextAttribute removeSelector: #set!StrikeFont removeSelector: #makeCondensedGlyphs!StrikeFont removeSelector: #narrow!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."Editor initialize.StrikeFont allInstancesDo: [ :f | f reset ]!