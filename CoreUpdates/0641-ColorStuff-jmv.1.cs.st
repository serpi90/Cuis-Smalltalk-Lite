'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 12 November 2010 at 4:06:31 pm'!!Color methodsFor: 'access' stamp: 'jmv 11/12/2010 15:52'!chroma	"Return the chroma of this color, a value between 0.0 and 1.0, somewhat related to saturation.	See http://en.wikipedia.org/wiki/HSL_and_HSV"	| r g b max min |	r _ self privateRed.	g _ self privateGreen.	b _ self privateBlue. 	max _ min _ r.	g > max ifTrue: [ max _ g ].	b > max ifTrue: [ max _ b ].	g < min ifTrue: [ min _ g ].	b < min ifTrue: [ min _ b ].	^max = 0		ifTrue: [ 0.0 ]		ifFalse: [ (max - min) asFloat / ComponentMax ]! !!Color methodsFor: 'private' stamp: 'jmv 11/9/2010 20:49'!setHue: hue chroma: chroma brightness: brightness	"Initialize this color to the given hue, chroma, and luma. See the comment in the instance creation method for details.	http://en.wikipedia.org/wiki/HSL_and_HSV		hue belongs in [0.0, 360.0)		chroma and luma belongs in [0.0, 1.0]	"	| x hf i r1 g1 b1 m | 	hf _ hue asFloat.	(hf < 0.0 or: [ hf >= 360.0 ])		ifTrue: [ hf _ hf rem: 360.0 ].	hf _ hf / 60.0.	x _ chroma * (1.0 - ((hf rem: 2.0) -1.0) abs).	i _ hf asInteger.  		"integer part of hue"	0 = i ifTrue: [ r1 _ chroma. g1 _ x. b1 _ 0.0 ].	1 = i ifTrue: [ r1 _ x. g1 _ chroma. b1 _ 0.0 ].	2 = i ifTrue: [ r1 _ 0.0. g1 _ chroma. b1 _ x ].	3 = i ifTrue: [ r1 _ 0.0. g1 _ x. b1 _ chroma ].	4 = i ifTrue: [ r1 _ x. g1 _ 0.0. b1 _ chroma ].	5 = i ifTrue: [ r1 _ chroma. g1 _ 0.0. b1 _ x ].	m _ brightness - ((r1 max: g1) max: b1).	m < 0.0 ifTrue: [		m * ComponentMax < -0.01			ifTrue: [ ^nil ]. "No color exists with required parameters"		m _ 0.0 ].	r1 _ r1 + m.	r1 > 1.0 ifTrue: [		(r1 * ComponentMax) rounded > ComponentMax			ifTrue: [ ^nil ]. "No color exists with required parameters".		r1 _ 1.0 ].	g1 _ g1 + m.	g1 > 1.0 ifTrue: [		(g1 * ComponentMax) rounded > ComponentMax			ifTrue: [ ^nil ]. "No color exists with required parameters".		g1 _ 1.0 ].	b1 _ b1 + m.	b1 > 1.0 ifTrue: [		(b1 * ComponentMax) rounded > ComponentMax			ifTrue: [ ^nil ]. "No color exists with required parameters".		b1 _ 1.0 ].	self setRed: r1 green: g1 blue: b1! !!Color methodsFor: 'private' stamp: 'jmv 11/9/2010 19:33'!setHue: hue chroma: chroma luminance: luma	"Initialize this color to the given hue, chroma, and luma. See the comment in the instance creation method for details.	http://en.wikipedia.org/wiki/HSL_and_HSV		hue belongs in [0.0, 360.0)		chroma and luma belongs in [0.0, 1.0]	"	| x hf i r1 g1 b1 m | 	hf _ hue asFloat.	(hf < 0.0 or: [ hf >= 360.0 ])		ifTrue: [ hf _ hf rem: 360.0 ].	hf _ hf / 60.0.	x _ chroma * (1.0 - ((hf rem: 2.0) -1.0) abs).	i _ hf asInteger.  		"integer part of hue"	0 = i ifTrue: [ r1 _ chroma. g1 _ x. b1 _ 0.0 ].	1 = i ifTrue: [ r1 _ x. g1 _ chroma. b1 _ 0.0 ].	2 = i ifTrue: [ r1 _ 0.0. g1 _ chroma. b1 _ x ].	3 = i ifTrue: [ r1 _ 0.0. g1 _ x. b1 _ chroma ].	4 = i ifTrue: [ r1 _ x. g1 _ 0.0. b1 _ chroma ].	5 = i ifTrue: [ r1 _ chroma. g1 _ 0.0. b1 _ x ].	m _ luma - (0.299*r1) - (0.587*g1) - (0.114*b1).	m < 0.0 ifTrue: [		m * ComponentMax < -0.01			ifTrue: [ ^nil ]. "No color exists with required parameters"		m _ 0.0 ].	r1 _ r1 + m.	r1 > 1.0 ifTrue: [		(r1 * ComponentMax) rounded > ComponentMax			ifTrue: [ ^nil ]. "No color exists with required parameters".		r1 _ 1.0 ].	g1 _ g1 + m.	g1 > 1.0 ifTrue: [		(g1 * ComponentMax) rounded > ComponentMax			ifTrue: [ ^nil ]. "No color exists with required parameters".		g1 _ 1.0 ].	b1 _ b1 + m.	b1 > 1.0 ifTrue: [		(b1 * ComponentMax) rounded > ComponentMax			ifTrue: [ ^nil ]. "No color exists with required parameters".		b1 _ 1.0 ].	self setRed: r1 green: g1 blue: b1! !!Color methodsFor: 'private' stamp: 'jmv 11/12/2010 15:50'!setHue: hue saturation: saturation brightness: brightness	"Initialize this color to the given hue, saturation, and brightness. See the comment in the instance creation method for details."	| s v hf i f p q t | 	s _ (saturation asFloat max: 0.0) min: 1.0.	v _ (brightness asFloat max: 0.0) min: 1.0.	hf _ hue asFloat.	(hf < 0.0 or: [hf >= 360.0])		ifTrue: [hf _ hf - ((hf quo: 360.0) asFloat * 360.0)].	hf _ hf / 60.0.	i _ hf asInteger.  "integer part of hue"	f _ hf fractionPart.         "fractional part of hue"	p _ (1.0 - s) * v.	q _ (1.0 - (s * f)) * v.	t _ (1.0 - (s * (1.0 - f))) * v.	0 = i ifTrue: [ ^ self setRed: v green: t blue: p ].	1 = i ifTrue: [ ^ self setRed: q green: v blue: p ].	2 = i ifTrue: [ ^ self setRed: p green: v blue: t ].	3 = i ifTrue: [ ^ self setRed: p green: q blue: v ].	4 = i ifTrue: [ ^ self setRed: t green: p blue: v ].	5 = i ifTrue: [ ^ self setRed: v green: p blue: q ].	self error: 'implementation error'! !!Color class methodsFor: 'instance creation' stamp: 'jmv 11/12/2010 15:53'!random2	"Return a random color with a distribution that spans over all possible colors."	^ self basicNew		setRed: RandomStream next		green: RandomStream next		blue: RandomStream next! !!Color class methodsFor: 'examples' stamp: 'jmv 11/12/2010 16:03'!experimentsTowarsANewColorPalette"self experimentsTowarsANewColorPalette"| selectedHue selectedSaturation selectedV selectedColor h s v color width height selectedChroma selectedLuminance |width _ 300.height _ 120.selectedColor _ Color fromUser.selectedHue _ selectedColor hue.selectedSaturation _ selectedColor saturation.selectedChroma _ selectedColor chroma.selectedV _ selectedColor brightness.selectedLuminance _ selectedColor luminance.Display getCanvas fillRectangle: (0@0 extent: height@height) color: selectedColor.0 to: height do: [ :y |	v _ 1.0 - (y / height).	0 to: height do: [ :x |		s _ x / height.		color _ Color basicNew setHue: selectedHue saturation: s brightness: v.		Display colorAt: x@(y+height) put: color	].	Display forceToScreen].0 to: height do: [ :y | | c |	v _ 1.0 - (y / height).	s _ 1.0 - (y / height).	c _ s.	0 to: width do: [ :x |		h _ x / width * 360.				color _ Color basicNew setHue: h chroma: c luminance: selectedLuminance."		color _ Color basicNew setHue: h chroma: c brightness: selectedV."		color ifNil: [ color _ Color black ]."		color _ Color basicNew setHue: h saturation: s brightness: selectedV."		Display colorAt: x+height@y put: color.				color _ Color basicNew setHue: h chroma: selectedChroma luminance: v."		color _ Color basicNew setHue: h chroma: selectedChroma brightness: v."		color ifNil: [ color _ Color black ]."		color _ Color basicNew setHue: h saturation: selectedSaturation brightness: v."		Display colorAt: x+height@(y+height) put: color.			].	Display forceToScreen].! !