'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 28 June 2011 at 9:07:43 am'!!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 16:06'!isBlockArgName: aString 	"Answer true if aString is the name of a block argument, false otherwise"	self blockArgNamesDo: [ :arg | arg = aString ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 16:09'!isBlockTempName: aString 	"Answer true if aString is the name of a block temporary. false otherwise"	self blockTempNamesDo: [ :arg | arg = aString ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:49'!isClassVarName: aSymbol 	"Answer true if aString is the name of a class variable, false otherwise"	classOrMetaClass isBehavior 		ifTrue: [			classOrMetaClass theNonMetaClass withAllSuperclasses do: [ :c | 				(c classPool bindingOf: aSymbol) ifNotNil: [^true]]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:48'!isGlobal: aSymbol	"Answer true if aString is the name of a global variable, false otherwise"	(Smalltalk bindingOf: aSymbol) ifNotNil: [^true].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 16:08'!isIncompleteBlockArgName: aString 	"Answer true if aString is the start of the name of a block argument, false otherwise"	self blockArgNamesDo: [ :arg | (arg beginsWith: aString) ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 16:10'!isIncompleteBlockTempName: aString 	"Answer true if aString is the start of the name of a block temporary. false otherwise"	self blockTempNamesDo: [ :arg | (arg beginsWith: aString) ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:44'!isIncompleteClassVarName: aString 	"Answer true if aString is the start of the name of a class variable, false otherwise"	self classVarNamesDo: [ :arg | (arg beginsWith: aString) ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:44'!isIncompleteGlobal: aString	"Answer true if aString is the start of the name of a global variable, false otherwise"	^Smalltalk hasBindingThatBeginsWith: aString! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:44'!isIncompleteInstVarName: aString 	"Answer true if aString is the start of the name of an instance variable, false otherwise"	self instVarNamesDo: [ :arg | (arg beginsWith: aString) ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 16:13'!isIncompleteMethodArgName: aString 	"Answer true if aString is the start of the name of a method argument, false otherwise.    Does not check whether aString is also a blockArgName"	self methodArgNamesDo: [ :arg | (arg beginsWith: aString) ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 16:31'!isIncompleteMethodTempName: aString 	"Answer true if aString is the start of the name of a method temporary, false otherwise."	self methodTempNamesDo: [ :arg | (arg beginsWith: aString) ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:06'!isIncompletePoolConstantName: aString 	"Answer true if aString is the start of the name of a pool constant, false otherwise"	self poolConstantNamesDo: [ :arg | (arg beginsWith: aString) ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 16:31'!isIncompleteReservedName: aString 	"Answer true if aString is the start of a reserved name, false otherwise"	self reservedNamesDo: [ :arg | (arg beginsWith: aString) ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:44'!isIncompleteWorkspaceVarName: aString 	"Answer true if aString is the  start of the name of an workspace variable, false otherwise"	self workspaceNamesDo: [ :arg | (arg beginsWith: aString) ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:44'!isInstVarName: aString 	"Answer true if aString is the name of an instance variable, false otherwise"	self instVarNamesDo: [ :arg | arg = aString ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 16:13'!isMethodArgName: aString 	"Answer true if aString is the name of a method argument, false otherwise.    Does not check whether aString is also a blockArgName"	self methodArgNamesDo: [ :arg | arg = aString ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:08'!isMethodTempName: aString 	"Answer true if aString is the name of a method temporary, false otherwise.    Does not check whether aString is also a block temporary    or argument"	self methodTempNamesDo: [ :arg | arg = aString ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:48'!isPoolConstantName: aSymbol 	"Answer true if aString is the name of a pool constant, false otherwise"	classOrMetaClass isBehavior 		ifTrue: [			classOrMetaClass theNonMetaClass withAllSuperclasses do: [ :c |				c sharedPools do: [:p | (p bindingOf: aSymbol) ifNotNil: [ ^true ]]]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 16:30'!isReservedName: aString 	"Answer true if aString is a reserved name, false otherwise"	self reservedNamesDo: [ :arg | arg = aString ifTrue: [ ^true ]].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:44'!isWorkspaceVarName: aString 	"Answer true if aString is the name of an workspace variable, false otherwise"	workspace		ifNotNil: [ ^(workspace hasBindingOf: aString) ].	^false! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:48'!resolve: aString	(self isReservedName: aString) ifTrue: [^aString asSymbol].	(self isBlockTempName: aString) ifTrue: [^#blockTempVar].	(self isBlockArgName: aString) ifTrue: [^#blockArg].	(self isMethodTempName: aString) ifTrue: [^#tempVar].	(self isMethodArgName: aString) ifTrue: [^#methodArg].	(self isInstVarName: aString) ifTrue: [^#instVar].	(self isWorkspaceVarName: aString) ifTrue: [^#workspaceVar].	Symbol hasInterned: aString ifTrue: [ :symbol |		(self isClassVarName: symbol) ifTrue: [ ^#classVar ].		(self isPoolConstantName: symbol) ifTrue: [ ^#poolConstant].		(self isGlobal: symbol) ifTrue: [^#globalVar]].	^self resolvePartial: aString! !!SHParserST80 methodsFor: 'identifier testing' stamp: 'jmv 6/27/2011 17:43'!resolvePartial: aString 	"check if any identifier begins with aString"		(self isIncompleteReservedName: aString) ifTrue: [^#incompleteIdentifier].	(self isIncompleteBlockTempName: aString) ifTrue: [^#incompleteIdentifier].	(self isIncompleteBlockArgName: aString) ifTrue: [^#incompleteIdentifier].	(self isIncompleteMethodTempName: aString) ifTrue: [^#incompleteIdentifier].	(self isIncompleteMethodArgName: aString) ifTrue: [^#incompleteIdentifier].	(self isIncompleteInstVarName: aString) ifTrue: [^#incompleteIdentifier].	(self isIncompleteWorkspaceVarName: aString) ifTrue: [^#incompleteIdentifier].	(self isIncompleteClassVarName: aString) ifTrue: [ ^#incompleteIdentifier ].	(self isIncompletePoolConstantName: aString) ifTrue: [ ^#incompleteIdentifier ].	(self isIncompleteGlobal: aString) ifTrue: [^#incompleteIdentifier].	^#undefinedIdentifier! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 16:29'!blockArgNamesDo: aBlock	"Iterate over block argument names valid at current blockDepth"	blockDepth to: 1 by: -1 do: [ :level |		arguments at: level ifPresent: [ :args | args do: aBlock ]]! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 16:29'!blockTempNamesDo: aBlock	"Iterate over block temp names valid at current blockDepth"	blockDepth to: 1 by: -1 do: [ :level |		temporaries at: level ifPresent: [ :args | args do: aBlock ]]! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 16:59'!classVarNamesDo: aBlock	classOrMetaClass isBehavior 		ifTrue: [			classOrMetaClass theNonMetaClass withAllSuperclasses do: [ :c |				c classPool keysDo: aBlock ]]! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 16:35'!instVarNamesDo: aBlock	instanceVariables do: aBlock! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 16:29'!methodArgNamesDo: aBlock	"Iterate over method argument names"	^arguments at: 0  ifPresent: [ :args | args do: aBlock ]! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 16:29'!methodTempNamesDo: aBlock	"Iterate over method temporary names"	^temporaries at: 0 ifPresent: [ :args | args do: aBlock ]! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 18:16'!namesBeginningWith: aString do: aBlock	"Evaluate aBlock for all available names that start with aString"	self nonGlobalNamesDo: [ :name |		(name beginsWith: aString) ifTrue: [ aBlock value: name ]].	Smalltalk namesBeginningWith: aString do: aBlock! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 18:20'!nonGlobalNamesDo: aBlock	"Evaluate aBlock over all available names, except for globals"	self		blockArgNamesDo: aBlock;		blockTempNamesDo: aBlock;		methodArgNamesDo: aBlock;		methodTempNamesDo: aBlock;		instVarNamesDo: aBlock;		classVarNamesDo: aBlock;		poolConstantNamesDo: aBlock;		workspaceNamesDo: aBlock;		reservedNamesDo: aBlock! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 17:26'!poolConstantNamesDo: aBlock	classOrMetaClass isBehavior 		ifTrue: [			classOrMetaClass theNonMetaClass withAllSuperclasses do: [ :c |				c sharedPools do: [ :pool |					pool bindingsDo: [ :assoc | aBlock value: assoc key ]]]]! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 16:30'!reservedNamesDo: aBlock	#('self' 'super' 'true' 'false' 'nil' 'thisContext') do: aBlock! !!SHParserST80 methodsFor: 'indentifier iteration' stamp: 'jmv 6/27/2011 16:40'!workspaceNamesDo: aBlock	workspace ifNotNil: [		workspace bindingNamesDo: aBlock ]! !!SHParserST80 methodsFor: 'testing' stamp: 'jmv 6/27/2011 22:19'!isPartialOrFullIdentifier: aRange	| t |	t _ aRange type.	(#(#incompleteIdentifier		#blockTempVar #blockArg #tempVar #methodArg		#instVar #classVar 		#workspaceVar #poolConstant #globalVar ) 			pointsTo: aRange type) ifTrue: [ ^ true ].	(self isReservedName: t) ifTrue: [ ^ true ].	^ false! !!SystemDictionary methodsFor: 'testing' stamp: 'jmv 6/27/2011 17:56'!hasBindingThatBeginsWith: aString	"Answer true if the receiver has a key that begins with aString, false otherwise"	"	[ 5000 timesRepeat: [Smalltalk hasBindingThatBeginsWith: 'Obj' ]] timeToRun 		14	Smalltalk hasBindingThatBeginsWith: 'Obj'	[ 5000 timesRepeat: [Smalltalk hasBindingThatBeginsWith: 'zxzxObj' ]] timeToRun 		47	Smalltalk hasBindingThatBeginsWith: 'zxzxObj'	"		"Use the cached class and non-class names for better performance."	| searchBlock |	searchBlock _ [ :element |		(element beginsWith: aString)			ifTrue: [ 0 ]			ifFalse: [				aString < element					ifTrue: [ -1 ]					ifFalse: [ 1 ] ] ].	self classNames 		findBinary: searchBlock		do: [ :found | ^true ]		ifNone: [ :a :b | ].		self nonClassNames 		findBinary: searchBlock		do: [ :found | ^true ]		ifNone: [ :a :b | ].	^false! !!SystemDictionary methodsFor: 'testing' stamp: 'jmv 6/27/2011 18:09'!namesBeginningWith: aString do: aBlock	"	Smalltalk namesBeginningWith: 'O' do: [ :each | each print ]	Smalltalk namesBeginningWith: 'ObjectExplorer' do: [ :each | each print ]	Smalltalk namesBeginningWith: 'ObjectExplorerWrapper' do: [ :each | each print ]	"	self namesBeginningWith: aString do: aBlock in:  self classNames.	self namesBeginningWith: aString do: aBlock in:  self nonClassNames! !!SystemDictionary methodsFor: 'testing' stamp: 'jmv 6/28/2011 09:02'!namesBeginningWith: aString do: aBlock in: aCollection	"aCollection is sorted"	| count |	"Find the first element  starting with aString"	count _ aCollection size.	aCollection		findBinaryIndex: [ :element |			element < aString				ifFalse: [ -1 ]				ifTrue: [ 1 ] ]		do: [ :found | "Will never find any" ]		ifNone: [ :a :b | | i n |			i _ b.			[ i < count and: [ (n _ (aCollection at: i)) beginsWith: aString ]] whileTrue: [				aBlock value: n.				i _ i + 1 ]]! !!Workspace methodsFor: 'binding' stamp: 'jmv 6/27/2011 16:40'!bindingNamesDo: aBlock	bindings ifNotNil: [		bindings keysDo: aBlock ]! !