'From Cuis 3.1 of 4 March 2011 [latest update: #850] on 18 March 2011 at 11:05:31 am'!!FormCanvas methodsFor: 'drawing' stamp: 'jmv 3/18/2011 10:34'!line: pt1 to: pt2 width: w color: c	| offset |	offset _ origin - (w // 2) asPoint.	self setPaintColor: c.	port		width: w;		height: w;		drawFrom: (pt1 + offset) to: (pt2 + offset)! !!FormCanvas methodsFor: 'drawing-ovals' stamp: 'jmv 3/18/2011 10:23'!fillOval: r color: fillColor borderWidth: borderWidth borderColor: borderColor	| rect |	"draw the border of the oval"	rect _ (r translateBy: origin) truncated.	(borderWidth = 0 or: [borderColor isTransparent]) ifFalse:[		self setPaintColor: borderColor.		port frameOval: rect borderWidth: borderWidth].	"fill the inside"	fillColor isTransparent ifFalse: [		self setPaintColor: fillColor.		port fillOval: (rect insetBy: borderWidth)].! !!FormCanvas methodsFor: 'drawing-rectangles' stamp: 'jmv 3/18/2011 10:33'!frameAndFillRectangle: r fillColor: fillColor borderWidth: borderWidth borderColor: borderColor	| rect |	rect _ r translateBy: origin.	"draw the border of the rectangle"	borderColor isTransparent ifFalse:[		self setPaintColor: borderColor.		port frameRect: rect borderWidth: borderWidth ].	"fill the inside"	fillColor isTransparent ifFalse: [		self setPaintColor: fillColor.		port fillRect: (rect insetBy: borderWidth) offset: origin ]! !!FormCanvas methodsFor: 'drawing-rectangles' stamp: 'jmv 3/18/2011 10:33'!frameRectangle: r borderWidth: borderWidth color: borderColor	"	Display getCanvas		frameRectangle: (10@10 extent: 300@200)		borderWidth: 20		color: Color red	"	| rect |	rect _ r translateBy: origin.	self setPaintColor: borderColor.	port		frameRect: rect		borderWidth: borderWidth.! !!FormCanvas methodsFor: 'private' stamp: 'jmv 3/18/2011 10:33'!frameRectangle: r borderWidth: borderWidth topLeftColor: topLeftColor bottomRightColor: bottomRightColor	"	Display getCanvas		frameRectangle: (10@10 extent: 300@200)		borderWidth: 20		topLeftColor: Color green		bottomRightColor: Color red	Display getCanvas fillRectangle: (10@10 extent: 300@200) color: Color white	"	| rect w h |	self setPaintColor: topLeftColor.	rect _ r translateBy: origin.	port frameRectTopLeft: rect borderWidth: borderWidth.	borderWidth isNumber		ifTrue: [w _ h _ borderWidth]		ifFalse: [w _ borderWidth x.   h _ borderWidth y].	self setPaintColor: bottomRightColor.	port 		 frameRectRight: rect width: w;		 frameRectBottom: rect height: h! !!FormCanvas methodsFor: 'private' stamp: 'jmv 3/18/2011 10:35'!setPaintColor: aColor	"Install a new color used for filling."	| paintColor screen patternWord |	paintColor _ shadowColor ifNil: [ aColor ].	paintColor ifNil: [ paintColor _ Color transparent].	(paintColor is: #Color) ifFalse:[		(paintColor isKindOf: InfiniteForm) ifFalse:[^self error:'Cannot install color'].		^port fillPattern: paintColor; combinationRule: Form paint].	"Okay, so paintColor really *is* a color"	port sourceForm: nil.	(paintColor isOpaque) ifTrue: [		port fillPattern: paintColor.		port combinationRule: Form paint.		self depth = 8 ifTrue:[			"In 8 bit depth it's usually a good idea to use a stipple pattern"			port fillColor: (form balancedPatternFor: paintColor)].		^self].	self depth > 8 ifTrue:[		"BitBlt setup for alpha mapped transfer"		port fillPattern: paintColor.		self depth = 16			ifTrue:[port alphaBits: paintColor privateAlpha; combinationRule: 31]			ifFalse:[port combinationRule: Form blend].		^self].	"Can't represent actual transparency -- use stipple pattern"	screen _ Color translucentMaskFor: paintColor alpha depth: self depth.	patternWord _ form pixelWordFor: paintColor.	port fillPattern: (screen collect: [:maskWord | maskWord bitAnd: patternWord]).	port combinationRule: Form paint! !!String methodsFor: 'displaying' stamp: 'jmv 3/18/2011 09:49'!displayOn: aDisplayMedium at: aPoint textColor: aColor	"Show a representation of the receiver as a DisplayText at location aPoint on aDisplayMedium, rendering the text in the designated color"	aDisplayMedium getCanvas drawString: self at: aPoint font: nil color: aColor! !GrafPort removeSelector: #fixRuleFor1bpp:foregroundColor:!GrafPort removeSelector: #installStrikeFont:foregroundColor:!FormCanvas removeSelector: #setFillColor:!