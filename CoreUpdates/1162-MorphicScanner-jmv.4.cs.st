'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 4 December 2011 at 11:12:03 pm'!!classDefinition: #MorphicScanner category: #'Graphics-Text'!CharacterScanner subclass: #MorphicScanner	instanceVariableNames: 'canvas bitBlt lineY runX foregroundColor lineHeight paragraphColor paraTopLeft ignoreColorChanges'	classVariableNames: ''	poolDictionaries: ''	category: 'Graphics-Text'!!MorphicScanner commentStamp: '<historical>' prior: 0!                           My instances are used to scan text and display it on the screen or in a hidden form.!!FormCanvas methodsFor: 'accessing' stamp: 'jmv 12/4/2011 22:55'!      grafPort	^port! !!FormCanvas methodsFor: 'drawing-text' stamp: 'jmv 12/4/2011 23:10'!       paragraph: aParagraph bounds: boundsInWorld color: c selectionColor: sc	| displayScanner leftInRun line |	self setPaintColor: c.	displayScanner _ MorphicScanner new 		text: aParagraph paragraphText		foreground: (shadowColor ifNil: [ c ])		ignoreColorChanges: self isShadowDrawing.	displayScanner canvas: self.	leftInRun _ 0.	(aParagraph lineIndexForPoint: 0@0)		to: (aParagraph lineIndexForPoint: boundsInWorld extent)		do: [ :i |			line _ aParagraph lines at: i.			aParagraph				displaySelectionInLine: line				on: self				paragraphTopLeft: boundsInWorld topLeft				selectionColor: sc.			leftInRun _ displayScanner displayLine: line paragraphTopLeft: boundsInWorld topLeft leftInRun: leftInRun  ]! !!MorphicScanner methodsFor: 'scanning' stamp: 'jmv 12/4/2011 22:53'!       displayBulletIfAppropriateFor: textLine paragraphTopLeft: paragraphTopLeft	| paragraphEnd count pattern |	paragraphStyle ifNotNil: [		(textLine isFirstLine and: [ paragraphStyle isListStyle ]) ifTrue: [			pattern _ paragraphStyle listBulletPattern.			"Count how many paragraphs before this one already used the pattern"			count _ 0.			paragraphEnd _ textLine first-1.			[			paragraphEnd > 0 and: [ ((text paragraphStyleOrNilAt: paragraphEnd) ifNotNil: [ :ps | ps listBulletPattern ]) = pattern ]] whileTrue: [				count _ count + 1.				paragraphEnd _ text string endOfParagraphBefore: paragraphEnd ].			"Our number in the list, is one more than the count of previous contiguous paragraphs with this pattern"			self				displayBulletParagraphTopLeft: paragraphTopLeft				number: count + 1]]! !!MorphicScanner methodsFor: 'scanning' stamp: 'jmv 12/4/2011 23:05'!                    displayBulletParagraphTopLeft: paragraphTopLeft number: bulletNumber	| pattern i c j s bullet bulletPos bulletSize prefix |	pattern _ paragraphStyle listBulletPattern.	bullet _ pattern.	(i _ pattern indexOf: $%) > 0		ifTrue: [ bullet _ bulletNumber asString]		ifFalse: [			(i _ pattern indexOf: $z) > 0				ifTrue: [ bullet _ (Character value: 96 + bulletNumber) asString ]				ifFalse: [					(i _ pattern indexOf: $Z) > 0						ifTrue: [ bullet _ (Character value: 64 + bulletNumber) asString ]]].	prefix _ 0.	i > 0 ifTrue: [		c _ pattern at: i.		j _ i.		s _ pattern size.		[ j <= s and: [ (pattern at: j) = c ] ] whileTrue: [ j _ j + 1 ].		j _ j - 1.		bulletSize _ j-i+1.		prefix _ bulletSize - bullet size max: 0.		bullet size > bulletSize ifTrue: [			bullet _ bullet copyFrom: bullet size - bulletSize + 1 to: bullet size ].		bullet _ (pattern copyFrom: 1 to: i-1), bullet, (pattern copyFrom: j+1 to: pattern size) ].	bulletPos _ paragraphStyle firstIndent + paragraphTopLeft x + ((font widthOf: $9) * prefix)@destY.	font displayString: bullet on: canvas grafPort from: 1 to: bullet size at: bulletPos kern: kern! !!MorphicScanner methodsFor: 'scanning' stamp: 'jmv 12/4/2011 23:10'!    displayLine: textLine paragraphTopLeft: paragraphTopLeft leftInRun: leftInRun	"The call on the primitive (scanCharactersFrom:to:in:rightX:) will be interrupted according to an array of stop conditions passed to the scanner at which time the code to handle the stop condition is run and the call on the primitive continued until a stop condition returns true (which means the line has terminated).  leftInRun is the # of characters left to scan in the current run; when 0, it is time to call setStopConditions."	| done stopCondition nowLeftInRun startIndex string lastPos priorFont |	line _ textLine.	paraTopLeft _ paragraphTopLeft + canvas origin.	lineY _ line top + paraTopLeft y.	lineHeight _ line lineHeight.	rightMargin _ line rightMargin + paraTopLeft x.	lastIndex _ line first.	leftInRun <= 0 ifTrue: [self setStopConditions].	leftMargin _ (line leftMarginForAlignment: alignment) + paraTopLeft x.	destX _ runX _ leftMargin.	destY _ lineY + line baseline - font ascent.	textLine isEmptyLine ifTrue: [		textLine paragraphStyle ifNotNil: [ :ps |			ps = paragraphStyle ifFalse: [				""				foregroundColor _ paragraphColor.				priorFont _ font.				self setActualFont: ps font.				ps color ifNotNil: [ :color | self textColor: color ].				alignment _ ps alignment.				paragraphStyle _ ps.				priorFont ifNotNil: [ destX _ destX + priorFont descentKern ].				destX _ destX - font descentKern.				kern _ 0 - font baseKern.				spaceWidth _ font widthOf: Character space.				xTable _ font xTable.				map _ font characterToGlyphMap.				stopConditions _ DefaultStopConditions.				font installOn: canvas grafPort foregroundColor: foregroundColor.				text ifNotNil: [ destY _ lineY + line baseline - font ascent ]				""			]		].		self displayBulletIfAppropriateFor: textLine paragraphTopLeft: paraTopLeft.		^leftInRun ].	self displayBulletIfAppropriateFor: textLine paragraphTopLeft: paraTopLeft.	lastIndex _ line first.	leftInRun <= 0		ifTrue: [nowLeftInRun _ text runLengthFor: lastIndex]		ifFalse: [nowLeftInRun _ leftInRun].	runStopIndex _ lastIndex + (nowLeftInRun - 1) min: line last.	spaceCount _ 0.	done _ false.	string _ text string.	self placeEmbeddedObject.	[ done ] whileFalse: [		startIndex _ lastIndex.		lastPos _ destX@destY.		stopCondition _ self			scanCharactersFrom: lastIndex to: runStopIndex			in: string rightX: rightMargin stopConditions: stopConditions			kern: kern.		lastIndex >= startIndex ifTrue: [			font				displayString: string				on: canvas grafPort 				from: startIndex				to: lastIndex				at: lastPos				kern: kern ].		"see setStopConditions for stopping conditions for displaying."		done _ self perform: stopCondition ].	^ runStopIndex - lastIndex   "Number of characters remaining in the current run"! !!MorphicScanner methodsFor: 'scanning' stamp: 'jmv 12/4/2011 23:06'!           placeEmbeddedObject: anchoredFormOrMorph	(super placeEmbeddedObject: anchoredFormOrMorph) ifFalse: [^ false].	(anchoredFormOrMorph is: #Morph)		ifTrue: [			anchoredFormOrMorph position:				((destX - anchoredFormOrMorph width)@				(lineY+ line baseline - anchoredFormOrMorph height)) -					paraTopLeft ]		ifFalse: [			destY _ lineY.			runX _ destX.			anchoredFormOrMorph 				displayOn: canvas grafPort destForm 				at: destX - anchoredFormOrMorph width @ (destY + line baseline - anchoredFormOrMorph height)				clippingBox: canvas grafPort clipRect				rule: Form blend				fillColor: nil ].	^ true! !!MorphicScanner methodsFor: 'private' stamp: 'jmv 12/4/2011 23:11'!                  setFont 	foregroundColor _ paragraphColor.	super setFont.  "Sets font and emphasis bits, and maybe foregroundColor"	font installOn: canvas grafPort foregroundColor: foregroundColor.	text ifNotNil: [ destY _ lineY + line baseline - font ascent ]! !!MorphicScanner methodsFor: 'private' stamp: 'jmv 12/4/2011 22:53'!                               text: t foreground: foreColor ignoreColorChanges: shadowMode	text _ t.	paragraphStyle _ nil.	foregroundColor _ paragraphColor _ foreColor.	ignoreColorChanges _ shadowMode! !!MorphicScanner methodsFor: 'private' stamp: 'jmv 12/4/2011 22:53'!         textColor: textColor	ignoreColorChanges ifTrue: [^ self].	foregroundColor _ textColor! !!MorphicScanner methodsFor: 'stop conditions' stamp: 'jmv 12/4/2011 22:53'!                        cr	"When a carriage return is encountered, simply increment the pointer 	into the paragraph."	lastIndex_ lastIndex + 1.	^false! !!MorphicScanner methodsFor: 'stop conditions' stamp: 'jmv 12/4/2011 22:53'!            crossedX	"This condition will sometimes be reached 'legally' during display, when, 	for instance the space that caused the line to wrap actually extends over 	the right boundary. This character is allowed to display, even though it 	is technically outside or straddling the clipping ectangle since it is in 	the normal case not visible and is in any case appropriately clipped by 	the scanner."	^ true ! !!MorphicScanner methodsFor: 'stop conditions' stamp: 'jmv 12/4/2011 22:53'!                     endOfRun	"The end of a run in the display case either means that there is actually 	a change in the style (run code) to be associated with the string or the 	end of this line has been reached."	| runLength |	lastIndex = line last ifTrue: [^true].	runX _ destX.	runLength _ text runLengthFor: (lastIndex _ lastIndex + 1).	runStopIndex _ lastIndex + (runLength - 1) min: line last.	self setStopConditions.	self placeEmbeddedObject.	^ false! !!MorphicScanner methodsFor: 'stop conditions' stamp: 'jmv 12/4/2011 22:53'!               paddedSpace	"Each space is a stop condition when the alignment is right justified. 	Padding must be added to the base width of the space according to 	which space in the line this space is and according to the amount of 	space that remained at the end of the line when it was composed."	spaceCount _ spaceCount + 1.	destX _ destX + spaceWidth + (line justifiedPadFor: spaceCount).	lastIndex _ lastIndex + 1.	^ false! !!MorphicScanner methodsFor: 'stop conditions' stamp: 'jmv 12/4/2011 22:53'!       setStopConditions	"Set the font and the stop conditions for the current run."		self setFont.	alignment = CharacterScanner justifiedCode ifTrue:[		"Make a local copy of stop conditions so we don't modify the default"		stopConditions == DefaultStopConditions 			ifTrue:[stopConditions _ stopConditions copy].		stopConditions at: Character space asciiValue + 1 put: #paddedSpace]! !!MorphicScanner methodsFor: 'stop conditions' stamp: 'jmv 12/4/2011 22:53'!               tab	destX _ self tabDestX.	lastIndex _ lastIndex + 1.	^ false! !!MorphicScanner methodsFor: 'accessing' stamp: 'jmv 12/4/2011 23:07'!                     canvas: aCanvas	| blitter |	canvas _ aCanvas.	"Install the BitBlt to use"	blitter _ aCanvas grafPort.	blitter sourceX: 0; width: 0.	"Init BitBlt so that the first call to a primitive will not fail"	blitter sourceForm: nil. "Make sure font installation won't be confused"! !Smalltalk removeClassNamed: #DisplayScanner!