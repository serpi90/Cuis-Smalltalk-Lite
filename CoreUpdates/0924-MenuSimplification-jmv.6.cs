'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 15 April 2011 at 8:38:03 am'!!classDefinition: #CustomMenu category: #'Tools-Menus'!SelectionMenu subclass: #CustomMenu	instanceVariableNames: 'labels dividers lastDivider title targets arguments '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Menus'!!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/14/2011 21:56'!shiftedChangeSetMenu	"Set up aMenu to hold items relating to the change-set-list pane when the shift key is down"	| aMenu |	aMenu := MenuMorph new defaultTarget: self.	aMenu title: 'Change set (shifted)'.	aMenu addStayUpIcons.	"CONFLICTS SECTION"	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	parent ifNotNil:		[aMenu add: 'conflicts with change set opposite' action: #methodConflictsWithOtherSide.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in the one on the opposite side of the change sorter.'.			aMenu add: 'conflicts with category opposite' action: #methodConflictsWithOppositeCategory.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in ANY change set in the category list on the opposite side of this change sorter, other of course than this change set itself.  (Caution -- this could be VERY slow)'].	aMenu addLine.	"CHECKS SECTION"	aMenu add: 'check for slips' action: #lookForSlips.	aMenu balloonTextForLastItem: 'Check this change set for halts and references to Transcript.'.	aMenu add: 'check for unsent messages' action: #checkForUnsentMessages.	aMenu balloonTextForLastItem:'Check this change set for messages that are not sent anywhere in the system'.	aMenu add: 'check for uncommented methods' action: #checkForUncommentedMethods.	aMenu balloonTextForLastItem:'Check this change set for methods that do not have comments'.	aMenu add: 'check for uncommented classes' action: #checkForUncommentedClasses.	aMenu balloonTextForLastItem:'Check for classes with code in this changeset which lack class comments'.	Utilities authorInitialsPerSe isEmptyOrNil ifFalse:		[aMenu add: 'check for other authors' action: #checkForAlienAuthorship.		aMenu balloonTextForLastItem:'Check this change set for methods whose current authoring stamp does not start with "', Utilities authorInitials, '"'.	aMenu add: 'check for any other authors' action: #checkForAnyAlienAuthorship.	aMenu balloonTextForLastItem:'Check this change set for methods any of whose authoring stamps do not start with "', Utilities authorInitials, '"'].	aMenu add: 'check for uncategorized methods' action: #checkForUnclassifiedMethods.	aMenu balloonTextForLastItem:'Check to see if any methods in the selected change set have not yet been assigned to a category.  If any are found, open a browser on them.'.	aMenu addLine.	aMenu add: 'inspect change set' action: #inspectChangeSet.	aMenu balloonTextForLastItem: 'Open an inspector on this change set. (There are some details in a change set which you don''t see in a change sorter.)'.	aMenu add: 'update' action: #update.	aMenu balloonTextForLastItem: 'Update the display for this change set.  (This is done automatically when you activate this window, so is seldom needed.)'.	aMenu add: 'promote to top of list' action: #promoteToTopChangeSet.	aMenu balloonTextForLastItem:'Make this change set appear first in change-set lists in all change sorters.'.	aMenu add: 'trim history' action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.  NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'view affected class categories' action: #viewAffectedClassCategories.	aMenu balloonTextForLastItem: ' Show class categories affected by any contained change'.		aMenu add: 'remove contained in class categories...' action: #removeContainedInClassCategories.	aMenu balloonTextForLastItem: ' Drops any changes in given class categories'.	aMenu add: 'clear this change set' action: #clearChangeSet.	aMenu balloonTextForLastItem: 'Reset this change set to a pristine state where it holds no information. CAUTION: this is destructive and irreversible!!'.	aMenu add: 'uninstall this change set' action: #uninstallChangeSet.	aMenu balloonTextForLastItem: 'Attempt to uninstall this change set. CAUTION: this may not work completely and is irreversible!!'.	aMenu add: 'reorder all change sets' action: #reorderChangeSets.	aMenu balloonTextForLastItem:'Applies a standard reordering of all change-sets in the system -- at the bottom will come the sets that come with the release; next will come all the numbered updates; finally, at the top, will come all other change sets'.	aMenu addLine.	aMenu add: 'more...' action: #offerUnshiftedChangeSetMenu.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!CustomMenu methodsFor: 'initialize-release' stamp: 'jmv 4/14/2011 22:04'!initialize	labels _ OrderedCollection new.	selections _ OrderedCollection new.	dividers _ OrderedCollection new.	lastDivider _ 0.	arguments _ OrderedCollection new	! !!CustomMenu methodsFor: 'compatibility' stamp: 'jmv 4/14/2011 22:04'!add: aString target: target selector: aSymbol argumentList: argList	"Append a menu item with the given label. If the item is selected, it will send the given selector to the target object with the given arguments. If the selector takes one more argument than the number of arguments in the given list, then the triggering event is supplied as as the last argument."	self add: aString action: aSymbol.	arguments addLast: argList asArray! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 4/14/2011 21:54'!openMenu	"Build the open window menu for the world."	| menu |	menu _ self menu: 'open...'.	self fillIn: menu from: {		{'browser' . { self . #openBrowser}. 'A five-paned tool that lets you see all the code in the system'}.		{'package-pane browser' . { PackagePaneBrowser . #openBrowser} . 'Similar to the regular browser, but adds an extra pane at top-left that groups class-categories that start with the same prefix' }.		{'workspace' . {self . #openWorkspace}. 'A window for evaluating Smalltalk expressions' }.		{'text editor' . {self . #openTextEditor}. 'A window for composing text' }.		{'file list' . {self . #openFileList} . 'A tool allowing you to browse any file' }.		{'transcript' . {self . #openTranscript}. 'A window used to report messages sent to Transcript' }.		{ 'process browser' . { ProcessBrowser . #open } }.		{ 'emergency evaluator'. { Transcripter. #emergencyEvaluator } }.		"{'inner world' . { WorldWindow . #test1} }."		nil.		{'message names' . { self . #openMessageNames} . 'A tool for finding and editing methods that contain any given keyword in their names.'}.		nil.		{'simple change sorter' . {self . #openChangeSorter1} . 'A tool allowing you to view the methods in a single change set' }.		{'dual change sorter' . {self . #openChangeSorter2} . 'A tool allowing you to compare and manipulate two change sets concurrently' }.		nil.	}.	self fillIn: menu from: self class registeredOpenCommands.	^menu! !FileList class removeSelector: #openFileDirectly!CustomMenu removeSelector: #targets!!classDefinition: #CustomMenu category: #'Tools-Menus'!SelectionMenu subclass: #CustomMenu	instanceVariableNames: 'labels dividers lastDivider title arguments'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Menus'!ChangeSorter removeSelector: #fileIntoNewChangeSet!Smalltalk removeClassNamed: #EmphasizedMenu!Smalltalk removeClassNamed: #StandardFileMenu!