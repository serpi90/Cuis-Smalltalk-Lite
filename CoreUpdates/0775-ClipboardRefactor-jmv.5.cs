'From Cuis 3.0 of 18 January 2011 [latest update: #768] on 19 January 2011 at 4:09:39 pm'!!classDefinition: #HandMorph category: #'Morphic-Kernel'!Morph subclass: #HandMorph	instanceVariableNames: 'mouseFocus keyboardFocus eventListeners mouseListeners keyboardListeners mouseClickState mouseOverHandler lastMouseEvent targetOffset damageRecorder temporaryCursor temporaryCursorOffset hasChanged savedPatch userInitials lastEventBuffer lastKeyDownValue '	classVariableNames: 'DoubleClickTime EventStats NewEventRules NormalCursor PasteBuffer ShowEvents '	poolDictionaries: 'EventSensorConstants'	category: 'Morphic-Kernel'!!Object methodsFor: 'copying' stamp: 'jmv 1/19/2011 13:40'!copyForClipboard	"Some subclasses might need specific behavior..."	^self copy! !!Object methodsFor: 'testing' stamp: 'jmv 1/19/2011 14:03'!is: aSymbol	"A means for cleanly replacing all isXXX like methods.	Please use judiciously!!	Suggested by Igor Stasenko at	http://lists.squeakfoundation.org/pipermail/squeak-dev/2009-June/136793.html	aSymbol is ussually a class name (starting with uppercase) or a protocolo conformance question (starting with lowercase), such as #hasTextSelector, #hasTextProvider, etc."aSymbol class == Symbol ifFalse: [ thisContext sender sender print. aSymbol print ].	^false! !!Clipboard methodsFor: 'initialize' stamp: 'jmv 1/18/2011 22:22'!initialize	contents _ nil.	recent _ OrderedCollection new.! !!Clipboard methodsFor: 'accessing' stamp: 'jmv 1/19/2011 14:11'!retrieveMorph	"Answer a Morph or nil."	| answer |		answer _ self retrieveObject.		"If clipboard contents is already a Text or String, answer it."	(answer is: #Morph) ifTrue: [		^ answer ].	"If clipboard contains a Form, prepare a Text including it."	(answer is: #Form) ifTrue: [		^ ImageMorph new image: answer ].	"If clipboard contents is already a Text or String, answer it."	(answer isString or: [ answer is: #Text ]) ifTrue: [		^ (TextModelMorph			withModel: (TextModel new actualContents: answer asText))				embeddedInMorphicWindowLabeled: 'Text editor' ].		"No useful contents"	^nil! !!Clipboard methodsFor: 'accessing' stamp: 'jmv 1/19/2011 15:37'!retrieveObject	"Answer whatever was last stored in the clipboard"	| stringOrNil |	"If the OS clipboard has the id for our contents, or the same characters, then answer the richer Smalltalk object."	stringOrNil _ self retrieveIdOrStringFromOS.	(stringOrNil = (self idFor: contents) or: [ stringOrNil = contents asString])		ifTrue: [			"We copy the object, because the result of each paste operation could be modified independently of the others afterwards			(and the same clipboard contents might be pasted many times)"			^contents copyForClipboard ].	"If we have the ExtendedClipboardInterface, try to get an RTF or Form"	Smalltalk at: #ExtendedClipboardInterface ifPresent: [ :clipboardInterface |		clipboardInterface current retrieveText ifNotNil: [ :text | ^text ].		clipboardInterface current retrieveString ifNotNil: [ :string | ^string ].		clipboardInterface current retrieveForm ifNotNil: [ :form | ^form ]].	"Otherwise answer the string brought by clipboard primitives"	^stringOrNil! !!Clipboard methodsFor: 'accessing' stamp: 'jmv 1/19/2011 16:09'!retrieveStringOrText	"Answer a Text or a String. Appropriate for a Text Editor."	| answer |		answer _ self retrieveObject.		"If clipboard contents is already a Text or String, answer it."	(answer isString or: [ answer is: #Text ]) ifTrue: [		^answer ].		"If clipboard contains a Morph, answer a Text incuding its drawing..."	(answer is: #Morph) ifTrue: [		answer _ answer imageForm offset: 0@0 ].		"If clipboard contains a Form, prepare a Text including it."	(answer is: #Form) ifTrue: [		^Text withForm: answer ].		"Answer some string..."	^answer ifNil: [ '' ] ifNotNil: [ answer printString ]! !!Clipboard methodsFor: 'accessing' stamp: 'jmv 1/19/2011 15:38'!storeObject: anObject	"Set new contents on the clipboard.  Also export to OS.	anObject can be a:		String		Text		Form		Morph		Object.	OS clipboard supports String. Other formats might be supported if ExtendedClipboardInterface is present and operative."	| primitiveFormat id |	"Store a copy of the object. This is appropriate in case the original object is modified after being copied to the clipboard.	Another copy must be made again when pasting, as the same object could be pasted many times."	contents _ anObject copyForClipboard.	self noteRecentClipping: contents.	"Store on OS clipboard using ExtendedClipboardInterface if present"	Smalltalk at: #ExtendedClipboardInterface ifPresent: [ :clipboardInterface | | interface |		interface _ clipboardInterface current.		interface canStore ifTrue: [			id _ self idFor: contents.			contents isString				ifTrue: [ ^interface storeString: contents id: id ].			(contents is: #Text)				ifTrue: [ ^interface storeText: contents id: id ].			(contents is: #Form)				ifTrue: [ ^interface storeForm: contents id: id ].			(contents is: #Morph)				ifTrue: [ ^interface storeForm: contents imageForm id: id ].			^interface storeString: contents asString id: id ]].	"Otherwise use the clipboard primitives in the VM"	"The VM uses UTF-8 for clipboard"	primitiveFormat _ ((self stringOrIdFor: contents) withLineEndings: String lf) iso8859s15ToUtf8.	self primitiveClipboardString: primitiveFormat! !!Clipboard methodsFor: 'primitives' stamp: 'jmv 1/18/2011 22:36'!primitiveClipboardString	"Get the current clipboard string. Return the empty string if the primitive fails."	<primitive: 141>	^ ''! !!Clipboard methodsFor: 'primitives' stamp: 'jmv 1/18/2011 22:36'!primitiveClipboardString: aString	"Set the current clipboard to the given string."	<primitive: 141>	"don't fail if the primitive is not implemented"! !!Clipboard methodsFor: 'private' stamp: 'jmv 1/19/2011 15:03'!idFor: anObject	"	Clipboard default stringOrIdFor: Smalltalk	"	^{anObject class. anObject hash} printString! !!Clipboard methodsFor: 'private' stamp: 'jmv 1/19/2011 14:03'!noteRecentClipping: text	"Keep most recent clippings in a queue for pasteRecent (paste... command)"	(text isString or: [text is: #Text]) ifFalse: [^self ].	text isEmpty ifTrue: [^ self].	text size > 50000 ifTrue: [^ self].	(recent includes: text) ifTrue: [^ self].	recent addFirst: text.	[recent size > 5] whileTrue: [recent removeLast].! !!Clipboard methodsFor: 'private' stamp: 'jmv 1/19/2011 15:36'!retrieveIdOrStringFromOS	"Use a specific content type if ExtendedClipboard is active.	Otherwise, use regular clipboard primitives"	| primitiveFormat |	Smalltalk at: #ExtendedClipboardInterface ifPresent: [ :clipboardInterface |		clipboardInterface current retrieveId ifNotNil: [ :id | ^id ]].			primitiveFormat _ self primitiveClipboardString.	"Clipboard primitives answer an empty string if there is no string in OS clipboard.	We prefer nil"	primitiveFormat isEmpty ifTrue: [ ^nil ].	"The VM uses UTF-8 for clipboard"	^primitiveFormat utf8ToISO8859s15 withSqueakLineEndings! !!Clipboard methodsFor: 'private' stamp: 'jmv 1/19/2011 15:05'!stringOrIdFor: anObject	"	Clipboard default stringOrIdFor: Smalltalk	"	anObject isString ifTrue: [ ^anObject ].	(anObject is: #Text) ifTrue: [ ^anObject asString ].	^self idFor: anObject! !!Clipboard class methodsFor: 'default clipboard' stamp: 'jmv 1/19/2011 14:05'!retrieveMorph	"Answer a Morph"	^self default retrieveMorph! !!Clipboard class methodsFor: 'default clipboard' stamp: 'jmv 1/18/2011 23:40'!retrieveObject	"Answer whatever was last stored in the clipboard"	^self default retrieveObject! !!Clipboard class methodsFor: 'default clipboard' stamp: 'jmv 1/18/2011 23:39'!retrieveStringOrText	"Answer a Text or a String. Appropriate for a Text Editor."	^self default retrieveStringOrText! !!Clipboard class methodsFor: 'default clipboard' stamp: 'jmv 1/18/2011 23:40'!storeObject: aTextOrStringOrFormOrObject	"Set text currently on the clipboard.  Also export to OS"	^self default storeObject: aTextOrStringOrFormOrObject! !!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 1/18/2011 23:42'!copyName	"Copy the current selector to the clipboard"	| selector |	(selector _ self selectedMessageName) ifNotNil: [		Clipboard storeObject: selector asString ]! !!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 1/18/2011 23:43'!copySelector	"Copy the selected selector to the clipboard"	| selector |	(selector _ self selectedMessageName) ifNotNil: [		Clipboard storeObject: selector asString]! !!DictionaryInspector methodsFor: 'menu' stamp: 'jmv 1/18/2011 23:43'!copyName	"Copy the name of the current variable, so the user can paste it into the 	window below and work with is. If collection, do (xxx at: 1)."	| sel |	self selectionIndex <= self numberOfFixedFields		ifTrue: [super copyName]		ifFalse: [sel := String streamContents: [:strm | 							strm nextPutAll: '(self at: '.							(keyArray at: selectionIndex - self numberOfFixedFields)								storeOn: strm.							strm nextPutAll: ')'].			Clipboard storeObject: sel 			"no undo allowed"]! !!Editor methodsFor: 'menu messages' stamp: 'jmv 1/18/2011 23:41'!clipboardText	^ Clipboard retrieveStringOrText! !!Editor methodsFor: 'menu messages' stamp: 'jmv 1/18/2011 23:43'!clipboardTextPut: textOrString	^ Clipboard storeObject: textOrString! !!FileList methodsFor: 'menu messages' stamp: 'jmv 1/18/2011 23:46'!copyName	listIndex = 0 ifTrue: [^ self].	Clipboard storeObject: self fullName! !!FormSetFont class methodsFor: 'examples' stamp: 'jmv 1/18/2011 23:46'!copy: charForm toClipBoardAs: char ascent: ascent	Clipboard storeObject:		(Text string: char asString			attribute: (TextFontReference toFont: 				(FormSetFont new					fromFormArray: (Array with: charForm)					asciiStart: char asciiValue					ascent: ascent)))"	The S in the Squeak welcome window was installed by doing the following	in a workspace (where the value of, eg, charForm will persist through BitEdit...	f _ TextStyle default fontAt: 4.	oldS _ f characterFormAt: $S.	charForm _ Form extent: oldS extent depth: 8.	oldS displayOn: charForm.	charForm bitEdit.	...Play around with the BitEditor, then accept and close...	FormSetFont copy: charForm toClipBoardAs: $S ascent: f ascent.	...Then do a paste into the Welcome window"! !!MessageNames methodsFor: 'message list menu' stamp: 'jmv 1/18/2011 23:46'!copyName	"Copy the current selector to the clipboard"	| selector |	(selector _ self selectorList at: selectorListIndex ifAbsent: nil) ifNotNil: [		Clipboard storeObject: selector asString ]! !!Morph methodsFor: 'copying' stamp: 'jmv 1/19/2011 13:40'!copyForClipboard	"Some subclasses might need specific behavior..."	| m |	m _ self copy.	m privateOwner: nil.	^m! !!Morph methodsFor: 'meta-actions' stamp: 'jmv 1/19/2011 13:50'!copyToPasteBuffer: evt	self okayToDuplicate ifTrue: [ Clipboard storeObject: self]! !!HandMorph methodsFor: 'events-processing' stamp: 'jmv 1/19/2011 13:46'!handleEvent: anEvent	| evt ofs |	owner ifNil:[^self].	evt _ anEvent.ShowEvents == true ifTrue:[	EventStats ifNil:[EventStats _ IdentityDictionary new].	EventStats at: #count put: (EventStats at: #count ifAbsent:[0]) + 1.	EventStats at: evt type put: (EventStats at: evt type ifAbsent:[0]) + 1.].	evt isMouseOver ifTrue:[^self sendMouseEvent: evt].ShowEvents == true ifTrue:[	Display fill: (0@0 extent: 250@120) rule: Form over fillColor: Color white.	ofs _ (owner hands indexOf: self) - 1 * 60.	evt printString displayAt: (0@ofs) + (evt isKeyboard ifTrue:[0@30] ifFalse:[0@0]).	self keyboardFocus printString displayAt: (0@ofs)+(0@45).].	"Notify listeners"	self sendListenEvent: evt to: self eventListeners.		evt isWindowEvent ifTrue: [		self sendEvent: evt.		^ self mouseOverHandler processMouseOver: lastMouseEvent ].	evt isKeyboard ifTrue:[		self sendListenEvent: evt to: self keyboardListeners.		self sendKeyboardEvent: evt.		^self mouseOverHandler processMouseOver: lastMouseEvent].	evt isDropEvent ifTrue:[		self sendEvent: evt.		^self mouseOverHandler processMouseOver: lastMouseEvent].	evt isMouse ifTrue:[		self sendListenEvent: evt to: self mouseListeners.		lastMouseEvent _ evt].	"Check for pending drag or double click operations."	mouseClickState ifNotNil:[		(mouseClickState handleEvent: evt from: self) ifFalse:[			"Possibly dispatched #click: or something and will not re-establish otherwise"			^self mouseOverHandler processMouseOver: lastMouseEvent]].	evt isMove ifTrue:[		self position: evt position.		self sendMouseEvent: evt.	] ifFalse:[		"Issue a synthetic move event if we're not at the position of the event"		(evt position = self position) ifFalse:[self moveToEvent: evt].		"Drop submorphs on button events"		(self hasSubmorphs) 			ifTrue:[self dropMorphs: evt]			ifFalse:[self sendMouseEvent: evt].	].	ShowEvents == true ifTrue:[self mouseFocus printString displayAt: (0@ofs) + (0@15)].	self mouseOverHandler processMouseOver: lastMouseEvent.! !!HandMorph methodsFor: 'paste buffer' stamp: 'jmv 1/19/2011 14:02'!pasteMorph	| pastee |	pastee _ Clipboard retrieveMorph.	pastee ifNil: [^ self inform: 'Nothing to paste.'].	self attachMorph: pastee.	pastee align: pastee center with: self position! !!HandMorph class methodsFor: 'class initialization' stamp: 'jmv 1/19/2011 14:02'!initialize	"HandMorph initialize"	DoubleClickTime _ 350.	NormalCursor _ CursorWithMask normal asCursorForm.	EventStats _ nil! !!PluggableListMorph methodsFor: 'menus' stamp: 'jmv 1/18/2011 23:46'!copyListToClipboard	"Copy my items to the clipboard as a multi-line string"	| stream |	stream _ WriteStream on: (String new: list size * 40).	list do: [:ea | stream nextPutAll: ea asString] separatedBy: [stream nextPut: Character cr].	Clipboard storeObject: stream contents! !!PluggableListMorph methodsFor: 'menus' stamp: 'jmv 1/18/2011 23:46'!copySelectionToClipboard	"Copy my selected item to the clipboard as a string"	self selection		ifNotNil:			[Clipboard storeObject: self selection asString]		ifNil:			[self flash]! !!Preference methodsFor: 'menu' stamp: 'jmv 1/18/2011 23:46'!copyName	"Copy the name of the given preference to the clipboard"	Clipboard storeObject: name asString! !!SetInspector methodsFor: 'menu commands' stamp: 'jmv 1/18/2011 23:46'!copyName	"Copy the name of the current variable, so the user can paste it into the 	window below and work with is. If collection, do (xxx at: 1)."	| sel |	self selectionIndex <= (2 + object class instSize)		ifTrue: [super copyName]		ifFalse: [sel := '(self array at: '						, (String streamContents: 							[:strm | self arrayIndexForSelection storeOn: strm]) , ')'.			Clipboard storeObject: sel ]! !!TextEditor methodsFor: 'menu messages' stamp: 'jmv 1/18/2011 23:46'!pasteRecent	"Paste an item chose from RecentClippings."	| clipping |	(clipping _ Clipboard chooseRecentClipping) ifNil: [^ self].	Clipboard storeObject: clipping.	^ self paste! !!TextModelMorph methodsFor: 'menu commands' stamp: 'jmv 1/18/2011 23:46'!pasteRecent	"Paste an item chosen from RecentClippings."	| clipping |	(clipping _ Clipboard chooseRecentClipping) ifNil: [^ self].	Clipboard storeObject: clipping.	^ self handleEdit: [ self editor paste ]! !UndefinedObject removeSelector: #from3DS:!UndefinedObject removeSelector: #haltIfNil!HandMorph initialize!HandMorph class removeSelector: #newEventRules:!HandMorph removeSelector: #copyToPasteBuffer:!HandMorph removeSelector: #isCapturingGesturePoints!HandMorph removeSelector: #objectToPaste!HandMorph removeSelector: #pasteBuffer!HandMorph removeSelector: #pasteBuffer:!!classDefinition: #HandMorph category: #'Morphic-Kernel'!Morph subclass: #HandMorph	instanceVariableNames: 'mouseFocus keyboardFocus eventListeners mouseListeners keyboardListeners mouseClickState mouseOverHandler lastMouseEvent targetOffset damageRecorder temporaryCursor temporaryCursorOffset hasChanged savedPatch userInitials lastEventBuffer lastKeyDownValue'	classVariableNames: 'DoubleClickTime EventStats NormalCursor ShowEvents'	poolDictionaries: 'EventSensorConstants'	category: 'Morphic-Kernel'!Clipboard class removeSelector: #clipboardText!Clipboard class removeSelector: #clipboardText:!Clipboard removeSelector: #clipboardText!Clipboard removeSelector: #clipboardText:!Clipboard removeSelector: #primitiveClipboardText!Clipboard removeSelector: #primitiveClipboardText:!Clipboard removeSelector: #retrieveStringFromOS!ProtoObject removeSelector: #haltIfNil!