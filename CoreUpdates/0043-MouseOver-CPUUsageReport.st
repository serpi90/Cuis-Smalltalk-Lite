'From Squeak3.7 of ''4 September 2004'' [latest update: #5989] on 21 July 2008 at 11:05:10 am'!!LightWidget methodsFor: 'events-processing' stamp: 'jmv 3/23/2008 17:52'!handleMouseOver: anEvent	"System level event handling."	anEvent hand mouseFocus == self ifTrue:[		"Got this directly through #handleFocusEvent: so check explicitly"		(self containsPoint: anEvent position event: anEvent) ifFalse:[^self]].	anEvent hand noticeMouseOver: self event: anEvent! !!OldHandMorph methodsFor: 'event handling' stamp: 'jmv 7/21/2008 10:49'!processEvents	"Process user input events from the local input devices."	| evt evtBuf type hadAny |	ActiveEvent ifNotNil: 			["Meaning that we were invoked from within an event response.		Make sure z-order is up to date"			self mouseOverHandler processMouseOver: lastMouseEvent].	hadAny := false.	[(evtBuf := Sensor nextEvent) isNil] whileFalse: 			[evt := nil.	"for unknown event types"			type := evtBuf first.			type = EventTypeMouse ifTrue: [evt := self generateMouseEvent: evtBuf].			type = EventTypeKeyboard 				ifTrue: [evt := self generateKeyboardEvent: evtBuf].			type = EventTypeDragDropFiles 				ifTrue: [evt := self generateDropFilesEvent: evtBuf].			"All other events are ignored"			(type ~= EventTypeDragDropFiles and: [evt isNil]) ifTrue: [^self].			evt isNil 				ifFalse: 					["Finally, handle it"					self handleEvent: evt.					hadAny := true.					"For better user feedback, return immediately after a mouse event has been processed."					evt isMouse ifTrue: [^self]]].	"note: if we come here we didn't have any mouse events"	mouseClickState notNil 		ifTrue: 			["No mouse events during this cycle. Make sure click states time out accordingly"			mouseClickState handleEvent: lastMouseEvent asMouseMove from: self].	hadAny 		ifFalse: 			["No pending events. Make sure z-order is up to date"			"JMV			Try to understand why this was ever needed.			It is very expensive in slow hardware, for example in Cytec's STB.			And in any case, why would this be needed if no event was processed?			I believe that this is a bad solution for some problem.			When we encounter it, we must think of a better one!!			"			"			self mouseOverHandler processMouseOver: lastMouseEvent			"			]! !!ProcessBrowser class methodsFor: 'CPU utilization' stamp: 'jmv 7/21/2008 10:05'!dumpPigStackOn: aStream andClose: aBoolean
	| promise process depth stack suspendedContext |
	promise := Processor tallyCPUUsageFor: 1 every: 10.
	
	[ | tally |	
	tally := promise value.
		"OldWorldState addDeferredUIMessage: [self dumpTallyOnTranscript: tally]" 		process _ tally sortedCounts first value.		(100.0 * (tally occurrencesOf: process) / tally size) rounded printOn: aStream.		aStream			nextPutAll: ' % ';			nextPutAll: (process browserPrintStringWith: (ProcessBrowser nameAndRulesFor: process) first);			cr.		depth _ 20.		stack _ process == Processor activeProcess			ifTrue: [thisContext stackOfSize: depth]			ifFalse: [suspendedContext _ process suspendedContext.				suspendedContext					ifNil: [self changeStackListTo: nil]					ifNotNil: [suspendedContext stackOfSize: depth]].		stack do: [ :c | 			c printOn: aStream.			aStream cr].		aBoolean ifTrue: [aStream close].	] fork! !