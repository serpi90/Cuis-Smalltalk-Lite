'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 20 May 2011 at 10:22:30 am'!!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 5/20/2011 10:08'!appearanceMenu	"Build the appearance menu for the world."		^self fillIn: (self menu: 'Appearance...') from: {		{'Themes...' . {Theme . #changeTheme} . 'switch to another theme.'}.		{'Icons...' . {Theme . #changeIcons} . 'show more or less icons.'}.		nil.		{'Show taskbar' . {Taskbar . #show} . 'show the taskbar'}.		{'Hide taskbar' . {Taskbar . #hide} . 'hide the taskbar'}.		nil.		{'System fonts...' . { self . #standardFontDo} . 'Choose the standard fonts to use for code, lists, menus, window titles, etc.'}.		nil.		{'Full screen on' . { self . #fullScreenOn} . 'puts you in full-screen mode, if not already there.'}.		{'Full screen off' . { self . #fullScreenOff} . 'if in full-screen mode, takes you out of it.'}.		nil.		{'Set display depth...' . {self. #setDisplayDepth} . 'choose how many bits per pixel.'}.		{'Set desktop color...' . {self. #changeBackgroundColor} . 'choose a uniform color to use as desktop background.'}.	}! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 5/20/2011 10:05'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu := MenuMorph new defaultTarget: self.	self colorForDebugging: menu.	menu addStayUpIcons.	self fillIn: menu		from: { 				{ 					'Restore Display (r)'.					{ 						World.						#restoreMorphicDisplay}.					'repaint the screen -- useful for removing unwanted display artifacts, lingering cursors, etc.'}.				nil}.	Preferences simpleMenus 		ifFalse: 			[self fillIn: menu				from: { 						{ 							'Open...'.							{ 								self.								#openWindow}}.						{ 							'Windows...'.							{ 								self.								#windowsDo}}.						{ 							'Changes...'.							{ 								self.								#changesDo}}}].	self fillIn: menu		from: { 				{ 					'Help...'.					{ 						self.						#helpDo}.					'puts up a menu of useful items for updating the system, determining what version you are running, and much else'}.				{ 					'Appearance...'.					{ 						self.						#appearanceDo}.					'put up a menu offering many controls over appearance.'}}.	Preferences simpleMenus 		ifFalse: [			self fillIn: menu				from: { 						{ 							'Do...'.							{ 								Utilities.								#offerCommonRequestsInMorphic}.							'put up an editible list of convenient expressions, and evaluate the one selected.'}}].	self fillIn: menu		from: { 				nil.				{ 					'New morph...'.					{ 						self.						#newMorph}.					'Offers a variety of ways to create new objects'}.				}.	Preferences simpleMenus 		ifFalse: [			self fillIn: menu				from: { 						{ 							'Debug...'.							{ 								self.								#debugDo}.							'a menu of debugging items'}}].	self fillIn: menu		from: { 				nil.				{ 					'Save'.					{ 						Smalltalk .						#saveSession}.					'save the current version of the image on disk'}.				{ 					'Save as...'.					{ 						Smalltalk .						#saveAs}.					'save the current version of the image on disk under a new name.'}.				{ 					'Save as New Version'.					{ 						Smalltalk .						#saveAsNewVersion}.					'give the current image a new version-stamped name and save it under that name on disk.'}.				{ 					'Save and Quit'.					{ 						self.						#saveAndQuit}.					'save the current image on disk, and quit out of Cuis.'}.				{ 					'Quit'.					{ 						self.						#quitSession}.					'quit out of Cuis.'}}.	^menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 5/20/2011 10:10'!changesMenu        "Build the changes menu for the world."        | menu |        menu _ self menu: 'Changes...'.        self fillIn: menu from: {                { 'File out current Change Set' . { ChangeSet current . #verboseFileOut}.                                'Write the current change set out to a file whose name reflects the change set name and the current date & time.'}.                { 'Create new Change Set...' . { ChangeSorter . #newChangeSet}. 'Create a new change set and make it the current one.'}.                nil.                { 'Simple Change Sorter' . {self. #openChangeSorter1}.  'Open a 3-paned changed-set viewing tool'}.                { 'Dual Change Sorter' . {self. #openChangeSorter2}.                                'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'}.                nil.                { 'Browse recent Submissions' . { #myWorld . #openRecentSubmissionsBrowser:}.                                'Make an open recent-submissions browser be the front-window, expanding a collapsed one or creating a new one if necessary.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted, latest first.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions at the top of the browser.'}.                { 'Recently logged Changes...' . { ChangeList . #browseRecentLog}.'Open a change-list browser on the latter part of the changes log.  You can use this browser to recover logged changes which were not saved in your image, in the event of a crash or other interruption.'}.                nil.                { 'Save World as morph file' . {self. #saveWorldInFile}. 'Save a file that, when reloaded, reconstitutes the current World.'}.        }.        ^ menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 5/20/2011 10:10'!debugMenu        | menu |        menu _ self menu: 'Debug...'.        ^self fillIn: menu from: {                 { 'Inspect World' . { #myWorld . #inspect } }.                { 'Explore World' . { #myWorld . #explore } }.                { 'MessageTally all Processes' . { self . #startMessageTally } }.                { 'MessageTally UI and Browse' . { self . #startThenBrowseMessageTally } }.                nil.                { 'Start drawing all again' . { #myWorld . #removeAllKnownFailing } }.                { 'Start stepping again' . { #myWorld . #resumeAfterStepError } }.                { 'Close all Debuggers' . { DebuggerWindow . #closeAllDebuggers } }.        }! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 5/20/2011 10:20'!helpMenu        "Build the help menu for the world."        |  menu |  	menu := self menu: 'Help...'.        self fillIn: menu from:        {                {'About this System...'. {Smalltalk. #aboutThisSystem}. 'current version information.'}.                {'Preferences...'. {Preferences. #openPreferencesInspector}. 'view and change various options.'}.                nil.               {'Command-key Help'. { Utilities . #openCommandKeyHelp}. 'summary of keyboard shortcuts.'}	}.	self addGestureHelpItemsTo: menu.	self fillIn: menu from:	{                {'World menu Help'. { self . #worldMenuHelp}. 'helps find menu items buried in submenus.'}.                {'Useful Expressions' . { Utilities . #openStandardWorkspace}. 'a window full of useful expressions.'}.                nil.                {'Set Author initials...' . { Utilities . #setAuthorInitials }. 'supply initials to be used to identify the author of code and other content.'}.                {'VM Statistics' . { self . #vmStatistics}.  'obtain some intriguing data about the vm.'}.			nil.                {'Space Left' . { self . #garbageCollect}. 'perform a full garbage-collection and report how many bytes of space remain in the image.'}.        }.	^menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 5/20/2011 10:21'!newMorph	"The user requested 'new morph' from the world menu.  Put up a menu that allows many ways of obtaining new morphs.  If the preference #classicNewMorphMenu is true, the full form of yore is used; otherwise, a much shortened form is used."	| menu subMenu catDict shortCat class |	menu _ self menu: 'Add a new morph'.	menu		add: 'From Clipboard'		target: myHand		action: #pasteMorph;				add: 'From Alphabetical List'		subMenu: self alphabeticalMorphMenu.	menu addLine.	Preferences classicNewMorphMenu ifTrue: [		menu addLine.		catDict _ Dictionary new.		SystemOrganization categories do: [ :cat |			((cat beginsWith: 'Morphic-') and: [ (#('Morphic-Menus' 'Morphic-Support' ) includes: cat) not ]) ifTrue: [				shortCat _ (cat					copyFrom: 'Morphic-' size + 1					to: cat size).				(SystemOrganization listAtCategoryNamed: cat) do: [ :cName |					class _ Smalltalk at: cName.					((class inheritsFrom: Morph) and: [ class includeInNewMorphMenu ]) ifTrue: [						(catDict includesKey: shortCat)							ifTrue: [ (catDict at: shortCat) addLast: class ]							ifFalse: [								catDict									at: shortCat									put: (OrderedCollection with: class) ]]]]].		catDict keys sort do: [ :categ |			subMenu _ MenuMorph new.			((catDict at: categ) asArray sort: [ :c1 :c2 |				c1 name < c2 name ]) do: [ :cl |				subMenu					add: cl name					target: self					selector: #newMorphOfClass:event:					argument: cl ].			menu				add: categ				subMenu: subMenu ]].	self doPopUp: menu.! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 5/20/2011 10:12'!openMenu	"Build the open window menu for the world."	| menu |	menu _ self menu: 'Open...'.	self fillIn: menu from: {		{'Browser' . { self . #openBrowser}. 'A five-paned tool that lets you see all the code in the system'}.		{'Workspace' . {self . #openWorkspace}. 'A window for evaluating Smalltalk expressions' }.		{'Text Editor' . {self . #openTextEditor}. 'A window for composing text' }.		{'File List' . {self . #openFileList} . 'A tool allowing you to browse any file' }.		{'Transcript' . {self . #openTranscript}. 'A window used to report messages sent to Transcript' }.		{ 'Process Browser' . { ProcessBrowserWindow . #openProcessBrowser } }.		{ 'Emergency Evaluator'. { Transcripter. #emergencyEvaluator } }.		"{'inner world' . { WorldWindow . #test1} }."		nil.		{'Message Names' . { self . #openMessageNames} . 'A tool for finding and editing methods that contain any given keyword in their names.'}.		nil.		{'Simple Change Sorter' . {self . #openChangeSorter1} . 'A tool allowing you to view the methods in a single change set' }.		{'Dual Change Sorter' . {self . #openChangeSorter2} . 'A tool allowing you to compare and manipulate two change sets concurrently' }.		nil.		{'SUnit Test Runner' . {TestRunnerWindow . #openTestRunner} . 'A tool allowing you to compare and manipulate two change sets concurrently' }.	}.	^menu! !!TheWorldMenu methodsFor: 'windows & flaps menu' stamp: 'jmv 5/20/2011 10:19'!windowsMenu        "Build the windows menu for the world."	^ self fillIn: (self menu: 'Windows') from: {  		{ 'Find Window' . { #myWorld . #findWindow: }. 'Presents a list of all windows; if you choose one from the list, it becomes the active window.'}.		{ 'Find changed Browsers...' . { #myWorld . #findDirtyBrowsers: }. 'Presents a list of browsers that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.		{ 'Find changed Windows...' . { #myWorld . #findDirtyWindows: }. 'Presents a list of all windows that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.		nil.		{ 'Find a Transcript' . { #myWorld . #findATranscript: }. 'Brings an open Transcript to the front, creating one if necessary, and makes it the active window'}.		{ 'Find a FileList' . { #myWorld . #findAFileList: }. 'Brings an open fileList  to the front, creating one if necessary, and makes it the active window'}.		{ 'Find a Change Sorter' . { #myWorld . #findAChangeSorter: }. 'Brings an open change sorter to the front, creating one if necessary, and makes it the active window'}.		{ 'Find Message Names' . { #myWorld . #findAMessageNamesWindow: }. 'Brings an open MessageNames window to the front, creating one if necessary, and makes it the active window'}.		nil.		{ #staggerPolicyString . { self . #toggleWindowPolicy }. 'stagger: new windows positioned so you can see a portion of each one.			tile: new windows positioned so that they do not overlap others, if possible.'}.		nil.		{ 'Collapse all Windows' . { #myWorld . #collapseAll }. 'Reduce all open windows to collapsed forms that only show titles.'}.		{ 'Expand all Windows' . { #myWorld . #expandAll }. 'Expand all collapsed windows back to their expanded forms.'}.		{ 'Close top Window' . { SystemWindow . #closeTopWindow }. 'Close the topmost window if possible.'}.		{ 'Send top Window to back' . { SystemWindow . #sendTopWindowToBack  }. 'Make the topmost window become the backmost one, and activate the window just beneath it.'}.		{ 'Move Windows onscreen' . { #myWorld . #bringWindowsFullOnscreen }. 'Make all windows fully visible on the screen'}.		nil.		{ 'Delete unchanged Windows' . { #myWorld . #closeUnchangedWindows }. 'Deletes all windows that do not have unsaved text edits.'}.		{ 'Delete non Windows' . { #myWorld . #deleteNonWindows }. 'Deletes all non-window morphs lying on the world.'}.		{ 'Delete Both of the Above' . { self . #cleanUpWorld }. 'deletes all unchanged windows and also all non-window morphs lying on the world, other than flaps.'}.	}! !!Theme methodsFor: 'menus' stamp: 'jmv 5/20/2011 10:18'!basicIcons"Minimal menu scheme."	^ { 		#('open...') -> #openIcon.		#('windows...' 'find window') -> #windowIcon.		#('help...' 'explain' 'about this system...') -> #helpIcon.		#('appearance...' 'themes...') -> #appearanceIcon.		#('do...' 'Cursor normal show.' 'do it (d)') -> #doItIcon.		#('new morph...' 'objects (o)' 'save world as morph file') -> #morphsIcon.		#('save' 'save project on file...' ) -> #saveIcon.		#('save as...' 'change category...' 'rename change set (r)' 'rename') -> #saveAsIcon.		#('save as new version') -> #saveAsNewVersionIcon.		#('quit') -> #quitIcon.		#('save and quit' ) -> #saveAndQuitIcon.		#('inspect it (i)' 'inspect world'  'inspect model' 'inspect morph'		 'inspect owner chain' 'inspect' 'inspect (i)' 'basic inspect' 'message names' 'find message names' 'inspect instances' 'inspect subinstances' 'inspect change set' 'inspect context (c)' 'inspect receiver (i)' 'start CPUWatcher')			-> #inspectIcon.		#('explore' 'explore it (I)' 'explore world' 'explore morph' 'explore (I)' 'explore context (C)' 'explore receiver (I)') -> #exploreIcon.		#('find...(f)' 'find class... (f)' 'find method...' 'find recent submissions' 'show hierarchy' 'show definition' 'show comment' 'filter' 'filter message list...' 'find context... (f)') -> #findIcon.		#('add item...' 'new category...' 'create new change set...' 'new change set... (n)' 'add new file') -> #newIcon.		#('remove method (x)' 'remove' 'remove class (x)' 'remove method from system (x)' 'remove class from system (x)' 'remove postscript') -> #deleteIcon.		#('delete method from changeset (d)' 'delete class from change set (d)' 'destroy change set (X)' 'revert & remove from changes' 'delete unchanged windows' 'delete non windows' 'delete both of the above' 'reset variables' 'remove contained in class categories...' 'clear this change set' 'uninstall this change set' 'delete directory...' 'delete') -> #warningIcon.		#('do again (j)' ) -> #redoIcon.		#('undo (z)' 'revert to previous version') -> #undoIcon.		#('copy (c)' 'copy class...' 'copy class chgs to other side' 'copy method to other side' 'copy all to other side (c)' 'copy name to clipboard' 'copy selector to clipboard') -> #copyIcon.		#('paste (v)') -> #pasteIcon.		#('cut (x)' 'move class chgs to other side' 'move method to other side' 'submerge into other side') -> #cutIcon.		#('paste...' 'icons...') -> #worldIcon.}! !