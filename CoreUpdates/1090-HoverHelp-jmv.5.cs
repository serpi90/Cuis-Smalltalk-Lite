'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 26 September 2011 at 8:31:09 am'!!classDefinition: #HoverHelpMorph category: #'Morphic-Widgets'!Morph subclass: #HoverHelpMorph	instanceVariableNames: 'contents paragraph'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!HoverHelpMorph commentStamp: '<historical>' prior: 0!A balloon with text used for the display of explanatory information.!!Morph methodsFor: 'halos and balloon help' stamp: 'jmv 9/25/2011 23:02'!showBalloon: msgString hand: aHand	"Pop up a balloon containing the given string,	first removing any existing BalloonMorphs in the world."	| w balloon h |	(w _ self world) ifNil: [^ self].	h _ aHand.	h ifNil:[		h _ w activeHand].	balloon _ HoverHelpMorph contents: msgString.	balloon popUpForHand: h.! !!HoverHelpMorph methodsFor: 'initialization' stamp: 'jmv 9/25/2011 23:12'!defaultColor	^Color r: 1.0 g: 1.0 b: 0.7! !!HoverHelpMorph methodsFor: 'initialization' stamp: 'jmv 9/26/2011 08:30'!popUpForHand: aHand	"Pop up the receiver as balloon help for the given hand"	| xcess |	self position: aHand position + (-6@20).	xcess _ bounds right - aHand world bounds right.	xcess > 0 ifTrue: [		self position: self position - (xcess@0) ].	aHand world addMorphFront: self.	aHand balloonHelp: self! !!HoverHelpMorph methodsFor: 'accessing' stamp: 'jmv 9/25/2011 23:11'!contents: aString	contents _ aString.	paragraph _ Paragraph new.	paragraph		setModel: (TextModel withText: contents asText)		extentForComposing: 9999999@9999999.	paragraph composeAll.	self extent: paragraph usedExtent + 8! !!HoverHelpMorph methodsFor: 'drawing' stamp: 'jmv 9/25/2011 23:11'!drawOn: aCanvas	aCanvas roundRect: bounds color: self color radius: 2.	aCanvas		paragraph: paragraph		bounds: (bounds insetBy: 4)		color: Color black.! !!HoverHelpMorph class methodsFor: 'instance creation' stamp: 'jmv 9/25/2011 23:01'!contents: aString	"Make up and return a HoverHelp for morph."	^self new contents: aString! !!MenuMorph methodsFor: 'keyboard control' stamp: 'jmv 9/25/2011 23:02'!keyStroke: evt 	| matchString char asc selectable help |	help _ HoverHelpMorph contents: 'Enter text to\narrow selection down\to matching items ' withCRs.	help popUpForHand: self activeHand.	char := evt keyCharacter.	asc := char asciiValue.	char = Character cr 		ifTrue: 			[selectedItem ifNotNil: 					[selectedItem hasSubMenu 						ifTrue: 							[evt hand newMouseFocus: selectedItem subMenu.							^evt hand newKeyboardFocus: selectedItem subMenu]						ifFalse: 							["self delete."							^selectedItem invokeWithEvent: evt]].			(selectable := self items) size = 1 				ifTrue: [^selectable first invokeWithEvent: evt].			^self].	asc = 27 		ifTrue: 			["escape key"			self valueOfProperty: #matchString				ifPresentDo: 					[:str | 					str isEmpty 						ifFalse: 							["If filtered, first ESC removes filter"							self setProperty: #matchString toValue: String new.							self selectItem: nil event: evt.							^self displayFiltered: evt]].			"If a stand-alone menu, just delete it"			popUpOwner ifNil: [^self delete].			"If a sub-menu, then deselect, and return focus to outer menu"			self selectItem: nil event: evt.			evt hand newMouseFocus: popUpOwner owner.			^evt hand newKeyboardFocus: popUpOwner owner].	(asc = 28 or: [asc = 29]) 		ifTrue: 			["left or right arrow key"			(selectedItem notNil and: [selectedItem hasSubMenu]) 				ifTrue: 					[evt hand newMouseFocus: selectedItem subMenu.					selectedItem subMenu moveSelectionDown: 1 event: evt.					^evt hand newKeyboardFocus: selectedItem subMenu]].	asc = 30 ifTrue: [^self moveSelectionDown: -1 event: evt].	"up arrow key"	asc = 31 ifTrue: [^self moveSelectionDown: 1 event: evt].	"down arrow key"	asc = 11 ifTrue: [^self moveSelectionDown: -5 event: evt].	"page up key"	asc = 12 ifTrue: [^self moveSelectionDown: 5 event: evt].	"page down key"	matchString := self valueOfProperty: #matchString ifAbsentPut: [String new].	matchString := char = Character backspace 				ifTrue: 					[matchString isEmpty ifTrue: [matchString] ifFalse: [matchString allButLast]]				ifFalse: [matchString copyWith: evt keyCharacter].	self setProperty: #matchString toValue: matchString.	self displayFiltered: evt.	help _ HoverHelpMorph string: 'Enter text to\narrow selection down\to matching items ' withCRs.	help popUpForHand: self activeHand.! !!Paragraph methodsFor: 'access' stamp: 'jmv 9/25/2011 22:45'!usedExtent	^ maxRightX @ (lines last bottom - lines first top)! !!Preferences class methodsFor: 'fonts' stamp: 'jmv 9/25/2011 22:57'!fontConfigurationMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: Preferences.	aMenu addTitle: 'Standard System Fonts'.	aMenu addStayUpIcons.	aMenu add: 'default text font...' action: #chooseSystemFont.	aMenu balloonTextForLastItem: 'Choose the default font to be used for code and  in workspaces, transcripts, etc.'.	aMenu lastItem font: StrikeFont default.	aMenu add: 'list font...' action: #chooseListFont.	aMenu lastItem font: Preferences standardListFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in list panes'.	aMenu add: 'menu font...' action: #chooseMenuFont.	aMenu lastItem font: Preferences standardMenuFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in menus'.	aMenu add: 'window-title font...' action: #chooseWindowTitleFont.	aMenu lastItem font: Preferences windowTitleFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in window titles.'.	aMenu add: 'code font...' action: #chooseCodeFont.	aMenu lastItem font: Preferences standardCodeFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in code panes.'.	aMenu addLine.	aMenu add: 'restore default font choices' action: #restoreDefaultFonts.	aMenu balloonTextForLastItem: 'Use the standard system font defaults'.	aMenu add: 'print default font choices' action: #printStandardSystemFonts.	aMenu balloonTextForLastItem: 'Print the standard system font defaults to the Transcript'.	^aMenu! !!Preferences class methodsFor: 'fonts' stamp: 'jmv 9/25/2011 22:57'!printStandardSystemFonts	"self printStandardSystemFonts"	#(standardListFont 	standardMenuFont windowTitleFont 	standardCodeFont standardButtonFont) do: [:selector |		| font |		font _ Preferences perform: selector.		Transcript			cr; show: selector;			space; show: font printString]! !!Preferences class methodsFor: 'fonts' stamp: 'jmv 9/25/2011 22:56'!restoreDefaultFonts	"Since this is called from menus, we can take the opportunity to prompt for missing font styles."	"Preferences restoreDefaultFonts"	Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 9)		(setListFontTo: 'DejaVu' 9)		(setMenuFontTo: 'DejaVu' 10)		(setWindowTitleFontTo: 'DejaVu' 12)		(setCodeFontTo: 'DejaVu' 9)		(setButtonFontTo: 'DejaVu' 9))! !!Preferences class methodsFor: 'bigger and smaller GUI' stamp: 'jmv 9/25/2011 22:56'!bigFonts	"Sets not only fonts but other GUI elements	to fit high resolution or large screens	Preferences bigFonts	"		Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 11)		(setListFontTo: 'DejaVu' 11)		(setMenuFontTo: 'DejaVu' 12)		(setWindowTitleFontTo: 'DejaVu' 14)		(setCodeFontTo: 'DejaVu' 11)		(setButtonFontTo: 'DejaVu' 11)).	Preferences enable: #biggerCursors! !!Preferences class methodsFor: 'bigger and smaller GUI' stamp: 'jmv 9/25/2011 22:56'!hugeFonts	"Sets not only fonts but other GUI elements	to fit very high resolution or very large screens	Preferences hugeFonts	"		Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 17)		(setListFontTo: 'DejaVu' 17)		(setMenuFontTo: 'DejaVu' 17)		(setWindowTitleFontTo: 'DejaVu' 22)		(setCodeFontTo: 'DejaVu' 17)		(setButtonFontTo: 'DejaVu' 17)).	Preferences enable: #biggerCursors! !!Preferences class methodsFor: 'bigger and smaller GUI' stamp: 'jmv 9/25/2011 22:56'!smallFonts	"Sets not only fonts but other GUI elements	to fit low resolution or small screens	Preferences smallFonts	"		Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 8)		(setListFontTo: 'DejaVu' 8)		(setMenuFontTo: 'DejaVu' 8)		(setWindowTitleFontTo: 'DejaVu' 11)		(setCodeFontTo: 'DejaVu' 8)		(setButtonFontTo: 'DejaVu' 8)).	Preferences disable: #biggerCursors! !!Preferences class methodsFor: 'bigger and smaller GUI' stamp: 'jmv 9/25/2011 22:55'!standardFonts	"Sets not only fonts but other GUI elements	to fit regular resolution and size screens	Preferences standardFonts	"		Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 9)		(setListFontTo: 'DejaVu' 9)		(setMenuFontTo: 'DejaVu' 10)		(setWindowTitleFontTo: 'DejaVu' 12)		(setCodeFontTo: 'DejaVu' 9)		(setButtonFontTo: 'DejaVu' 9)).	Preferences disable: #biggerCursors! !!Preferences class methodsFor: 'bigger and smaller GUI' stamp: 'jmv 9/25/2011 22:56'!tinyFonts	"Sets not only fonts but other GUI elements	to fit very low resolution or very small screens	Preferences tinyFonts	"		Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 7)		(setListFontTo: 'DejaVu' 5)		(setMenuFontTo: 'DejaVu' 5)		(setWindowTitleFontTo: 'DejaVu' 7)		(setCodeFontTo: 'DejaVu' 5)		(setButtonFontTo: 'DejaVu' 5)).	Preferences disable: #biggerCursors! !!Preferences class methodsFor: 'bigger and smaller GUI' stamp: 'jmv 9/25/2011 22:56'!veryBigFonts	"Sets not only fonts but other GUI elements	to fit very high resolution or very large screens	Preferences veryBigFonts	"		Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 14)		(setListFontTo: 'DejaVu' 14)		(setMenuFontTo: 'DejaVu' 14)		(setWindowTitleFontTo: 'DejaVu' 17)		(setCodeFontTo: 'DejaVu' 14)		(setButtonFontTo: 'DejaVu' 14)).	Preferences enable: #biggerCursors! !!Preferences class methodsFor: 'bigger and smaller GUI' stamp: 'jmv 9/25/2011 22:56'!verySmallFonts	"Sets not only fonts but other GUI elements	to fit low resolution or small screens	Preferences verySmallFonts	"		Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 8)		(setListFontTo: 'DejaVu' 7)		(setMenuFontTo: 'DejaVu' 7)		(setWindowTitleFontTo: 'DejaVu' 9)		(setCodeFontTo: 'DejaVu' 7)		(setButtonFontTo: 'DejaVu' 7)).	Preferences disable: #biggerCursors! !!StrikeFont class methodsFor: 'removing' stamp: 'jmv 9/25/2011 22:56'!removeForPDA"StrikeFont removeForPDA"	| familyDict |	familyDict _ AvailableFonts at: 'DejaVu'.	familyDict keys do: [ :k |		(#(5 6 7 8 9) includes: k) 			ifTrue: [				(familyDict at: k) derivativeFont: nil at: 0 ]			ifFalse: [				familyDict removeKey: k ]].		Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 8)		(setListFontTo: 'DejaVu' 6)		(setMenuFontTo: 'DejaVu' 7)		(setWindowTitleFontTo: 'DejaVu' 9)		(setCodeFontTo: 'DejaVu' 7)		(setButtonFontTo: 'DejaVu' 7))! !!StrikeFont class methodsFor: 'removing' stamp: 'jmv 9/25/2011 22:56'!removeMostFonts"StrikeFont removeMostFonts"	| familyDict |	familyDict _ AvailableFonts at: 'DejaVu'.	familyDict keys do: [ :k |		(#(8 10 12) includes: k) 			ifTrue: [				(familyDict at: k) derivativeFont: nil at: 0 ]			ifFalse: [				familyDict removeKey: k ]].		Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 10)		(setListFontTo: 'DejaVu' 10)		(setMenuFontTo: 'DejaVu' 10)		(setWindowTitleFontTo: 'DejaVu' 12)		(setCodeFontTo: 'DejaVu' 10)		(setButtonFontTo: 'DejaVu' 10))! !!StrikeFont class methodsFor: 'removing' stamp: 'jmv 9/25/2011 22:56'!removeSomeFonts"StrikeFont removeSomeFonts"	| familyDict |	familyDict _ AvailableFonts at: 'DejaVu'.	familyDict keys do: [ :k |		"No boldItalic for the followint"		(#(5 6 7 8 9 10 11 12 14 17 22) includes: k)			ifTrue: [ (familyDict at: k) derivativeFont: nil at: 3 ].		"No derivatives at all for the following"		(#() includes: k)			ifTrue: [ (familyDict at: k) derivativeFont: nil at: 0 ].		"Sizes to keep"		(#(5 6 7 8 9 10 11 12 14 17 22) includes: k) 			ifFalse: [ familyDict removeKey: k ]].		Preferences setDefaultFonts: #(		(setSystemFontTo: 'DejaVu' 9)		(setListFontTo: 'DejaVu' 9)		(setMenuFontTo: 'DejaVu' 10)		(setWindowTitleFontTo: 'DejaVu' 12)		(setCodeFontTo: 'DejaVu' 9)		(setButtonFontTo: 'DejaVu' 9))! !Preferences class removeSelector: #chooseBalloonHelpFont!Preferences class removeSelector: #setBalloonHelpFontTo:!Preferences class removeSelector: #standardBalloonHelpFont!Morph removeSelector: #balloonColor!Morph removeSelector: #balloonFont!Morph removeSelector: #balloonHelpAligner!Morph removeSelector: #defaultBalloonColor!Morph removeSelector: #defaultBalloonFont!Smalltalk removeClassNamed: #BalloonMorph!