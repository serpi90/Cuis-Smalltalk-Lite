'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 29 December 2011 at 9:54:04 am'!!Morph methodsFor: 'event handling' stamp: 'jmv 12/28/2011 22:13'!                              keyStroke: anEvent	"Handle a keystroke event.  The default response is to let my eventHandler, if any, handle it."	(self focusKeyboardFor: anEvent)		ifTrue: [ ^ self ].	(self closeWindowFor: anEvent)		ifTrue: [ ^ self ].	self eventHandler ifNotNil: [		self eventHandler keyStroke: anEvent fromMorph: self].! !!Morph methodsFor: 'events-processing' stamp: 'jmv 12/28/2011 22:39'!                         closeWindowFor: aKeyboardEvent	"If aKeyboardEvent is cmd/alt-w, close active window"	(aKeyboardEvent keyValue = $w asciiValue and: [ aKeyboardEvent commandAltKeyPressed ])		ifTrue: [			(self ownerThatIsA: SystemWindow) ifNotNil: [ :w |				w delete.				^true ]].	^ false! !!Morph methodsFor: 'user interface' stamp: 'jmv 12/28/2011 22:12'!    activateWindowAndSendTopToBack: aBoolean	(self ownerThatIsA: SystemWindow) ifNotNil: [ :w |		w isTopWindow ifFalse: [			w activateAndSendTopToBack: aBoolean]].! !!InnerTextMorph methodsFor: 'event handling' stamp: 'jmv 12/28/2011 22:15'!           keyStroke: aKeyboardEvent	(self focusKeyboardFor: aKeyboardEvent)		ifTrue: [ ^ self ].	(self closeWindowFor: aKeyboardEvent)		ifTrue: [ ^ self ].			"Maybe disable? Precludes the use of up and down arrows with control,	that are standard keystrokes in Windows to control the cursor.	Problem: At least Mac and Win VM generate ctrl-up and ctrl-down for	mouse wheel events.	I guess most people would prefer the mouse wheel to work properly..."	(owner scrollByKeyboard: aKeyboardEvent)		ifTrue: [ ^self ].	autoCompleter 		ifNil: [ self processKeyStroke: aKeyboardEvent ]		ifNotNil: [			autoCompleter				autoCompletionAround: [ self processKeyStroke: aKeyboardEvent ]				keyStroke: aKeyboardEvent ]! !!OneLineEditorMorph methodsFor: 'event handling' stamp: 'jmv 12/28/2011 22:15'!   keyStroke: aKeyboardEvent	"Handle a keystroke event."	(self focusKeyboardFor: aKeyboardEvent)		ifTrue: [ ^ self ].	(self closeWindowFor: aKeyboardEvent)		ifTrue: [ ^ self ].	"CR - check for special action	Note: Code below assumes that this was some	input field reacting on CR. Break the keyboard	focus so that the receiver can be safely deleted.	jmv - Currently not implemented"	"	evt keyValue = 13 ifTrue: [		action _ self crAction.		action ifNotNil: [			evt hand newKeyboardFocus: nil.			^action value ] ].	"	self pauseBlinking.	self handleInteraction: [ editor processKeyStroke: aKeyboardEvent ].	self updateFromContents.	super keyStroke: aKeyboardEvent  "sends to keyStroke event handler, if any"! !!PluggableScrollPane methodsFor: 'event handling' stamp: 'jmv 12/28/2011 22:14'!                      keyStroke: aKeyboardEvent	( self focusKeyboardFor: aKeyboardEvent)		ifTrue: [ ^ self ].	(self closeWindowFor: aKeyboardEvent)		ifTrue: [ ^ self ].	super keyStroke: aKeyboardEvent.	(self scrollByKeyboard: aKeyboardEvent)		ifTrue: [ ^self ].	scroller keyStroke: aKeyboardEvent! !!HierarchicalListMorph methodsFor: 'event handling' stamp: 'jmv 12/28/2011 22:14'!            keyStroke: aKeyboardEvent 	"Process potential command keys"	| args aCharacter |	(self focusKeyboardFor: aKeyboardEvent)		ifTrue: [ ^ self ].	(self closeWindowFor: aKeyboardEvent)		ifTrue: [ ^ self ].	(self scrollByKeyboard: aKeyboardEvent)		ifTrue: [ ^self ].	aCharacter _ aKeyboardEvent keyCharacter.	(self arrowKey: aCharacter)		ifTrue: [ ^self ].	keystrokeActionSelector ifNil: [^self].	(args _ keystrokeActionSelector numArgs) = 1 		ifTrue: [^mainView perform: keystrokeActionSelector with: aCharacter].	args = 2 		ifTrue: [			^mainView 				perform: keystrokeActionSelector				with: aCharacter				with: self].	^self error: 'The keystrokeActionSelector must be a 1- or 2-keyword symbol'! !!PluggableListMorph methodsFor: 'event handling' stamp: 'jmv 12/28/2011 22:14'!   keyStroke: aKeyboardEvent 	"Process keys"		| aCharacter |	(self focusKeyboardFor: aKeyboardEvent)		ifTrue: [ ^ self ].	(self closeWindowFor: aKeyboardEvent)		ifTrue: [ ^ self ].	(self scrollByKeyboard: aKeyboardEvent) 		ifTrue: [ ^self ].	aCharacter _ aKeyboardEvent keyCharacter.	(self arrowKey: aCharacter)		ifTrue: [ ^self ].	aCharacter asciiValue = 27 ifTrue: [	" escape key"		^ self mouseButton2Activity].	aKeyboardEvent anyModifierKeyPressed		ifTrue: [			(self keystrokeAction: aCharacter)				ifTrue: [ ^self ]].	^ self keyboardSearch: aCharacter! !!TextModelMorph methodsFor: 'event handling' stamp: 'jmv 12/28/2011 22:15'!                   keyStroke: aKeyboardEvent	"A keystroke was hit while the receiver had keyboard focus.  Pass the keywtroke on to my textMorph, and and also, if I have an event handler, pass it on to that handler"	(self focusKeyboardFor: aKeyboardEvent)		ifTrue: [ ^ self ].	(self closeWindowFor: aKeyboardEvent)		ifTrue: [ ^ self ].	self textMorph keyStroke: aKeyboardEvent.	self eventHandler ifNotNil: [		self eventHandler keyStroke: aKeyboardEvent fromMorph: self ]! !