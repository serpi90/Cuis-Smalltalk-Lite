'From Cuis 1.0 of 6 April 2009 [latest update: #169] on 8 April 2009 at 8:45:50 am'!VariableNode removeSelector: #asTranslatorNode!!VariableNode reorganize!('initialize-release' asStorableNode: name: name:index:type: name:key:code: name:key:index:type:)('testing' assignmentCheck:at: canBeSpecialArgument index isSelfPseudoVariable isVariableReference type)('code generation' emitForReturn:on: emitForValue:on: emitLoad:on: emitStore:on: emitStorePop:on: fieldOffset sizeForReturn: sizeForStore: sizeForStorePop:)('printing' printOn:indent:)('tiles' currentValueIn: variableGetterBlockIn:)('accessing' name)!ReturnNode removeSelector: #asTranslatorNode!!ReturnNode reorganize!('code generation' code emitForReturn:on: emitForValue:on: pc sizeForReturn: sizeForValue:)('converting' asReturnNode)('initialize-release' expr: expr:encoder:sourceRange:)('printing' printOn:indent:)('testing' isReturnSelf isSpecialConstant isVariableReference)!MethodNode removeSelector: #asTranslationMethodOfClass:!!MethodNode reorganize!('initialize-release' block selector: selector:arguments:precedence:temporaries:block:encoder:primitive: sourceText:)('code generation' encoder generate: generate:ifQuick: generateNative: parserClass selector sourceMap)('converting' decompileString decompileText)('printing' methodClass printOn: printPrimitiveOn: sourceText tempNames)('tiles' rawSourceRanges)!MessageNode removeSelector: #asTranslatorNode!!MessageNode reorganize!('initialize-release' receiver:selector:arguments:precedence: receiver:selector:arguments:precedence:from: receiver:selector:arguments:precedence:from:sourceRange: selector:)('testing' canCascade isComplex isMessage:receiver:arguments: isReturningIf toDoIncrement: toDoLimit:)('cascading' cascadeReceiver)('macro transformations' noteSpecialSelector: toDoFromWhileWithInit: transform: transformAnd: transformBoolean: transformIfFalse: transformIfFalseIfTrue: transformIfNil: transformIfNilIfNotNil: transformIfNotNilIfNil: transformIfTrue: transformIfTrueIfFalse: transformOr: transformToDo: transformWhile:)('code generation' emitCase:on:value: emitForEffect:on: emitForValue:on: emitIf:on:value: emitIfNil:on:value: emitToDo:on:value: emitWhile:on:value: pc sizeCase:value: sizeForEffect: sizeForValue: sizeIf:value: sizeIfNil:value: sizeToDo:value: sizeWhile:value:)('printing' macroPrinter precedence printCaseOn:indent: printIfNil:indent: printIfNilNotNil:indent: printIfOn:indent: printKeywords:arguments:on:indent: printKeywords:arguments:on:indent:prefix: printOn:indent: printOn:indent:precedence: printParenReceiver:on:indent: printReceiver:on:indent: printToDoOn:indent: printWhileOn:indent: test)('private' ifNilReceiver pvtCheckForPvtSelector: receiver:arguments:precedence: transformCase:)('equation translation' arguments arguments: eval receiver receiver: selector)('tiles')('nil' checkBlock:as:from:)!LiteralNode removeSelector: #asTranslatorNode!!LiteralNode reorganize!('code generation' emitForValue:on:)('testing' isConstantNumber isLiteral isSpecialConstant literalValue)('printing' printOn:indent:)('evaluation' eval)!Integer removeSelector: #coerceTo:sim:!!Integer reorganize!('testing' even isInteger isPowerOfTwo)('arithmetic' * + - / \\\ alignedTo: quo:)('comparing' < = > hash)('truncation and round off' asLargerPowerOfTwo asPowerOfTwo asSmallerPowerOfTwo atRandom atRandom: ceiling floor normalize rounded truncated)('enumerating' timesRepeat:)('mathematical functions' factorial gcd: lcm: raisedTo:modulo: take:)('bit manipulation' << >> allMask: anyBitOfMagnitudeFrom:to: anyMask: bitAnd: bitClear: bitInvert bitInvert32 bitOr: bitShift: bitShiftMagnitude: bitXor: highBit highBitOfMagnitude lowBit noMask:)('converting' adaptToFraction:andSend: asCharacter asColorOfDepth: asFloat asFraction asHexDigit asInteger asYear)('printing' asStringWithCommas asStringWithCommasSigned asTwoCharacterString asWords byteEncode:base: destinationBuffer: digitBuffer: hex hex8 isLiteral printOn:base: radix: romanString)('system primitives' lastDigit replaceFrom:to:with:startingAt:)('private' copyto: digitAdd: digitCompare: digitDiv:neg: digitLogic:op:length: digitLshift: digitMultiply:neg: digitRshift:bytes:lookfirst: digitSubtract: growby: growto: romanDigits:for:on:)('benchmarks' benchFib benchmark tinyBenchmarks)('tiles' asPrecedenceName)('intervals' integersTo:count:)('mathematical' //)!CascadeNode removeSelector: #asTranslatorNode!!CascadeNode reorganize!('initialize-release' receiver:messages:)('code generation' emitForValue:on: sizeForValue:)('printing' printOn:indent: printOn:indent:precedence:)('accessing' receiver)!BlockNode removeSelector: #asTranslatorNode!!BlockNode reorganize!('initialize-release' arguments:statements:returns:from: arguments:statements:returns:from:sourceRange: statements:returns:)('accessing' arguments: block firstArgument numberOfArguments returnLast returnSelfIfNoOther temporaries:)('testing' canBeSpecialArgument isComplex isJust: isJustCaseError isQuick returns)('code generation' code emitExceptLast:on: emitForEvaluatedEffect:on: emitForEvaluatedValue:on: emitForValue:on: sizeExceptLast: sizeForEvaluatedEffect: sizeForEvaluatedValue: sizeForValue:)('printing' printArgumentsOn:indent: printOn:indent: printStatementsOn:indent: printTemporariesOn:indent:)('equation translation' statements statements:)!Bitmap removeSelector: #coerceTo:sim:!!Bitmap reorganize!('initialize-release' fromByteStream:)('filing' compress:toByteArray: compressGZip compressToByteArray decompress:fromByteArray:at: encodeBytesOf:in:at: encodeInt: encodeInt:in:at: readCompressedFrom: restoreEndianness storeBits:to:on: writeOn: writeUncompressedOn:)('printing' printOn: printOnStream:)('accessing' atAllPut: bitPatternForDepth: byteAt: byteAt:put: byteSize copyFromByteArray: defaultElement integerAt: integerAt:put: pixelValueForDepth: primFill: replaceFrom:to:with:startingAt:)('testing' isColormap)('as yet unclassified' asByteArray copy)!AssignmentNode removeSelector: #asTranslatorNode!!AssignmentNode reorganize!('initialize-release' toDoIncrement: value variable:value: variable:value:from: variable:value:from:sourceRange:)('code generation' emitForEffect:on: emitForValue:on: sizeForEffect: sizeForValue:)('printing' printOn:indent: printOn:indent:precedence:)('equation translation' variable)!Object removeSelector: #asIf:var:!Object removeSelector: #asIf:var:asValue:!Object removeSelector: #asIf:var:put:!Object removeSelector: #asOop:!Object removeSelector: #asSmallIntegerObj!Object removeSelector: #asValue:!Object removeSelector: #cCode:!Object removeSelector: #cCode:inSmalltalk:!Object removeSelector: #cCoerce:to:!Object removeSelector: #debugCode:!Object removeSelector: #export:!Object removeSelector: #primitive:parameters:receiver:!Object removeSelector: #remapOop:in:!Object removeSelector: #returnTypeC:!Object removeSelector: #sharedCodeNamed:inCase:!Object removeSelector: #stAt:!Object removeSelector: #stAt:put:!Object removeSelector: #stSize!Object removeSelector: #static:!Object removeSelector: #suppressFailureGuards:!Object removeSelector: #var:type:!Object removeSelector: #var:type:array:!!Object reorganize!('*sunit-preload')('*tools-browser' browse browseHierarchy)('Breakpoint' break)('accessing' addInstanceVarNamed:withValue: at: at:modify: at:put: basicAt: basicAt:put: basicSize bindWithTemp: customizeExplorerContents doIfNotNil: ifNotNilDo: in: readFromString: size yourself)('as yet unclassified' revisar)('associating' ->)('binding' bindingOf:)('casing' caseOf: caseOf:otherwise:)('class membership' class inheritsFromAnyIn: isKindOf: isKindOf:orOf: isMemberOf: respondsTo: xxxClass)('comparing' = closeTo: hash hashMappedBy: identityHashMappedBy: identityHashPrintString literalEqual: ~=)('converting' adaptToFloat:andSend: adaptToFraction:andSend: adaptToInteger:andSend: as: asActionSequence asActionSequenceTrappingErrors asOrderedCollection asString asStringOrText complexContents mustBeBoolean mustBeBooleanIn: printDirectlyToDisplay withoutListWrapper)('copying' clone copy copyAddedStateFrom: copyFrom: copySameFrom: copyTwoLevel deepCopy postCopy shallowCopy veryDeepCopy veryDeepCopyUsing: veryDeepCopyWith: veryDeepFixupWith: veryDeepInner:)('creation' asMorph openAsMorph)('dependents access' addDependent: breakDependents canDiscardEdits dependents hasUnacceptedEdits myDependents myDependents: release removeDependent:)('drag and drop' acceptDroppingMorph:event:inMorph: dragAnimationFor:transferMorph: dragTransferType dragTransferTypeForMorph:)('error handling' assert: caseError confirm: confirm:orCancel: deprecated: deprecated:block: deprecated:explanation: deprecatedExplanation: doesNotUnderstand: error: halt halt: handles: notify:at: notifyWithLabel: primitiveFailed shouldBeImplemented shouldNotImplement subclassResponsibility)('evaluating' value valueWithArguments:)('events-accessing' actionForEvent: actionForEvent:ifAbsent: actionMap actionSequenceForEvent: actionsDo: createActionMap hasActionForEvent: setActionSequence:forEvent: updateableActionMap)('events-registering' when:evaluate: when:send:to: when:send:to:with: when:send:to:withArguments:)('events-removing' releaseActionMap removeAction:forEvent: removeActionsForEvent: removeActionsSatisfying: removeActionsSatisfying:forEvent: removeActionsWithReceiver: removeActionsWithReceiver:forEvent:)('events-triggering' triggerEvent: triggerEvent:ifNotHandled: triggerEvent:with: triggerEvent:with:ifNotHandled: triggerEvent:withArguments: triggerEvent:withArguments:ifNotHandled:)('filter streaming' byteEncode: drawOnCanvas: elementSeparator flattenOnStream: printOnStream: putOn: storeOnStream: writeOnFilterStream:)('finalization' actAsExecutor executor finalizationRegistry finalize retryWithGC:until: toFinalizeSend:to:with:)('flagging' isThisEverCalled isThisEverCalled: logEntry logExecution logExit)('inspecting' basicInspect inspect inspectorClass)('macpal' contentsChanged currentEvent currentHand currentWorld flash ifKindOf:thenDo: instanceVariableValues playSoundNamed: refusesToAcceptCode)('message handling' disableCode: perform: perform:orSendTo: perform:with: perform:with:with: perform:with:with:with: perform:withArguments: perform:withArguments:inSuperclass: withArgs:executeMethod:)('objects from disk' comeFullyUpOnReload: convertToCurrentVersion:refStream: indexIfCompact objectForDataStream: readDataFrom:size: storeDataOn:)('printing' fullPrintString isLiteral longPrintOn: longPrintOn:limitedTo:indent: longPrintString nominallyUnsent: print printOn: printString printStringLimitedTo: storeOn: storeString stringForReadout stringRepresentation)('scripting' defaultFloatPrecisionFor:)('system primitives' asOop becomeForward: becomeForward:copyHash: className instVarAt: instVarAt:put: instVarNamed: instVarNamed:put: oopString primitiveChangeClassTo: rootStubInImageSegment: someObject)('testing' haltIfNil isBehavior isBlock isBlockClosure isColor isColorForm isCompiledMethod isFloat isForm isFraction isHeap isInteger isInterval isMessageSend isMorph isMorphicEvent isMorphicModel isNumber isPoint isPseudoContext isStream isString isSymbol isSystemWindow isText isTransparent isVariableBinding isWebBrowser knownName name notNil renameTo: showDiffs stepAt:in: stepIn: stepTime stepTimeIn: wantsDiffFeedback wantsSteps wantsStepsIn:)('translation support' inline: var:declareC:)('updating' changed changed: changed:with: noteSelectionIndex:for: okToChange update: update:with: updateListsAndCodeIn: windowIsClosing)('user interface' addModelItemsToWindowMenu: asExplorerString beep defaultLabelForInspector explore hasContentsInExplorer inform: initialExtent inspectWithLabel: modelSleep modelWakeUp modelWakeUpIn: notYetImplemented)('viewer' externalName)('private' errorImproperStore errorNonIntegerIndex errorNotIndexable errorSubscriptBounds: primitiveError: species storeAt:inTempFrame:)('nil' notify:)('Camp Smalltalk' sunitAddDependent: sunitChanged: sunitRemoveDependent:)!Smalltalk removeClassNamed: #ADPCMCodecPlugin!Smalltalk removeClassNamed: #AsynchFilePlugin!Smalltalk removeClassNamed: #BMPReadWriterPlugin!Smalltalk removeClassNamed: #BitBltSimulation!Smalltalk removeClassNamed: #BitBltSimulator!Smalltalk removeClassNamed: #CArray!Smalltalk removeClassNamed: #CArrayAccessor!Smalltalk removeClassNamed: #CCodeGenerator!Smalltalk removeClassNamed: #CCodeGeneratorGlobalStructure!Smalltalk removeClassNamed: #CObjectAccessor!Smalltalk removeClassNamed: #CPluggableAccessor!Smalltalk removeClassNamed: #DSAPlugin!Smalltalk removeClassNamed: #DeflatePlugin!Smalltalk removeClassNamed: #DropPlugin!Smalltalk removeClassNamed: #FFTPlugin!Smalltalk removeClassNamed: #FileCopyPlugin!Smalltalk removeClassNamed: #FilePlugin!Smalltalk removeClassNamed: #FilePluginSimulator!Smalltalk removeClassNamed: #FloatArrayPlugin!Smalltalk removeClassNamed: #GeniePlugin!Smalltalk removeClassNamed: #HostWindowPlugin!Smalltalk removeClassNamed: #InflatePlugin!Smalltalk removeClassNamed: #InternetConfigPlugin!Smalltalk removeClassNamed: #InterpreterPlugin!Smalltalk removeClassNamed: #InterpreterProxy!Smalltalk removeClassNamed: #JPEGReadWriter2Plugin!Smalltalk removeClassNamed: #JPEGReaderPlugin!Smalltalk removeClassNamed: #JoystickTabletPlugin!Smalltalk removeClassNamed: #LargeIntegersPlugin!Smalltalk removeClassNamed: #MIDIPlugin!Smalltalk removeClassNamed: #MacMenubarPlugin!Smalltalk removeClassNamed: #Matrix2x3Plugin!Smalltalk removeClassNamed: #MiscPrimitivePlugin!Smalltalk removeClassNamed: #Mpeg3Plugin!Smalltalk removeClassNamed: #Oop!Smalltalk removeClassNamed: #RePlugin!Smalltalk removeClassNamed: #SecurityPlugin!Smalltalk removeClassNamed: #SerialPlugin!Smalltalk removeClassNamed: #SmartSyntaxInterpreterPlugin!Smalltalk removeClassNamed: #SmartSyntaxPluginCodeGenerator!Smalltalk removeClassNamed: #SmartSyntaxPluginTMethod!Smalltalk removeClassNamed: #SocketPlugin!Smalltalk removeClassNamed: #SoundCodecPlugin!Smalltalk removeClassNamed: #SoundGenerationPlugin!Smalltalk removeClassNamed: #SoundPlugin!Smalltalk removeClassNamed: #StarSqueakPlugin!Smalltalk removeClassNamed: #SurfacePlugin!Smalltalk removeClassNamed: #TAssignmentNode!Smalltalk removeClassNamed: #TCaseStmtNode!Smalltalk removeClassNamed: #TConstantNode!Smalltalk removeClassNamed: #TDefineNode!Smalltalk removeClassNamed: #TGoToNode!Smalltalk removeClassNamed: #TInlineNode!Smalltalk removeClassNamed: #TLabeledCommentNode!Smalltalk removeClassNamed: #TMethod!Smalltalk removeClassNamed: #TParseNode!Smalltalk removeClassNamed: #TReturnNode!Smalltalk removeClassNamed: #TSendNode!Smalltalk removeClassNamed: #TStmtListNode!Smalltalk removeClassNamed: #TVariableNode!Smalltalk removeClassNamed: #UUIDPlugin!Smalltalk removeClassNamed: #Unsigned!Smalltalk removeClassNamed: #VMPluginCodeGenerator!