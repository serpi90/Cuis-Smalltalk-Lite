'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 1 November 2011 at 6:45:36 pm'!!PositionableStream methodsFor: 'gui' stamp: 'jmv 11/1/2011 18:42'!untilEnd: aBlock displayingProgress: aString	aString		displayProgressAt: Sensor mousePoint		from: 0 to: self size		during: [ :bar |			[ self atEnd ] whileFalse: [				bar value: self position.				aBlock value ]]! !!SequenceableCollection methodsFor: 'gui' stamp: 'jmv 11/1/2011 18:41'!do: aBlock displayingProgress: aString	aString		displayProgressAt: Sensor mousePoint		from: 0 to: self size		during: [ :bar |			self withIndexDo: [ :each :i |				bar value: i.				aBlock value: each]]! !!SequenceableCollection reorganize!('accessing' after: after:ifNone: allButFirst allButFirst: allButLast allButLast: anyOne at:ifAbsent: at:incrementBy: atAll: atAll:put: atAll:putAll: atAllPut: atLast: atLast:ifAbsent: atLast:put: atPin: atRandom: atWrap: atWrap:put: before: before:ifNone: customizeExplorerContents eighth fifth first first: fourth from:to:put: identityIndexOf: identityIndexOf:ifAbsent: indexOf: indexOf:ifAbsent: indexOf:startingAt: indexOf:startingAt:ifAbsent: indexOfSubCollection:startingAt: indexOfSubCollection:startingAt:ifAbsent: integerAt: integerAt:put: last last: lastIndexOf: lastIndexOf:ifAbsent: lastIndexOf:startingAt:ifAbsent: middle ninth penultimate replaceAll:with: replaceFrom:to:with: replaceFrom:to:with:startingAt: second seventh sixth swap:with: third)('comparing' = hasEqualElements: hash)('converting' @ asArray asByteArray asColorArray asFloatArray asIntegerArray asPointArray asStringWithCr asWordArray concatenation isSequenceable readStream reverse reversed writeStream)('copying' , copyAfter: copyAfterLast: copyEmpty copyFrom:to: copyLast: copyReplaceAll:with: copyReplaceFrom:to:with: copyUpThrough: copyUpTo: copyUpToLast: copyWith: copyWithFirst: copyWithoutFirst copyWithoutIndex: forceTo:paddingStartWith: forceTo:paddingWith: shallowCopy shuffled shuffledBy:)('enumerating' allButFirstDo: allButLastDo: asDigitsToPower:do: collect: collect:from:to: collectWithIndex: combinations:atATimeDo: do: do:separatedBy: do:without: doWithIndex: findBinary: findBinary:do:ifNone: findBinaryIndex: findBinaryIndex:do:ifNone: findFirst: findLast: from:to:do: keysAndValuesDo: pairsCollect: pairsDo: permutationsDo: polynomialEval: replace: reverseDo: reverseWith:do: select: upTo: with:collect: with:do: with:reverseDo: withIndexCollect: withIndexDo:)('private' asDigitsAt:in:do: checkedAt: combinationsAt:in:after:do: copyReplaceAll:with:asTokens: errorFirstObject: errorOutOfBounds permutationsStartingAt:do:)('removing' remove:ifAbsent:)('testing' beginsWith: endsWith: includes:)('*packageinfo-base')('*connectors-enumerating' groupsOf:atATimeCollect: groupsOf:atATimeDo:)('gui' do:displayingProgress:)!ReadWriteStream removeSelector: #untilEnd:displayingProgress:!!ReadWriteStream reorganize!('accessing' contents name next next: truncateAtPosition)('file status' close closed)('fileIn/Out' fileInObjectAndCode fileNameEndsWith: fileOutChangeSet:andObject: fileOutClass:andObject: fileOutClass:andObject:blocking:)('converting' asUnZippedStream asUnZippedStream: readStream)('testing' = hash isZipArchive)!ReadStream removeSelector: #untilEnd:displayingProgress:!!ReadStream reorganize!('accessing' ascii binary next next: next:into:startingAt: nextPut: readStream size upTo: upToEnd)('private' on:from:to:)('file stream compatibility' localName openReadOnly readOnly)('testing' isReadOnly)!!PositionableStream reorganize!('accessing' back contents contentsOfEntireFile crLfNextLine last next: next:into: next:into:startingAt: next:putAll: next:putAll:startingAt: nextDelimited: nextInto: nextInto:startingAt: nextKeyword nextLine nextWordsInto: oldBack oldPeekBack originalContents peek peekBack peekFor: untilAnySatisfying: upTo: upToAll: upToAny: upToEnd)('testing' atEnd isBinary isEmpty notEmpty)('positioning' backUpTo: match: padTo:put: padToNextLongPut: position position: reset resetContents setToEnd skip: skipTo:)('fileIn/Out' backChunk checkForPreamble: copyMethodChunkFrom: fileIn fileInAnnouncing: nextChunk nextChunkText skipSeparators skipStyleChunk unCommand)('private' collectionSpecies on: positionError setFrom:to:)('nonhomogeneous accessing' nextInt32 nextInt32Put: nextLittleEndianNumber: nextLittleEndianNumber:put: nextNumber: nextNumber:put: nextString nextStringOld nextStringPut: nextWord nextWordPut:)('converting' asBinaryOrTextStream asZLibReadStream)('data get/put' boolean boolean: int16 int16: int32 int32: string string: uint16 uint16: uint24 uint24: uint32 uint32:)('filein/out' copyPreamble:from:at:)('*swhttpclient' nextAvailable:)('gui' untilEnd:displayingProgress:)!MethodReference removeSelector: #category!MethodReference removeSelector: #compiledMethod!MethodReference removeSelector: #sourceCode!!MethodReference reorganize!('queries' actualClass asStringOrText classIsMeta classSymbol isValid methodSymbol printOn: selector)('setting' setClass:methodSymbol:stringVersion: setClassAndSelectorIn: setClassSymbol:classIsMeta:methodSymbol:stringVersion: setStandardClass:methodSymbol:)('string version' stringVersion stringVersion:)('comparisons' <= = hash)('services' updateReferencesTo:toBe:)!