'From Cuis 3.0 of 31 January 2011 [latest update: #790] on 25 February 2011 at 11:49:34 pm'!!classDefinition: #SystemWindow category: #'Morphic-Windows'!PluggableMorph subclass: #SystemWindow	instanceVariableNames: 'labelString paneMorphs collapsedFrame fullFrame isCollapsed updatablePanes widgetsColor layoutMorph topAdjuster bottomAdjuster leftAdjuster rightAdjuster topLeftAdjuster bottomLeftAdjuster topRightAdjuster bottomRightAdjuster '	classVariableNames: 'CloseIcon CollapseIcon ExpandIcon MenuIcon RoundedCornerBL RoundedCornerBR RoundedCornerTL RoundedCornerTR TitleGradient TopWindow '	poolDictionaries: ''	category: 'Morphic-Windows'!!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 2/25/2011 23:24'!adjustHorizontallyBy: aLayoutAdjustMorph at: aPoint	| delta l ls r rs lNewWidth rNewWidth i lCurrentWidth rCurrentWidth doNotResizeBelow |	doNotResizeBelow _ self minPaneWidthForReframe.	i _ submorphs indexOf: aLayoutAdjustMorph.	l _ self submorphs at: i +1.	ls _ l layoutSpec.	lCurrentWidth _ l width max: 1.	"avoid division by zero"	r _ self submorphs at: i - 1.	rs _ r layoutSpec.	rCurrentWidth _ r width max: 1.	"avoid division by zero"	delta _ aPoint x - aLayoutAdjustMorph center x.	delta _ delta max: doNotResizeBelow - lCurrentWidth.	delta _ delta min: rCurrentWidth - doNotResizeBelow.	delta = 0 ifTrue: [ ^self ].	rNewWidth _ rCurrentWidth - delta.	lNewWidth _ lCurrentWidth + delta.	(ls isProportionalWidth and: [ rs isProportionalWidth ])		ifTrue: [	"If both proportional, update them"			ls setProportionalWidth: (lNewWidth / lCurrentWidth * ls proportionalWidth).			rs setProportionalWidth: (rNewWidth / rCurrentWidth * rs proportionalWidth) ]		ifFalse: ["If at least one is fixed, update only the fixed"			ls isProportionalWidth ifFalse: [				ls fixedOrMorphWidth: lNewWidth ].			rs isProportionalWidth ifFalse: [				rs fixedOrMorphWidth: rNewWidth ]].	self layoutAndComputeFullBounds! !!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 2/25/2011 23:23'!adjustVerticallyBy: aLayoutAdjustMorph at: aPoint	| delta t ts b bs tNewHeight bNewHeight i tCurrentHeight bCurrentHeight doNotResizeBelow |	doNotResizeBelow _ self minPaneHeightForReframe.	i _ submorphs indexOf: aLayoutAdjustMorph.	t _ self submorphs at: i +1.	ts _ t layoutSpec.	tCurrentHeight _ t height max: 1.	"avoid division by zero"	b _ self submorphs at: i - 1.	bs _ b layoutSpec.	bCurrentHeight _ b height max: 1.	"avoid division by zero"	delta _ aPoint y - aLayoutAdjustMorph center y.	delta _ delta max: doNotResizeBelow - tCurrentHeight.	delta _ delta min: bCurrentHeight - doNotResizeBelow.	delta = 0 ifTrue: [ ^self ].	tNewHeight _ tCurrentHeight + delta.	bNewHeight _ bCurrentHeight - delta.	(ts isProportionalHeight and: [ bs isProportionalHeight ])		ifTrue: [	"If both proportional, update them"			ts setProportionalHeight: (tNewHeight / tCurrentHeight * ts proportionalHeight).			bs setProportionalHeight: (bNewHeight / bCurrentHeight * bs proportionalHeight) ]		ifFalse: ["If at least one is fixed, update only the fixed"			ts isProportionalHeight ifFalse: [				ts fixedOrMorphHeight: tNewHeight ].			bs isProportionalHeight ifFalse: [				bs fixedOrMorphHeight: bNewHeight ]].	self layoutAndComputeFullBounds! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 2/25/2011 23:23'!setProportionalHeight: aNumberOrNil	"Alternatives: same as in #proportionalWidth:minimum:, see comment there"	proportionalHeight _ aNumberOrNil! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 2/25/2011 23:22'!setProportionalWidth: aNumberOrNil	"Alternatives:		- proportionalWidth notNil, fixedWidth notNil	->		Use fraction of available space, take fixedWidth as minimum desired width		- proportionalWidth isNil, fixedWidth isNil		->		Use current morph width		- proportionalWidth isNil, fixedWidth notNil	->		Use fixedWidth		- proportionalWidth notNil, fixedWidth isNil	->		NOT VALID"	proportionalWidth _ aNumberOrNil! !!SystemWindow methodsFor: 'initialization' stamp: 'jmv 2/25/2011 23:47'!initialize	"Initialize a system window. Add label, stripes, etc., if desired"	super initialize.	labelString ifNil: [ labelString := 'Untitled Window'].	isCollapsed := false.	borderColor := #raised.	borderWidth := 3.		self wantsLabel ifTrue: [self initializeLabelArea].	self extent: 300 @ 200.	updatablePanes := Array new.	topAdjuster _ WindowEdgeAdjustingMorph top.	self addMorph: topAdjuster.	bottomAdjuster _ WindowEdgeAdjustingMorph bottom.	self addMorph: bottomAdjuster.	leftAdjuster _ WindowEdgeAdjustingMorph left.	self addMorph: leftAdjuster.	rightAdjuster _ WindowEdgeAdjustingMorph right.	self addMorph: rightAdjuster.	topLeftAdjuster _ WindowEdgeAdjustingMorph topLeft.	self addMorph: topLeftAdjuster.	bottomLeftAdjuster _ WindowEdgeAdjustingMorph bottomLeft.	self addMorph: bottomLeftAdjuster.	topRightAdjuster _ WindowEdgeAdjustingMorph topRight.	self addMorph: topRightAdjuster.	bottomRightAdjuster _ WindowEdgeAdjustingMorph bottomRight.	self addMorph: bottomRightAdjuster! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 2/25/2011 23:47'!removeProgressWatcher	progress ifNil: [ ^self ].	progress delete.	progress _ nil! !SystemWindow removeSelector: #updatePanesFromSubmorphs!!classDefinition: #SystemWindow category: #'Morphic-Windows'!PluggableMorph subclass: #SystemWindow	instanceVariableNames: 'labelString collapsedFrame fullFrame isCollapsed updatablePanes widgetsColor layoutMorph topAdjuster bottomAdjuster leftAdjuster rightAdjuster topLeftAdjuster bottomLeftAdjuster topRightAdjuster bottomRightAdjuster'	classVariableNames: 'CloseIcon CollapseIcon ExpandIcon MenuIcon RoundedCornerBL RoundedCornerBR RoundedCornerTL RoundedCornerTR TitleGradient TopWindow'	poolDictionaries: ''	category: 'Morphic-Windows'!NewHandleMorph removeSelector: #followHand:forEachPointDo:lastPointDo:withCursor:!LayoutSpec removeSelector: #proportionalHeight:maybeMinimum:!LayoutSpec removeSelector: #proportionalWidth:maybeMinimum:!HandleMorph removeSelector: #forEachPointDo:lastPointDo:!