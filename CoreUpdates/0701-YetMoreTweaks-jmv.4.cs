'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 6 December 2010 at 2:49:25 pm'!!BareTextMorph commentStamp: 'jmv 12/6/2010 14:36' prior: 0!BareTextMorphs support display of text with emphasis.  They also support reasonable text-editing capabilities, as well as embedded hot links, and the ability to embed submorphs in the text. They are 'bare' in the sense that they can not clip contents to some window, or scroll it by themselves.Text display is clipped to the innerBounds of the rectangle, and text composition is normally performed within a rectangle which is innerBounds inset by the margins parameter.!!BareTextMorph methodsFor: 'geometry' stamp: 'jmv 12/6/2010 14:39'!extent: aPoint	| newExtent priorEditor |	priorEditor _ editor.	"Resist changing the extent if no wordwrap.. this should be checked."	wrapFlag ifFalse: [ ^ self ].	newExtent _ aPoint truncated max: self minimumExtent.		"No change of wrap width"	newExtent x = self extent x ifTrue: [ ^ self ].	"invalidate the paragraph cache"	self releaseParagraph.		super extent: newExtent.	priorEditor		ifNil: [			"since the width has changed..." 			self fit ]		ifNotNil: [ self installEditorToReplace: priorEditor ].! !!BareTextMorph methodsFor: 'menu' stamp: 'jmv 12/6/2010 14:36'!addCustomMenuItems: aCustomMenu hand: aHandMorph 	"Add text-related menu items to the menu"	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu 		addUpdating: #wrapString		target: self		action: #wrapOnOff! !!BareTextMorph methodsFor: 'menu' stamp: 'jmv 12/6/2010 14:40'!wrapString	"Answer the string to put in a menu that will invite the user to 	switch word wrap mode"	^ (wrapFlag		ifTrue: ['<yes>']		ifFalse: ['<no>'])		, 'text wrap to bounds' translated! !!BareTextMorph methodsFor: 'private' stamp: 'jmv 12/6/2010 14:40'!fit	"Adjust my bounds to fit the text.	Required after the text changes,	or if wrapFlag is true and the user attempts to change the extent."	| newExtent para |	newExtent := (self paragraph extent max: 9 @ self text initialStyle initialLineGrid) + (0 @ 2).	newExtent ~= bounds extent 		ifTrue: [			para := paragraph.	"Save para (layoutChanged smashes it)"			self basicExtent: newExtent.			paragraph := para].	"These statements should be pushed back into senders"	self paragraph positionWhenComposed: self position.	self changed	"Too conservative: only paragraph composition					should cause invalidation."! !!TextModel methodsFor: 'initialize-release' stamp: 'jmv 12/6/2010 14:14'!openInMorphicWindowLabeled: labelString wrap: aBoolean	| window |	window _ (SystemWindow labelled: labelString) model: self.	window		addMorph: ((TextModelMorph withModel: self)			wrapFlag: aBoolean)		frame: (0@0 corner: 1@1).	^ window openInWorld! !!SyntaxError class methodsFor: 'instance creation' stamp: 'jmv 12/6/2010 14:14'!buildMorphicViewOn: aSyntaxError	"Answer an Morphic view on the given SyntaxError."	| window |	window _ (SystemWindow labelled: 'Syntax Error') model: aSyntaxError.	window addMorph: (PluggableListMorph 			model: aSyntaxError 			listGetter: #list			indexGetter: #listIndex 			indexSetter: nil 			menuGetter: #listMenu:)		frame: (0@0 corner: 1@0.15).	window		addMorph: (TextModelMorph withModel: aSyntaxError)		frame: (0@0.15 corner: 1@1).	^ window openInWorldExtent: 380@220! !!TextModelMorph methodsFor: 'initialization' stamp: 'jmv 12/6/2010 14:13'!model: aTextModel	editorClass _ aTextModel editorClass.	super model: aTextModel.	textMorph		model: model wrappedTo: self viewableWidth.	model refetch.	self maybeStyle.		self setSelection: model getSelection! !!TextModelMorph class methodsFor: 'instance creation' stamp: 'jmv 12/6/2010 14:13'!textProvider: aTextProvider textGetter: textGetter textSetter: textSetter selectionGetter: selectionGetter	| styler newModel answer |	answer _ self new.	(Preferences syntaxHighlightingAsYouType 			and: [ aTextProvider respondsTo: #shoutAboutToStyle:]) ifTrue: [		styler _ SHTextStylerST80 new.		styler view: answer.		answer styler: styler ].	newModel _ PluggableTextModel on: aTextProvider.	newModel textGetter: textGetter textSetter: textSetter selectionGetter: selectionGetter.	aTextProvider addDependent: newModel.	answer model: newModel.	^answer! !!TextModelMorph class methodsFor: 'instance creation' stamp: 'jmv 12/6/2010 14:14'!withModel: aTextModel	|  answer styler |	answer _ self new.	(Preferences syntaxHighlightingAsYouType 			and: [ aTextModel respondsTo: #shoutAboutToStyle:]) ifTrue: [		styler _ SHTextStylerST80 new.		styler view: answer.		answer styler: styler ].	answer model: aTextModel.	^answer! !!BrowserCommentTextMorph class methodsFor: 'instance creation' stamp: 'jmv 12/6/2010 14:13'!textProvider: aTextProvider textGetter: textGetter textSetter: textSetter selectionGetter: selectionGetter	| newModel answer |	answer _ self new.	newModel _ PluggableTextModel on: aTextProvider.	newModel textGetter: textGetter textSetter: textSetter selectionGetter: selectionGetter.	aTextProvider addDependent: newModel.	answer model: newModel.	^answer! !TextModelMorph class removeSelector: #textModel:!TextModelMorph removeSelector: #textModel:!BareTextMorph removeSelector: #autoFit:!BareTextMorph removeSelector: #autoFitOnOff!BareTextMorph removeSelector: #autoFitString!BareTextMorph removeSelector: #isAutoFit!