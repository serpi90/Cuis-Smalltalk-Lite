'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 26 September 2011 at 6:46:12 pm'!!classDefinition: #EventHandler category: #'Morphic-Events'!Object subclass: #EventHandler	instanceVariableNames: 'mouseDownRecipient mouseDownSelector mouseMoveRecipient mouseMoveSelector mouseStillDownRecipient mouseStillDownSelector mouseUpRecipient mouseUpSelector mouseEnterRecipient mouseEnterSelector mouseLeaveRecipient mouseLeaveSelector mouseEnterDraggingRecipient mouseEnterDraggingSelector mouseLeaveDraggingRecipient mouseLeaveDraggingSelector keyStrokeRecipient keyStrokeSelector valueParameter startDragRecipient startDragSelector doubleClickSelector doubleClickRecipient clickSelector clickRecipient '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Events'!!EventHandler methodsFor: 'events' stamp: 'jmv 9/26/2011 18:30'!mouseDown: event fromMorph: sourceMorph 	"Take double-clicks into account."	((self handlesClick: event) and:[event mouseButton1Pressed]) ifTrue:[		event hand waitForClicksOrDrag: sourceMorph event: event.	].	^self		send: mouseDownSelector		to: mouseDownRecipient		withEvent: event		fromMorph: sourceMorph.! !!EventHandler methodsFor: 'testing' stamp: 'jmv 9/26/2011 18:29'!handlesClick: evt	clickRecipient ifNotNil:[^true].	doubleClickRecipient ifNotNil:[^true].	^false! !!EventHandler methodsFor: 'testing' stamp: 'jmv 9/26/2011 18:30'!handlesMouseDown: evt	mouseDownRecipient ifNotNil: [^ true].	mouseStillDownRecipient ifNotNil: [^ true].	mouseUpRecipient ifNotNil: [^ true].	(self handlesClick: evt) ifTrue:[^true].	^self handlesGestureStart: evt! !!LightWidget methodsFor: 'meta actions' stamp: 'jmv 9/26/2011 18:25'!mouseButton3Down: anEvent	"Special gestures (cmd-mouse on the Macintosh; Alt-mouse on Windows and Unix) allow a mouse-sensitive morph to be moved or bring up a halo for the morph."	| h doNotDrag |	h _ anEvent hand halo.	"Prevent wrap around halo transfers originating from throwing the event back in"	doNotDrag _ false.	h ifNotNil:[		(h innerTarget == self) ifTrue:[doNotDrag _ true].		(h innerTarget hasOwner: self) ifTrue:[doNotDrag _ true].		(self hasOwner: h target) ifTrue:[doNotDrag _ true]].	"cmd-drag on flexed morphs works better this way"	h _ self addHalo: (anEvent externalizedFromOwnerOf: self to: nil).	doNotDrag ifTrue:[^self].	"Initiate drag transition if requested"	anEvent hand 		waitForClicksOrDrag: h		event: (anEvent externalizedFromOwnerOf: self to: nil)		clkSel: nil		dblClkSel: nil		dragSel: nil.	"Pass focus explicitly here"	anEvent hand newMouseFocus: h.! !!Morph methodsFor: 'meta-actions' stamp: 'jmv 9/26/2011 18:26'!mouseButton3Down: anEvent	"Special gestures (cmd-mouse on the Macintosh; Alt-mouse on Windows and Unix) allow a mouse-sensitive morph to be moved or bring up a halo for the morph."	| h doNotDrag |	h _ anEvent hand halo.	"Prevent wrap around halo transfers originating from throwing the event back in"	doNotDrag _ false.	h ifNotNil:[		(h innerTarget == self) ifTrue:[doNotDrag _ true].		(h innerTarget hasOwner: self) ifTrue:[doNotDrag _ true].		(self hasOwner: h target) ifTrue:[doNotDrag _ true]].	"cmd-drag on flexed morphs works better this way"	h _ self addHalo: (anEvent externalizedFromOwnerOf: self to: nil).	doNotDrag ifTrue:[^self].	"Initiate drag transition if requested"	anEvent hand 		waitForClicksOrDrag: h		event: (anEvent externalizedFromOwnerOf: self to: nil)		clkSel: nil		dblClkSel: nil		dragSel: nil.	"Pass focus explicitly here"	anEvent hand newMouseFocus: h.! !!HaloMorph methodsFor: 'meta-actions' stamp: 'jmv 9/26/2011 18:25'!mouseButton3Down: event	"Transfer the halo to the next likely recipient"	target ifNil:[^self delete].	event hand obtainHalo: self.	positionOffset _ event position - (target externalizePositionFromOwner: target position to: owner).	"wait for drags or transfer"	event hand 		waitForClicksOrDrag: self 		event: event		clkSel: #transferHalo:		dblClkSel: nil		dragSel: nil! !!HandMorph methodsFor: 'double click support' stamp: 'jmv 9/26/2011 18:25'!waitForClicksOrDrag: aMorph event: evt	"Wait until the difference between click, double-click, or drag gesture is known, then inform the given morph what transpired. This message is sent when the given morph first receives a mouse-down event. If the mouse button goes up, then down again within DoubleClickTime, then 'doubleClick: evt' is sent to the morph. If the mouse button goes up but not down again within DoubleClickTime, then the message 'click: evt' is sent to the morph. Finally, if the button does not go up within DoubleClickTime, then 'drag: evt' is sent to the morph. In all cases, the event supplied is the original mouseDown event that initiated the gesture. mouseMove: and mouseUp: events are not sent to the morph until it becomes the mouse focus, which is typically done by the client in its click:, doubleClick:, or drag: methods." 		^self 		waitForClicksOrDrag: aMorph 		event: evt 		clkSel: #click:		dblClkSel: #doubleClick:		dragSel: nil! !!PluggableListMorph methodsFor: 'events' stamp: 'jmv 9/26/2011 18:27'!mouseDown: evt	| row |	evt mouseButton2Pressed  "First check for option (menu) click"		ifTrue: [^ self mouseButton2Activity].	self hasKeyboardFocus ifFalse: [		evt hand newKeyboardFocus: self.		"If we are focusing, deselect, so that later selection doesn't result in deselect."		self listMorph noSelection].	row _ self rowAtLocation: evt position.	row = 0  ifTrue: [^super mouseDown: evt].	"self dragEnabled ifTrue: [aMorph highlightForMouseDown]."	evt hand 		waitForClicksOrDragOrSimulatedMouseButton2: self		event: evt		clkSel: #click:		dblClkSel: (doubleClickSelector ifNotNil:[#doubleClick:])		dragSel: nil! !!SimpleHierarchicalListMorph methodsFor: 'event handling' stamp: 'jmv 9/26/2011 18:27'!mouseDown: evt	| aMorph |	evt hand newKeyboardFocus: self.	aMorph _ self itemFromPoint: evt position.	(aMorph notNil and:[aMorph inToggleArea: (aMorph internalizePositionToOwner: evt position from: self)])		ifTrue:[^self toggleExpandedState: aMorph event: evt]. 	evt mouseButton2Pressed  "First check for option (menu) click"		ifTrue: [^ self mouseButton2Activity].	aMorph ifNil:[^super mouseDown: evt].	aMorph highlightForMouseDown.	evt hand 		waitForClicksOrDragOrSimulatedMouseButton2: self 		event: evt 		clkSel: #click:		dblClkSel: nil		dragSel: nil! !SimpleHierarchicalListMorph removeSelector: #startDrag:!PluggableListMorph removeSelector: #startDrag:!HaloMorph removeSelector: #dragTarget:!Morph removeSelector: #startDrag:!EventHandler removeSelector: #handlesClickOrDrag:!EventHandler removeSelector: #startDrag:fromMorph:!!classDefinition: #EventHandler category: #'Morphic-Events'!Object subclass: #EventHandler	instanceVariableNames: 'mouseDownRecipient mouseDownSelector mouseMoveRecipient mouseMoveSelector mouseStillDownRecipient mouseStillDownSelector mouseUpRecipient mouseUpSelector mouseEnterRecipient mouseEnterSelector mouseLeaveRecipient mouseLeaveSelector mouseEnterDraggingRecipient mouseEnterDraggingSelector mouseLeaveDraggingRecipient mouseLeaveDraggingSelector keyStrokeRecipient keyStrokeSelector valueParameter doubleClickSelector doubleClickRecipient clickSelector clickRecipient'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Events'!CompiledMethod removeSelector: #dragLabel!