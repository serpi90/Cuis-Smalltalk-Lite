'From Cuis 3.1 of 4 March 2011 [latest update: #850] on 17 March 2011 at 4:51:20 pm'!!CharacterScanner methodsFor: 'scanning' stamp: 'jmv 3/17/2011 16:36'!placeEmbeddedObject: anchoredFormOrMorph	"Place the anchoredMorph or return false if it cannot be placed.	In any event, advance destX by its width."	destX _ destX + anchoredFormOrMorph width.	(destX > rightMargin and: [ lastIndex ~= line first ])		"Won't fit, but  not at start of a line. Start a new line with it"		ifTrue: [ ^ false].	lastIndex _ lastIndex + 1.	^ true! !!CharacterBlockScanner methodsFor: 'scanning' stamp: 'jmv 3/17/2011 16:45'!placeEmbeddedObject: anchoredFormOrMorph	(super placeEmbeddedObject: anchoredFormOrMorph) ifFalse: [^ false].	specialWidth _ anchoredFormOrMorph width.	^ true! !!CompositionScanner methodsFor: 'stop conditions' stamp: 'jmv 3/17/2011 16:36'!placeEmbeddedObject: anchoredFormOrMorph	| descent |	(super placeEmbeddedObject: anchoredFormOrMorph) ifFalse: [		line stop: lastIndex-1.		^ false].	descent _ lineHeight - baseline.	baseline _ baseline max: anchoredFormOrMorph height.	lineHeight _ lineHeight + descent.	line stop: lastIndex.	^ true! !!DisplayScanner methodsFor: 'scanning' stamp: 'jmv 3/17/2011 16:47'!placeEmbeddedObject: anchoredFormOrMorph	(super placeEmbeddedObject: anchoredFormOrMorph) ifFalse: [^ false].	(anchoredFormOrMorph is: #Morph)		ifTrue: [			anchoredFormOrMorph position:				((destX - anchoredFormOrMorph width)@				(lineY+ line baseline - anchoredFormOrMorph height)) -					morphicOffset ]		ifFalse: [			destY _ lineY.			runX _ destX.			anchoredFormOrMorph 				displayOn: bitBlt destForm 				at: destX - anchoredFormOrMorph width @ (destY + line baseline - anchoredFormOrMorph height)				clippingBox: bitBlt clipRect				rule: Form blend				fillColor: nil ].	^ true! !!Morph methodsFor: 'menus' stamp: 'jmv 3/17/2011 16:41'!addStandardHaloMenuItemsTo: aMenu hand: aHandMorph	"Add standard halo items to the menu"	| unlockables |	self isWorldMorph ifTrue:		[^ self addWorldHaloMenuItemsTo: aMenu hand: aHandMorph].	aMenu add: 'send to back' action: #goBehind.	aMenu add: 'bring to front' action: #comeToFront.	self addEmbeddingMenuItemsTo: aMenu hand: aHandMorph.	aMenu addLine.	self addFillStyleMenuItems: aMenu hand: aHandMorph.	self addHaloActionsTo: aMenu.	aMenu addLine.	self addToggleItemsToHaloMenu: aMenu.	aMenu addLine.	self addCopyItemsTo: aMenu.	self addExportMenuItems: aMenu hand: aHandMorph.	self addDebuggingItemsTo: aMenu hand: aHandMorph.	aMenu addLine.	aMenu defaultTarget: self.	aMenu addLine.	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size = 1 ifTrue:		[aMenu			add: ('unlock "{1}"' format: unlockables first externalName)			action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	aMenu defaultTarget: aHandMorph.! !!BareTextMorph methodsFor: 'anchors' stamp: 'jmv 3/17/2011 16:44'!anchorMorph: aMorph at: aPoint	| relPt index newText |	aMorph owner == self ifTrue: [ self removeMorph: aMorph ].	self addMorphFront: aMorph.	relPt _ self internalizePosition: aPoint from: self world.	index _ (self paragraph characterBlockAtPoint: relPt) stringIndex.	newText _ ' ', (Text string: '*' attribute: (TextAnchor new anchoredFormOrMorph: aMorph)), ' '.	self paragraph replaceFrom: index to: index-1 with: newText.	self fit.! !!BareTextMorph methodsFor: 'submorphs-add/remove' stamp: 'jmv 3/17/2011 16:44'!addMorphFront: aMorph fromWorldPosition: wp 	"Overridden for more specific re-layout and positioning"	^self anchorMorph: aMorph at: wp! !!BareTextMorph methodsFor: 'private' stamp: 'jmv 3/17/2011 16:42'!removedMorph: aMorph	| range |	range _ self text find: (TextAnchor new anchoredFormOrMorph: aMorph).	range ifNotNil: [		self paragraph replaceFrom: range first to: range last with: Text new.		self fit ].	super removedMorph: aMorph! !BareTextMorph removeSelector: #anchorMorph:at:type:!Morph removeSelector: #addTextAnchorMenuItems:hand:!Morph removeSelector: #changeDocumentAnchor!Morph removeSelector: #changeInlineAnchor!Morph removeSelector: #changeParagraphAnchor!Morph removeSelector: #hasDocumentAnchorString!Morph removeSelector: #hasInlineAnchorString!Morph removeSelector: #hasParagraphAnchorString!Morph removeSelector: #relativeTextAnchorPosition!Morph removeSelector: #relativeTextAnchorPosition:!Morph removeSelector: #textAnchorType!Morph removeSelector: #textAnchorType:!!Morph reorganize!('WiW support' addMorphInFrontOfLayer: addMorphInLayer: morphicLayerNumber morphicLayerNumberWithin: shouldGetStepsFrom:)('accessing' adoptWidgetsColor: balloonText beSticky borderWidth color color: doesBevels eventHandler eventHandler: highlight highlightColor isLocked isSticky lock lock: raisedColor resistsRemoval sticky: toggleResistsRemoval toggleStickiness unlock unlockContents)('accessing - extension' assureExtension hasExtension initializeExtension privateExtension: resetExtension)('accessing - properties' hasProperty: removeProperty: setProperty:toValue: valueOfProperty: valueOfProperty:ifAbsent: valueOfProperty:ifAbsentPut: valueOfProperty:ifPresentDo:)('as yet unclassified' rotationDegrees:)('caching' fullReleaseCachedState releaseCachedState)('change reporting' addedMorph: invalidRect: invalidRect:from: privateInvalidateMorph:)('classification' isPlayfieldLike isWorldMorph)('copying' copy copyForClipboard deepCopy duplicate veryDeepCopyWith: veryDeepFixupWith: veryDeepInner:)('creation' asMorph)('debug and other' addDebuggingItemsTo:hand: altSpecialCursor0 altSpecialCursor1 altSpecialCursor2 altSpecialCursor3 altSpecialCursor3: buildDebugMenu: inspectOwnerChain ownerChain resumeAfterDrawError resumeAfterStepError)('drawing' addPossiblyUncoveredAreasIn:to: changeClipSubmorphs clipSubmorphs: clippingBounds clipsSubmorphs drawDropHighlightOn: drawErrorOn: drawMouseDownHighlightOn: drawOn: drawSubmorphsOn: drawingFails drawingFailsNot fullDrawOn: hasClipSubmorphsString hide highlightForMouseDown highlightForMouseDown: highlightedForMouseDown imageForm imageForm:forRectangle: isKnownFailing ownShadowForm refreshWorld shadowForm show visible visible:)('drop shadows' shadowColor shadowColor:)('dropping/grabbing' aboutToBeGrabbedBy: dragEnabled dragEnabled: dragNDropEnabled dropEnabled dropEnabled: dropHighlightColor enableDrag: enableDragNDrop enableDragNDrop: enableDrop: formerOwner formerOwner: formerPosition formerPosition: highlightForDrop highlightForDrop: highlightedForDrop justDroppedInto:event: justGrabbedFrom: rejectDropMorphEvent: repelsMorph:event: resetHighlightForDrop separateDragAndDrop slideBackToFormerSituation: startDrag:with: vanishAfterSlidingTo:event: wantsDroppedMorph:event: wantsToBeDroppedInto:)('e-toy support' embeddedInMorphicWindowLabeled: unlockOneSubpart wantsRecolorHandle)('event handling' click click: cursorPoint doubleClick: doubleClickTimeout: handleMouseDown: handlesKeyboard handlesMouseDown: handlesMouseOver: handlesMouseOverDragging: handlesMouseStillDown: keyDown: keyStroke: keyUp: mouseDown: mouseEnter: mouseEnterDragging: mouseLeave: mouseLeaveDragging: mouseMove: mouseStillDown: mouseStillDownStepRate mouseStillDownThreshold mouseUp: on:send:to: on:send:to:withValue: startDrag: windowEvent:)('events-accessing' actionMap updateableActionMap)('events-alarms' addAlarm:after: addAlarm:at: addAlarm:with:after: addAlarm:with:at: addAlarm:with:with:after: addAlarm:with:with:at: addAlarm:withArguments:after: addAlarm:withArguments:at: alarmScheduler removeAlarm:)('events-processing' containsPoint:event: defaultEventDispatcher focusKeyboardFor: handleDropMorph: handleEvent: handleFocusEvent: handleKeyDown: handleKeyUp: handleKeystroke: handleListenEvent: handleMouseEnter: handleMouseLeave: handleMouseMove: handleMouseOver: handleMouseStillDown: handleMouseUp: handleUnknownEvent: handleWindowEvent: handlerForMouseDown: mouseDownPriority processEvent: processEvent:using: rejectDropEvent: rejectsEvent:)('events-removing' releaseActionMap)('fileIn/out' prepareToBeSaved storeDataOn:)('focus handling' hasKeyboardFocus keyboardFocusChange:)('geometry' align:with: basicExtent: bottom bottom: bottomCenter bottomLeft bottomLeft: bottomRight bottomRight: bounds bounds: bounds:in: center center: displayBounds extent extent: externalizePosition:to: externalizePositionFromOwner:to: externalizePositionToWorld: externalizeScalar:to: externalizeVector:to: fullDisplayBounds height height: innerBounds internalizePosition:from: internalizePositionFromWorld: internalizePositionToOwner:from: internalizeScalar:from: internalizeVector:from: left left: leftCenter minimumExtent moveRight: position position: positionInWorld right right: rightCenter setConstrainedPosition:hangOut: top top: topCenter topLeft topLeft: topRight topRight: width width: worldBoundsForHalo)('geometry eToy' referencePosition referencePosition:)('geometry testing' containsPoint: fullContainsPoint: isOrthoRectangularMorph)('halos and balloon help' addHalo addHalo: addHalo:from: addHandlesTo:box: addOptionalHandlesTo:box: addWorldHandlesTo:box: balloonColor balloonFont balloonHelpAligner balloonHelpDelayTime balloonHelpTextForHandle: comeToFrontAndAddHalo defaultBalloonColor defaultBalloonFont deleteBalloon editBalloonHelpContent: editBalloonHelpText halo haloClass mouseDownOnHelpHandle: noHelpString okayToBrownDragEasily okayToResizeEasily okayToRotateEasily removeHalo setBalloonText: setBalloonText:maxLineLength: showBalloon: showBalloon:hand: transferHalo:from: wantsBalloon wantsHaloFromClick wantsHaloHandleWithSelector:inHalo:)('initialization' defaultBounds inATwoWayScrollPane initialize intoWorld: openCenteredInWorld openInHand openInWorld openInWorld:)('layout' acceptDroppingMorph:event: computeFullBounds doLayoutIfNeeded fullBounds layoutAndComputeFullBounds layoutBounds layoutChanged submorphBounds)('layout-properties' layoutSpec layoutSpec:)('macpal' flash)('menus' addAddHandMenuItemsForHalo:hand: addCopyItemsTo: addCustomHaloMenuItems:hand: addCustomMenuItems:hand: addExportMenuItems:hand: addFillStyleMenuItems:hand: addHaloActionsTo: addStandardHaloMenuItemsTo:hand: addTitleForHaloMenu: addToggleItemsToHaloMenu: changeColor changeDragAndDrop collapse exportAsBMP exportAsJPEG exportAsPNG hasDragAndDropEnabledString inspectInMorphic: lockUnlockMorph lockedString maybeAddCollapseItemTo: resistsRemovalString stickinessString)('meta-actions' addEmbeddingMenuItemsTo:hand: buildHandleMenu: changeColorTarget:selector:originalColor:hand: copyToPasteBuffer: dismissMorph: duplicateMorph: grabMorph: handlerForMetaMenu: handlerForMouseButton3Down: maybeDuplicateMorph mouseButton3Down: mouseButton3Up: potentialEmbeddingTargets resizeFromMenu resizeMorph:)('miscellaneous' setExtentFromHalo:)('naming' nameForFindWindowFeature)('objects from disk' objectForDataStream:)('player' okayToDuplicate)('printing' printOn:)('rotate scale and flex' rotationDegrees)('stepping and presenter' arrangeToStartStepping arrangeToStartSteppingIn: start startStepping startStepping:at:arguments:stepTime: startSteppingSelector: step stepAt: stopStepping stopSteppingSelector:)('structure' activeHand allOwners allOwnersDo: firstOwnerSuchThat: hasOwner: isInWorld nearestOwnerThat: outermostWorldMorph owner ownerThatIsA: pasteUpMorph primaryHand root veryLastLeave withAllOwnersDo: world)('submorphs-accessing' allMorphs allMorphsDo: findA: findDeepSubmorphThat:ifAbsent: findSubmorphBinary: firstSubmorph hasSubmorphs lastSubmorph morphsAt: morphsAt:behind:unlocked: morphsAt:unlocked: morphsAt:unlocked:do: morphsInFrontOf:overlapping:do: noteNewOwner: submorphBehind: submorphCount submorphInFrontOf: submorphThat:ifNone: submorphs submorphsBehind:do: submorphsDo: submorphsInFrontOf:do: submorphsReverseDo: submorphsSatisfying:)('submorphs-add/remove' addAllMorphs: addAllMorphs:after: addMorph: addMorph:behind: addMorph:inFrontOf: addMorphBack: addMorphCentered: addMorphFront: addMorphFront:fromWorldPosition: addMorphFrontFromWorldPosition: comeToFront delete dismissViaHalo goBehind privateDelete removeAllMorphs removeAllMorphsIn: removeMorph: removedMorph: replaceSubmorph:by:)('testing' hasModel is: isOpaqueMorph isReallyVisible shouldDropOnMouseUp stepTime)('updating' redrawNeeded update:)('user interface' activateWindow activateWindowAndSendTopToBack: defaultLabelForInspector initialExtent)('visual properties' defaultColor fillStyle fillStyle:)('private' privateAddAllMorphs:atIndex: privateAddMorph:atIndex: privateBounds: privateColor: privateFullMoveBy: privateMoveBy: privateOwner: privateRemove:)('iteration of all morphs' nextMorph nextMorphPart2 previousMorph)('stepping' wantsSteps)('property extension' extension)!Form removeSelector: #relativeTextAnchorPosition!