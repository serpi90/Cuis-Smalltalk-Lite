'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 22 September 2011 at 5:20:05 pm'!!classDefinition: 'SimpleEditor class' category: #'System-Text'!SimpleEditor class	instanceVariableNames: 'cmdActions '!!OneLineEditorMorph methodsFor: 'event handling' stamp: 'jmv 9/22/2011 17:14'!doubleClick: evt	self handleInteraction: [ editor doubleClick: evt ]! !!OneLineEditorMorph methodsFor: 'event handling' stamp: 'jmv 9/22/2011 17:19'!keyboardFocusChange: aBoolean 	aBoolean		ifTrue: [			"A hand is wanting to send us characters..."			editor ifNil: [ self editor ].	"Forces install"			self selectAll.			self startBlinking ]		ifFalse: [ self stopBlinking ].	self redrawNeeded! !!OneLineEditorMorph methodsFor: 'event handling' stamp: 'jmv 9/22/2011 17:16'!mouseDown: event	"Make this TextMorph be the keyboard input focus, if it isn't already,		and repond to the text selection gesture."	event hand newKeyboardFocus: self.	self handleInteraction: [		editor mouseDown: event index: (self characterIndexAtPoint: event position) ].	event hand		waitForSimulatedMouseButton2: self		event: event		dblClkSel: #doubleClick:! !!SimpleEditor methodsFor: 'accessing' stamp: 'jmv 9/22/2011 16:52'!string	^string! !!SimpleEditor methodsFor: 'events' stamp: 'jmv 9/22/2011 17:13'!doubleClick: evt	| here |	here _ self pointIndex.	(here between: 2 and: string size)		ifTrue: [ self selectWord ]		ifFalse: [			"if at beginning or end, select entire string"			^self selectAll ].! !!SimpleEditor methodsFor: 'menu messages' stamp: 'jmv 9/22/2011 17:09'!cut	"Cut out the current selection and redisplay the paragraph if necessary."	| selection |	self lineSelectAndEmptyCheck: [^ self].	selection _ self selection.	self replaceSelectionWith: ''. 	self clipboardTextPut: selection! !!SimpleEditor methodsFor: 'typing support' stamp: 'jmv 9/22/2011 17:05'!cmdActions	"Same for all instances.	A subclass could handle specific keyboard shortcuts for each instance, though."	^self class cmdActions! !!SimpleEditor methodsFor: 'typing support' stamp: 'jmv 9/22/2011 17:05'!dispatchOn: aKeyboardEvent	"Carry out the action associated with this character, if any."	| asciiValue |	asciiValue _ aKeyboardEvent keyValue.	"Control keys are handled by KeystrokeActions even if they have any modifiers"	(asciiValue >= 32 and: [		aKeyboardEvent commandAltKeyPressed ]) ifTrue: [		^self perform: (self cmdActions at: asciiValue + 1) with: aKeyboardEvent ].	"We don't support multiple lines. Therefore, we don't process cr as a #normalCharacter:"	asciiValue = 13 ifTrue: [		^ true].	^ self perform: (KeystrokeActions at: asciiValue + 1) with: aKeyboardEvent! !!SimpleEditor class methodsFor: 'class initialization' stamp: 'jmv 9/22/2011 17:04'!cmdActions	^cmdActions! !!SimpleEditor class methodsFor: 'class initialization' stamp: 'jmv 9/22/2011 17:03'!initialize 	"SimpleEditor initialize"	self initializeCmdKeyShortcuts.! !!SimpleEditor class methodsFor: 'class initialization' stamp: 'jmv 9/22/2011 17:03'!initializeCmdKeyShortcuts	"Initialize the (unshifted) command-key (or alt-key if not on Mac) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor test"	"	Editor initialize	"	| cmdMap cmds |	cmdMap _ Array new: 256 withAll: #noop:.		"use temp in case of a crash"	cmdMap at: 32 + 1 put: #selectWord:.			"space bar key"	"arranged in QWERTY keyboard order"	cmds _ #(		$w #backWord:		$a #selectAll:		$x #cut:		$c #copySelection:		$v #paste:	).	1 to: cmds size		by: 2		do: [ :i | cmdMap at: (cmds at: i) asciiValue + 1 put: (cmds at: i + 1)].			cmdActions _ cmdMap! !SimpleEditor initialize!!classDefinition: 'SimpleEditor class' category: #'System-Text'!SimpleEditor class	instanceVariableNames: 'cmdActions'!