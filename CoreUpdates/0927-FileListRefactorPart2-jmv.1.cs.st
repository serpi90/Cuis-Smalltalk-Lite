'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 18 April 2011 at 3:16:36 pm'!!classDefinition: #FileList category: #'Tools-FileList'!TextProvider subclass: #FileList	instanceVariableNames: 'acceptedContentsCache fileName directory volList volListIndex list listIndex pattern sortMode brevityState sortAscending dirSelectionBlock currentDirectorySelected fileSelectionBlock showDirsInFileList '	classVariableNames: 'FileReaderRegistry RecentDirs '	poolDictionaries: ''	category: 'Tools-FileList'!!FileContentsBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 12:37'!windowColor	^ Theme current fileContentsBrowser! !!FileList methodsFor: 'file list' stamp: 'jmv 4/16/2011 12:35'!fileListIndex: anInteger	"Select the file name having the given index, and display its contents."	| item name |	self okToChange ifFalse: [^ self].	listIndex := anInteger.	listIndex = 0 		ifTrue: [fileName := nil]		ifFalse:			[item := self fileNameFromFormattedItem: (list at: anInteger).			(item endsWith: self folderString)				ifTrue:					["remove [...] folder string and open the folder"					name := item copyFrom: 1 to: item size - self folderString size.					listIndex := 0.					brevityState := #FileList.					name first = $^						ifTrue: [self directory: nil]						ifFalse: [self directory: (directory directoryNamed: name)]]				ifFalse: [fileName := item]].  "open the file selected"	brevityState := #needToGetBrief.	self changed: #fileListIndex.	self acceptedContentsChanged.	self updateButtonRow! !!FileList methodsFor: 'file menu action' stamp: 'jmv 4/16/2011 10:01'!addNewDirectory	self 		addNew: 'Directory'		byEvaluating: [:newName | directory createDirectory: newName].	self updateDirectory.! !!FileList methodsFor: 'initialization' stamp: 'jmv 4/16/2011 12:35'!directory: dir	"Set the path of the volume to be displayed."	self okToChange ifFalse: [^ self].	self modelSleep.	directory _ dir.	self modelWakeUp.	sortMode ifNil: [		sortMode _ #date.		sortAscending _ false ].	self changed: #relabel.	self pattern: pattern! !!FileList methodsFor: 'initialization' stamp: 'jmv 4/16/2011 10:04'!initialDirectoryList	| dirList |	dirList _ (FileDirectory on: '') directoryNames collect: [ :each |		FileDirectoryWrapper with: (FileDirectory on: each) name: each model: self].	dirList isEmpty ifTrue:[		dirList _ Array with: (FileDirectoryWrapper 			with: FileDirectory default 			name: FileDirectory default localName 			model: self)].	^dirList! !!FileList methodsFor: 'initialization' stamp: 'jmv 4/16/2011 10:06'!initializeself flag: #ojo.	"borrar?""	super initialize.	acceptedContentsCache _ self defaultContents"	showDirsInFileList _ false.	fileSelectionBlock _ [ :entry :myPattern |		entry isDirectory ifTrue: [			showDirsInFileList		] ifFalse: [			(myPattern = '*' or: [ myPattern match: entry name ]) and: [				"Hide Mac resurce forks and folder service stores"				(entry name = '.DS_Store') not and: [					('._*' match: entry name) not ]]		]	].	dirSelectionBlock _ [ :dirName | true].! !!FileList methodsFor: 'initialization' stamp: 'jmv 4/16/2011 10:04'!labelString	^ (directory ifNil: [^'[]']) pathName "contractTo: 50"! !!FileList methodsFor: 'initialization' stamp: 'jmv 4/16/2011 10:05'!universalButtonServices	"Answer a list of services underlying the universal buttons in their initial inception.  For the moment, only the sorting buttons are shown."self flag: #ojo. "borrar los implementors?""	^ {self serviceSortByName. self serviceSortByDate. self serviceSortBySize}"	^ self optionalButtonSpecs! !!FileList methodsFor: 'initialization' stamp: 'jmv 4/16/2011 10:05'!updateDirectory	"directory has been changed externally, by calling directory:.	Now change the view to reflect the change."	self changed: #currentDirectorySelected.	self postOpen! !!FileList methodsFor: 'to be transformed in registration' stamp: 'jmv 4/16/2011 12:30'!volumeMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	^ aMenu addList: {			{'delete directory...'.	#deleteDirectory}}.! !!FileList methodsFor: 'volume list and pattern' stamp: 'jmv 4/16/2011 10:27'!deleteDirectory	"Remove the currently selected directory"	| localDirName |	directory entries size = 0 ifFalse:[^self inform:'Directory must be empty'].	localDirName _ directory localName.	(self confirm: 'Really delete ' , localDirName , '?') ifFalse: [^ self].	directory deleteDirectory: localDirName.	self updateFileList.	self updateDirectory! !!FileList methodsFor: 'volume list and pattern' stamp: 'jmv 4/16/2011 10:18'!listForPatterns: anArray	"Make the list be those file names which match the patterns."	| sizePad newList namePad sizeWithCommasPad font |	directory ifNil: [^#()].	(fileSelectionBlock isKindOf: MessageSend) ifTrue: [		fileSelectionBlock arguments: {directory entries}.		newList _ fileSelectionBlock value.		fileSelectionBlock arguments: #().	] ifFalse: [		newList _ Set new.		anArray do: [ :pat |			newList addAll: (directory entries select: [:entry | fileSelectionBlock value: entry value: pat]) ].	].	newList _ newList asArray sort: self sortBlock.	font _ Preferences standardListFont.	namePad _ newList inject: 0 into: [ :mx :entry | mx max: (font widthOfString: entry first)].	sizePad _ (newList inject: 0 into: [ :mx :entry | mx max: (entry at: 5)]) printString size.	sizeWithCommasPad _ (newList inject: 0 into: [ :mx :entry | mx max: (entry at: 5)]) asStringWithCommas size.	newList _ newList collect: [ :e | self fileNameFormattedFrom: e namePad: namePad sizePad: sizePad sizeWithCommasPad: sizeWithCommasPad ].	^ newList! !!FileList methodsFor: 'volume list and pattern' stamp: 'jmv 4/16/2011 10:27'!veryDeepFixupWith: deepCopier	super veryDeepFixupWith: deepCopier.	self directory: FileDirectory default.	self updateFileList! !!FileList methodsFor: 'private' stamp: 'jmv 4/16/2011 10:01'!currentDirectorySelected	^ currentDirectorySelected! !!FileList methodsFor: 'private' stamp: 'jmv 4/16/2011 10:16'!directoryNamesFor: item	"item may be file directory or server directory"	| entries |	entries _ item directoryNames.	dirSelectionBlock ifNotNil:[entries _ entries select: dirSelectionBlock].	^entries! !!FileList methodsFor: 'private' stamp: 'jmv 4/16/2011 10:16'!postOpen	directory ifNotNil: [		self changed: #(openPath) , directory pathParts. 	]! !!FileList methodsFor: 'private' stamp: 'jmv 4/16/2011 10:17'!setSelectedDirectoryTo: aFileDirectoryWrapper	currentDirectorySelected _ aFileDirectoryWrapper.	self directory: aFileDirectoryWrapper withoutListWrapper.	brevityState := #FileList.	"self addPath: path."	self changed: #fileList.	self acceptedContentsChanged.	self changed: #currentDirectorySelected! !!FileList methodsFor: 'private' stamp: 'jmv 4/16/2011 10:27'!updateFileList	"Update my files list with file names in the current directory  	that match the pattern.	The pattern string may have embedded newlines or semicolons; these separate different patterns."	| patterns |	patterns _ OrderedCollection new.	Cursor wait showWhile: [	(pattern findTokens: (String with: Character cr with: Character lf with: $;))		do: [ :each |			(each includes: $*) | (each includes: $#)					ifTrue: [ patterns add: each]					ifFalse: [each isEmpty										ifTrue: [ patterns add: '*']										ifFalse: [ patterns add: '*' , each , '*']]].	list _ self listForPatterns: patterns.	listIndex _ 0.	fileName _ nil.	acceptedContentsCache _ ''.	self changed: #fileList.	self updateButtonRow]! !!FileList methodsFor: 'user interface' stamp: 'jmv 4/16/2011 10:18'!morphicDirectoryTreePane	^self morphicDirectoryTreePaneFiltered: #initialDirectoryList! !!FileList methodsFor: 'user interface' stamp: 'jmv 4/16/2011 10:18'!morphicDirectoryTreePaneFiltered: aSymbol	^(SimpleHierarchicalListMorph 		model: self		listGetter: aSymbol		indexGetter: #currentDirectorySelected		indexSetter: #setSelectedDirectoryTo:		menuGetter: #volumeMenu		keystrokeAction: nil)			autoDeselect: false;			enableDrag: false;			enableDrop: true;			yourself! !!FileList methodsFor: 'user interface' stamp: 'jmv 4/16/2011 10:18'!morphicFileContentsPane	^TextModelMorph 		textProvider: self		textGetter: #acceptedContents 		textSetter: #put:		selectionGetter: #contentsSelection! !!FileList methodsFor: 'user interface' stamp: 'jmv 4/16/2011 10:18'!morphicFileListPane	^(PluggableListMorph 		model: self 		listGetter: #fileList 		indexGetter: #fileListIndex		indexSetter: #fileListIndex: 		menuGetter: #fileListMenu)			enableDrag: true;			enableDrop: false;			yourself! !!FileList methodsFor: 'user interface' stamp: 'jmv 4/16/2011 10:18'!morphicPatternPane	^TextModelMorph 		textProvider: self		textGetter: #pattern 		textSetter: #pattern:! !!FileList class methodsFor: 'instance creation' stamp: 'jmv 4/16/2011 10:21'!morphicViewOnDirectory: aFileDirectory	| aFileList window middleRow upperRow |	aFileList _ self new directory: aFileDirectory.	upperRow _ LayoutMorph newRow.	upperRow		addMorph: aFileList morphicPatternPane proportionalWidth: 0.3;		addAdjusterAndMorph: aFileList optionalButtonRow proportionalWidth: 0.7.	middleRow _ LayoutMorph newRow.	middleRow		addMorph: aFileList morphicDirectoryTreePane proportionalWidth: 0.3;		addAdjusterAndMorph: aFileList morphicFileListPane proportionalWidth: 0.7.	window _ SystemWindow new model: aFileList.	window layoutMorph		addMorph: upperRow fixedHeight: self defaultButtonPaneHeight;		addAdjusterAndMorph: middleRow proportionalHeight: 0.4;		addAdjusterAndMorph: aFileList morphicFileContentsPane proportionalHeight: 0.6.	window setLabel: aFileDirectory pathName.	aFileList postOpen.	^ window! !!FileList class methodsFor: 'instance creation' stamp: 'jmv 4/16/2011 10:21'!openMorphicViewInWorld	"FileList2 openMorphicViewInWorld"	^(self morphicViewOnDirectory: FileDirectory default) openInWorld! !!FileList class methodsFor: 'class initialization' stamp: 'jmv 4/16/2011 12:33'!initialize	"FileList initialize"	(Smalltalk allClassesImplementing: #fileReaderServicesForFile:suffix:)		do: [:providerMetaclass | self registerFileReader: providerMetaclass soleInstance]! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 4/16/2011 10:20'!findAFileList: evt	"Locate a file list, open it, and bring it to the front.	Create one if necessary, respecting the Preference."	self		findAWindowSatisfying: [ :aWindow |			aWindow model isKindOf: FileList ]		orMakeOneUsing: [			FileList openMorphicViewInWorld ]! !!TheWorldMenu methodsFor: 'commands' stamp: 'jmv 4/16/2011 10:20'!openFileList	FileList openMorphicViewInWorld! !FileList class removeSelector: #allRegisteredServices!FileList initialize!FileList removeSelector: #addPath:!FileList removeSelector: #entriesMatching:!FileList removeSelector: #recentDirs!FileList removeSelector: #servicesFromSelectorSpecs:!FileList removeSelector: #setFileStream:!FileList removeSelector: #suffixOfSelectedFile!FileList removeSelector: #volumeList!FileList removeSelector: #volumeListIndex!FileList removeSelector: #volumeListIndex:!!classDefinition: #FileList category: #'Tools-FileList'!TextProvider subclass: #FileList	instanceVariableNames: 'acceptedContentsCache fileName directory list listIndex pattern sortMode brevityState sortAscending showDirsInFileList currentDirectorySelected fileSelectionBlock dirSelectionBlock'	classVariableNames: 'FileReaderRegistry'	poolDictionaries: ''	category: 'Tools-FileList'!Smalltalk removeClassNamed: #StandardFileMenuResult!