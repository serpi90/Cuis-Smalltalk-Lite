'From Cuis 2.7 of 3 September 2010 [latest update: #600] on 27 September 2010 at 11:58:04 am'!!Morph methodsFor: 'submorphs-accessing' stamp: 'jmv 5/10/2010 14:04'!findSubmorphBinary: aBlock	"Use binary search for finding a specific submorph of the receiver. Caller must be certain that the ordering holds for the submorphs."	^submorphs findBinary: aBlock do: [ :found | found ] ifNone: nil! !!SequenceableCollection methodsFor: 'enumerating' stamp: 'jmv 5/10/2010 14:05'!findBinary: aBlock	"Search for an element in the receiver using binary search.	The argument aBlock is a one-element block returning		0 	- if the element is the one searched for		<0	- if the search should continue in the first half		>0	- if the search should continue in the second half	If no matching element is found, raise an error.	Examples:		#(1 3 5 7 11 15 23) findBinary: [ :arg | 11 - arg ]	"	^self findBinary: aBlock do: [ :found | found ] ifNone: [ self errorNotFound: aBlock ]! !!SequenceableCollection methodsFor: 'enumerating' stamp: 'jmv 9/27/2010 11:55'!findBinary: aBlock do: actionBlock ifNone: exceptionBlock	"Search for an element in the receiver using binary search.	The argument aBlock is a one-element block returning		0 	- if the element is the one searched for		<0	- if the search should continue in the first half		>0	- if the search should continue in the second half	If found, evaluate actionBlock with the found element as argument	If no matching element is found, evaluate exceptionBlock,	with the  'bounding' elements (or nil) as arguments.	Examples:		#(1 3 5 7 11 15 23)			findBinary: [ :arg | 11 - arg ]			do: [ :found | found print ]			ifNone: [ :a :b | ('between: ', {a. b} printString) print]		#(1 3 5 7 11 15 23)			findBinary: [ :arg | 12 - arg ]			do: [ :found | found print ]			ifNone: [ :a :b | ('between: ', {a. b} printString) print]		#(1 3 5 7 11 15 23)			findBinary: [ :arg | 0.5 - arg ]			do: [ :found | found print ]			ifNone: [ :a :b | ('between: ', {a. b} printString) print]		#(1 3 5 7 11 15 23)			findBinary: [ :arg | 25 - arg ]			do: [ :found | found print ]			ifNone: [ :a :b | ('between: ',{a. b} printString) print]	"	^ self		findBinaryIndex: aBlock		do: [ :foundIndex |			actionBlock value: (self at: foundIndex) ]		ifNone: [ :prevIndex :nextIndex |			exceptionBlock				value:					(prevIndex > 0 ifTrue: [ self at: prevIndex ])				value:					(nextIndex <= self size ifTrue: [ self at: nextIndex ]) ].! !!SequenceableCollection methodsFor: 'enumerating' stamp: 'jmv 5/10/2010 14:03'!findBinaryIndex: aBlock	"Search for an element in the receiver using binary search.	The argument aBlock is a one-element block returning		0 	- if the element is the one searched for		<0	- if the search should continue in the first half		>0	- if the search should continue in the second half	If no matching element is found, raise an error.	Examples:		#(1 3 5 7 11 15 23) findBinaryIndex: [ :arg | 11 - arg ]	"	^self findBinaryIndex: aBlock do: [ :found | found ] ifNone: [ self errorNotFound: aBlock]! !!SequenceableCollection methodsFor: 'enumerating' stamp: 'jmv 9/27/2010 11:55'!findBinaryIndex: aBlock do: actionBlock ifNone: exceptionBlock	"Search for an element in the receiver using binary search.	The argument aBlock is a one-element block returning		0 	- if the element is the one searched for		<0	- if the search should continue in the first half		>0	- if the search should continue in the second half	If found, evaluate actionBlock with the index as argument	If no matching element is found, evaluate exceptionBlock,	with the indexes of the  'bounding' elements as arguments.	Warning: Might give invalid indexes, see examples below	Examples:		#(1 3 5 7 11 15 23)			findBinaryIndex: [ :arg | 11 - arg ]			do: [ :found | found print ]			ifNone: [ :a :b | ('between: ', {a. b} printString) print]		#(1 3 5 7 11 15 23)			findBinaryIndex: [ :arg | 12 - arg ]			do: [ :found | found print ]			ifNone: [ :a :b | ('between: ', {a. b} printString) print]		#(1 3 5 7 11 15 23)			findBinaryIndex: [ :arg | 0.5 - arg ]			do: [ :found | found print ]			ifNone: [ :a :b | ('between: ', {a. b} printString) print]		#(1 3 5 7 11 15 23)			findBinaryIndex: [ :arg | 25 - arg ]			do: [ :found | found print ]			ifNone: [ :a :b | ('between: ',{a. b} printString) print]	"	| index low high test |	low _ 1.	high _ self size.	[		index _ high + low // 2.		low > high ] whileFalse: [		test _ aBlock value: (self at: index).		test = 0 			ifTrue: [ ^actionBlock value: index ]			ifFalse: [ test > 0				ifTrue: [ low _ index + 1 ]				ifFalse: [ high _ index - 1 ]]].	^exceptionBlock valueWithPossibleArgs: {high. low}! !SequenceableCollection removeSelector: #findBinary:ifNone:!SequenceableCollection removeSelector: #findBinaryIndex:ifNone:!