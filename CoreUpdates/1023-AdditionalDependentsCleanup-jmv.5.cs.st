'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 2 June 2011 at 3:09:15 pm'!!classDefinition: #Object category: #'Kernel-Objects'!ProtoObject subclass: #Object	instanceVariableNames: ''	classVariableNames: 'DependentsFields '	poolDictionaries: ''	category: 'Kernel-Objects'!!Object methodsFor: 'events-old protocol' stamp: 'jmv 6/2/2011 09:30'!addDependent: anObject	"Make the given object one of the receiver's dependents."	self		when: #changed:		send: #update:		to: anObject.	^anObject! !!Object methodsFor: 'events-old protocol' stamp: 'jmv 6/2/2011 09:32'!breakDependents	"Remove all of the receiver's dependents."	self removeActionsForEvent: #changed:! !!Object methodsFor: 'events-old protocol' stamp: 'jmv 6/2/2011 09:36'!changed: aParameter 	"Receiver changed. The change is denoted by the argument aParameter. 	Usually the argument is a Symbol that is part of the dependent's change 	protocol. Inform all of the dependents."	self 		triggerEvent: #changed:		with: aParameter! !!Object methodsFor: 'events-old protocol' stamp: 'jmv 6/2/2011 09:31'!removeDependent: anObject	"Remove the given object as one of the receiver's dependents."	self 		removeActionsWithReceiver: anObject		forEvent: #changed:.	^ anObject! !!Object methodsFor: 'events-old protocol' stamp: 'jmv 6/2/2011 09:36'!update: aParameter 	"Receive a change notice from an object of whom the receiver is a 	dependent. The default behavior is to do nothing; a subclass might want 	to change itself in some way."	^self! !!Object methodsFor: 'user interface' stamp: 'jmv 6/2/2011 09:37'!notify: aString 	"Create and schedule a Notifier with the argument as the message in 	order to request confirmation before a process can proceed."	Debugger		openContext: thisContext		label: 'Notifier'		contents: aString	"nil notify: 'confirmation message'"! !!Object class methodsFor: 'class initialization' stamp: 'jmv 6/2/2011 09:24'!initialize	"Object initialize"! !!ActiveModel class methodsFor: 'initialize-release' stamp: 'jmv 6/2/2011 09:36'!flushEventSystem	"ActiveModel flushEventSystem"	self actionMaps keysAndValuesDo: [ :rcvr :evtDict | 		rcvr ifNotNil:[			"make sure we don't modify evtDict while enumerating"			evtDict keys do: [ :evtName | | msgSet |				msgSet _ evtDict at: evtName ifAbsent: nil.				msgSet ifNil: [ rcvr removeActionsForEvent: evtName]]]].	self actionMaps finalizeValues. ! !!PluggableButtonMorph methodsFor: 'initialization' stamp: 'jmv 6/2/2011 15:06'!model: anObject	"Set my model and make me me a dependent of the given object."	model ifNotNil: [model removeDependent: self].	getStateSelector ifNotNil: [		anObject ifNotNil: [anObject addDependent: self]].	model _ anObject! !!PluggableButtonMorph methodsFor: 'initialize-release' stamp: 'jmv 6/2/2011 15:07'!model: anObject stateGetter: getStateSel action: actionSel label: aString	getStateSelector _ getStateSel.	actionSelector _ actionSel.	self model: anObject.	self label: aString! !!PluggableButtonMorph methodsFor: 'updating' stamp: 'jmv 6/2/2011 15:05'!update: aParameter	self redrawNeeded! !!SystemDictionary methodsFor: 'memory space' stamp: 'jmv 6/2/2011 09:29'!garbageCollect	"Primitive. Reclaims all garbage and answers the number of bytes of available space."	ActiveModel flushEventSystem.	^self primitiveGarbageCollect! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'jmv 6/2/2011 09:52'!snapshot: save andQuit: quit embedded: embeddedFlag 	"Mark the changes file and close all files as part of #processShutdownList.	If save is true, save the current state of this Smalltalk in the image file.	If quit is true, then exit to the outer OS shell.	The latter part of this method runs when resuming a previously saved image. This resume logic checks for a document file to process when starting up."	| resuming msg |	ActiveModel flushEventSystem.	(SourceFiles at: 2) ifNotNil: 			[msg := String streamContents: 							[:s | 							s								nextPutAll: '----';								nextPutAll: (save 											ifTrue: [quit ifTrue: ['QUIT'] ifFalse: ['SNAPSHOT']]											ifFalse: [quit ifTrue: ['QUIT/NOSAVE'] ifFalse: ['NOP']]);								nextPutAll: '----';								print: Date dateAndTimeNow;								space;								nextPutAll: (FileDirectory default localNameFor: self imageName);								nextPutAll: ' priorSource: ';								print: LastQuitLogPosition].			self assureStartupStampLogged.			save 				ifTrue: 					[LastQuitLogPosition _ ((SourceFiles at: 2)								setToEnd;								position)].			self logChange: msg.			Transcript				cr;				show: msg;				cr].	self processShutDownList: quit.	Cursor write show.	save 		ifTrue: 			[resuming := embeddedFlag 						ifTrue: [self snapshotEmbeddedPrimitive]						ifFalse: [self snapshotPrimitive].	"<-- PC frozen here on image file"			]		ifFalse: [resuming := false].	quit & (resuming == false) ifTrue: [self quitPrimitive].	Cursor normal show.	self setGCParameters.	resuming == true ifTrue: [self clearExternalObjects].	self processStartUpList: resuming == true.	resuming == true 		ifTrue: [			self setPlatformPreferences.			self readDocumentFile].	"Now it's time to raise an error"	resuming		ifNil: [ self error: 'Failed to write image file (disk full?)'].	^resuming! !!PluggableButtonMorph reorganize!('accessing' actWhen: action: actionSelector adoptWidgetsColor: icon: label: label:font: performAction roundButtonStyle:)('drawing' clipsSubmorphs draw3DLookOn: drawEmbossedLabelOn: drawInconOn: drawOn: drawRoundGradientLookOn: fontToUse)('event handling' handlesMouseDown: handlesMouseOver: mouseDown: mouseEnter: mouseLeave: mouseUp:)('initialization' defaultBorderColor defaultBorderWidth defaultColor initialize model:)('initialize-release' model:stateGetter:action:label:)('updating' update:)('private' getModelState magnifiedIcon mouseButton2Activity)('testing' isPressed isRoundButton mouseIsOver)('geometry' extent:)('geometry testing' containsPoint: isOrthoRectangularMorph)!ActiveModel class removeSelector: #flushEvents!Object class removeSelector: #flushDependents!Object class removeSelector: #flushEvents!Object initialize!Object class removeSelector: #initializeDependentsFields!Object class removeSelector: #reInitializeDependentsFields!ActiveModel removeSelector: #addDependent:!ActiveModel removeSelector: #breakDependents!ActiveModel removeSelector: #changed:!ActiveModel removeSelector: #dependents!ActiveModel removeSelector: #removeDependent:!!ActiveModel reorganize!('copying' copy)('accessing' actionMap releaseActionMap updateableActionMap)!Object removeSelector: #dependents!Object removeSelector: #dependents:!!classDefinition: #Object category: #'Kernel-Objects'!ProtoObject subclass: #Object	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Objects'!!Object reorganize!('*tools-browser' browseClassHierarchy)('Breakpoint' break)('accessing' addInstanceVarNamed:withValue: at: at:put: basicAt: basicAt:put: basicSize customizeExplorerContents size yourself)('as yet unclassified' revisar)('associating' ->)('binding' bindingOf:)('casing' caseOf: caseOf:otherwise:)('class membership' class isKindOf: isMemberOf: respondsTo:)('comparing' = closeTo: hash literalEqual: ~=)('converting' adaptToFloat:andSend: adaptToFraction:andSend: adaptToInteger:andSend: as: asOrderedCollection asString asStringOrText complexContents mustBeBoolean mustBeBooleanIn: withoutListWrapper)('copying' clone copy copyForClipboard copyFrom: copySameFrom: copyTwoLevel postCopy shallowCopy)('events-old protocol' addDependent: breakDependents changed: removeDependent: update:)('drag and drop' acceptDroppingMorph:event:inMorph:)('error handling' assert: caseError confirm: confirm:orCancel: doesNotUnderstand: error: halt halt: handles: notify:at: notifyWithLabel: primitiveFail primitiveFailed shouldBeImplemented shouldNotImplement subclassResponsibility)('evaluating' value valueWithArguments:)('events-accessing' actionForEvent: actionMap actionSequenceForEvent: actionsDo: hasActionForEvent: setActionSequence:forEvent: updateableActionMap)('events-registering' when:evaluate: when:send:to: when:send:to:with: when:send:to:withArguments:)('events-removing' releaseActionMap removeAction:forEvent: removeActionsForEvent: removeActionsSatisfying: removeActionsSatisfying:forEvent: removeActionsWithReceiver: removeActionsWithReceiver:forEvent:)('events-triggering' triggerEvent: triggerEvent:with: triggerEvent:withArguments:)('finalization' actAsExecutor executor finalizationRegistry finalize retryWithGC:until: toFinalizeSend:to:with:)('inspecting' basicInspect inspect inspectWithLabel: inspectorClass)('macpal' currentWorld flash)('message handling' disableCode: perform: perform:with: perform:with:with: perform:with:with:with: perform:withArguments: perform:withArguments:inSuperclass: withArgs:executeMethod:)('object serialization' comeFullyUpOnReload: convertToCurrentVersion:refStream: objectForDataStream: readDataFrom:size: storeDataOn:)('printing' fullPrintString isLiteral longPrintOn: longPrintOn:limitedTo:indent: longPrintString longPrintStringLimitedTo: nominallyUnsent: print printOn: printString printStringLimitedTo: printWithClosureAnalysisOn: storeOn: storeString stringRepresentation)('system primitives' becomeForward: becomeForward:copyHash: className instVarAt: instVarAt:put: instVarNamed: instVarNamed:put: primitiveChangeClassTo: someObject)('testing' is: isArray isBehavior isBlock isClosure isCollection isFloat isFraction isHeap isInteger isInterval isMethodProperties isNumber isPoint isPseudoContext isString isSymbol isVariableBinding name renameTo: stepAt:in: stepIn: wantsSteps wantsStepsIn:)('translation support' inline: success: var:declareC:)('user interface' explore hasContentsInExplorer inform: notYetImplemented notify:)('private' errorImproperStore errorNonIntegerIndex errorNotIndexable errorSubscriptBounds: primitiveError: species storeAt:inTempFrame:)('tracing' explorePointers inboundPointers inboundPointersExcluding: outboundPointers outboundPointersDo:)!