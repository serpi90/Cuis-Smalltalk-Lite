'From Squeak3.7 of ''4 September 2004'' [latest update: #5989] on 20 April 2008 at 11:59:17 pm'!!classDefinition: #OldHandMorph category: #'Morphic-OldKernel'!OldMorph subclass: #OldHandMorph	instanceVariableNames: 'mouseFocus keyboardFocus eventListeners mouseListeners keyboardListeners mouseClickState mouseOverHandler lastMouseEvent targetOffset damageRecorder temporaryCursor temporaryCursorOffset hasChanged savedPatch userInitials lastEventBuffer navigationFocus'	classVariableNames: 'DoubleClickTime EventStats NewEventRules NormalCursor PasteBuffer ShowEvents'	poolDictionaries: 'EventSensorConstants'	category: 'Morphic-OldKernel'!!OldHandMorph methodsFor: 'focus handling' stamp: 'jmv 4/18/2008 10:43'!navigationFocus	^navigationFocus! !!OldHandMorph methodsFor: 'focus handling' stamp: 'jmv 4/18/2008 13:24'!navigationFocusOut	navigationFocus isNil		ifTrue: [^self].	self navigationFocus: navigationFocus owner! !!OldHandMorph methodsFor: 'focus handling' stamp: 'jmv 4/18/2008 13:29'!navigationFocusIn	navigationFocus isNil		ifTrue: [			^self navigationFocus:World submorphs first].	navigationFocus submorphs isEmpty		ifTrue: [^self].	self navigationFocus: navigationFocus submorphs first! !!OldHandMorph methodsFor: 'focus handling' stamp: 'jmv 4/18/2008 13:29'!navigationFocusNext	(navigationFocus isNil or: [navigationFocus owner isNil])		ifTrue: [			^self navigationFocus: World submorphs first].	navigationFocus owner submorphs size < 2		ifTrue: [^self].	navigationFocus goBehind.	self navigationFocus: navigationFocus owner submorphs first! !!OldHandMorph methodsFor: 'focus handling' stamp: 'jmv 4/18/2008 13:29'!navigationFocusPrevious	(navigationFocus isNil or: [navigationFocus owner isNil])		ifTrue: [			^self navigationFocus: World submorphs first].	navigationFocus owner submorphs size < 2		ifTrue: [^self].	self navigationFocus: navigationFocus owner submorphs last! !!OldHandMorph methodsFor: 'focus handling' stamp: 'jmv 4/18/2008 13:35'!navigationFocus: aMorph	| old |	old _ navigationFocus.	navigationFocus _ (aMorph == World) ifTrue: [nil] ifFalse: [aMorph].	navigationFocus notNil ifTrue: [		navigationFocus isSystemWindow			ifTrue: [navigationFocus activate]			ifFalse: [navigationFocus comeToFront]].	self newKeyboardFocus: aMorph.	old changed.	navigationFocus changed! !!CompositeLW methodsFor: 'drawing' stamp: 'jmv 4/18/2008 13:40'!fullDrawOn: aCanvas	"Draw the full Morphic structure on the given Canvas"		| f |	self visible ifFalse: [^ self].	(aCanvas isVisible: self fullBounds) ifFalse:[^self].		self isKnownFailing ifTrue: [^self drawErrorOn: aCanvas].		aCanvas drawMorph: self.	self drawSubmorphsOn: aCanvas.		f _ ActiveHand navigationFocus.	f == self ifTrue: [		aCanvas drawHighlight: self bounds label: self printString ]! !!LightWidget methodsFor: 'drawing' stamp: 'jmv 4/18/2008 13:40'!fullDrawOn: aCanvas	"Draw the full Morphic structure on the given Canvas"		| f |	self visible ifFalse: [^ self].	(aCanvas isVisible: self fullBounds) ifFalse:[^self].		self isKnownFailing ifTrue: [^self drawErrorOn: aCanvas].	aCanvas drawMorph: self.		f _ ActiveHand navigationFocus.	f == self ifTrue: [		aCanvas drawHighlight: self bounds label: self printString ]! !!OldMorph methodsFor: 'drawing' stamp: 'jmv 4/18/2008 13:40'!fullDrawOn: aCanvas	"Draw the full Morphic structure on the given Canvas"	| f |	self visible ifFalse: [^ self].	(aCanvas isVisible: self fullBounds) ifFalse:[^self].	self isKnownFailing ifTrue: [^self drawErrorOn: aCanvas].	"Draw receiver itself"	(aCanvas isVisible: self bounds) ifTrue:[aCanvas drawMorph: self].	self drawSubmorphsOn: aCanvas.	self drawDropHighlightOn: aCanvas.	self drawMouseDownHighlightOn: aCanvas.		f _ ActiveHand navigationFocus.	f == self ifTrue: [		aCanvas drawHighlight: self bounds label: self printString ]! !!Morph methodsFor: 'drawing' stamp: 'jmv 4/18/2008 13:40'!fullDrawOn: aCanvas
	"Draw the full Morphic structure on the given Canvas"
	| c f |self revisar.
	self visible ifFalse: [^ self].
	(aCanvas isVisible: self fullBounds) ifFalse:[^self].	
	self isKnownFailing ifTrue: [^self drawErrorOn: aCanvas].	c _ aCanvas isMorphicCanvas ifTrue: [aCanvas] ifFalse: [aCanvas asMorphicCanvas].	c drawMorph: self.		f _ ActiveHand navigationFocus.	f == self ifTrue: [		c drawHighlight: self bounds label: self printString ]! !!CompositeMorph methodsFor: 'drawing' stamp: 'jmv 4/18/2008 13:40'!fullDrawOn: aCanvas
	"Draw the full Morphic structure on the given Canvas"
	| c f |self revisar.
	self visible ifFalse: [^ self].
	(aCanvas isVisible: self fullBounds) ifFalse:[^self].	
	self isKnownFailing ifTrue: [^self drawErrorOn: aCanvas].	c _ aCanvas isMorphicCanvas ifTrue: [aCanvas] ifFalse: [aCanvas asMorphicCanvas].	c drawMorph: self.	self drawSubmorphsOn: c.		f _ ActiveHand navigationFocus.	f == self ifTrue: [		c drawHighlight: self bounds label: self printString ]! !!Canvas methodsFor: 'other' stamp: 'jmv 4/18/2008 13:46'!drawHighlight: box label: s	self frameRectangle: box width: 2 color: Color yellow.	self frameRectangle: box width: 12 color: (Color yellow alpha: 0.3).	"self drawString: s at: box topLeft + (5@1)"! !!OldHandMorph methodsFor: 'events-processing' stamp: 'jmv 4/20/2008 23:56'!handleEvent: anEvent	| evt ofs k |	owner ifNil:[^self].	evt _ anEvent.	EventStats ifNil:[EventStats _ IdentityDictionary new].	EventStats at: #count put: (EventStats at: #count ifAbsent:[0]) + 1.	EventStats at: evt type put: (EventStats at: evt type ifAbsent:[0]) + 1.	evt isMouseOver ifTrue:[^self sendMouseEvent: evt].ShowEvents == true ifTrue:[	Display fill: (0@0 extent: 250@120) rule: Form over fillColor: Color white.	ofs _ (owner hands indexOf: self) - 1 * 60.	evt printString displayAt: (0@ofs) + (evt isKeyboard ifTrue:[0@30] ifFalse:[0@0]).	self keyboardFocus printString displayAt: (0@ofs)+(0@45).].	"Notify listeners"	self sendListenEvent: evt to: self eventListeners.	evt isKeyboard ifTrue:[		(evt commandKeyPressed and: [evt isKeystroke]) ifTrue: [			k _ evt keyValue.			k = 28 ifTrue: [^self navigationFocusOut].			k = 29 ifTrue: [^self navigationFocusIn].			k = 30 ifTrue: [^self navigationFocusPrevious].			k = 31 ifTrue: [^self navigationFocusNext].		].		self sendListenEvent: evt to: self keyboardListeners.		self sendKeyboardEvent: evt.		^self mouseOverHandler processMouseOver: lastMouseEvent].	evt isDropEvent ifTrue:[		self sendEvent: evt focus: nil.		^self mouseOverHandler processMouseOver: lastMouseEvent].	evt isMouse ifTrue:[		self sendListenEvent: evt to: self mouseListeners.		lastMouseEvent _ evt].	"Check for pending drag or double click operations."	mouseClickState ifNotNil:[		(mouseClickState handleEvent: evt from: self) ifFalse:[			"Possibly dispatched #click: or something and will not re-establish otherwise"			^self mouseOverHandler processMouseOver: lastMouseEvent]].	evt isMove ifTrue:[		self position: evt position.		self sendMouseEvent: evt.	] ifFalse:[		"Issue a synthetic move event if we're not at the position of the event"		(evt position = self position) ifFalse:[self moveToEvent: evt].		"Drop submorphs on button events"		(self hasSubmorphs) 			ifTrue:[self dropMorphs: evt]			ifFalse:[self sendMouseEvent: evt].	].	ShowEvents == true ifTrue:[self mouseFocus printString displayAt: (0@ofs) + (0@15)].	self mouseOverHandler processMouseOver: lastMouseEvent.! !