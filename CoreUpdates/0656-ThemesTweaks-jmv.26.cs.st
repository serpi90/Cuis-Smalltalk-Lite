'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 23 November 2010 at 11:19:15 am'!!classDefinition: #DarkBluesPalette category: #'Theme-Themes'!ColorTheme subclass: #DarkBluesPalette	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Theme-Themes'!!classDefinition: #GrayPalette category: #'Theme-Themes'!ColorTheme subclass: #GrayPalette	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Theme-Themes'!!CodeHolder methodsFor: 'controls' stamp: 'jmv 11/23/2010 09:43'!addOptionalButtonsTo: window at: fractions plus: verticalOffset	"If the receiver wishes it, add a button pane to the window, and answer the verticalOffset plus the height added"	| delta buttons divider |	self wantsOptionalButtons ifFalse: [^verticalOffset].	delta _ self defaultButtonPaneHeight.	buttons _ self optionalButtonRow 		color: (ColorTheme current buttonColorFrom: self class windowColor).	divider _ BorderedSubpaneDividerMorph forBottomEdge.	divider extent: 4@4; color: Color transparent; borderColor: #raised; borderWidth: 2.	window 		addMorph: buttons		fullFrame: (LayoutFrame 				fractions: fractions 				offsets: (0@verticalOffset corner: 0@(verticalOffset + delta - 1))).	window 		addMorph: divider		fullFrame: (LayoutFrame 				fractions: fractions 				offsets: (0@(verticalOffset + delta - 1) corner: 0@(verticalOffset + delta))).	^ verticalOffset + delta! !!Color class methodsFor: 'instance creation' stamp: 'jmv 11/22/2010 15:59'!hue: hue chroma: chroma brightness: brightness	^self basicNew setHue: hue chroma: chroma brightness: brightness! !!Color class methodsFor: 'instance creation' stamp: 'jmv 11/22/2010 15:59'!hue: hue chroma: chroma luminance: luma	^self basicNew setHue: hue chroma: chroma luminance: luma! !!Color class methodsFor: 'instance creation' stamp: 'jmv 11/22/2010 15:58'!hue: hue saturation: saturation brightness: brightness	"Create a color with the given hue, saturation, and brightness. Hue is given as the angle in degrees of the color on the color circle where red is zero degrees. Saturation and brightness are numbers in [0.0..1.0] where larger values are more saturated or brighter colors. For example, (Color h: 0 s: 1 v: 1) is pure red."	"Note: By convention, brightness is abbreviated 'v' to to avoid confusion with blue."	^ self setHue: hue saturation: saturation brightness: brightness! !!ColorTheme methodsFor: 'colors' stamp: 'jmv 11/23/2010 09:42'!buttonColorFrom: aColor	^ Display depth <= 8			ifTrue: [ Color transparent ]			ifFalse: [ aColor paler ]! !!ColorTheme methodsFor: 'colors' stamp: 'jmv 11/23/2010 09:58'!textHighlightFocused: focused	"A nice light blue."	| textHighlight |	Display depth = 1 ifTrue: [^ Color veryLightGray].	Display depth = 2 ifTrue: [^ Color gray: 0.87].	textHighlight _ self textHighlight.	^focused		ifTrue: [ textHighlight ]		ifFalse: [ self unfocusedTextHighlightFrom: textHighlight ]! !!ColorTheme methodsFor: 'colors' stamp: 'jmv 11/23/2010 11:12'!unfocusedTextHighlightFrom: aColor	^aColor adjustSaturation: -0.15 brightness: -0.13! !!ColorTheme methodsFor: 'menu colors' stamp: 'jmv 11/23/2010 09:45'!menuHighlight	^ Display depth < 8		ifTrue: [ Color veryLightGray ]		ifFalse: [ self textHighlight ]! !!ColorTheme methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:17'!browser	^ self useUniformColors		ifTrue: [ self defaultWindowColor ]		ifFalse: [ Color lightGreen duller ]! !!ColorTheme methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:16'!defaultWindowColor	^ Color lightGray! !!ColorTheme methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:17'!fileList	^ self useUniformColors		ifTrue: [ self defaultWindowColor ]		ifFalse: [ Color lightMagenta duller ]! !!ColorTheme methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:17'!messageSet	^ self useUniformColors		ifTrue: [ self defaultWindowColor ]		ifFalse: [ Color lightBlue duller ]! !!ColorTheme methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:17'!packageBrowser	^ self useUniformColors		ifTrue: [ self defaultWindowColor ]		ifFalse: [ (Color r: 1.0 g: 1.0 b: 0.6) duller ]! !!ColorTheme methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:17'!testRunner	^ self useUniformColors		ifTrue: [ self defaultWindowColor ]		ifFalse: [ (Color r: 0.650 g: 0.753 b: 0.976) duller ]! !!ColorTheme methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:17'!transcript	^ self useUniformColors		ifTrue: [ self defaultWindowColor ]		ifFalse: [ Color lightOrange duller ]! !!ColorTheme methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:17'!workspace	^ self useUniformColors		ifTrue: [ self defaultWindowColor ]		ifFalse: [ Color lightYellow duller ]! !!ColorTheme methodsFor: 'widget colors' stamp: 'jmv 11/23/2010 10:52'!listHighlightFocused: aBoolean	^ self textHighlightFocused: aBoolean! !!ColorTheme methodsFor: 'widget colors' stamp: 'jmv 11/23/2010 11:00'!listMultiHighlightFocused: aBoolean	^ (self listHighlightFocused: aBoolean) 		adjustSaturation: 0.0 brightness: -0.08! !!ColorTheme methodsFor: 'widget colors' stamp: 'jmv 11/23/2010 09:57'!listSelectedRowText	^ self text! !!ColorTheme methodsFor: 'widget colors' stamp: 'jmv 11/23/2010 09:57'!listUnselectedRowText	^ self text! !!ColorTheme methodsFor: 'other options' stamp: 'jmv 11/22/2010 16:14'!useUniformColors	^false! !!BluesPalette methodsFor: 'colors' stamp: 'jmv 11/23/2010 09:29'!insertionPoint	^ self textHighlight muchDarker! !!BluesPalette methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:16'!defaultWindowColor	^ Color lightBlue duller! !!BluesPalette methodsFor: 'other options' stamp: 'jmv 11/22/2010 16:23'!useUniformColors	^true! !!Conformist methodsFor: 'colors' stamp: 'jmv 11/23/2010 11:05'!listMultiHighlightFocused: aBoolean	^ (self listHighlightFocused: aBoolean) 		adjustSaturation: 0.0 brightness: 0.15! !!Conformist methodsFor: 'colors' stamp: 'jmv 11/23/2010 11:05'!unfocusedTextHighlightFrom: aColor	^aColor adjustSaturation: 0.0 brightness: 0.15! !!Conformist methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:16'!defaultWindowColor	^ Color gray duller! !!Conformist methodsFor: 'other options' stamp: 'jmv 11/22/2010 16:30'!useUniformColors	^true! !!DarkBluesPalette methodsFor: 'other options' stamp: 'jmv 11/22/2010 16:05'!embossedTitles	^true! !!DarkBluesPalette methodsFor: 'other options' stamp: 'jmv 11/22/2010 16:05'!roundWindowCorners	^true! !!DarkBluesPalette methodsFor: 'other options' stamp: 'jmv 11/22/2010 16:32'!useUniformColors	^true! !!DarkBluesPalette methodsFor: 'other options' stamp: 'jmv 11/22/2010 16:05'!useWindowTitleGradient	^true! !!DarkBluesPalette methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:16'!defaultWindowColor	^ Color hue: 212 chroma: 0.6 luminance: 0.24! !!DarkBluesPalette methodsFor: 'colors' stamp: 'jmv 11/22/2010 16:06'!buttonLabel	^ Color hue: 212 chroma: 0.3 luminance: 0.8! !!DarkBluesPalette methodsFor: 'colors' stamp: 'jmv 11/22/2010 16:42'!paneColorFrom: aColor	^ Color hue: 212 chroma: 0.6 luminance: 0.4! !!DarkBluesPalette methodsFor: 'colors' stamp: 'jmv 11/22/2010 17:45'!shout	^ #(		(default 									black 		)		(invalid 									red 			)		(excessCode 								red 			)		(comment 								(green lighter)				italic)		(unfinishedComment 					(red muchDarker) 			italic)		(#'$'										(red muchDarker) 	)		(character								(red muchDarker) 	)		(integer									(red muchDarker) 	)		(number									(red muchDarker) 	)			(#-											(red muchDarker) 	)		(symbol									(blue muchDarker)			bold)			(stringSymbol							(blue muchDarker)			bold)			(literalArray								(blue muchDarker)			bold)		(string										(magenta muchDarker)		normal)		(unfinishedString						red							normal		)		(assignment								nil								bold			)		(ansiAssignment 						nil								bold)		(literal										nil								italic)		(keyword									(blue muchDarker)			)		(binary 									(blue muchDarker)			)			(unary										(blue muchDarker)			)		(incompleteKeyword					(gray veryMuchDarker)		underlined)		(incompleteBinary 						(gray veryMuchDarker)		underlined)			(incompleteUnary						(gray veryMuchDarker)		underlined)		(undefinedKeyword						red			)		(undefinedBinary 						red			)			(undefinedUnary							red			)															(patternKeyword 						nil								bold)		(patternBinary 							nil								bold)		(patternUnary							nil								bold)			(#self 										(red muchDarker)			bold)		(#super									(red muchDarker)			bold) 		(#true 									(red muchDarker)			bold)		(#false 									(red muchDarker)			bold)		(#nil 										(red muchDarker)			bold)		(#thisContext 							(red muchDarker)			bold)		(#return									(red muchDarker)			bold)		(patternArg 								(blue muchDarker)			italic)			(methodArg 								(blue muchDarker)			italic)		(blockPatternArg 						(blue muchDarker)			italic)		(blockArg 									(blue muchDarker)			italic)		(argument 								(blue muchDarker)			italic)		(blockArgColon							black		) 		(leftParenthesis							black		) 		(rightParenthesis						black		) 		(leftParenthesis1						(green muchDarker)		) 		(rightParenthesis1						(green muchDarker)		) 		(leftParenthesis2						(magenta muchDarker)		) 		(rightParenthesis2						(magenta muchDarker)		) 		(leftParenthesis3						(red muchDarker)		) 		(rightParenthesis3						(red muchDarker)		) 		(leftParenthesis4						(green darker)		) 		(rightParenthesis4						(green darker)		) 		(leftParenthesis5						(orange darker)		) 		(rightParenthesis5						(orange darker)		) 		(leftParenthesis6						(magenta darker)		) 		(rightParenthesis6						(magenta darker)		) 		(leftParenthesis7						blue		) 		(rightParenthesis7						blue		) 		(blockStart 								black		) 		(blockEnd 								black		) 		(blockStart1								(green muchDarker)			) 		(blockEnd1								(green muchDarker)			) 		(blockStart2								(magenta muchDarker)		) 		(blockEnd2								(magenta muchDarker)		) 		(blockStart3								(red muchDarker)		) 		(blockEnd3								(red muchDarker)		) 		(blockStart4								(green darker)		) 		(blockEnd4								(green darker)		) 		(blockStart5								(orange darker)		) 		(blockEnd5								(orange darker)		) 		(blockStart6								(magenta darker)		) 		(blockEnd6								(magenta darker)		) 		(blockStart7								blue		) 		(blockEnd7								blue		) 																																																				(arrayStart								black		) 		(arrayEnd									black		) 		(arrayStart1								black		) 		(arrayEnd1								black		) 		(leftBrace 								black		) 		(rightBrace 								black		) 		(cascadeSeparator 						black		) 		(statementSeparator 					black		) 		(externalCallType 						black		) 		(externalCallTypePointerIndicator 	black		) 		(primitiveOrExternalCallStart 			black							bold	) 		(primitiveOrExternalCallEnd			black							bold	)		(methodTempBar						gray		) 		(blockTempBar 							gray		)		(blockArgsBar							gray		)		(primitive									(green muchDarker)			bold)		(pragmaKeyword						(green muchDarker)			bold)		(pragmaUnary							(green muchDarker)			bold)		(pragmaBinary							(green muchDarker)			bold)											(externalFunctionCallingConvention	(green muchDarker)			bold) 		(module									(green muchDarker)			bold)		(blockTempVar 							gray							italic)		(blockPatternTempVar					gray							italic)		(instVar 									(magenta muchDarker)		)		(workspaceVar							black							bold)		(undefinedIdentifier					red							bold)		(incompleteIdentifier					(gray muchDarker) 			(italic underlined))		(tempVar									(gray muchDarker)			italic)		(patternTempVar						(gray muchDarker)			italic)		(poolConstant							(gray muchDarker)			italic)		(classVar									(gray muchDarker)			bold)		(globalVar								black							bold) )! !!DarkBluesPalette methodsFor: 'colors' stamp: 'jmv 11/22/2010 16:04'!text	^ Color hue: 212 chroma: 0.3 luminance: 0.8! !!DarkBluesPalette methodsFor: 'colors' stamp: 'jmv 11/22/2010 17:36'!textHighlight	^ Color hue: 212 chroma: 0.4 luminance: 0.3! !!DarkBluesPalette methodsFor: 'colors' stamp: 'jmv 11/23/2010 11:08'!unfocusedTextHighlightFrom: aColor	^aColor adjustSaturation: 0.0 brightness: 0.08! !!DarkBluesPalette methodsFor: 'colors' stamp: 'jmv 11/22/2010 16:06'!windowLabel	^ Color hue: 212 chroma: 0.4 luminance: 0.6! !!DarkBluesPalette methodsFor: 'menu colors' stamp: 'jmv 11/22/2010 17:40'!menu	^ Color hue: 212 chroma: 0.6 luminance: 0.3! !!DarkBluesPalette methodsFor: 'menu colors' stamp: 'jmv 11/22/2010 17:40'!menuText	^ Color hue: 212 chroma: 0.3 luminance: 0.8! !!DarkBluesPalette methodsFor: 'menu colors' stamp: 'jmv 11/22/2010 17:39'!menuTitleBar	^ self menu twiceDarker! !!DarkBluesPalette methodsFor: 'widget colors' stamp: 'jmv 11/22/2010 17:48'!switchOff	^ Color hue: 212 chroma: 0.5 luminance: 0.2! !!DarkBluesPalette methodsFor: 'widget colors' stamp: 'jmv 11/22/2010 17:48'!switchOn	^ Color hue: 212 chroma: 0.6 luminance: 0.4! !!DarkColorTheme methodsFor: 'tool colors' stamp: 'jmv 11/18/2010 13:14'!browser	^ Color r: 0.255 g: 0.3 b: 0.21! !!Debugger methodsFor: 'controls' stamp: 'jmv 11/23/2010 09:43'!addOptionalButtonsTo: window at: fractions plus: verticalOffset	"Add button panes to the window.  A row of custom debugger-specific buttons (Proceed, Restart, etc.) is always added, and if optionalButtons is in force, then the standard code-tool buttons are also added.  Answer the verticalOffset plus the height added."	| delta buttons divider anOffset |	anOffset _ (Preferences optionalButtons and: [Preferences extraDebuggerButtons | true])		ifTrue:			[super addOptionalButtonsTo: window at: fractions plus: verticalOffset]		ifFalse:			[verticalOffset].	delta _ self defaultButtonPaneHeight.	buttons _ self customButtonRow.	buttons color: (ColorTheme current buttonColorFrom: self class windowColor).	divider _ BorderedSubpaneDividerMorph forBottomEdge.	divider extent: 4@4; color: Color transparent; borderColor: #raised; borderWidth: 2.	window 		addMorph: buttons		fullFrame: (LayoutFrame 				fractions: fractions 				offsets: (0@anOffset corner: 0@(anOffset + delta - 1))).	window 		addMorph: divider		fullFrame: (LayoutFrame 				fractions: fractions 				offsets: (0@(anOffset + delta - 1) corner: 0@(anOffset + delta))).	^ anOffset + delta! !!EntryField2LW methodsFor: 'accessing' stamp: 'jmv 11/23/2010 09:59'!selectionColor	^ColorTheme current textHighlightFocused: self hasKeyboardFocus! !!GrayPalette methodsFor: 'colors' stamp: 'jmv 11/23/2010 09:34'!windowLabel	^Color gray: 0.3! !!GrayPalette methodsFor: 'other options' stamp: 'jmv 11/23/2010 09:32'!embossedTitles	^true! !!GrayPalette methodsFor: 'other options' stamp: 'jmv 11/23/2010 09:32'!roundWindowCorners	^true! !!GrayPalette methodsFor: 'other options' stamp: 'jmv 11/23/2010 09:22'!useUniformColors	^true! !!GrayPalette methodsFor: 'other options' stamp: 'jmv 11/23/2010 09:32'!useWindowTitleGradient	^true! !!LazyListMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 09:58'!colorForRow: row	^(selectedRow notNil and: [ row = selectedRow])		ifTrue: [ ColorTheme current listSelectedRowText ]		ifFalse: [ ColorTheme current listUnselectedRowText ].! !!LazyListMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 10:30'!drawBackgroundForMulti: row on: aCanvas	| selectionDrawBounds c |	"shade the background darker, if this row is selected"	selectionDrawBounds := self drawBoundsForRow: row.	selectionDrawBounds := selectionDrawBounds intersect: bounds.	c _ (selectedRow notNil and: [ row = selectedRow])		ifTrue: [ ColorTheme current listHighlightFocused: listSource hasKeyboardFocus ]		ifFalse: [ ColorTheme current listMultiHighlightFocused: listSource hasKeyboardFocus ].	aCanvas fillRectangle: selectionDrawBounds color: c! !!LazyListMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 10:52'!drawSelectionOn: aCanvas	| selectionDrawBounds |	selectedRow ifNil: [ ^self ].	selectedRow = 0 ifTrue: [ ^self ].	selectionDrawBounds := self drawBoundsForRow: selectedRow.	selectionDrawBounds := selectionDrawBounds intersect: bounds.	aCanvas		fillRectangle: selectionDrawBounds		color: (ColorTheme current listHighlightFocused: listSource hasKeyboardFocus)! !!ListLW methodsFor: 'initialization' stamp: 'jmv 1/26/2009 14:09'!initialize	super initialize.	backColor _ Color lightGray.	scrollBarColor _ backColor darker.	scrollThumbColor _ scrollBarColor darker! !!MenuItemMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 09:45'!drawOn: aCanvas 	| stringColor stringBounds leftEdge |	stringColor := color.	isSelected & isEnabled		ifTrue: [			aCanvas fillRectangle: bounds color: ColorTheme current menuHighlight].	leftEdge := 0.	self hasIcon		ifTrue: [| iconForm | 			iconForm := isEnabled ifTrue:[self icon] ifFalse:[self icon asGrayScale].			aCanvas paintImage: iconForm at: self left @ (self top + (self height - iconForm height // 2)).			leftEdge := iconForm width + 2].	self hasMarker		ifTrue: [ leftEdge := leftEdge + self submorphBounds width + 8 ].	stringBounds := bounds left: bounds left + leftEdge.	aCanvas		drawString: contents		in: stringBounds		font: self fontToUse		color: stringColor.	subMenu		ifNotNil: [aCanvas paintImage: SubMenuMarker at: self right - 8 @ (self top + self bottom - SubMenuMarker height // 2)]! !!NewParagraph methodsFor: 'display' stamp: 'jmv 11/23/2010 09:59'!selectionColor	^ColorTheme current textHighlightFocused: self focused! !!OneLineEditorMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 09:59'!selectionColor	^ColorTheme current textHighlightFocused: self hasKeyboardFocus! !!PluggableListMorph methodsFor: 'event handling' stamp: 'jmv 11/23/2010 10:35'!keyboardFocusChange: aBoolean	"The message is sent to a morph when its keyboard focus changes.	The given argument indicates that the receiver is gaining (versus losing) the keyboard focus.	In this case, all we need to do is to redraw border feedback"	"No. Selection might also be shown differently. Invalidate everything"	false		ifTrue: [ self invalidateBorderFeedback ]		ifFalse: [ self changed ]! !!Preferences class methodsFor: 'text highlighting' stamp: 'jmv 11/22/2010 17:17'!initializeTextHighlightingParameters	"	Preferences initializeTextHighlightingParameters	"	"eliminar instancias, sacar esta tambien"	Parameters		at: #insertionPointColor		put: ColorTheme current insertionPoint! !!SimpleHierarchicalListMorph methodsFor: 'drawing' stamp: 'jmv 11/23/2010 10:53'!drawOn: aCanvas	super drawOn: aCanvas.	(drawKeyboardFocusIndicator and: [ self hasKeyboardFocus ]) ifTrue: [		aCanvas			frameRectangle: self focusIndicatorRectangle 			width: Preferences focusIndicatorWidth			color: Preferences focusIndicatorColor ].	selectedMorph  ifNotNil:		[aCanvas fillRectangle:			((selectedMorph bounds: selectedMorph bounds in: self)						intersect: scroller bounds)				color: (ColorTheme current listHighlightFocused: self hasKeyboardFocus)].	Preferences showLinesInHierarchyViews ifTrue:[		self drawLinesOn: aCanvas.	].! !!SimpleHierarchicalListMorph methodsFor: 'event handling' stamp: 'jmv 11/23/2010 10:36'!keyboardFocusChange: aBoolean	"The message is sent to a morph when its keyboard focus changes.	The given argument indicates that the receiver is gaining (versus losing) the keyboard focus.	In this case, all we need to do is to redraw border feedback"	"No. Selection might also be shown differently. Invalidate everything"	false		ifTrue: [ self invalidateBorderFeedback ]		ifFalse: [ self changed ]! !!SoftColorTheme methodsFor: 'colors' stamp: 'jmv 11/20/2010 12:03'!buttonLabel	^Color gray: 0.2! !!SoftColorTheme methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 11:16'!messageSet	^ Color r: 0.45 g: 0.6 b: 0.85! !!TextMorph methodsFor: 'event handling' stamp: 'jmv 11/23/2010 10:33'!keyboardFocusChange: aBoolean		"The message is sent to a morph when its keyboard focus changes.	The given argument indicates that the receiver is gaining (versus losing) the keyboard focus.	In this case, all we need to do is to redraw border feedback"	paragraph ifNotNil: [ paragraph focused: aBoolean ].	aBoolean		ifTrue: [			"A hand is wanting to send us characters..."			editor ifNil: [ self editor ].	"Forces install"			self startBlinking ]		ifFalse: [ self stopBlinking ].	"Selection might be shown differently when focused"	self changed! !!TextMorphForEditView methodsFor: 'event handling' stamp: 'jmv 11/23/2010 10:36'!keyboardFocusChange: aBoolean	"The message is sent to a morph when its keyboard focus changes.	The given argument indicates that the receiver is gaining (versus losing) the keyboard focus.	In this case, all we need to do is to redraw border feedback"	super keyboardFocusChange: aBoolean.	"super already invalidated everything, as selection might be shown differently depending on focus"	false ifTrue: [ editView invalidateBorderFeedback ]! !!Uniformity methodsFor: 'tool colors' stamp: 'jmv 11/23/2010 09:16'!defaultWindowColor	^ Color white duller! !!Uniformity methodsFor: 'other options' stamp: 'jmv 11/22/2010 16:35'!useUniformColors	^true! !Uniformity removeSelector: #browser!Uniformity removeSelector: #changeSorter!Uniformity removeSelector: #fileList!Uniformity removeSelector: #listMultiHighlight!Uniformity removeSelector: #packageBrowser!Uniformity removeSelector: #testRunner!Uniformity removeSelector: #transcript!Preferences class removeSelector: #textHighlightColor!Conformist removeSelector: #browser!Conformist removeSelector: #changeSorter!Conformist removeSelector: #fileList!Conformist removeSelector: #listMultiHighlight!Conformist removeSelector: #packageBrowser!Conformist removeSelector: #testRunner!Conformist removeSelector: #transcript!Conformist removeSelector: #workspace!BluesPalette removeSelector: #browser!BluesPalette removeSelector: #fileList!BluesPalette removeSelector: #packageBrowser!BluesPalette removeSelector: #testRunner!BluesPalette removeSelector: #transcript!ColorTheme removeSelector: #listHighlight!ColorTheme removeSelector: #listMultiHighlight!ColorTheme removeSelector: #listRow!ColorTheme removeSelector: #textHighlight:!