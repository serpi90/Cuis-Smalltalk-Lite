'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 25 April 2011 at 10:01:26 pm'!!classDefinition: #TheWorldMenu category: #'Morphic-Menus'!Object subclass: #TheWorldMenu	instanceVariableNames: 'myWorld myHand '	classVariableNames: 'OpenMenuRegistry '	poolDictionaries: ''	category: 'Morphic-Menus'!!CPUWatcher methodsFor: 'porcine capture' stamp: 'jmv 4/25/2011 21:46'!openMorphicWindowForSuspendedProcess: aProcess	| menu rules |	menu _ MenuMorph new.	"nickname  allow-stop  allow-debug"	rules _ ProcessBrowser nameAndRulesFor: aProcess.	menu add: 'Dismiss this menu' target: menu selector: #delete; addLine.	menu add: 'Open Process Browser' target: ProcessBrowserWindow selector: #openProcessBrowser.	menu add: 'Resume'		target: self		selector: #resumeProcess:fromMenu:		argumentList: { aProcess . menu }.	menu add: 'Terminate'		target: self		selector: #terminateProcess:fromMenu:		argumentList: { aProcess . menu }.	rules third ifTrue: [		menu add: 'Debug at a lower priority'			target: self			selector: #debugProcess:fromMenu:			argumentList: { aProcess . menu }.	].	menu addTitle: aProcess identityHash asString,		' ', rules first,		' is taking too much time and has been suspended.What do you want to do with it?'.	menu stayUp.	menu popUpInWorld! !!ClassListBrowser methodsFor: 'initialization' stamp: 'jmv 4/25/2011 21:28'!initForClassesNamed: nameList title: aTitle	"Initialize the receiver for the class-name-list and title provided"	self systemOrganizer: SystemOrganization.	metaClassIndicated _ false.	defaultTitle _ aTitle.	classList _ nameList copy! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 21:21'!browseVersions	"Create and schedule a Versions Browser, showing all versions of the 	currently selected message. Answer the browser or nil."	| selector class | 	(selector _ model selectedMessageName)		ifNil:[ self inform: 'Sorry, only actual methods have retrievable versions.'. ^nil ]		ifNotNil: [(MessageSet isPseudoSelector: selector)				ifTrue: ["Eliminates Definition and Hierarchy"					^ model classCommentIndicated						ifTrue: [							VersionsBrowserWindow								browseCommentOf: model selectedClass. nil ]].			class _ model selectedClassOrMetaClass.			^VersionsBrowserWindow				browseVersionsOf: (class compiledMethodAt: selector)				class: model selectedClass				meta: class isMeta				category: (class organization categoryOfElement: selector)				selector: selector]! !!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 21:16'!findMethodInChangeSets	"Find and open a changeSet containing the current method."	| aName |	(aName _ model selectedMessageName) ifNotNil: [		ChangeSorterWindow			browseChangeSetsWithClass: model selectedClassOrMetaClass			selector: aName ]! !!ChangeSorterWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 21:20'!browseVersions	"Create and schedule a changelist browser on the versions of the 	selected message."	| class selector method category pair sourcePointer |	(selector _ model selectedMessageName) ifNil: [^ self].	class _ model selectedClassOrMetaClass.	(class includesSelector: selector)		ifTrue: [method _ class compiledMethodAt: selector.				category _ class whichCategoryIncludesSelector: selector.				sourcePointer _ nil]		ifFalse: [pair _ model methodInfoFromRemoval: {class name. selector}.				pair ifNil: [^ nil].				sourcePointer _ pair first.				method _ CompiledMethod toReturnSelf setSourcePointer: sourcePointer.				category _ pair last].	VersionsBrowserWindow		browseVersionsOf: method		class: model selectedClass meta: class isMeta		category: category selector: selector		lostMethodPointer: sourcePointer! !!ChangeSorterWindow class methodsFor: 'services' stamp: 'jmv 4/25/2011 21:16'!browseChangeSetsWithClass: class selector: selector	"Put up a menu comprising a list of change sets that hold changes for the given class and selector.  If the user selects one, open a single change-sorter onto it"	| hits index |	hits _ ChangeSorter allChangeSets select: [ :cs |		(cs atSelector: selector class: class) ~~ #none].	hits isEmpty ifTrue: [ ^ self inform: class name, '.', selector , 'is not in any change set'].	index _ hits size = 1		ifTrue:	[1]		ifFalse:	[			(PopUpMenu				labelArray: (hits collect: [ :cs | cs name ])				lines: #()) 					startUp ].	index = 0 ifTrue: [ ^ self ].	ChangeSorterWindow open: (ChangeSorter new myChangeSet: (hits at: index)) label: nil! !!DebuggerWindow class methodsFor: 'services' stamp: 'jmv 4/25/2011 21:58'!closeAllDebuggers	"DebuggerWindow closeAllDebuggers"	DebuggerWindow allInstancesDo: [ :w | w delete ].	PreDebugWindow allInstancesDo: [ :w | w delete ].! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 21:41'!browseCompressedCodeStream: aStandardFileStream 	"Browse the selected file in fileIn format."	| zipped unzipped |	zipped _ GZipReadStream on: aStandardFileStream.	unzipped _ ReadStream on:  zipped contents asString.	FileContentsBrowserWindow browseStream: unzipped named: aStandardFileStream name.! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 21:41'!browseMCZCodeStream: aStandardFileStream 	"Browse the selected file in fileIn format."	| unzipped |	unzipped _ aStandardFileStream asUnZippedStream: 'snapshot/source.st'.	unzipped ascii.	FileContentsBrowserWindow browseStream: unzipped named: aStandardFileStream name! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 21:41'!browseStream: aStream	FileContentsBrowserWindow browseStream: aStream named: aStream name! !!FileContentsBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 21:21'!browseVersions	"Create and schedule a message set browser on all versions of the 	currently selected message selector."	| class selector |	(selector _ model selectedMessageName) ifNotNil: [		class _ model selectedClassOrMetaClass.		(class exists and: [class realClass includesSelector: selector]) ifTrue: [			VersionsBrowserWindow				browseVersionsOf: (class realClass compiledMethodAt: selector)				class: class realClass theNonMetaClass				meta: class realClass isMeta				category: model selectedMessageCategoryName				selector: selector]]! !!FileContentsBrowserWindow class methodsFor: 'services' stamp: 'jmv 4/25/2011 21:41'!browseStream: aStream named: aString	| package organizer browser |	Cursor wait showWhile: [		organizer _ SystemOrganizer defaultList: Array new.		package _ (FilePackage new fullName: aString; fileInFrom: aStream).		organizer 			classifyAll: package classes keys 			under: package packageName.		(browser _ FileContentsBrowser new)			systemOrganizer: organizer;			thePackage: package].	FileContentsBrowserWindow open: browser label: 'File Contents Browser'! !!FileListWindow class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 21:43'!openFileList	"	FileListWindow openFileList	"	FileListWindow open: (FileList new directory: FileDirectory default) label: nil! !!HierarchyBrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 21:30'!browseClassesSatisfying: classBlock title: aTitle	"Put up a ClassListBrowser showing all classes that satisfy the classBlock."	self		forClassesNamed:			(Smalltalk allClasses select:					[:c | (classBlock value: c) == true]				thenCollect:					[:c | c name])		title:			aTitle! !!HierarchyBrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 21:27'!forClassesNamed: nameList title: aTitle	"Initialize the receiver for the class-name-list and title provided"	| browser |	browser _ ClassListBrowser new initForClassesNamed: nameList title: aTitle.	HierarchyBrowserWindow openNoSysCat: browser label: aTitle	"HierarchyBrowserWindow forClassesNamed: #(Browser CategoryViewer) title: 'Frogs'"! !!HierarchyBrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 4/25/2011 21:25'!onClass: aClass selector: aSymbol	"Open a new full browser set to class.	HierarchyBrowserWindow onClass: Morph selector: #submorphs	HierarchyBrowserWindow onClass: Morph selector: nil	"	| newBrowser |	newBrowser _ HierarchyBrowser for: aClass selector: aSymbol.	HierarchyBrowserWindow openNoSysCat: newBrowser label: newBrowser labelString.	newBrowser assureSelectionsShow! !!HierarchyBrowserWindow class methodsFor: 'examples' stamp: 'jmv 4/25/2011 21:31'!example1	"Put up a ClassListBrowser that shows all classes that have the string 'Pluggable' in their names"	self browseClassesSatisfying: [:cl | cl name includesSubString: 'Pluggable'] title: 'Pluggables'"HierarchyBrowserWindow example1"! !!HierarchyBrowserWindow class methodsFor: 'examples' stamp: 'jmv 4/25/2011 21:35'!example2	"Put up a ClassListBrowser that shows all classes whose names start with the letter S"	self forClassesNamed: (Smalltalk allClasses collect: [:c | c name] thenSelect: [:aName | aName first == $S]) title: 'All classes starting with S'"HierarchyBrowserWindow example2"! !!HierarchyBrowserWindow class methodsFor: 'examples' stamp: 'jmv 4/25/2011 21:35'!example3	"Put up a ClassListBrowser that shows all Variable classes"	self browseClassesSatisfying:  [:c | c isVariable] title: 'All Variable classes'"HierarchyBrowserWindow example3"! !!HierarchyBrowserWindow class methodsFor: 'examples' stamp: 'jmv 4/25/2011 21:34'!example4	"Put up a ClassListBrowser that shows all classes implementing more than 100 methods"	self browseClassesSatisfying:		[:c | (c selectors size + c class selectors size) > 100] title: 'Classes with more than 100 methods'"HierarchyBrowserWindow example4"! !!HierarchyBrowserWindow class methodsFor: 'examples' stamp: 'jmv 4/25/2011 21:35'!example5	"Put up a ClassListBrowser that shows all classes that lack class comments"	self		browseClassesSatisfying: 			[:c | c organization classComment isEmptyOrNil] 		title: 'Classes lacking class comments'"HierarchyBrowserWindow example5"! !!HierarchyBrowserWindow class methodsFor: 'examples' stamp: 'jmv 4/25/2011 21:35'!example6	"Put up a ClassListBrowser that shows all classes that have class instance variables"	self		browseClassesSatisfying: 			[:c | c class instVarNames size > 0]		title:			'Classes that define class-side instance variables'"HierarchyBrowserWindow example6"! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 4/25/2011 21:43'!findAFileList: evt	"Locate a file list, open it, and bring it to the front.	Create one if necessary, respecting the Preference."	self		findAWindowSatisfying: [ :aWindow |			aWindow model isKindOf: FileList ]		orMakeOneUsing: [			FileListWindow openFileList ]! !!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 4/25/2011 22:01'!openRecentSubmissionsBrowser: evt	"Locate a recent-submissions browser, open it, and bring it to the front.  Create one if necessary.  Only works in morphic"	self		findAWindowSatisfying: [ :aWindow |			aWindow model isKindOf: RecentMessageSet ]		orMakeOneUsing: [			RecentMessageSetWindow openRecentSubmissionsWindow ]! !!ProcessBrowserWindow class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 21:45'!openProcessBrowser	"	ProcessBrowserWindow openProcessBrowser	"	"Create and schedule a ProcessBrowser."	Smalltalk garbageCollect.	ProcessBrowserWindow open: ProcessBrowser new label: nil! !!RecentMessageSetWindow class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 22:00'!openRecentSubmissionsWindow	"Answer a SystemWindow holding recent submissions"	| recentMessages messageSet |	recentMessages _ Utilities recentMethodSubmissions copy reversed.	messageSet _ RecentMessageSet messageList: recentMessages.	messageSet autoSelectString: nil.	RecentMessageSetWindow open: messageSet label: 'Recent submissions -- youngest first'	"	RecentMessageSetWindow openRecentSubmissionsWindow	"! !!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 4/25/2011 21:28'!browseClassesWithNamesContaining: aString caseSensitive: caseSensitive 	"Smalltalk browseClassesWithNamesContaining: 'eMorph' caseSensitive: true "	"Launch a class-list list browser on all classes whose names containg aString as a substring."	| suffix aList |	suffix _ caseSensitive				ifTrue: [' (case-sensitive)']				ifFalse: [' (use shift for case-sensitive)'].	aList _ OrderedCollection new.	Cursor wait		showWhile: [Smalltalk				allClassesDo: [:class | (class name includesSubstring: aString caseSensitive: caseSensitive)						ifTrue: [aList add: class name]]].	aList size > 0		ifTrue: [HierarchyBrowserWindow forClassesNamed: aList asSet asSortedArray title: 'Classes whose names contain ' , aString , suffix]! !!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 4/25/2011 18:03'!browseViewReferencesFromNonViews	"	Smalltalk browseViewReferencesFromNonViews	"	| aList aLiteral aCollection |	aCollection _ OrderedCollection new.	"Tweak to look just for pluggables or also for menus (or maybe for all morphs)""	PopUpMenu withAllSubclasses , MenuMorph withAllSubclasses , PluggableMorph withAllSubclasses do: [ :view |"	PluggableMorph withAllSubclassesDo: [ :view |"	MenuMorph withAllSubclassesDo: [ :view |"				aLiteral _ view name.				"tweak to linclude refs to SysWindow subhierarchy or not"		(view includesBehavior: SystemWindow) 		& false		ifFalse: [					Smalltalk allBehaviorsDo: [ :class |				((class includesBehavior: Morph) or: [ class includesBehavior: Morph class ]) ifFalse: [					aList _ class						whichSelectorsReferTo: aLiteral						special: false						byte: nil.					aList do: [ :sel |						sel == #DoIt ifFalse: [							"For special selectors, look for the literal in the source code.							Otherwise, for example, searching for senders of #== will include senders of #ifNil:"							((class sourceCodeAt: sel) findString: aLiteral) > 0  ifTrue: [								aCollection add:									(MethodReference new										setStandardClass: class										methodSymbol: sel) ]]]]]]].	Smalltalk		browseMessageList: aCollection asSet asArray sort		name: 'References to Views from non-Views'		autoSelect: ''.! !!TestRunnerWindow class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 21:52'!openTestRunner	TestRunnerWindow open: TestRunner new label: nil! !!TheWorldMenu methodsFor: 'commands' stamp: 'jmv 4/25/2011 21:43'!openFileList	FileListWindow openFileList! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 4/25/2011 21:58'!debugMenu        | menu |        menu _ self menu: 'debug...'.        ^self fillIn: menu from: {                 { 'inspect world' . { #myWorld . #inspect } }.                { 'explore world' . { #myWorld . #explore } }.                { 'MessageTally all Processes' . { self . #startMessageTally } }.                { 'MessageTally UI and browse' . { self . #startThenBrowseMessageTally } }.                nil.                { 'start drawing all again' . { #myWorld . #removeAllKnownFailing } }.                { 'start stepping again' . { #myWorld . #resumeAfterStepError } }.                { 'close all debuggers' . { DebuggerWindow . #closeAllDebuggers } }.        }! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 4/25/2011 21:53'!openMenu	"Build the open window menu for the world."	| menu |	menu _ self menu: 'open...'.	self fillIn: menu from: {		{'browser' . { self . #openBrowser}. 'A five-paned tool that lets you see all the code in the system'}.		{'workspace' . {self . #openWorkspace}. 'A window for evaluating Smalltalk expressions' }.		{'text editor' . {self . #openTextEditor}. 'A window for composing text' }.		{'file list' . {self . #openFileList} . 'A tool allowing you to browse any file' }.		{'transcript' . {self . #openTranscript}. 'A window used to report messages sent to Transcript' }.		{ 'process browser' . { ProcessBrowserWindow . #openProcessBrowser } }.		{ 'emergency evaluator'. { Transcripter. #emergencyEvaluator } }.		"{'inner world' . { WorldWindow . #test1} }."		nil.		{'message names' . { self . #openMessageNames} . 'A tool for finding and editing methods that contain any given keyword in their names.'}.		nil.		{'simple change sorter' . {self . #openChangeSorter1} . 'A tool allowing you to view the methods in a single change set' }.		{'dual change sorter' . {self . #openChangeSorter2} . 'A tool allowing you to compare and manipulate two change sets concurrently' }.		nil.		{'SUnit Test Runner' . {TestRunnerWindow . #openTestRunner} . 'A tool allowing you to compare and manipulate two change sets concurrently' }.	}.	^menu! !!Utilities class methodsFor: 'summer97 additions' stamp: 'jmv 4/25/2011 21:21'!browseVersionsForClass: aClass selector: aSelector	VersionsBrowserWindow		browseVersionsOf: (aClass compiledMethodAt: aSelector)		class: aClass		meta: aClass isMeta		category: (aClass organization categoryOfElement: aSelector)		selector: aSelector! !!VersionsBrowserWindow class methodsFor: 'services' stamp: 'jmv 4/25/2011 21:18'!browseCommentOf: class	Cursor read showWhile: [ | changeList |		changeList _ ClassCommentVersionsBrowser new scanVersionsOf: class.	 	changeList ifNil: [^ self inform: 'No versions available'].		VersionsBrowserWindow			open: changeList			label: 'Recent versions of ', class name, '''s comments' ]! !!VersionsBrowserWindow class methodsFor: 'services' stamp: 'jmv 4/25/2011 21:21'!browseVersionsOf: method class: class meta: meta category: msgCategory selector: selector 	^ self browseVersionsOf: method class: class meta: meta category: msgCategory selector: selector lostMethodPointer: nil! !!VersionsBrowserWindow class methodsFor: 'services' stamp: 'jmv 4/25/2011 21:20'!browseVersionsOf: method class: class meta: meta category: msgCategory selector: selector lostMethodPointer: sourcePointer 	| changeList browser |	Cursor read showWhile: [		changeList _ (browser _ VersionsBrowser new)			scanVersionsOf: method class: class meta: meta			category: msgCategory selector: selector].	changeList ifNil: [ self inform: 'No versions available'. ^nil ].	sourcePointer ifNotNil: [		changeList setLostMethodPointer: sourcePointer ].	VersionsBrowserWindow open: changeList label: 'Recent versions of ', selector.	^browser! !Workspace class removeSelector: #open!!VersionsBrowserWindow class reorganize!('services' browseCommentOf: browseVersionsOf:class:meta:category:selector: browseVersionsOf:class:meta:category:selector:lostMethodPointer:)!ClassCommentVersionsBrowser class removeSelector: #browseCommentOf:!VersionsBrowser class removeSelector: #browseVersionsOf:class:meta:category:selector:!VersionsBrowser class removeSelector: #browseVersionsOf:class:meta:category:selector:lostMethodPointer:!Utilities class removeSelector: #closeAllDebuggers!Utilities class removeSelector: #openRecentSubmissionsWindow!TheWorldMenu class removeSelector: #registerOpenCommand:!TheWorldMenu class removeSelector: #registeredOpenCommands!TheWorldMenu class removeSelector: #registry!TheWorldMenu class removeSelector: #unregisterOpenCommand:!!TheWorldMenu class reorganize!('as yet unclassified')!!classDefinition: #TheWorldMenu category: #'Morphic-Menus'!Object subclass: #TheWorldMenu	instanceVariableNames: 'myWorld myHand'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Menus'!TextModel class removeSelector: #open!!TestRunnerWindow class reorganize!('instance creation' openTestRunner)!TestRunner class removeSelector: #initialize!TestRunner class removeSelector: #open!TestRunner class removeSelector: #unload!StandardFileStream removeSelector: #open!!RecentMessageSetWindow class reorganize!('instance creation' openRecentSubmissionsWindow)!!ProcessBrowserWindow class reorganize!('instance creation' openProcessBrowser)!ProcessBrowser class removeSelector: #open!PasteUpMorph removeSelector: #open!!HierarchyBrowserWindow class reorganize!('GUI building' browseClassesSatisfying:title: forClassesNamed:title: onClass:selector:)('examples' example1 example2 example3 example4 example5 example6)!!FileListWindow class reorganize!('instance creation' openFileList)!FileList class removeSelector: #openMorphicViewInWorld!!FileContentsBrowserWindow class reorganize!('services' browseStream:named:)!FileContentsBrowser class removeSelector: #browseStream:named:!DualChangeSorter class removeSelector: #open!!DebuggerWindow class reorganize!('services' closeAllDebuggers)!!ChangeSorterWindow class reorganize!('GUI building')('services' browseChangeSetsWithClass:selector:)!ClassListBrowser class removeSelector: #browseClassesSatisfying:title:!ClassListBrowser class removeSelector: #example1!ClassListBrowser class removeSelector: #example2!ClassListBrowser class removeSelector: #example3!ClassListBrowser class removeSelector: #example4!ClassListBrowser class removeSelector: #example5!ClassListBrowser class removeSelector: #example6!!ClassListBrowser class reorganize!('as yet unclassified')!ChangeSorter class removeSelector: #browseChangeSetsWithClass:selector:!ArrayLiteralTest removeSelector: #array!