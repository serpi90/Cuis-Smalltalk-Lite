'From Cuis 3.1 of 4 March 2011 [latest update: #850] on 7 April 2011 at 9:50:51 am'!!AbstractFont class methodsFor: 'constants' stamp: 'jmv 4/5/2011 22:32'!boldCode	^1! !!AbstractFont class methodsFor: 'constants' stamp: 'jmv 4/5/2011 22:32'!italicCode	^2! !!AbstractFont class methodsFor: 'constants' stamp: 'jmv 4/5/2011 22:32'!normalCode	^0! !!AbstractFont class methodsFor: 'constants' stamp: 'jmv 4/5/2011 22:32'!struckOutCode	^8! !!AbstractFont class methodsFor: 'constants' stamp: 'jmv 4/5/2011 22:32'!underlinedCode	^4! !!CharacterScanner methodsFor: 'private' stamp: 'jmv 4/6/2011 17:39'!setFont	| priorFont attributes |	"Set the font and other emphasis.	In fact set actual ParagraphStyle (or nil), alignment, font and emphasis"		priorFont _ font.	self setActualFont: (text fontAt: lastIndex).	attributes _ text attributesAt: lastIndex.	text		withFormattingAttributeValues: attributes		do: [ :familyNameInText :pointSizeInText :emphasisInText :alignmentInText :colorInText :paragraphStyleInText :characterStyleInText :kernInText |			colorInText ifNotNil: [ self textColor: colorInText ].			alignment _ alignmentInText.			kern _ kernInText.			paragraphStyle _ paragraphStyleInText ].		"Hardcoded color for TextAction"	attributes do: [ :attribute |		attribute forTextActionInfoDo: [ :info | self textColor: TextAction textActionColor ]].		priorFont ifNotNil: [ destX _ destX + priorFont descentKern ].	destX _ destX - font descentKern.	kern _ kern - font baseKern.	"Install various parameters from the font."	spaceWidth _ font widthOf: Character space.	xTable _ font xTable.	map _ font characterToGlyphMap.	stopConditions _ DefaultStopConditions! !!Text methodsFor: 'emphasis' stamp: 'jmv 4/6/2011 17:39'!alignmentAt: characterIndex	self		withFormattingAttributeValues: (self attributesAt: characterIndex)		do: [ :familyName :pointSize :emphasis :alignment :color :paragraphStyle :characterStyle :kern |			^ alignment ]! !!Text methodsFor: 'emphasis' stamp: 'jmv 4/6/2011 17:39'!characterStyleOrNilAt: characterIndex	self		withFormattingAttributeValues: (self attributesAt: characterIndex)		do: [ :familyName :pointSize :emphasis :alignment :color :paragraphStyle :characterStyle :kern |			^ characterStyle ]! !!Text methodsFor: 'emphasis' stamp: 'jmv 4/6/2011 17:28'!characterStyleOrNilIfApplying: textAttributes	"Answer the ParagraphStyle for characters as specified by the argument."		self withFormattingAttributeValues: textAttributes do: [ :familyName :pointSize :emphasis :alignment :color :paragraphStyle :characterStyle :kern |		^characterStyle ]! !!Text methodsFor: 'emphasis' stamp: 'jmv 4/6/2011 17:39'!emphasisAt: characterIndex	"Answer the emphasis for characters in the run beginning at characterIndex."	self		withFormattingAttributeValues: (self attributesAt: characterIndex)		do: [ :familyName :pointSize :emphasis :alignment :color :paragraphStyle :characterStyle :kern |			^ emphasis ]! !!Text methodsFor: 'emphasis' stamp: 'jmv 4/6/2011 17:32'!fontAt: characterIndex	"Answer the font for characters in the run beginning at characterIndex."	^self fontIfApplying: (self attributesAt: characterIndex)! !!Text methodsFor: 'emphasis' stamp: 'jmv 4/6/2011 17:28'!fontIfApplying: textAttributes	"Answer the font for characters as specified by the argument."	self withFormattingAttributeValues: textAttributes do:  [ :familyName :pointSize :emphasis :alignment :color :paragraphStyle :characterStyle :kern |		^((AbstractFont familyName: familyName pointSize: pointSize) ifNil: [ AbstractFont default baseFont ])			emphasized: emphasis ]! !!Text methodsFor: 'emphasis' stamp: 'jmv 4/6/2011 17:39'!paragraphStyleOrNilAt: characterIndex	self		withFormattingAttributeValues: (self attributesAt: characterIndex)		do: [ :familyName :pointSize :emphasis :alignment :color :paragraphStyle :characterStyle :kern |			^ paragraphStyle ]! !!Text methodsFor: 'emphasis' stamp: 'jmv 4/6/2011 17:28'!paragraphStyleOrNilIfApplying: textAttributes	"Answer the ParagraphStyle for characters as specified by the argument."		self withFormattingAttributeValues: textAttributes do: [ :familyName :pointSize :emphasis :alignment :color :paragraphStyle :characterStyle :kern |		^paragraphStyle ]! !!Text methodsFor: 'emphasis' stamp: 'jmv 4/6/2011 17:28'!withFormattingAttributeValues: attributes do: aBlock	"Evaluate aBlock with the values of various attributes that affect text formatting, applied in the correct order	The order is (each overwriting the previous one)	1) basic defaults	2) ParagraphStyleReferene	3) CharacterStyleReference	4) TextFontReference	5) TextEmphasis"	| paragraphStyle characterStyle familyName pointSize emphasis alignment color kern |	paragraphStyle _ nil.	characterStyle _ nil.	familyName _ nil.	pointSize _ nil.	emphasis _ 0.	alignment _ 0.	color _ nil.	kern _ 0.		"ParagraphStyle is the first to set several values"	attributes do: [ :attribute |		attribute forParagraphStyleReferenceDo: [ :s |			paragraphStyle _ s.			familyName _ s familyName.			pointSize _ s pointSize.			emphasis _ s emphasis.			alignment _ s alignment.			s color ifNotNil: [ :c | color _ c ]]].	"CharacterStyle, if present, can override font and color"	attributes do: [ :attribute |		attribute forCharacterStyleReferenceDo: [ :s |			characterStyle _ s.			familyName _ s familyName.			pointSize _ s pointSize.			emphasis _ s emphasis.			s color ifNotNil: [ :c | color _ c ]]].	"These will not interfere with each other, and all of them take precedence over previous values"	attributes do: [ :attribute |		attribute forFontFamilyAndSizeDo: [ :fn :ps | familyName _ fn. pointSize _ ps ].		attribute forTextEmphasisDo: [ :e | emphasis _ emphasis bitOr: e ].		attribute forTextColorDo: [ :c | color _ c ].		attribute forTextAlignmentDo: [ :a | alignment _ a ].		attribute forTextKernDo: [ :k | kern _ kern + k ].	].		"Done. Now evaluate the block."	^aBlock valueWithArguments: { familyName. pointSize. emphasis. alignment. color. paragraphStyle. characterStyle. kern }! !!TextAttribute methodsFor: 'testing' stamp: 'jmv 4/5/2011 09:08'!isForFormatting	"Answer false for those attributes that are not for text formatting.	This is, those that are not considered in #withFormattingAttributeValues:do:"	^true! !!TextAttribute methodsFor: 'iterating' stamp: 'jmv 4/6/2011 16:35'!forFontFamilyAndSizeDo: aBlock	"No action is the default"! !!TextAction methodsFor: 'testing' stamp: 'jmv 4/5/2011 09:09'!isForFormatting	"Answer false for those attributes that are not for text formatting.	This is, those that are not considered in #withFormattingAttributeValues:do:"	^false! !!TextAction class methodsFor: 'as yet unclassified' stamp: 'jmv 4/6/2011 17:27'!textActionColor	^Purple! !!TextAnchor methodsFor: 'testing' stamp: 'jmv 4/5/2011 09:09'!isForFormatting	"Answer false for those attributes that are not for text formatting.	This is, those that are not considered in #withFormattingAttributeValues:do:"	^false! !!TextEmphasis class methodsFor: 'instance creation' stamp: 'jmv 4/5/2011 22:32'!bold	^ self new emphasisCode: AbstractFont boldCode! !!TextEmphasis class methodsFor: 'instance creation' stamp: 'jmv 4/5/2011 22:32'!italic	^ self new emphasisCode: AbstractFont italicCode! !!TextEmphasis class methodsFor: 'instance creation' stamp: 'jmv 4/5/2011 22:32'!normal	^ self new emphasisCode: AbstractFont normalCode! !!TextEmphasis class methodsFor: 'instance creation' stamp: 'jmv 4/5/2011 22:32'!struckOut	^ self new emphasisCode: AbstractFont struckOutCode! !!TextEmphasis class methodsFor: 'instance creation' stamp: 'jmv 4/5/2011 22:32'!underlined	^ self new emphasisCode: AbstractFont underlinedCode! !!TextFontFamilyAndSize methodsFor: 'comparing' stamp: 'jmv 4/6/2011 18:39'!= other 	^ (other class == self class) 		and: [ other pointSize = pointSize			and: [ other familyName = familyName ]]! !!TextFontFamilyAndSize methodsFor: 'iterating' stamp: 'jmv 4/6/2011 16:35'!forFontFamilyAndSizeDo: aBlock	aBlock value: familyName value: pointSize! !TextAction class removeSelector: #purple!Text removeSelector: #withAttributeValues:do:!Text removeSelector: #withAttributeValuesAt:do:!Text removeSelector: #withFormattingAttributeValuesAt:do:!