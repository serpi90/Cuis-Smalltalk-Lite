'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 24 October 2011 at 10:10:30 am'!!classDefinition: #SystemWindow category: #'Morphic-Views for Models'!PluggableMorph subclass: #SystemWindow	instanceVariableNames: 'labelString collapsedFrame fullFrame isCollapsed updatablePanes widgetsColor layoutMorph topAdjuster bottomAdjuster leftAdjuster rightAdjuster topLeftAdjuster bottomLeftAdjuster topRightAdjuster bottomRightAdjuster adjusters '	classVariableNames: 'TopWindow '	poolDictionaries: ''	category: 'Morphic-Views for Models'!!Morph methodsFor: 'initialization' stamp: 'jmv 10/24/2011 09:18'!inATwoWayScrollPane	"Answer a two-way scroll pane that allows the user to scroll the receiver in either direction.  It will have permanent scroll bars unless you take some special action."	| widget |	widget := ScrollPane new.	widget extent: (self width min: 300 max: 100) @ (self height min: 150 max: 100).	widget addToScroller: self.	widget setScrollDeltas.	widget color: self color darker darker.	^widget! !!Morph methodsFor: 'visual properties' stamp: 'jmv 10/23/2011 21:27'!defaultColor	^ Color orange! !!ScrollPane methodsFor: 'access' stamp: 'jmv 10/24/2011 09:18'!addToScroller: aMorph	scroller addMorph: aMorph! !!ScrollPane methodsFor: 'geometry' stamp: 'jmv 10/24/2011 10:02'!hTotalScrollRange	"Return the width extent of the receiver's submorphs."	^scroller localSubmorphWidth! !!ScrollPane methodsFor: 'geometry' stamp: 'jmv 10/24/2011 10:02'!vTotalScrollRange	"Return the height extent of the receiver's submorphs."	^scroller localSubmorphHeight! !!SystemWindow methodsFor: 'initialization' stamp: 'jmv 10/23/2011 21:12'!initialize	"Initialize a system window. Add label, stripes, etc., if desired"	super initialize.	labelString ifNil: [ labelString := 'Untitled Window'].	isCollapsed := false.	borderColor := #raised.		self wantsLabel ifTrue: [self initializeLabelArea].	self extent: 300 @ 200.	updatablePanes := Array new.	adjusters _ Dictionary new.	adjusters at: #topAdjuster put: WindowEdgeAdjustingMorph top.	adjusters at: #bottomAdjuster put: WindowEdgeAdjustingMorph bottom.	adjusters at: #leftAdjuster put: WindowEdgeAdjustingMorph left.	adjusters at: #rightAdjuster put: WindowEdgeAdjustingMorph right.	adjusters at: #topLeftAdjuster put: WindowEdgeAdjustingMorph topLeft.	adjusters at: #bottomLeftAdjuster put: WindowEdgeAdjustingMorph bottomLeft.	adjusters at: #topRightAdjuster put: WindowEdgeAdjustingMorph topRight.	adjusters at: #bottomRightAdjuster put: WindowEdgeAdjustingMorph bottomRight.	adjusters do: [ :m |		self addMorph: m ].	"by default"	self beColumn! !!SystemWindow methodsFor: 'layout' stamp: 'jmv 10/23/2011 21:13'!layoutAndComputeFullBounds	"Compute a new layout of submorphs based on the given layout bounds."	| bl br h thickness tl tr w cornerExtent |	submorphs isEmpty ifTrue: [		^fullBounds _ bounds].	thickness _ 4.	cornerExtent _ 20.	tl _ bounds topLeft.	tr _ bounds topRight.	bl _ bounds bottomLeft.	br _ bounds bottomRight.	w _ bounds width - cornerExtent - cornerExtent.	h _ bounds height - cornerExtent - cornerExtent.	(adjusters at: #topAdjuster) bounds: (tl + (cornerExtent@0) extent: w@thickness).	(adjusters at: #bottomAdjuster) bounds: (bl+ (cornerExtent @ thickness negated) extent: w@thickness).	(adjusters at: #leftAdjuster) bounds: (tl+ (0@cornerExtent) extent: thickness@h).	(adjusters at: #rightAdjuster) bounds: (tr + (thickness negated@ cornerExtent) extent: thickness@h).	(adjusters at: #topLeftAdjuster) bounds: (tl extent: cornerExtent@cornerExtent).	(adjusters at: #bottomLeftAdjuster) bounds: (bl-(0@cornerExtent) extent: cornerExtent@cornerExtent).	(adjusters at: #topRightAdjuster) bounds: (tr+(cornerExtent negated@0) extent: cornerExtent@cornerExtent).	(adjusters at: #bottomRightAdjuster) bounds: (br-cornerExtent extent: cornerExtent@cornerExtent).	layoutMorph ifNotNil: [		layoutMorph bounds: self layoutBounds ].	fullBounds _ self computeFullBounds! !!TransformMorph methodsFor: 'geometry' stamp: 'jmv 10/24/2011 10:04'!localSubmorphBounds	"Answer, in my coordinate system, the bounds of all my submorphs (or nil if no submorphs). We will cache this value for performance. The value is invalidated upon recieving #layoutChanged."	localBounds ifNil: [		self submorphsDo: [ :m |			localBounds _ localBounds				ifNil: [ m fullBounds ]				ifNotNil: [ localBounds quickMerge: m fullBounds ]]].	^ localBounds! !!TransformMorph methodsFor: 'geometry' stamp: 'jmv 10/24/2011 10:09'!localSubmorphHeight	"Answer, in my coordinate system, the bounds of all my submorphs (or nil if no submorphs). We will cache this value for performance. The value is invalidated upon recieving #layoutChanged."	^self localSubmorphBounds		ifNotNil: [ :r | r height ]		ifNil: [ 0 ]! !!TransformMorph methodsFor: 'geometry' stamp: 'jmv 10/24/2011 10:10'!localSubmorphWidth	"Answer, in my coordinate system, the bounds of all my submorphs (or nil if no submorphs). We will cache this value for performance. The value is invalidated upon recieving #layoutChanged."	^self localSubmorphBounds		ifNotNil: [ :r | r width ]		ifNil: [ 0 ]! !TransformMorph removeSelector: #defaultColor!BlueTheme removeSelector: #morph!Theme removeSelector: #morph!!classDefinition: #SystemWindow category: #'Morphic-Views for Models'!PluggableMorph subclass: #SystemWindow	instanceVariableNames: 'labelString collapsedFrame fullFrame isCollapsed updatablePanes widgetsColor layoutMorph adjusters'	classVariableNames: 'TopWindow'	poolDictionaries: ''	category: 'Morphic-Views for Models'!ScrollPane removeSelector: #scroller!