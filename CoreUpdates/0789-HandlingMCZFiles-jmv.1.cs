'From Cuis 3.0 of 18 January 2011 [latest update: #768] on 28 January 2011 at 1:10:51 pm'!!ChangeList class methodsFor: 'public access' stamp: 'jmv 1/28/2011 12:46'!browseStream: changesFile	"Opens a changeList on a fileStream"	| changeList charCount |	changesFile readOnly.	charCount _ changesFile size.	charCount > 1000000 ifTrue:		[(self confirm: 'The file ', changesFile name , 'is really long (' , charCount printString , ' characters).Would you prefer to view only the last million characters?')			ifTrue: [charCount _ 1000000]].	changeList _ Cursor read showWhile: [		self new			scanFile: changesFile from: changesFile size-charCount to: changesFile size].	changesFile close.	self open: changeList name: changesFile localName multiSelect: true! !!ChangeList class methodsFor: 'fileIn/Out' stamp: 'jmv 1/28/2011 12:47'!browseMCZFile: fullName	"Browse the selected file in fileIn format."	| zipped unzipped changeList |	fullName ifNil: [ ^self beep ].	zipped _ (FileStream readOnlyFileNamed: fullName).	unzipped _ zipped asUnZippedStream: 'snapshot/source.st'.	unzipped ascii.	changeList _ Cursor read showWhile: [		self new			scanFile: unzipped from: 0 to: unzipped size].	self open: changeList name: 'Changes in ', zipped localName multiSelect: true! !!ChangeList class methodsFor: 'fileIn/Out' stamp: 'jmv 1/28/2011 12:18'!fileReaderServicesForFile: fullName suffix: suffix	| services |	services _ OrderedCollection new.	(FileStream isSourceFileSuffix: suffix) | (suffix = '*')		ifTrue: [ services add: self serviceBrowseChangeFile ].	(suffix = 'changes') | (suffix = '*')		ifTrue: [ services add: self serviceBrowseDotChangesFile ].	(suffix = 'mcz' or: [ suffix = '*'])		ifTrue: [ services add: self serviceBrowseMCZFile ].	(suffix = '*' or: [ fullName asLowercase endsWith: '.cs.gz' ])		ifTrue: [ services add: self serviceBrowseCompressedChangeFile ].	^services! !!ChangeList class methodsFor: 'fileIn/Out' stamp: 'jmv 1/28/2011 12:17'!serviceBrowseMCZFile	"Answer a service for opening a changelist browser on a file"	^ SimpleServiceEntry 		provider: self 		label: 'changelist browser'		selector: #browseMCZFile:		description: 'open a changelist tool on this file'		buttonLabel: 'changes'! !!ChangeList class methodsFor: 'fileIn/Out' stamp: 'jmv 1/28/2011 12:17'!services	"Answer potential file services associated with this class"	^ { self serviceBrowseChangeFile. 		self serviceBrowseDotChangesFile.		self serviceBrowseCompressedChangeFile.		self serviceBrowseMCZFile }! !!ChangeSorter class methodsFor: 'adding' stamp: 'jmv 1/28/2011 12:54'!newChangesFromStream: aStream named: aName	"File in the code from the stream into a new change set whose	name is derived from aName. Leave the 'current change set'	unchanged. Return the new change set or nil on failure."	| oldChanges newName newSet |	oldChanges _ ChangeSet current.	PreviousSet _ oldChanges name. 		"so a Bumper update can find it"	newName _ aName sansPeriodSuffix.	newSet _ self basicNewChangeSet: newName.	[		newSet ifNotNil: [			ChangeSet  newChanges: newSet.			aStream fileInAnnouncing: 'Loading ', newName, '...'.			Transcript cr; show: 'File ', aName, ' successfully filed in to change set ', newName].		aStream close	] ensure: [			ChangeSet  newChanges: oldChanges].	^ newSet! !!ChangeSorter class methodsFor: 'fileIn/Out' stamp: 'jmv 1/28/2011 13:03'!fileIntoNewChangeSet: fullName	"File in all of the contents of the currently selected file, if any, into a new change set." 	| fileName stream |	fullName ifNil: [^ Beeper beep].	fileName _ fullName.	(fullName endsWith: '.gz')		ifTrue: [			(self confirm: ('{1}appears to be a compressed file.Do you want to uncompress it?' translated format:{fullName}))				ifTrue: [					fileName _ GZipReadStream saveContents: fullName.					stream _ FileStream readOnlyFileNamed: fileName ]				ifFalse: [ ^self ]]		ifFalse: [			stream _ FileStream readOnlyFileNamed: fileName.			(fullName endsWith: '.mcz')				ifTrue: [					stream _ stream asUnZippedStream: 'snapshot/source.st'.					stream ascii ]].	self newChangesFromStream: stream named: (FileDirectory localNameFor: fileName)! !!ChangeSorter class methodsFor: 'fileIn/Out' stamp: 'jmv 1/28/2011 12:23'!fileReaderServicesForFile: fullName suffix: suffix	^(suffix = 'st' or: [ suffix = 'cs' or: [ suffix = '*' or: [ suffix = 'mcz']]])		ifTrue: [ self services]		ifFalse: [#()]! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'jmv 1/28/2011 12:40'!browseMCZCodeStream: aStandardFileStream 	"Browse the selected file in fileIn format."	| unzipped |	unzipped _ aStandardFileStream asUnZippedStream: 'snapshot/source.st'.	unzipped ascii.	self browseStream: unzipped named: aStandardFileStream name! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'jmv 1/28/2011 12:21'!fileReaderServicesForFile: fullName suffix: suffix	((FileStream isSourceFileSuffix: suffix) or: [ suffix = '*' ])		ifTrue: [ ^Array with: self serviceBrowseCode].	suffix = 'mcz'		ifTrue: [ ^ Array with: self serviceBrowseMCZCode ].	^(fullName endsWith: 'cs.gz')		ifTrue: [ Array with: self serviceBrowseCompressedCode ]		ifFalse: [#()]! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'jmv 1/28/2011 12:20'!serviceBrowseMCZCode	"Answer a service for opening a changelist browser on a file"	^ (SimpleServiceEntry 		provider: self 		label: 'code-file browser'		selector: #browseMCZCodeStream:		description: 'open a "file-contents browser" on this file, allowing you to view and selectively load its code'		buttonLabel: 'code')		argumentGetter: [ :fileList | fileList readOnlyStream ]! !!GZipReadStream class methodsFor: 'fileIn/Out' stamp: 'jmv 1/28/2011 11:55'!fileIntoNewChangeSet: fullFileName	"FileIn the contents of a gzipped file"	| zipped unzipped |	zipped _ self on: (FileStream readOnlyFileNamed: fullFileName).	unzipped _ ReadStream on: zipped contents asString.	ChangeSorter newChangesFromStream: unzipped named: (FileDirectory localNameFor: fullFileName)! !!GZipReadStream class methodsFor: 'fileIn/Out' stamp: 'jmv 1/28/2011 11:56'!fileReaderServicesForFile: fullName suffix: suffix 	| services |	(suffix = 'gz') | (suffix = '*')		ifFalse: [^ #()].	services _ OrderedCollection new.	(suffix = '*') | (fullName asLowercase endsWith: '.cs.gz')		ifTrue: [			services add: self serviceFileIn.			services add: self serviceFileIntoNewChangeSet].	services addAll: self services.	^ services! !!ReadWriteStream methodsFor: 'converting' stamp: 'jmv 1/28/2011 12:39'!asUnZippedStream	| isGZip outputStream first strm |	"Decompress this file if needed, and return a stream.  No file is written.  File extension may be .gz or anything else."	strm _ self binary.	first _ strm next.	isGZip _ (strm next * 256 + first) = (GZipConstants gzipMagic).	strm skip: -2.	isGZip 		ifTrue: [outputStream _ (RWBinaryOrTextStream with:									(GZipReadStream on: strm) upToEnd) reset.				strm close]		ifFalse: [outputStream _ strm].	^ outputStream! !!ReadWriteStream methodsFor: 'converting' stamp: 'jmv 1/28/2011 12:38'!asUnZippedStream: memberFileName	| strm archive which |	"Decompress this file if needed, and return a stream.  No file is written.  File extension may be .gz or anything else.  Also works on archives (.zip, .gZip)."	strm _ self binary.	strm isZipArchive ifFalse: [		^self error: 'Not a Zip file' ].		archive _ ZipArchive new readFrom: strm.	which _ archive members 		detect: [:any | any fileName  = memberFileName] 		ifNone: nil.	which ifNil: [		archive close.		^ self error: 'Can''t find requested file in archive'].	strm _ which contentStream.	archive close.	^strm! !!FileStream class methodsFor: 'file reader services' stamp: 'jmv 1/28/2011 13:03'!fileIn: fullName	"File in the entire contents of the file specified by the name provided"	| fileName stream |	fullName ifNil: [^ Beeper beep].	fileName _ fullName.	(fullName endsWith: '.gz')		ifTrue: [			(self confirm: ('{1}appears to be a compressed file.Do you want to uncompress it?' translated format:{fullName}))				ifTrue: [					fileName _ GZipReadStream saveContents: fullName.					stream _ FileStream readOnlyFileNamed: fileName ]				ifFalse: [ ^self ]]		ifFalse: [			stream _ FileStream readOnlyFileNamed: fileName.			(fullName endsWith: '.mcz')				ifTrue: [					stream _ stream asUnZippedStream: 'snapshot/source.st'.					stream ascii ]].	stream fileIn! !!FileStream class methodsFor: 'file reader services' stamp: 'jmv 1/28/2011 12:22'!fileReaderServicesForFile: fullName suffix: suffix	"Answer services for the given file"	^ ((self isSourceFileSuffix: suffix) or: [ suffix = '*' or: [ suffix = 'mcz' ]])		ifTrue:[{			self serviceFileIn}]		ifFalse:			[#()]! !!FileStream class methodsFor: 'file reader services' stamp: 'jmv 1/28/2011 12:02'!isSourceFileSuffix: suffix	^suffix = 'st' or: [ suffix = 'cs' or: [ suffix = '*' ]]! !GZipReadStream class removeSelector: #uncompressedFileName:!