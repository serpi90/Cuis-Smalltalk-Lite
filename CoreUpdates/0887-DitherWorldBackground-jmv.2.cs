'From Cuis 3.1 of 4 March 2011 [latest update: #850] on 18 March 2011 at 4:24:49 pm'!!Clipboard methodsFor: 'accessing' stamp: 'jmv 3/18/2011 16:09'!retrieveStringOrText	"Answer a Text or a String. Appropriate for a Text Editor."	| answer |		answer _ self retrieveObject.		"If clipboard contents is already a Text or String, answer it."	(answer isString or: [ answer is: #Text ]) ifTrue: [		^answer ].		"If clipboard contains a Morph, answer a Text incuding its drawing..."	(answer is: #Morph) ifTrue: [		answer _ (answer imageForm:32) offset: 0@0 ].		"If clipboard contains a Form, prepare a Text including it."	(answer is: #Form) ifTrue: [		^Text withForm: answer ].		"Answer some string..."	^answer ifNil: [ '' ] ifNotNil: [ answer printString ]! !!Clipboard methodsFor: 'accessing' stamp: 'jmv 3/18/2011 16:09'!storeObject: anObject	"Set new contents on the clipboard.  Also export to OS.	anObject can be a:		String		Text		Form		Morph		Object.	OS clipboard supports String. Other formats might be supported if ExtendedClipboardInterface is present and operative."	| primitiveFormat id |	"Store a copy of the object. This is appropriate in case the original object is modified after being copied to the clipboard.	Another copy must be made again when pasting, as the same object could be pasted many times."	contents _ anObject copyForClipboard.	self noteRecentClipping: contents.	"Store on OS clipboard using ExtendedClipboardInterface if present"	Smalltalk at: #ExtendedClipboardInterface ifPresent: [ :clipboardInterface | | interface |		interface _ clipboardInterface current.		interface canStore ifTrue: [			id _ self idFor: contents.			contents isString				ifTrue: [ ^interface storeString: contents id: id ].			(contents is: #Text)				ifTrue: [ ^interface storeText: contents id: id ].			(contents is: #Form)				ifTrue: [ ^interface storeForm: contents id: id ].			(contents is: #Morph)				ifTrue: [ ^interface storeForm: (contents imageForm: 32) id: id ].			^interface storeString: contents asString id: id ]].	"Otherwise use the clipboard primitives in the VM"	"The VM uses UTF-8 for clipboard"	primitiveFormat _ ((self stringOrIdFor: contents) withLineEndings: String lf) iso8859s15ToUtf8.	self primitiveClipboardString: primitiveFormat! !!DisplayScreen methodsFor: 'other' stamp: 'jmv 3/18/2011 15:57'!newDepth: pixelSize"	Display newDepth: 8.	Display newDepth: 1."	(self supportsDisplayDepth: pixelSize)		ifFalse:[^self inform:'Display depth ', pixelSize printString, ' is not supported on this system'].	self newDepthNoRestore: pixelSize.	World buildMagnifiedBackgroundImage.	self restore.! !!JPEGReadWriter2 methodsFor: 'public access' stamp: 'jmv 3/18/2011 16:04'!nextImage	"Decode and answer a Form from my stream."	"Use 32 bpp always. They give better result even when displayed on 16 bit Display (if dithered)"	^ self nextImageSuggestedDepth: "Display depth" 32! !!Morph methodsFor: 'drawing' stamp: 'jmv 3/18/2011 16:09'!imageForm: depth	^ self imageForm: depth forRectangle: self fullBounds! !!Morph methodsFor: 'drawing' stamp: 'jmv 3/18/2011 16:24'!imageForm: depth forRectangle: rect	| canvas |	canvas _ Display defaultCanvasClass depth: depth over: rect.	"Just in case there is transparent areas: draw over an opaque background. For instance, black."	canvas form fillColor: Color black.	canvas fullDrawMorph: self.	^ canvas formWithOffset! !!Morph methodsFor: 'menus' stamp: 'jmv 3/18/2011 16:10'!exportAsBMP	| fName |	fName _ FillInTheBlank request:'Please enter the name' initialAnswer: self externalName,'.bmp'.	fName isEmpty ifTrue:[^self].	(self imageForm: 32) writeBMPfileNamed: fName.! !!Morph methodsFor: 'menus' stamp: 'jmv 3/18/2011 16:10'!exportAsJPEG	"Export the receiver's image as a JPEG"	| fName |	fName _ FillInTheBlank request: 'Please enter the name' initialAnswer: self externalName,'.jpeg'.	fName isEmpty ifTrue: [^ self].	(self imageForm: 32) writeJPEGfileNamed: fName! !!Morph methodsFor: 'menus' stamp: 'jmv 3/18/2011 16:10'!exportAsPNG	| fName |	fName _ FillInTheBlank request:'Please enter the name' initialAnswer: self externalName,'.png'.	fName isEmpty ifTrue:[^self].	PNGReadWriter putForm: (self imageForm: 32) onFileNamed: fName.! !!PasteUpMorph methodsFor: 'misc' stamp: 'jmv 3/18/2011 15:57'!buildMagnifiedBackgroundImage	| image old |	old _ backgroundImage.	backgroundImageData		ifNil: [ backgroundImage _ nil ]		ifNotNil: [ 			image _ Form fromBinaryStream: backgroundImageData readStream.			backgroundImage _ image magnifyTo: bounds extent.			self canvas ifNotNil: [ :c |				(backgroundImage depth = 32 and: [ c depth < 32 ]) ifTrue: [					backgroundImage _ backgroundImage orderedDither32To16 ]]		].	old == backgroundImage ifFalse: [		self redrawNeeded ]! !!PasteUpMorph methodsFor: 'project state' stamp: 'jmv 3/18/2011 15:48'!canvas	^ worldState ifNotNil: [ worldState canvas ]! !!ScrollbarButton class methodsFor: 'images' stamp: 'jmv 3/18/2011 16:14'!createArrowOfDirection: aSymbolDirection size: finalSizeInteger	"PRIVATE - create an arrow with aSymbolDirectionDirection,  	finalSizeInteger and aColor  	 	aSymbolDirectionDirection = #top, #bottom. #left or #right  	 (self createArrowOfDirection: #up size: 120) display	"	| resizeFactor outerBox arrowMorph resizedForm f |	resizeFactor := 4.	outerBox := RectangleMorph new.	outerBox		extent: finalSizeInteger asPoint * resizeFactor;		borderWidth: 0;		color: Color transparent.		arrowMorph := self createArrowIn: outerBox bounds.	outerBox addMorphCentered: arrowMorph.		f _ outerBox imageForm: 32.	resizedForm := f				magnify: f boundingBox				by: 1 / resizeFactor				smoothing: 4.	aSymbolDirection == #right		ifTrue: [resizedForm _ resizedForm rotateBy: 90].	aSymbolDirection == #bottom		ifTrue: [resizedForm _ resizedForm rotateBy:  180].	aSymbolDirection == #left		ifTrue: [resizedForm _ resizedForm rotateBy:  270].			aSymbolDirection == #up		ifFalse: [ resizedForm _ resizedForm			copy: (resizedForm boundingBox insetBy: (resizedForm width - finalSizeInteger/ 2.0) rounded) ].			^resizedForm! !!ScrollbarButton class methodsFor: 'images' stamp: 'jmv 3/18/2011 16:15'!createBoxOfSize: finalSizeInteger	"PRIVATE - create a box with finalSizeInteger and aColor  	 	Try with:  	(ScrollBar createBoxOfSize: 32) display	"	| resizeFactor outerBox innerBox resizedForm f |	resizeFactor := 4.	outerBox := RectangleMorph new.	outerBox		extent: finalSizeInteger asPoint * resizeFactor;		borderWidth: 0;		color: Color transparent.	innerBox := self createBoxIn: outerBox bounds.	outerBox addMorphCentered: innerBox.	f _ outerBox imageForm: 32.	resizedForm := f				magnify: f boundingBox				by: 1 / resizeFactor				smoothing: 4.	^resizedForm! !!Utilities class methodsFor: 'common requests' stamp: 'jmv 3/18/2011 16:12'!saveScreenshot	"Make a screenshot of the world and save it to a file"	"SampledSound playSoundNamed: 'camera'."	PNGReadWriter		putForm: (World imageForm: 32)		onFileNamed:			(FileDirectory default				nextNameFor: 'CuisScreen'				extension: 'png')! !