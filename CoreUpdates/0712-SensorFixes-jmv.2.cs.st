'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 16 December 2010 at 1:44:33 pm'!!classDefinition: #InputSensor category: #'Kernel-Processes'!Object subclass: #InputSensor	instanceVariableNames: ''	classVariableNames: 'ButtonDecodeTable InterruptSemaphore InterruptWatcherProcess KeyDecodeTable '	poolDictionaries: ''	category: 'Kernel-Processes'!!HandMorph methodsFor: 'private events' stamp: 'jmv 12/16/2010 13:37'!generateKeyboardEvent: evtBuf 	"Generate the appropriate mouse event for the given raw event buffer"	| buttons modifiers type keyValue pressType stamp |	stamp _ evtBuf second.	stamp = 0 ifTrue: [stamp _ Time millisecondClockValue].	keyValue _ evtBuf sixth > 0		ifTrue: [ (Character iso8859s15CodeForUnicodeCodePoint: evtBuf sixth)			ifNil: [ Character macRomanToLatin1: evtBuf third] ]		ifFalse: [ Character macRomanToLatin1: evtBuf third ].	modifiers _ evtBuf fifth.	pressType _ evtBuf fourth.	pressType = EventKeyDown ifTrue: [type _ #keyDown].	pressType = EventKeyUp ifTrue: [type _ #keyUp].	pressType = EventKeyChar ifTrue: [		type _ #keystroke.		"If Control key pressed, and the VM answers a code below 27,		 it means it did the translation, convert it back to regular character:		We want to handle the meaning of ctrl ourselves."		(modifiers anyMask: 2) ifTrue: [		"Control key pressed"			keyValue < 27 ifTrue: [				keyValue _ (modifiers anyMask: 1)					ifFalse: [ keyValue + 96 ]	"shift not pressed: conver to lowercase letter"					ifTrue: [ keyValue + 64 ]].	"shift pressed: conver to uppercase letter"			"Act as if command/alt was pressed for some usual Windows ctrl-key combinations"			(self shouldControlEmulateAltFor: keyValue) ifTrue: [				modifiers _ modifiers bitOr: 8 ]			]].	buttons _ modifiers bitShift: 3.	^KeyboardEvent new 		setType: type		buttons: buttons		position: self position		keyValue: keyValue		hand: self		stamp: stamp! !!HandMorph methodsFor: 'private events' stamp: 'jmv 12/16/2010 13:33'!shouldControlEmulateAltFor: keyValue	"Answer a list of key letters that are used for common editing operations	on different platforms.""	^{ $c . $x . $v . $a . $s . $f . $g . $z }"	"Duplicating ctrl-a as alt/cmd-a also means duplicating ctrl-home as alt/cmd-a,	because the VM sends the same bit pattern for ctrl-a and ctrl-home.	I guess it is better to have proper ctrl-home.	The others are not much of a problem	"	"	{ $c . $x . $v . $s . $f . $g . $z } collect: [ :a | a asciiValue ]	" 	^#(99 120 118 115 102 103 122) includes: keyValue! !!InputSensor methodsFor: 'keyboard' stamp: 'jmv 12/16/2010 10:30'!kbdTest	"	Sensor kbdTest	"	"This test routine will print the unmodified character, its keycode,	and the OR of all its modifier bits, until the character x is typedAlso useful:	| buf |	buf := OrderedCollection new.	[ buf size < 20 ] whileTrue: [ | evt |	  evt := Sensor nextEvent.	evt ifNotNil: [ buf add: evt ] ].	'' print.	buf do: [ :a | a first = 2 ifTrue: [ a print ]]	"	| char |	char _ nil.	[ char = $x ] whileFalse: [		[ self keyboardPressed ] whileFalse.		char _ self characterForKeycode: self keyboard.		Display fill: (5@5 extent: 400@20) fillColor: Color white.		(String streamContents: [ :s |			s				nextPut: $-;				nextPut: char;				nextPut: $-;				space;				print: char asciiValue;				space.			self blueButtonPressed ifTrue: [ s nextPutAll: ' blue/tertiary/halo ' ].			self yellowButtonPressed ifTrue: [ s nextPutAll: ' yellow/secondary/menu ' ].			self redButtonPressed ifTrue: [ s nextPutAll: ' red/primary ' ].			self shiftPressed ifTrue: [ s nextPutAll: ' shift ' ].			self controlKeyPressed ifTrue: [ s nextPutAll: ' control/ctrl ' ].			(self primMouseButtons anyMask: 32) ifTrue: [ s nextPutAll: ' macOption ' ].			self commandAltKeyPressed ifTrue: [ s nextPutAll: ' macCommand/winAlt ' ]])		displayAt: 10 @ 10 ].! !!EventSensor methodsFor: 'accessing' stamp: 'jmv 12/15/2010 23:28'!nextEvent	"Return the next event from the receiver."	eventQueue isEmpty ifTrue: [self fetchMoreEvents].	^ eventQueue isEmpty		ifTrue: [nil]		ifFalse: [eventQueue next]! !!EventSensor methodsFor: 'private-I/O' stamp: 'jmv 12/16/2010 12:57'!processEvent: evt	"Process a single event. This method is run at high priority."	| type |	type _ evt at: 1.	"Check if the event is a user interrupt"	(type = EventTypeKeyboard and:[(evt at: 4) = 0 and:[		((evt at: 3) bitOr: ((evt at: 5) bitShift: 8)) = interruptKey]])			 ifTrue:["interrupt key is meta - not reported as event"					^interruptSemaphore signal].	"Store the event in the queue if there's any"	type = EventTypeMouse ifTrue:		[evt at: 5 put: (ButtonDecodeTable at: (evt at: 5) + 1)].	self queueEvent: evt.	"Update state for InputSensor."	EventTypeMouse = type ifTrue:[self processMouseEvent: evt].	EventTypeKeyboard = type ifTrue:[self processKeyboardEvent: evt]! !!EventSensor methodsFor: 'test' stamp: 'jmv 12/16/2010 13:40'!printEventBuffer: evtBuf	| type buttons macRomanCode modifiers position pressType stamp unicodeCodePoint |	type := evtBuf first.	stamp := evtBuf second.	stamp = 0 ifTrue: [ stamp := Time millisecondClockValue ].	type = EventTypeMouse		ifTrue: [			position := evtBuf third @ evtBuf fourth.			buttons := evtBuf fifth.			modifiers := evtBuf sixth.			Transcript				cr;				show: 'Mouse';				show: ' position:', position printString;				show: ' buttons:', buttons printString;				show: ' modifiers:', modifiers printString.			].	type = EventTypeKeyboard 		ifTrue: [			macRomanCode _ evtBuf third.			unicodeCodePoint _ evtBuf sixth.			pressType _ evtBuf fourth.			modifiers _ evtBuf fifth.			pressType = EventKeyDown ifTrue: [				type _ #keyDown].			pressType = EventKeyUp ifTrue: [				type _ #keyUp].			pressType = EventKeyChar ifTrue: [				type _ #keystroke].			Transcript				cr;				show: type;				show: ' macRomanCode:', macRomanCode printString, '-', 					(Character value: (Character macRomanToLatin1: macRomanCode)) asString, '-';				show: ' unicodeCodePoint:', unicodeCodePoint printString.			(Character iso8859s15CodeForUnicodeCodePoint: unicodeCodePoint) ifNotNil: [ :latin15 |				Transcript show: '-', (Character value: latin15) asString, '-' ].			Transcript				show: ' modifiers:', modifiers printString.			(modifiers anyMask: 8) ifTrue: [ Transcript show: ' [commandWinAlt]' ].			(modifiers anyMask: 4) ifTrue: [ Transcript show: ' [macOption]' ].			(modifiers anyMask: 2) ifTrue: [ Transcript show: ' [control]' ].			(modifiers anyMask: 1) ifTrue: [ Transcript show: ' [shift]' ].			].! !!EventSensor methodsFor: 'test' stamp: 'jmv 12/16/2010 10:43'!test	"	Sensor test	"	| char last |	last _ Time now.	char _ nil.	[ char = $q ] whileFalse: [		Sensor nextEvent ifNotNil: [ :evt | | now |			now _ Time now.			(now - last) seconds > 0 ifTrue: [				'' print ].			self printEventBuffer: evt.			(evt first = 2 and: [ evt fourth = 0 ]) ifTrue: [				char _ Character value: evt third ].			last _ now]]! !!InputSensor class methodsFor: 'class initialization' stamp: 'jmv 12/16/2010 10:27'!installMouseDecodeTable	"Create a decode table that swaps the lowest-order 2 bits if not on Windows.	This is to make right mouse button be the yellow button, i.e. open menus, and middle (wheel) button open halos (blue)"	ButtonDecodeTable _ Smalltalk platformName = 'Win32'		ifTrue: [ ByteArray withAll: (0 to: 255) ]		ifFalse: [			ByteArray withAll:				((0 to: 255) collect: [ :ea |					((ea bitAnd: 1) << 1 bitOr: (ea bitAnd: 2) >> 1) bitOr: (ea bitAnd: 252) ]) ]! !!InputSensor class methodsFor: 'system startup' stamp: 'jmv 12/16/2010 12:55'!startUp		self installMouseDecodeTable.	self default startUp! !!Preferences class methodsFor: 'themes' stamp: 'jmv 12/16/2010 12:58'!paloAlto	"Similar to the brightSqueak theme, but with a number of idiosyncratic personal settings.   Note that caseSensitiveFinds is true"	self setPreferencesFrom:	#(		(accessOnlineModuleRepositories noOpinion)		(alternativeBrowseIt noOpinion)		(annotationPanes true)		(automaticFlapLayout true)		(automaticPlatformSettings noOpinion)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(canRecordWhilePlaying noOpinion)		(caseSensitiveFinds true)		(changeSetVersionNumbers true)		(checkForSlips true)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(conservativeModuleDeActivation noOpinion)		(conversionMethodsAtFileOut true)		(cpuWatcherEnabled noOpinion)		(debugHaloHandle true)		(debugPrintSpaceLog true)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose true)		(extraDebuggerButtons true)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(higherPerformance noOpinion)		(honorDesktopCmdKeys true)		(logDebuggerStackToFile true)		(menuKeyboardControl true)  		(modalColorPickers true)		(modularClassDefinitions noOpinion)		(optionalButtons true)		(personalizedWorldMenu true)		(projectsSentToDisk noOpinion)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(selectiveHalos false)		(showBoundsInHalo false)		(simpleMenus false)		(smartUpdating true)		(soundQuickStart noOpinion)		(soundsEnabled true)		(soundStopWhenDone noOpinion)		(strongModules noOpinion)		(systemWindowEmbedOK false)		(thoroughSenders true)		(twentyFourHourFileStamps false)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))! !!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 12/16/2010 13:30'!classNamesContainingIt	"Open a browser on classes whose names contain the selected string"	self lineSelectAndEmptyCheck: [^self].	Smalltalk		browseClassesWithNamesContaining: self selection string		caseSensitive: Sensor shiftPressed! !Preferences class removeSelector: #duplicateControlAndAltKeys!Preferences class removeSelector: #swapControlAndAltKeys!Preferences class removeSelector: #swapMouseButtons!InputSensor class removeSelector: #defaultCrossPlatformKeys!InputSensor class removeSelector: #duplicateControlAndAltKeys:!InputSensor class removeSelector: #duplicateControlAndAltKeysChanged!InputSensor class removeSelector: #installDuplicateKeyEntryFor:!InputSensor class removeSelector: #installKeyDecodeTable!InputSensor class removeSelector: #installSwappedKeyEntryFor:!InputSensor class removeSelector: #keyDecodeTable!InputSensor class removeSelector: #swapControlAndAltKeys:!InputSensor class removeSelector: #swapControlAndAltKeysChanged!InputSensor class removeSelector: #swapMouseButtons:!!InputSensor class reorganize!('public' default)('class initialization' installMouseDecodeTable)('system startup' shutDown startUp)!EventSensor removeSelector: #nextEventFromQueue!EventSensor removeSelector: #nextEventSynthesized!InputSensor removeSelector: #leftShiftDown!!classDefinition: #InputSensor category: #'Kernel-Processes'!Object subclass: #InputSensor	instanceVariableNames: ''	classVariableNames: 'ButtonDecodeTable InterruptSemaphore InterruptWatcherProcess'	poolDictionaries: ''	category: 'Kernel-Processes'!