'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 24 November 2010 at 8:09:49 am'!!classDefinition: #PluggableMorph category: #'Morphic-Kernel'!BorderedMorph subclass: #PluggableMorph	instanceVariableNames: 'model slotName '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Kernel'!!classDefinition: #ScrollPane category: #'Morphic-Windows'!PluggableMorph subclass: #ScrollPane	instanceVariableNames: 'scrollBar scroller retractableScrollBar scrollBarOnLeft getMenuSelector getMenuTitleSelector hasFocus hScrollBar hideScrollBars currentScrollRange drawKeyboardFocusIndicator '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!Browser methodsFor: 'initialize-release' stamp: 'jmv 11/23/2010 15:39'!openAsMorphEditing: editString	"Create a pluggable version of all the morphs for a Browser in Morphic"	| window hSepFrac |	hSepFrac _ 0.4.	window _ SystemWindow new model: self.			window 		addMorph: self buildMorphicSystemCatList		frame: (0@0 corner: 0.25@hSepFrac).	self 		addClassAndSwitchesTo: window 		at: (0.25@0 corner: 0.5@hSepFrac)		plus: 0.	window 		addMorph: self buildMorphicMessageCatList		frame: (0.5@0 extent: 0.25@hSepFrac).	window addMorph: self buildMorphicMessageList		frame: (0.75@0 extent: 0.25@hSepFrac).	self 		addLowerPanesTo: window 		at: (0@hSepFrac corner: 1@1) 		with: editString.			window setUpdatablePanesFrom: #(systemCategoryList classList messageCategoryList messageList).	^ window! !!PackagePaneBrowser methodsFor: 'initialize-release' stamp: 'jmv 11/23/2010 15:40'!openAsMorphEditing: editString 	"Create a pluggable version of all the views for a Browser, including 	views and controllers."	"PackagePaneBrowser openBrowser"	| listHeight window |	listHeight _ 0.4.	window _ SystemWindow new model: self.	window		addMorph: (PluggableListMorph				model: self				listGetter: #packageList				indexGetter: #packageListIndex				indexSetter: #packageListIndex:				menuGetter: #packageMenu:				keystrokeAction: #packageListKey:from:)		frame: (0 @ 0 extent: 0.15 @ listHeight).	window		addMorph: self buildMorphicSystemCatList		frame: (0.15 @ 0 extent: 0.2 @ listHeight).	self		addClassAndSwitchesTo: window		at: (0.35 @ 0 extent: 0.25 @ listHeight)		plus: 0.	window		addMorph: self buildMorphicMessageCatList		frame: (0.6 @ 0 extent: 0.15 @ listHeight).	window		addMorph: self buildMorphicMessageList		frame: (0.75 @ 0 extent: 0.25 @ listHeight).	self		addLowerPanesTo: window		at: (0 @ listHeight corner: 1 @ 1)		with: editString.	window setUpdatablePanesFrom: #(#packageList #systemCategoryList #classList #messageCategoryList #messageList ).	^ window! !!Preferences class methodsFor: 'scrollbar parameters' stamp: 'jmv 11/23/2010 15:37'!scrollbarThickness	"Includes border"	^Preferences standardListFont pointSize + 3! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 15:36'!brightSqueak	"The classic bright Squeak look.  Windows have saturated colors and relatively low contrast; scroll-bars are of the flop-out variety and are on the left.  Many power-user features are enabled."	self setPreferencesFrom:	#(		(annotationPanes true)		(automaticFlapLayout true)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(debugHaloHandle true)		(debugPrintSpaceLog false)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(logDebuggerStackToFile true)		(menuKeyboardControl true)		(optionalButtons true)		(personalizedWorldMenu true)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(selectiveHalos false)		(simpleMenus false)		(smartUpdating true)		(systemWindowEmbedOK false)		(thoroughSenders true)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 15:36'!defaultValueTableForCurrentRelease	"Answer a table defining default values for all the preferences in the release.  Returns a list of (pref-symbol, boolean-symbol) pairs"	^  #(		(alternativeBrowseIt false)		(annotationPanes false)		(automaticFlapLayout true)		(automaticPlatformSettings true)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(canRecordWhilePlaying false)		(caseSensitiveFinds false)		(changeSetVersionNumbers true)		(checkForSlips true)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(conversionMethodsAtFileOut false)		(cpuWatcherEnabled false)		(debugHaloHandle true)		(debugPrintSpaceLog false)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose false)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(higherPerformance false)		(honorDesktopCmdKeys true)		(logDebuggerStackToFile true)		(menuKeyboardControl false)  		(modalColorPickers true)		(optionalButtons true)		(personalizedWorldMenu true)		(projectsSentToDisk false)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(selectiveHalos false)		(showBoundsInHalo false)		(simpleMenus false)		(smartUpdating true)		(soundQuickStart false)		(soundStopWhenDone false)		(soundsEnabled true)		(systemWindowEmbedOK false)		(thoroughSenders true)		(twentyFourHourFileStamps true)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))"Preferences defaultValueTableForCurrentRelease do:	[:pair | (Preferences preferenceAt: pair first ifAbsent: [nil]) ifNotNilDo:			[:pref | pref defaultValue: (pair last == #true)]].Preferences chooseInitialSettings."! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 15:37'!juans	self setPreferencesFrom:	#(		(annotationPanes true)		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips true)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(honorDesktopCmdKeys false)		(menuKeyboardControl true)		(optionalButtons true)		(extraDebuggerButtons true)		(personalizedWorldMenu false)		(restartAlsoProceeds false)		(simpleMenus false)		(smartUpdating true)		(subPixelRenderFonts true)		(thoroughSenders true)	)! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 15:03'!magdeburg	"Alternative window & scroll-bar looks, no desktop command keys, no keyboard menu control, no annotation panes..."	self setPreferencesFrom: #(		(annotationPanes false)		(canRecordWhilePlaying false)		(conversionMethodsAtFileOut true)		(honorDesktopCmdKeys false)		(menuKeyboardControl false))! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 15:37'!paloAlto	"Similar to the brightSqueak theme, but with a number of idiosyncratic personal settings.   Note that caseSensitiveFinds is true"	self setPreferencesFrom:	#(		(accessOnlineModuleRepositories noOpinion)		(alternativeBrowseIt noOpinion)		(annotationPanes true)		(automaticFlapLayout true)		(automaticPlatformSettings noOpinion)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(canRecordWhilePlaying noOpinion)		(caseSensitiveFinds true)		(changeSetVersionNumbers true)		(checkForSlips true)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(conservativeModuleDeActivation noOpinion)		(conversionMethodsAtFileOut true)		(cpuWatcherEnabled noOpinion)		(debugHaloHandle true)		(debugPrintSpaceLog true)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose true)		(duplicateControlAndAltKeys false)		(extraDebuggerButtons true)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(higherPerformance noOpinion)		(honorDesktopCmdKeys true)		(logDebuggerStackToFile true)		(menuKeyboardControl true)  		(modalColorPickers true)		(modularClassDefinitions noOpinion)		(optionalButtons true)		(personalizedWorldMenu true)		(projectsSentToDisk noOpinion)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(selectiveHalos false)		(showBoundsInHalo false)		(simpleMenus false)		(smartUpdating true)		(soundQuickStart noOpinion)		(soundsEnabled true)		(soundStopWhenDone noOpinion)		(strongModules noOpinion)		(swapControlAndAltKeys noOpinion)		(swapMouseButtons  noOpinion)		(systemWindowEmbedOK false)		(thoroughSenders true)		(twentyFourHourFileStamps false)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 15:37'!slowMachine	self setPreferencesFrom:	#(		(annotationPanes false)		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(honorDesktopCmdKeys false)		(menuKeyboardControl false)		(optionalButtons false)		(personalizedWorldMenu false)		(restartAlsoProceeds false)		(simpleMenus false)		(smartUpdating false)		(subPixelRenderFonts false)		(thoroughSenders false)	)! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 15:37'!smalltalk80	"A traditional monochrome Smalltalk-80 look and feel, clean and austere, and lacking many features added to Squeak in recent years. Caution: this theme removes the standard Squeak flaps, turns off the 'smartUpdating' feature that keeps multiple browsers in synch, and much more."	self setPreferencesFrom:	#(		(annotationPanes false)		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(honorDesktopCmdKeys false)		(menuKeyboardControl false)		(optionalButtons false)		(personalizedWorldMenu false)		(restartAlsoProceeds false)		(simpleMenus false)		(smartUpdating false)		(thoroughSenders false)	)! !!ScrollBar methodsFor: 'accessing' stamp: 'jmv 11/23/2010 15:17'!model: thang setValueSelector: aSymbol	model _ thang.	setValueSelector _ aSymbol! !!ScrollBar methodsFor: 'geometry' stamp: 'jmv 11/23/2010 15:04'!extent: p        | newExtent |	newExtent _ p x > p y                ifTrue: [(p max: 42@8)]                ifFalse: [(p max: 8@42)].	newExtent = bounds extent ifTrue: [^ self].	bounds isWide		ifTrue: [super extent: (newExtent x max: 14) @ newExtent y]		ifFalse: [super extent: newExtent x @ (newExtent y max: 14)].			self flag: #jmv.	"Most times it is not necessary to recreate the buttons"	self removeAllMorphs.	self		initializeUpButton;		initializeDownButton;		initializePagingArea.	self initializeSlider! !!ScrollBar methodsFor: 'initialize' stamp: 'jmv 11/23/2010 15:04'!initialize	super initialize.	value _ 0.0.	self		initializeUpButton;		initializeDownButton;		initializePagingArea.	self initializeSlider.	scrollDelta _ 0.02.	pageDelta _ 0.2! !!ScrollBar methodsFor: 'model access' stamp: 'jmv 11/23/2010 15:16'!setValue: newValue	"Called internally for propagation to model"	self value: newValue.	setValueSelector ifNotNil: [		model perform: setValueSelector with: value ]! !!ScrollPane methodsFor: 'event handling' stamp: 'jmv 11/23/2010 15:53'!mouseEnter: event	super mouseEnter: event.	(owner is: #SystemWindow) ifTrue: [ owner paneTransition: event ]! !!ScrollPane methodsFor: 'event handling' stamp: 'jmv 11/23/2010 15:53'!mouseLeave: event	super mouseLeave: event.	(owner is: #SystemWindow) ifTrue: [ owner paneTransition: event ]! !!ScrollPane methodsFor: 'geometry' stamp: 'jmv 11/23/2010 15:45'!extent: newExtent		| oldW oldH wasHShowing wasVShowing minH minW |		oldW _ self width.	oldH _ self height.	wasHShowing _ self hIsScrollbarShowing.	wasVShowing _ self vIsScrollbarShowing.	"Figure out the minimum width and height for this pane so that scrollbars will appear"	hideScrollBars 		ifTrue: [ 			minH _ 1.			minW _ 1 ]		ifFalse: [			minH _ Preferences scrollbarThickness + 16.			minW _ minH + 4].	super extent: (newExtent max: (minW@minH)).	"Now reset widget sizes"	self resizeScroller; hideOrShowScrollBars.		"Now resetScrollDeltas where appropriate, first the vScrollBar..."	((self height ~= oldH) or: [ wasHShowing ~~ self hIsScrollbarShowing]) ifTrue: [		self vIsScrollbarShowing ifTrue: [			self vSetScrollDelta ]].				"...then the hScrollBar"	((self width ~= oldW) or: [wasVShowing ~~ self vIsScrollbarShowing]) ifTrue: [		self hIsScrollbarShowing ifTrue: [			self hSetScrollDelta ]].! !!ScrollPane methodsFor: 'geometry' stamp: 'jmv 11/23/2010 15:52'!focusIndicatorRectangle	| b topLeft bottomRight |	b _ self innerBounds.	topLeft _ b topLeft .	bottomRight _ b bottomRight.	self vIsScrollbarShowing ifTrue: [		bottomRight _ scrollBar left @ bottomRight y].	self hIsScrollbarShowing		ifTrue: [ bottomRight _ bottomRight x @ (bottomRight y - Preferences scrollbarThickness)].	^topLeft corner: bottomRight! !!ScrollPane methodsFor: 'geometry' stamp: 'jmv 10/1/2009 10:30'!hSetScrollDelta	"Set the ScrollBar deltas, value and interval, based on the current scroll pane size, offset and range."	| range delta w |	scroller hasSubmorphs ifFalse:[scrollBar interval: 1.0. ^self].		delta _ self scrollDeltaWidth.	range _ self hLeftoverScrollRange.	range = 0 ifTrue: [ hScrollBar scrollDelta: 0.02 pageDelta: 0.2; interval: 1.0; setValue: 0. ^self].	"Set up for one line (for arrow scrolling), or a full pane less one line (for paging)."	w _ self viewableWidth.	hScrollBar scrollDelta: (delta / range) asFloat pageDelta: (w - delta / range) asFloat.	hScrollBar interval: (w / self hTotalScrollRange) asFloat.	hScrollBar setValue: ((scroller offset x / range) min: 1.0) asFloat.! !!ScrollPane methodsFor: 'geometry' stamp: 'jmv 11/23/2010 15:51'!layoutChanged	| t topLeft newScrollRange |	super layoutChanged.		hideScrollBars ifTrue: [^self].		newScrollRange _ self hTotalScrollRange @ self vTotalScrollRange.	currentScrollRange = newScrollRange ifFalse: [		WorldState addDeferredUIMessage: [ self setScrollDeltas ].		currentScrollRange _ newScrollRange ].		t _ Preferences scrollbarThickness.	topLeft _ bounds topRight + (0-t-borderWidth @ borderWidth).	scrollBar bounds: (topLeft extent: t @ self vScrollBarHeight).	topLeft _ bounds bottomLeft + (borderWidth @ (t + borderWidth) negated).	hScrollBar bounds: (topLeft extent: self hScrollBarWidth@ t)! !!ScrollPane methodsFor: 'geometry' stamp: 'jmv 11/23/2010 15:44'!setScrollDeltas	"Set the ScrollBar deltas, value and interval, based on the current scroll pane size, offset and range."	scroller hasSubmorphs ifFalse: 		[scrollBar interval: 1.0. 		hScrollBar interval: 1.0. 		^ self].	"NOTE: fullbounds commented out now -- trying to find a case where this expensive step is necessary -- perhaps there is a less expensive way to handle that case."	"scroller fullBounds." "force recompute so that leftoverScrollRange will be up-to-date"	self hideOrShowScrollBars.		self vIsScrollbarShowing ifTrue: [ self vSetScrollDelta ].	self hIsScrollbarShowing ifTrue: [ self hSetScrollDelta ].! !!ScrollPane methodsFor: 'initialization' stamp: 'jmv 11/23/2010 15:53'!initialize		"initialize the state of the receiver"	super initialize.	hideScrollBars _ false.	self initializeScrollBars.	self extent: 150 @ 120.	drawKeyboardFocusIndicator _ true.! !!ScrollPane methodsFor: 'initialization' stamp: 'jmv 11/23/2010 15:18'!initializeScrollBars	"initialize the receiver's scrollBars"	(scrollBar := ScrollBar new model: self setValueSelector: #vScrollBarValue:)		borderWidth: 1;		borderColor: Color black.	(hScrollBar := ScrollBar new model: self setValueSelector: #hScrollBarValue:)		borderWidth: 1;		borderColor: Color black.	scroller := TransformMorph new color: Color transparent.	scroller offset: 0@ 0.	self addMorph: scroller! !!ScrollPane methodsFor: 'scrolling' stamp: 'jmv 11/23/2010 15:44'!hHideScrollBar	self hIsScrollbarShowing ifFalse: [		^scroller offset: 0@scroller offset y ].	self removeMorph: hScrollBar.	scroller offset: 0@scroller offset y.	 self resetExtent! !!ScrollPane methodsFor: 'scrolling' stamp: 'jmv 11/23/2010 15:45'!hIsScrollbarNeeded: havingVerticalScrollbar	"Return whether the horz scrollbar is needed"	| w |	"Don't show it if we were told not to."	hideScrollBars ifTrue: [^false].	scroller hasSubmorphs ifFalse: [^false].	"If the contents of the pane are too small to scroll, return false."	w _ self innerBounds width - (2*self xtraBorder).	"Compute the need of the horizontal scrollbar honoring the havingVerticalScrollbar argument"	havingVerticalScrollbar ifTrue: [		w _ w - Preferences scrollbarThickness ].	^self hTotalScrollRange > w! !!ScrollPane methodsFor: 'scrolling' stamp: 'jmv 11/23/2010 15:49'!hShowScrollBar	self hIsScrollbarShowing ifTrue: [^self].	self privateAddMorph: hScrollBar atIndex: 1.	self resetExtent! !!ScrollPane methodsFor: 'scrolling' stamp: 'jmv 11/23/2010 15:44'!vHideScrollBar	self vIsScrollbarShowing ifFalse: [^self].	self removeMorph: scrollBar.	scroller offset: scroller offset x@ 0.	self resetExtent! !!ScrollPane methodsFor: 'scrolling' stamp: 'jmv 11/23/2010 15:56'!vIsScrollbarNeeded: havingHorizontalScrollbar	"Return whether the vertical scrollbar is needed"	| h |		"Don't show it if we were told not to."	hideScrollBars ifTrue: [^false].		scroller hasSubmorphs ifFalse: [^false].		"If the contents of the pane are too small to scroll, return false."	h _ self innerBounds height - (2*self xtraBorder).	"Compute the need of the vertical scrollbar honoring the havingHorizontalScrollbar argument"	havingHorizontalScrollbar ifTrue: [		h _ h - Preferences scrollbarThickness ].	^ self vTotalScrollRange > h! !!ScrollPane methodsFor: 'scrolling' stamp: 'jmv 11/23/2010 15:43'!vShowScrollBar	self vIsScrollbarShowing ifTrue: [^ self].	self privateAddMorph: scrollBar atIndex: 1.	self resetExtent! !!PluggableTextMorph methodsFor: 'geometry' stamp: 'jmv 11/23/2010 15:50'!resetExtent	"Reset the extent while maintaining the current selection.  Needed when resizing while the editor is active (when inside the pane)."	| tempSelection |	textMorph ifNotNil: [		"the current selection gets munged by resetting the extent, so store it"		tempSelection _ self selectionInterval.		self extent: self extent.		self setSelection: tempSelection]! !!SystemDictionary methodsFor: 'shrinking' stamp: 'jmv 11/23/2010 15:07'!presumedSentMessages   | sent |"Smalltalk presumedSentMessages"	"The following should be preserved for doIts, etc"	sent _ IdentitySet new.	#( rehashWithoutBecome compactSymbolTable		browseAllSelect:  lastRemoval		vScrollBarValue: hScrollBarValue: 		to: removeClassNamed:		dragon: hilberts: mandala: web test3 factorial tinyBenchmarks benchFib		newDepth: restoreAfter: forgetDoIts zapAllMethods obsoleteClasses		removeAllUnSentMessages abandonSources removeUnreferencedKeys		zapOrganization condenseChanges browseObsoleteReferences		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:		startTimerEventLoop unusedClasses) do:		[:sel | sent add: sel].	"The following may be sent by perform: in dispatchOnChar..."	(TextEditor cmdActions) asSet do: [:sel | sent add: sel].	(SmalltalkEditor cmdActions) asSet do: [:sel | sent add: sel].		"methodsToKeep is never called, but any class can implement it to protect some methods from deletion.	For example, if no senders appear to exist because the symbols are built and later performed	Include the following comment when implementing it:"	"Send to self messages for all the methods that should be kept in Smalltalk image shrinking.	This method is not actually called, but will not be deleted and therefore messages sent here will not appear as unsent"	#(beReadOnlyBinding beReadWriteBinding changeSetCategoryClass belongsInAll: methodsToKeep) do:		[:sel | sent add: sel].	^ sent! !!SystemWindow methodsFor: 'menu' stamp: 'jmv 11/23/2010 15:47'!fullScreen	"Zoom Window to Full World size with possible DeskMargins"	"SystemWindow fullScreen"	| left right possibleBounds |	left := right := 0.	possibleBounds := (RealEstateAgent maximumUsableAreaInWorld: self world) 				insetBy: (left @ 0 corner: right @ 0).	Preferences fullScreenLeavesDeskMargins 		ifTrue: [ possibleBounds := possibleBounds insetBy: 22 ].	self bounds: possibleBounds! !!SystemWindow methodsFor: 'panes' stamp: 'jmv 11/23/2010 15:40'!addMorph: aMorph fullFrame: aLayoutFrame	super addMorph: aMorph fullFrame: aLayoutFrame.	paneMorphs _ paneMorphs copyReplaceFrom: 1 to: 0 with: (Array with: aMorph).	aMorph adoptWidgetsColor: self widgetsColor.	(aMorph is: #BorderedMorph) ifTrue: [		aMorph borderWidth: 2; borderColor: #inset; color: Color transparent ]! !ScrollbarButton removeSelector: #updateMenuButtonImage!PluggableTextMorph removeSelector: #scrollBarMenuButtonPressed:!ScrollPane removeSelector: #addCustomMenuItems:hand:!ScrollPane removeSelector: #containsPoint:!ScrollPane removeSelector: #hScrollBarMenuButtonPressed:!ScrollPane removeSelector: #leftOrRight!ScrollPane removeSelector: #retractableOrNot!ScrollPane removeSelector: #retractableScrollBar!ScrollPane removeSelector: #scrollBarFills:!ScrollPane removeSelector: #scrollBarMenuButtonPressed:!ScrollPane removeSelector: #vScrollBarMenuButtonPressed:!!classDefinition: #ScrollPane category: #'Morphic-Windows'!PluggableMorph subclass: #ScrollPane	instanceVariableNames: 'scrollBar scroller getMenuSelector getMenuTitleSelector hScrollBar hideScrollBars currentScrollRange drawKeyboardFocusIndicator'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!ScrollBar removeSelector: #initializeMenuButton!ScrollBar removeSelector: #menuButtonMouseDown:!Preferences class removeSelector: #inboardScrollbars!Preferences class removeSelector: #initialExtent!Preferences class removeSelector: #scrollBarsOnRight!Preferences class removeSelector: #scrollBarsWithoutMenuButton!PluggableMorph removeSelector: #model:slotName:!PluggableMorph removeSelector: #use:orMakeModelSelectorFor:in:!!classDefinition: #PluggableMorph category: #'Morphic-Kernel'!BorderedMorph subclass: #PluggableMorph	instanceVariableNames: 'model'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Kernel'!Morph removeSelector: #menuButtonMouseEnter:!Morph removeSelector: #menuButtonMouseLeave:!