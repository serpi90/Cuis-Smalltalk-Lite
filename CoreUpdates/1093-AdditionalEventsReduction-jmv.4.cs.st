'From Cuis 3.3 of 2 June 2011 [latest update: #1024] on 26 September 2011 at 11:06:40 pm'!!classDefinition: #EventHandler category: #'Morphic-Events'!Object subclass: #EventHandler	instanceVariableNames: 'mouseDownRecipient mouseDownSelector mouseMoveRecipient mouseMoveSelector mouseStillDownRecipient mouseStillDownSelector mouseUpRecipient mouseUpSelector mouseEnterRecipient mouseEnterSelector mouseLeaveRecipient mouseLeaveSelector mouseEnterDraggingRecipient mouseEnterDraggingSelector mouseLeaveDraggingRecipient mouseLeaveDraggingSelector keyStrokeRecipient keyStrokeSelector valueParameter doubleClickSelector doubleClickRecipient clickSelector clickRecipient '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Events'!!classDefinition: #PluggableListMorph category: #'Morphic-Views for Models'!ScrollPane subclass: #PluggableListMorph	instanceVariableNames: 'list getListSelector getListSizeSelector getIndexSelector setIndexSelector keystrokeActionSelector autoDeselect lastKeystrokeTime lastKeystrokes doubleClickSelector handlesBasicKeys potentialDropRow listMorph menuGetter mainView '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Views for Models'!!classDefinition: #SimpleHierarchicalListMorph category: #'Morphic-Views for Models'!ScrollPane subclass: #SimpleHierarchicalListMorph	instanceVariableNames: 'selectedMorph getListSelector keystrokeActionSelector autoDeselect columns sortingSelector getSelectionSelector setSelectionSelector potentialDropMorph lineColor menuGetter mainView '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Views for Models'!!EventHandler methodsFor: 'access' stamp: 'jmv 9/26/2011 18:54'!firstMouseSelector	"Answer the selector corresponding to the first mouse-handling selector fielded.  Created in support of providing balloon-help for halo handles, triggered by the selector handled"	mouseDownSelector ifNotNil: [^ mouseDownSelector].	mouseMoveSelector ifNotNil:[^mouseMoveSelector].	mouseStillDownSelector ifNotNil: [^ mouseStillDownSelector].	mouseUpSelector ifNotNil: [^ mouseUpSelector].	mouseEnterSelector ifNotNil: [^ mouseEnterSelector].	mouseLeaveSelector ifNotNil: [^ mouseLeaveSelector].	doubleClickSelector ifNotNil: [^ doubleClickSelector].	^ nil! !!EventHandler methodsFor: 'initialization' stamp: 'jmv 9/26/2011 18:46'!on: eventName send: selector to: recipient	eventName == #mouseDown ifTrue:		[mouseDownRecipient _ recipient.  mouseDownSelector _ selector. ^ self].	eventName == #mouseMove ifTrue:		[mouseMoveRecipient _ recipient.  mouseMoveSelector _ selector. ^ self].	eventName == #mouseStillDown ifTrue:		[mouseStillDownRecipient _ recipient.  mouseStillDownSelector _ selector. ^ self].	eventName == #mouseUp ifTrue:		[mouseUpRecipient _ recipient.  mouseUpSelector _ selector. ^ self].	eventName == #mouseEnter ifTrue:		[mouseEnterRecipient _ recipient.  mouseEnterSelector _ selector. ^ self].	eventName == #mouseLeave ifTrue:		[mouseLeaveRecipient _ recipient.  mouseLeaveSelector _ selector. ^ self].	eventName == #click ifTrue:		[clickRecipient _ recipient. clickSelector _ selector. ^ self].	eventName == #doubleClick ifTrue:		[doubleClickRecipient _ recipient. doubleClickSelector _ selector. ^ self].	eventName == #keyStroke ifTrue:		[keyStrokeRecipient _ recipient.  keyStrokeSelector _ selector. ^ self].	self error: 'Event name, ' , eventName , ' is not recognizable.'! !!EventHandler methodsFor: 'printing' stamp: 'jmv 9/26/2011 18:49'!printOn: aStream 	| aVal |	super printOn: aStream.	#('mouseDownSelector' 'mouseStillDownSelector' 'mouseUpSelector' 'mouseEnterSelector' 'mouseLeaveSelector' 'doubleClickSelector' 'keyStrokeSelector') 		do: [ :aName | 			(aVal := self instVarNamed: aName) ifNotNil: [ 				aStream nextPutAll: '; ' , aName , '=' , aVal]]! !!LightWidget methodsFor: 'events-processing' stamp: 'jmv 9/26/2011 19:00'!handleMouseEnter: anEvent	"System level event handling."	self wantsBalloon			ifTrue:[anEvent hand triggerBalloonFor: self after: self balloonHelpDelayTime].	(self handlesMouseOver: anEvent) ifTrue:[		anEvent wasHandled: true.		self mouseEnter: anEvent.	].! !!LightWidget methodsFor: 'events-processing' stamp: 'jmv 9/26/2011 19:00'!handleMouseLeave: anEvent	"System level event handling."	anEvent hand removePendingBalloonFor: self.	(self handlesMouseOver: anEvent) ifTrue:[		anEvent wasHandled: true.		self mouseLeave: anEvent.	].! !!Morph methodsFor: 'events-processing' stamp: 'jmv 9/26/2011 22:22'!handleMouseEnter: anEvent	"System level event handling."	anEvent isDraggingEvent ifTrue: [		^self].	self wantsBalloon ifTrue: [		anEvent hand triggerBalloonFor: self after: self balloonHelpDelayTime].	(self handlesMouseOver: anEvent) ifTrue:[		anEvent wasHandled: true.		self mouseEnter: anEvent ]! !!Morph methodsFor: 'events-processing' stamp: 'jmv 9/26/2011 22:23'!handleMouseLeave: anEvent	"System level event handling."	anEvent hand removePendingBalloonFor: self.	anEvent isDraggingEvent ifTrue: [		^self].	(self handlesMouseOver: anEvent) ifTrue: [		anEvent wasHandled: true.		self mouseLeave: anEvent ]! !!LazyListMorph methodsFor: 'drawing' stamp: 'jmv 9/26/2011 19:06'!drawOn: aCanvas	| |	listItems size = 0 ifTrue: [ ^self ]. 	self drawSelectionOn: aCanvas.	(self topVisibleRowForCanvas: aCanvas) to: (self bottomVisibleRowForCanvas: aCanvas) do: [ :row |		(listSource itemSelectedAmongMultiple:  row) ifTrue: [			self drawBackgroundForMulti: row on: aCanvas. ].		self display: (self item: row) asStringOrText atRow: row on: aCanvas.	]! !!MenuItemMorph methodsFor: 'events' stamp: 'jmv 9/26/2011 23:06'!deselectTimeOut: evt	"Deselect timout. Now really deselect"	owner selectedItem == self ifTrue: [		owner selectItem: nil event: evt ]! !!MenuItemMorph methodsFor: 'events' stamp: 'jmv 9/26/2011 23:01'!mouseEnter: evt	"The mouse entered the receiver"	owner ifNil: [ ^self ].	owner selectItem: self event: evt! !!MenuItemMorph methodsFor: 'events' stamp: 'jmv 9/26/2011 23:06'!mouseLeave: evt 	"The mouse left the receiver. Do nothing if we're not in a 'valid menu transition', meaning that the current hand focus must be aimed at the owning menu."	owner ifNil: [^self].	"If we have a submenu, make sure we've got some time to enter it before actually leaving the menu item"	subMenu 		ifNil: [ owner selectItem: nil event: evt ]		ifNotNil: [			self 				addAlarm: #deselectTimeOut:				with: evt				after: 500 ]! !!PluggableListMorph methodsFor: 'updating' stamp: 'jmv 9/26/2011 19:07'!updateList	| index |	"the list has changed -- update from the model"	self listMorph listChanged.	self setScrollDeltas.	scrollBar setValue: 0.0.	index _ self getCurrentSelectionIndex.	self selectionIndex: index.! !TextModelMorph removeSelector: #acceptDroppingMorph:event:!TextModelMorph removeSelector: #wantsDroppedMorph:event:!SystemWindow removeSelector: #handlesMouseOverDragging:!SystemWindow removeSelector: #mouseEnterDragging:!SystemWindow removeSelector: #mouseLeaveDragging:!SimpleHierarchicalListMorph removeSelector: #acceptDroppingMorph:event:!SimpleHierarchicalListMorph removeSelector: #columns:!SimpleHierarchicalListMorph removeSelector: #expand:to:!SimpleHierarchicalListMorph removeSelector: #expandRoots!SimpleHierarchicalListMorph removeSelector: #handlesMouseOverDragging:!SimpleHierarchicalListMorph removeSelector: #lineColor:!SimpleHierarchicalListMorph removeSelector: #mouseEnterDragging:!SimpleHierarchicalListMorph removeSelector: #mouseLeaveDragging:!SimpleHierarchicalListMorph removeSelector: #mouseMove:!SimpleHierarchicalListMorph removeSelector: #potentialDropMorph:!SimpleHierarchicalListMorph removeSelector: #resetPotentialDropMorph!SimpleHierarchicalListMorph removeSelector: #roots!SimpleHierarchicalListMorph removeSelector: #selectionOneOf:!SimpleHierarchicalListMorph removeSelector: #sortingSelector:!SimpleHierarchicalListMorph removeSelector: #wantsDroppedMorph:event:!!classDefinition: #SimpleHierarchicalListMorph category: #'Morphic-Views for Models'!ScrollPane subclass: #SimpleHierarchicalListMorph	instanceVariableNames: 'selectedMorph getListSelector keystrokeActionSelector autoDeselect columns sortingSelector getSelectionSelector setSelectionSelector lineColor menuGetter mainView'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Views for Models'!PluggableListMorph removeSelector: #acceptDroppingMorph:event:!PluggableListMorph removeSelector: #doubleClickSelector:!PluggableListMorph removeSelector: #handlesBasicKeys:!PluggableListMorph removeSelector: #handlesMouseOverDragging:!PluggableListMorph removeSelector: #mouseEnterDragging:!PluggableListMorph removeSelector: #mouseLeaveDragging:!PluggableListMorph removeSelector: #mouseMove:!PluggableListMorph removeSelector: #potentialDropItem!PluggableListMorph removeSelector: #potentialDropRow!PluggableListMorph removeSelector: #resetPotentialDropRow!PluggableListMorph removeSelector: #wantsDroppedMorph:event:!!classDefinition: #PluggableListMorph category: #'Morphic-Views for Models'!ScrollPane subclass: #PluggableListMorph	instanceVariableNames: 'list getListSelector getListSizeSelector getIndexSelector setIndexSelector keystrokeActionSelector autoDeselect lastKeystrokeTime lastKeystrokes doubleClickSelector handlesBasicKeys listMorph menuGetter mainView'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Views for Models'!MenuItemMorph removeSelector: #handlesMouseOverDragging:!MenuItemMorph removeSelector: #mouseEnterDragging:!MenuItemMorph removeSelector: #mouseLeaveDragging:!LazyListMorph removeSelector: #highlightPotentialDropRow:on:!LazyListMorph removeSelector: #selectRow:!IndentingListItemMorph removeSelector: #acceptDroppingMorph:event:!IndentingListItemMorph removeSelector: #children!IndentingListItemMorph removeSelector: #childrenDo:!IndentingListItemMorph removeSelector: #recursiveDelete!BareTextMorph removeSelector: #acceptDroppingMorph:event:!Morph removeSelector: #handlesMouseOverDragging:!Morph removeSelector: #mouseEnterDragging:!Morph removeSelector: #mouseLeaveDragging:!LightWidget removeSelector: #handlesMouseOverDragging:!EventHandler removeSelector: #allRecipients!EventHandler removeSelector: #handlesMouseMove:!EventHandler removeSelector: #handlesMouseOverDragging:!EventHandler removeSelector: #methodRefList!EventHandler removeSelector: #mouseDownSelector!EventHandler removeSelector: #mouseEnterDragging:fromMorph:!EventHandler removeSelector: #mouseLeaveDragging:fromMorph:!EventHandler removeSelector: #mouseStillDownRecipient!EventHandler removeSelector: #mouseStillDownSelector!EventHandler removeSelector: #mouseUpSelector!EventHandler removeSelector: #onGestureSend:to:!!classDefinition: #EventHandler category: #'Morphic-Events'!Object subclass: #EventHandler	instanceVariableNames: 'mouseDownRecipient mouseDownSelector mouseMoveRecipient mouseMoveSelector mouseStillDownRecipient mouseStillDownSelector mouseUpRecipient mouseUpSelector mouseEnterRecipient mouseEnterSelector mouseLeaveRecipient mouseLeaveSelector keyStrokeRecipient keyStrokeSelector valueParameter doubleClickSelector doubleClickRecipient clickSelector clickRecipient'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Events'!