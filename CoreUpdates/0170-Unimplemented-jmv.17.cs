'From Cuis 1.0 of 6 April 2009 [latest update: #169] on 6 April 2009 at 6:42:53 pm'!!classDefinition: #MIDIScore category: #'Sound-Scores'!Object subclass: #MIDIScore	instanceVariableNames: 'tracks trackInfo ambientTrack tempoMap ticksPerQuarterNote '	classVariableNames: ''	poolDictionaries: ''	category: 'Sound-Scores'!!classDefinition: #SystemDictionary category: #'System-Support'!IdentityDictionary subclass: #SystemDictionary	instanceVariableNames: 'cachedClassNames '	classVariableNames: 'LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore MemoryHogs ShutDownList SourceFileVersionString SpecialSelectors StartUpList StartupStamp '	poolDictionaries: ''	category: 'System-Support'!!Object methodsFor: 'macpal' stamp: 'jmv 4/6/2009 18:38'!currentWorld	"Answer a morphic world that is the current UI focus."	ActiveWorld ifNotNil:[^ActiveWorld].	^World! !!CodeHolder methodsFor: 'controls' stamp: 'jmv 4/6/2009 18:17'!contentsSymbolQuints	"Answer a list of quintuplets representing information on the alternative views available in the code pane		first element:	the contentsSymbol used		second element:	the selector to call when this item is chosen.		third element:	the selector to call to obtain the wording of the menu item.		fourth element:	the wording to represent this view		fifth element:	balloon help	A hypen indicates a need for a seperator line in a menu of such choices"	^ #((source			togglePlainSource 			showingPlainSourceString	'source'		'the textual source code as writen')(documentation	toggleShowDocumentation	showingDocumentationString	'documentation'		'the first comment in the method')-(prettyPrint		togglePrettyPrint 			prettyPrintString			'prettyPrint'			'the method source presented in a standard text format')(colorPrint		toggleColorPrint				colorPrintString				'colorPrint'			'the method source in a standard text format with colors to distinguish structural parts') -(showDiffs		toggleRegularDiffing		showingRegularDiffsString	'showDiffs'				'the textual source diffed from its prior version')(prettyDiffs		togglePrettyDiffing			showingPrettyDiffsString	'prettyDiffs'		'formatted textual source diffed from formatted form of prior version')-(decompile		toggleDecompile				showingDecompileString		'decompile'			'source code decompiled from byteCodes')(byteCodes		toggleShowingByteCodes		showingByteCodesString		'byteCodes'			'the bytecodes that comprise the compiled method'))! !!CodeHolder methodsFor: 'diffs' stamp: 'jmv 4/6/2009 18:17'!toggleColorPrint	"Toggle whether color-print is in effect in the code pane"	self okToChange ifTrue:		[self showingColorPrint			ifTrue:				[contentsSymbol _ #source]			ifFalse:				[contentsSymbol _ #colorPrint].		self setContentsToForceRefetch.		self contentsChanged]! !!CodeHolder methodsFor: 'diffs' stamp: 'jmv 4/6/2009 18:18'!togglePlainSource	"Toggle whether plain source shown in the code pane"		| wasShowingPlainSource |	self okToChange ifTrue:		[wasShowingPlainSource _ self showingPlainSource.		wasShowingPlainSource			ifTrue:				[self showDocumentation: true]			ifFalse:				[contentsSymbol _ #source].		self setContentsToForceRefetch.		self changed: #contents]! !!CodeHolder methodsFor: 'diffs' stamp: 'jmv 4/6/2009 18:18'!togglePrettyPrint	"Toggle whether pretty-print is in effectin the code pane"	self okToChange ifTrue:		[self showingPrettyPrint			ifTrue:				[contentsSymbol _ #source]			ifFalse:				[contentsSymbol _ #prettyPrint].		self setContentsToForceRefetch.		self contentsChanged]! !!Browser methodsFor: 'initialize-release' stamp: 'jmv 4/6/2009 18:00'!buildMorphicMessageList	"Build a morphic message list, with #messageList as its list-getter"	| aListMorph |	(aListMorph := PluggableListMorph new)		setProperty: #highlightSelector toValue: #highlightMessageList:with:;		on: self			list: #messageList			selected: #messageListIndex			changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:.	aListMorph enableDragNDrop: false.	aListMorph menuTitleSelector: #messageListSelectorTitle.	^aListMorph! !!Browser class methodsFor: 'instance creation' stamp: 'jmv 4/6/2009 15:44'!openBrowserView: aBrowserView label: aString 	"Schedule aBrowserView, labelling the view aString."	(aBrowserView setLabel: aString) openInWorld.	^ aBrowserView model! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 4/6/2009 15:24'!newSet	"Create a new changeSet and show it., making it the current one.  Reject name if already in use."	| aSet |	self okToChange ifFalse: [^ self].	aSet _ self class newChangeSet.	aSet ifNotNil: [		self update.		(changeSetCategory includesChangeSet: aSet) ifTrue:			[self showChangeSet: aSet].		self changed: #relabel]! !!Debugger methodsFor: 'initialize' stamp: 'jmv 4/6/2009 15:52'!preDebugButtonQuads	^ #(('Proceed'		proceed 	blue 	'continue execution' )		('Abandon'		delete	 	black 	'abandon this execution by closing this window')		('Debug'		debug 		red 		'bring up a debugger'))! !!Encoder methodsFor: 'private' stamp: 'jmv 4/6/2009 17:40'!lookupInPools: varName ifFound: assocBlock	Symbol hasInterned: varName ifTrue:[:sym|		(class bindingOf: sym) ifNotNilDo:[:assoc| 			assocBlock value: assoc.			^true].		^ false].	(class bindingOf: varName) ifNotNilDo:[:assoc|		assocBlock value: assoc.		^true].	^false! !!FileList2 class methodsFor: 'preferences' stamp: 'jmv 4/6/2009 18:39'!useFileList2preferenceChanged! !!FormCanvas methodsFor: 'drawing-images' stamp: 'jmv 4/6/2009 17:03'!stencil: stencilForm at: aPoint sourceRect: sourceRect color: aColor	"Flood this canvas with aColor wherever stencilForm has non-zero pixels"	self setPaintColor: aColor.	port colorMap: stencilForm maskingMap.	port stencil: stencilForm		at: aPoint + origin		sourceRect: sourceRect.! !!FormCanvas methodsFor: 'private' stamp: 'jmv 4/6/2009 17:01'!setClearColor: aColor	"Install a new clear color - e.g., a color is used for clearing the background"	| clearColor |	clearColor _ aColor ifNil:[Color transparent].	clearColor isColor ifFalse:[		(clearColor isKindOf: InfiniteForm) ifFalse:[^self error:'Cannot install color'].		^port fillPattern: clearColor; combinationRule: Form over].	"Okay, so clearColor really *is* a color"	port sourceForm: nil.	port combinationRule: Form over.	port fillPattern: clearColor.	self depth = 8 ifTrue:[		"Use a stipple pattern"		port fillColor: (form balancedPatternFor: clearColor)].! !!FormCanvas methodsFor: 'private' stamp: 'jmv 4/6/2009 17:04'!setFillColor: aColor	"Install a new color used for filling."	| screen patternWord fillColor |	fillColor _ self shadowColor ifNil:[aColor].	fillColor ifNil:[fillColor _ Color transparent].	fillColor isColor ifFalse:[		(fillColor isKindOf: InfiniteForm) ifFalse:[^self error:'Cannot install color'].		^port fillPattern: fillColor; combinationRule: Form over].	"Okay, so fillColor really *is* a color"	port sourceForm: nil.	fillColor isTranslucent ifFalse:[		port combinationRule: Form over.		port fillPattern: fillColor.		self depth = 8 ifTrue:[			"In 8 bit depth it's usually a good idea to use a stipple pattern"			port fillColor: (form balancedPatternFor: fillColor)].		^self].	self depth > 8 ifTrue:[		"BitBlt setup for alpha masked transfer"		port fillPattern: fillColor.		self depth = 16			ifTrue:[port alphaBits: fillColor privateAlpha; combinationRule: 30]			ifFalse:[port combinationRule: Form blend].		^self].	"Can't represent actual transparency -- use stipple pattern"	screen _ Color translucentMaskFor: fillColor alpha depth: self depth.	patternWord _ form pixelWordFor: fillColor.	port fillPattern: (screen collect: [:maskWord | maskWord bitAnd: patternWord]).	port combinationRule: Form paint.! !!FormCanvas methodsFor: 'private' stamp: 'jmv 4/6/2009 17:04'!setPaintColor: aColor	"Install a new color used for filling."	| paintColor screen patternWord |	paintColor _ self shadowColor ifNil:[aColor].	paintColor ifNil:[paintColor _ Color transparent].	paintColor isColor ifFalse:[		(paintColor isKindOf: InfiniteForm) ifFalse:[^self error:'Cannot install color'].		^port fillPattern: paintColor; combinationRule: Form paint].	"Okay, so paintColor really *is* a color"	port sourceForm: nil.	(paintColor isTranslucent) ifFalse:[		port fillPattern: paintColor.		port combinationRule: Form paint.		self depth = 8 ifTrue:[			port fillColor: (form balancedPatternFor: paintColor)].		^self].	self depth > 8 ifTrue:[		"BitBlt setup for alpha mapped transfer"		port fillPattern: paintColor.		self depth = 16			ifTrue:[port alphaBits: paintColor privateAlpha; combinationRule: 31]			ifFalse:[port combinationRule: Form blend].		^self].	"Can't represent actual transparency -- use stipple pattern"	screen _ Color translucentMaskFor: paintColor alpha depth: self depth.	patternWord _ form pixelWordFor: paintColor.	port fillPattern: (screen collect: [:maskWord | maskWord bitAnd: patternWord]).	port combinationRule: Form paint! !!ImageSegment methodsFor: 'testing' stamp: 'jmv 4/6/2009 15:45'!findRogueRootsAllMorphs: rootArray 	"This is a tool to track down unwanted pointers into the segment.  If we don't deal with these pointers, the segment turns out much smaller than it should.  These pointers keep a subtree of objects out of the segment.1) assemble all objects should be in seg:  morph tree, presenter, scripts, player classes, metaclasses.  Put in a Set.2) Remove the roots from this list.  Ask for senders of each.  Of the senders, forget the ones that are in the segment already.  Keep others.  The list is now all the 'incorrect' pointers into the segment."	| inSeg testRoots pointIn xRoots |	Smalltalk garbageCollect.	inSeg := IdentitySet new: 200.	arrayOfRoots := rootArray.	testRoots := rootArray.	xRoots := testRoots.	xRoots do: 			[:obj | 			"root is a project"			obj isMorph 				ifTrue: 					[obj allMorphs do: 							[:mm | 							inSeg add: mm].					]].	testRoots do: [:each | inSeg remove: each ifAbsent: []].	"want them to be pointed at from outside"	pointIn := IdentitySet new: 400.	inSeg do: [:ob | pointIn addAll: (Smalltalk pointersTo: ob except: inSeg)].	testRoots do: [:each | pointIn remove: each ifAbsent: []].	pointIn remove: inSeg array ifAbsent: [].	pointIn remove: pointIn array ifAbsent: [].	inSeg do: 			[:obj | 			(obj isMorph) 				ifTrue: 					[pointIn remove: (obj instVarAt: 3)						ifAbsent: 							["submorphs"							].					"associations in extension"					pointIn remove: obj extension ifAbsent: [].					obj extension ifNotNil: 							[obj extension otherProperties ifNotNil: 									[obj extension otherProperties 										associationsDo: [:ass | pointIn remove: ass ifAbsent: []]									"*** and extension actorState"									"*** and ActorState instantiatedUserScriptsDictionary ScriptInstantiations"]]].			].	"*** presenter playerlist"	self halt: 'Examine local variables pointIn and inSeg'.	^pointIn! !!ImageSegment methodsFor: 'testing' stamp: 'jmv 4/6/2009 15:46'!findRogueRootsPrep	"Part of the tool to track down unwanted pointers into the segment.  Break all owner pointers in submorphs, scripts, and viewers in flaps."| wld morphs |wld _ arrayOfRoots detect: [:obj | 	obj isMorph ifTrue: [obj isWorldMorph] ifFalse: [false]] ifNone: [nil].wld ifNil: [wld _ arrayOfRoots detect: [:obj | obj isMorph] 				ifNone: [^ self error: 'can''t find a root morph']].morphs _ IdentitySet new: 400.wld allMorphsDo: [ :m |  morphs add: m ].morphs do: [:mm | 	"break the back pointers"	mm isInMemory ifTrue: [	(mm respondsTo: #target) ifTrue: [		mm nearestOwnerThat: [:ow | ow == mm target 			ifTrue: [mm target: nil. true]			ifFalse: [false]]].	(mm respondsTo: #arguments) ifTrue: [		mm arguments do: [:arg | arg ifNotNil: [			mm nearestOwnerThat: [:ow | ow == arg				ifTrue: [mm arguments at: (mm arguments indexOf: arg) put: nil. true]				ifFalse: [false]]]]].	mm eventHandler ifNotNil: ["recipients point back up"		(morphs includesAllOf: (mm eventHandler allRecipients)) ifTrue: [			mm eventHandler: nil]].	"temporary, until using Model for PartsBin"	(mm isMorphicModel) ifTrue: [		(mm model isMorphicModel) ifTrue: [			mm model breakDependents]].	(mm isTextMorph) ifTrue: [mm setContainer: nil]]].(Smalltalk includesKey: #Owners) ifTrue: [Smalltalk at: #Owners put: nil].	"in case findOwnerMap: is commented out""self findOwnerMap: morphs."morphs do: [:mm | 	"break the back pointers"	mm isInMemory ifTrue: [mm privateOwner: nil]]."more in extensions?"! !!MIDIScore methodsFor: 'initialization' stamp: 'jmv 4/6/2009 17:15'!initialize	tracks _ #().	tempoMap _ #().	ticksPerQuarterNote _ 100.! !!MIDIScore methodsFor: 'accessing' stamp: 'jmv 4/6/2009 17:14'!tracks: trackList	tracks _ trackList asArray collect: [:trackEvents | trackEvents asArray]! !!MIDIScore methodsFor: 'nil' stamp: 'jmv 4/6/2009 17:15'!durationInTicks		| t |	t _ 0.	tracks do: [ :track |		track do:			[:n | (n isNoteEvent)				ifTrue: [t _ t max: n endTime]				ifFalse: [t _ t max: n time]]].	^ t! !!MethodFinder methodsFor: 'initialize' stamp: 'jmv 4/6/2009 15:46'!initialize	"The methods we are allowed to use.  (MethodFinder new initialize) "	Approved _ Set new.	AddAndRemove _ Set new.	Blocks _ Set new.	"These modify an argument and are not used by the MethodFinder: longPrintOn: printOn: storeOn: sentTo: storeOn:base: printOn:base: absPrintExactlyOn:base: absPrintOn:base: absPrintOn:base:digitCount: writeOn: writeScanOn: possibleVariablesFor:continuedFrom: printOn:format:""Object"  	#("in class, instance creation" initialInstance  newFrom: readCarefullyFrom:"accessing" at: basicAt: basicSize bindWithTemp: in: size yourself "testing" ifNil: ifNil:ifNotNil: ifNotNil: ifNotNil:ifNil: isColor isFloat isFraction isInMemory isInteger isMorph isNil isNumber isPoint isPseudoContext isText isTransparent isWebBrowser knownName notNil pointsTo: wantsSteps "comparing" = == closeTo: hash hashMappedBy: identityHash identityHashMappedBy: identityHashPrintString ~= ~~ "copying" clone copy shallowCopy "dependents access" canDiscardEdits dependents hasUnacceptedEdits "updating" changed changed: okToChange update: windowIsClosing "printing" fullPrintString isLiteral longPrintString printString storeString stringForReadout stringRepresentation "class membership" class isKindOf: isKindOf:orOf: isMemberOf: respondsTo: xxxClass "error handling" "user interface" defaultLabelForInspector initialExtent modelWakeUp "system primitives" asOop instVarAt: instVarNamed: "private" "associating" -> "converting" as: asOrderedCollection asString "casing" caseOf: caseOf:otherwise: "binding" bindingOf: "macpal" contentsChanged currentEvent currentHand currentWorld flash ifKindOf:thenDo: instanceVariableValues "flagging" flag: "translation support" "objects from disk" "finalization" ) do: [:sel | Approved add: sel].	#(at:add: at:modify: at:put: basicAt:put: "NOT instVar:at:""message handling" perform: perform:orSendTo: perform:with: perform:with:with: perform:with:with:with: perform:withArguments: perform:withArguments:inSuperclass: ) do: [:sel | AddAndRemove add: sel]."Boolean, True, False, UndefinedObject"  	#("logical operations" & eqv: not xor: |"controlling" and: ifFalse: ifFalse:ifTrue: ifTrue: ifTrue:ifFalse: or:"copying" "testing" isEmptyOrNil) do: [:sel | Approved add: sel]."Behavior" 	#("initialize-release""accessing" compilerClass decompilerClass evaluatorClass format methodDict parserClass sourceCodeTemplate subclassDefinerClass"testing" instSize instSpec isBits isBytes isFixed isPointers isVariable isWeak isWords"copying""printing" printHierarchy"creating class hierarchy""creating method dictionary""instance creation" basicNew basicNew: new new:"accessing class hierarchy" allSubclasses allSubclassesWithLevelDo:startingLevel: allSuperclasses subclasses superclass withAllSubclasses withAllSuperclasses"accessing method dictionary" allSelectors changeRecordsAt: compiledMethodAt: compiledMethodAt:ifAbsent: firstCommentAt: lookupSelector: selectors selectorsDo: selectorsWithArgs: "slow but useful ->" sourceCodeAt: sourceCodeAt:ifAbsent: sourceMethodAt: sourceMethodAt:ifAbsent:"accessing instances and variables" allClassVarNames allInstVarNames allSharedPools classVarNames instVarNames instanceCount sharedPools someInstance subclassInstVarNames"testing class hierarchy" inheritsFrom: kindOfSubclass"testing method dictionary" canUnderstand: classThatUnderstands: hasMethods includesSelector: scopeHas:ifTrue: whichClassIncludesSelector: whichSelectorsAccess: whichSelectorsReferTo: whichSelectorsReferTo:special:byte: whichSelectorsStoreInto:"enumerating""user interface""private" indexIfCompact) do: [:sel | Approved add: sel]."ClassDescription"	#("initialize-release" "accessing" classVersion isMeta name theNonMetaClass"copying" "printing" classVariablesString instanceVariablesString sharedPoolsString"instance variables" checkForInstVarsOK: "method dictionary" "organization" category organization whichCategoryIncludesSelector:"compiling" acceptsLoggingOfCompilation wantsChangeSetLogging"fileIn/Out" definition"private" ) do: [:sel | Approved add: sel]."Class"	#("initialize-release" "accessing" classPool"testing""copying" "class name" "instance variables" "class variables" classVarAt: classVariableAssociationAt:"pool variables" "compiling" "subclass creation" "fileIn/Out" ) do: [:sel | Approved add: sel]. "Metaclass"	#("initialize-release" "accessing" soleInstance"copying" "instance creation" "instance variables"  "pool variables" "class hierarchy"  "compiling""fileIn/Out"  nonTrivial ) do: [:sel | Approved add: sel]."Context, BlockContext"	#(receiver client method receiver tempAt: "debugger access" mclass pc selector sender shortStack sourceCode tempNames tempsAndValues"controlling"  "printing" "system simulation" "initialize-release" "accessing" hasMethodReturn home numArgs"evaluating" value value:ifError: value:value: value:value:value: value:value:value:value: valueWithArguments:"controlling"  "scheduling"  "instruction decoding"  "printing" "private"  "system simulation" ) do: [:sel | Approved add: sel].	#(value: "<- Association has it as a store" ) do: [:sel | AddAndRemove add: sel]."Message"	#("inclass, instance creation" selector: selector:argument: selector:arguments:"accessing" argument argument: arguments sends:"printing" "sending" ) do: [:sel | Approved add: sel].	#("private" setSelector:arguments:) do: [:sel | AddAndRemove add: sel]."Magnitude"	#("comparing" < <= > >= between:and:"testing" max: min: min:max: ) do: [:sel | Approved add: sel]."Date, Time"	#("in class, instance creation" fromDays: fromSeconds: fromString: newDay:month:year: newDay:year: today	"in class, general inquiries" dateAndTimeNow dayOfWeek: daysInMonth:forYear: daysInYear: firstWeekdayOfMonth:year: indexOfMonth: leapYear: nameOfDay: nameOfMonth:"accessing" day leap monthIndex monthName weekday year"arithmetic" addDays: subtractDate: subtractDays:"comparing""inquiries" dayOfMonth daysInMonth daysInYear daysLeftInYear firstDayOfMonth previous:"converting" asSeconds"printing" mmddyy mmddyyyy printFormat: "private" firstDayOfMonthIndex: weekdayIndex 	"in class, instance creation" fromSeconds: now 	"in class, general inquiries" dateAndTimeFromSeconds: dateAndTimeNow millisecondClockValue millisecondsToRun: totalSeconds"accessing" hours minutes seconds"arithmetic" addTime: subtractTime:"comparing""printing" intervalString print24 "converting") do: [:sel | Approved add: sel].	#("private" hours: hours:minutes:seconds: day:year: 		 ) do: [:sel | AddAndRemove add: sel]."Number"	#("in class" readFrom:base: "arithmetic" * + - / // \\ abs negated quo: reciprocal rem:"mathematical functions" arcCos arcSin arcTan arcTan: cos exp floorLog: ln log log: raisedTo: raisedToInteger: sin sqrt squared tan"truncation and round off" ceiling detentBy:atMultiplesOf:snap: floor roundTo: roundUpTo: rounded truncateTo: truncated"comparing""testing" even isDivisibleBy: isInf isInfinite isNaN isZero negative odd positive sign strictlyPositive"converting" @ asInteger asNumber asPoint asSmallAngleDegrees degreesToRadians radiansToDegrees"intervals" to: to:by: "printing" printStringBase: storeStringBase: ) do: [:sel | Approved add: sel]."Integer"	#("in class" primesUpTo:"testing" isPowerOfTwo"arithmetic" alignedTo:"comparing""truncation and round off" atRandom normalize"enumerating" timesRepeat:"mathematical functions" degreeCos degreeSin factorial gcd: lcm: take:"bit manipulation" << >> allMask: anyMask: bitAnd: bitClear: bitInvert bitInvert32 bitOr: bitShift: bitXor: lowBit noMask:"converting" asCharacter asColorOfDepth: asFloat asFraction asHexDigit"printing" asStringWithCommas hex hex8 radix:"system primitives" lastDigit replaceFrom:to:with:startingAt:"private" "benchmarks" ) do: [:sel | Approved add: sel]."SmallInteger, LargeNegativeInteger, LargePositiveInteger"	#("arithmetic" "bit manipulation" highBit "testing" "comparing" "copying" "converting" "printing" "system primitives" digitAt: digitLength "private" fromString:radix: ) do: [:sel | Approved add: sel].	#(digitAt:put: ) do: [:sel | AddAndRemove add: sel]."Float"	#("arithmetic""mathematical functions" reciprocalFloorLog: reciprocalLogBase2 timesTwoPower:"comparing" "testing""truncation and round off" exponent fractionPart integerPart significand significandAsInteger"converting" asApproximateFraction asIEEE32BitWord asTrueFraction"copying") do: [:sel | Approved add: sel]."Fraction, Random"	#(denominator numerator reduced next nextValue) do: [:sel | Approved add: sel].	#(setNumerator:denominator:) do: [:sel | AddAndRemove add: sel]."Collection"	#("accessing" anyOne"testing" includes: includesAllOf: includesAnyOf: includesSubstringAnywhere: isEmpty isSequenceable occurrencesOf:"enumerating" collect: collect:thenSelect: count: detect: detect:ifNone: detectMax: detectMin: detectSum: inject:into: reject: select: select:thenCollect:"converting" asBag asCharacterSet asSet asSortedArray asSortedCollection asSortedCollection:"printing""private" maxSize"arithmetic""math functions" average max median min range sum) do: [:sel | Approved add: sel].	#("adding" add: addAll: addIfNotPresent:"removing" remove: remove:ifAbsent: removeAll: removeAllFoundIn: removeAllSuchThat: remove:ifAbsent:) do: [:sel | AddAndRemove add: sel]."SequenceableCollection"	#("comparing" hasEqualElements:"accessing" allButFirst allButLast at:ifAbsent: atAll: atPin: atRandom: atWrap: fifth first fourth identityIndexOf: identityIndexOf:ifAbsent: indexOf: indexOf:ifAbsent: indexOf:startingAt:ifAbsent: indexOfSubCollection:startingAt: indexOfSubCollection:startingAt:ifAbsent: last second sixth third"removing""copying" , copyAfterLast: copyAt:put: copyFrom:to: copyReplaceAll:with: copyReplaceFrom:to:with: copyUpTo: copyUpToLast: copyWith: copyWithout: copyWithoutAll: forceTo:paddingWith: shuffled sortBy:"enumerating" collectWithIndex: findFirst: findLast: pairsCollect: with:collect: withIndexCollect: polynomialEval:"converting" asArray asDictionary asFloatArray asIntegerArray asStringWithCr asWordArray reversed"private" copyReplaceAll:with:asTokens: ) do: [:sel | Approved add: sel].	#( swap:with:) do: [:sel | AddAndRemove add: sel]."ArrayedCollection, Bag"	#("private" defaultElement "sorting" isSorted"accessing" cumulativeCounts sortedCounts sortedElements "testing" "adding" add:withOccurrences: "removing" "enumerating" 	) do: [:sel | Approved add: sel].	#( mergeSortFrom:to:by: sort sort: add: add:withOccurrences:"private" setDictionary ) do: [:sel | AddAndRemove add: sel]."Other messages that modify the receiver"	#(atAll:put: atAll:putAll: atAllPut: atWrap:put: replaceAll:with: replaceFrom:to:with:  removeFirst removeLast) do: [:sel | AddAndRemove add: sel].	self initialize2."MethodFinder new initialize.MethodFinder new organizationFiltered: Set"! !!MethodFinder methodsFor: 'initialize' stamp: 'jmv 4/6/2009 18:04'!initialize2	"The methods we are allowed to use.  (MethodFinder new initialize) ""Set"	#("in class" sizeFor:"testing" "adding" "removing" "enumerating""private" array findElementOrNil: "accessing" someElement) do: [:sel | Approved add: sel]."Dictionary, IdentityDictionary, IdentitySet"	#("accessing" associationAt: associationAt:ifAbsent: at:ifPresent: keyAtIdentityValue: keyAtIdentityValue:ifAbsent: keyAtValue: keyAtValue:ifAbsent: keys"testing" includesKey: ) do: [:sel | Approved add: sel].	#(removeKey: removeKey:ifAbsent:) do: [:sel | AddAndRemove add: sel]."LinkedList, Interval, MappedCollection"	#("in class"  from:to: from:to:by:"accessing" contents) do: [:sel | Approved add: sel].	#("adding" addFirst: addLast:) do: [:sel | AddAndRemove add: sel]."OrderedCollection, SortedCollection"	#("accessing" after: before:"copying" copyEmpty"adding"  growSize"removing" "enumerating" "private" "accessing" sortBlock) do: [:sel | Approved add: sel].	#("adding" add:after: add:afterIndex: add:before: addAllFirst: addAllLast: addFirst: addLast:"removing" removeAt: removeFirst removeLast"accessing" sortBlock:) do: [:sel | AddAndRemove add: sel]."Character"	#("in class, instance creation" allCharacters digitValue: new separators	"accessing untypeable characters" backspace cr enter lf linefeed nbsp newPage space tab	"constants" alphabet characterTable"accessing" asciiValue digitValue"comparing""testing" isAlphaNumeric isDigit isLetter isLowercase isSafeForHTTP isSeparator isSpecial isUppercase isVowel tokenish"copying""converting" asIRCLowercase asLowercase asUppercase	) do: [:sel | Approved add: sel]."String"	#("in class, instance creation" crlf fromPacked:	"primitives" findFirstInString:inSet:startingAt: indexOfAscii:inString:startingAt: 	"internet" valueOfHtmlEntity:"accessing" byteAt: endsWithDigit findAnySubStr:startingAt: findBetweenSubStrs: findDelimiters:startingAt: findString:startingAt: findString:startingAt:caseSensitive: findTokens: findTokens:includes: findTokens:keep: includesSubString: includesSubstring:caseSensitive: indexOf:startingAt: indexOfAnyOf: indexOfAnyOf:ifAbsent: indexOfAnyOf:startingAt: indexOfAnyOf:startingAt:ifAbsent: lineCorrespondingToIndex: lineCount lineNumber: skipAnySubStr:startingAt: skipDelimiters:startingAt: startsWithDigit"comparing" alike: beginsWith: caseSensitiveLessOrEqual: charactersExactlyMatching: compare: crc16 endsWith: endsWithAnyOf: sameAs: startingAt:match:startingAt:"copying" copyReplaceTokens:with: padded:to:with:"converting" asByteArray asDate asDisplayText asFileName asLegalSelector asPacked asText asTime capitalized compressWithTable: contractTo: correctAgainst: initialIntegerOrNil keywords quoted sansPeriodSuffix splitInteger stemAndNumericSuffix substrings surroundedBySingleQuotes truncateWithElipsisTo: withBlanksTrimmed withFirstCharacterDownshifted withNoLineLongerThan: withSeparatorsCompacted withoutLeadingDigits withoutTrailingBlanks"displaying" "printing""system primitives" compare:with:collated: "Celeste" withCRs"internet" decodeMimeHeader decodeQuotedPrintable unescapePercents withInternetLineEndings withSqueakLineEndings withoutQuoting"testing" isAllSeparators lastSpacePosition"paragraph support" indentationIfBlank:"arithmetic" ) do: [:sel | Approved add: sel].	#(byteAt:put: translateToLowercase match:) do: [:sel | AddAndRemove add: sel]."Symbol"	#("in class, private" hasInterned:ifTrue:	"access" morePossibleSelectorsFor: possibleSelectorsFor: selectorsContaining: thatStarts:skipping:"accessing" "comparing" "copying" "converting" "printing" "testing" isInfix isKeyword isPvtSelector isUnary) do: [:sel | Approved add: sel]."Array"	#("comparing" "converting" evalStrings "printing" "private" hasLiteralSuchThat:) do: [:sel | Approved add: sel]."ByteArray"	#("accessing" doubleWordAt: wordAt: "platform independent access" longAt:bigEndian: shortAt:bigEndian: unsignedLongAt:bigEndian: unsignedShortAt:bigEndian: "converting") do: [:sel | Approved add: sel].	#(doubleWordAt:put: wordAt:put: longAt:put:bigEndian: shortAt:put:bigEndian: unsignedLongAt:put:bigEndian: unsignedShortAt:put:bigEndian:	) do: [:sel | AddAndRemove add: sel]."FloatArray"		"Dont know what happens when prims not here"	false ifTrue: [#("accessing" "arithmetic" *= += -= /="comparing""primitives-plugin" primAddArray: primAddScalar: primDivArray: primDivScalar: primMulArray: primMulScalar: primSubArray: primSubScalar:"primitives-translated" primAddArray:withArray:from:to: primMulArray:withArray:from:to: primSubArray:withArray:from:to:"converting" "private" "user interface") do: [:sel | Approved add: sel].	]."IntegerArray, WordArray""RunArray"	#("in class, instance creation" runs:values: scanFrom:"accessing" runLengthAt: "adding" "copying""private" runs values) do: [:sel | Approved add: sel].	#(coalesce addLast:times: repeatLast:ifEmpty: repeatLastIfEmpty:		) do: [:sel | AddAndRemove add: sel]."Stream  -- many operations change its state"	#("testing" atEnd) do: [:sel | Approved add: sel].	#("accessing" next: nextMatchAll: nextMatchFor: upToEndnext:put: nextPut: nextPutAll: "printing" print:	) do: [:sel | AddAndRemove add: sel]."PositionableStream"	#("accessing" contentsOfEntireFile originalContents peek peekFor: "testing""positioning" position ) do: [:sel | Approved add: sel].	#(nextDelimited: nextLine upTo: position: reset resetContents setToEnd skip: skipTo: upToAll: ) do: [:sel | AddAndRemove add: sel].	"Because it is so difficult to test the result of an operation on a Stream (you have to supply another Stream in the same state), we don't support Streams beyond the basics.  We want to find the messages that convert Streams to other things.""ReadWriteStream"	#("file status" closed) do: [:sel | Approved add: sel].	#("accessing" next: on: ) do: [:sel | AddAndRemove add: sel]."WriteStream"	#("in class, instance creation" on:from:to: with: with:from:to:		) do: [:sel | Approved add: sel].	#("positioning" resetToStart"character writing" crtab crtab:) do: [:sel | AddAndRemove add: sel]."LookupKey, Association, Link"	#("accessing" key nextLink) do: [:sel | Approved add: sel].	#(key: key:value: nextLink:) do: [:sel | AddAndRemove add: sel]."Point"	#("in class, instance creation" r:degrees: x:y:"accessing" x y "comparing" "arithmetic" "truncation and round off""polar coordinates" degrees r theta"point functions" bearingToPoint: crossProduct: dist: dotProduct: eightNeighbors flipBy:centerAt: fourNeighbors grid: nearestPointAlongLineFrom:to: nearestPointOnLineFrom:to: normal normalized octantOf: onLineFrom:to: onLineFrom:to:within: quadrantOf: rotateBy:centerAt: transposed unitVector"converting" asFloatPoint asIntegerPoint corner: extent: rect:"transforming" adhereTo: rotateBy:about: scaleBy: scaleFrom:to: translateBy: "copying""interpolating" interpolateTo:at:) do: [:sel | Approved add: sel]."Rectangle"	#("in class, instance creation" center:extent: encompassing: left:right:top:bottom: 	merging: origin:corner: origin:extent: "accessing" area bottom bottomCenter bottomLeft bottomRight boundingBox center corner corners innerCorners left leftCenter origin right rightCenter top topCenter topLeft topRight"comparing""rectangle functions" adjustTo:along: amountToTranslateWithin: areasOutside: bordersOn:along: encompass: expandBy: extendBy: forPoint:closestSideDistLen: insetBy: insetOriginBy:cornerBy: intersect: merge: pointNearestTo: quickMerge: rectanglesAt:height: sideNearestTo: translatedToBeWithin: withBottom: withHeight: withLeft: withRight: withSide:setTo: withTop: withWidth:"testing" containsPoint: containsRect: hasPositiveExtent intersects: isTall isWide"truncation and round off""transforming" align:with: centeredBeneath: newRectFrom: squishedWithin: "copying"	) do: [:sel | Approved add: sel]."Color"	#("in class, instance creation" colorFrom: colorFromPixelValue:depth: fromRgbTriplet: gray: h:s:v: r:g:b: r:g:b:alpha: r:g:b:range:	"named colors" black blue brown cyan darkGray gray green lightBlue lightBrown lightCyan lightGray lightGreen lightMagenta lightOrange lightRed lightYellow magenta orange red transparent veryDarkGray veryLightGray veryVeryDarkGray veryVeryLightGray white yellow	"other" colorNames indexedColors pixelScreenForDepth: quickHighLight:"access" alpha blue brightness green hue luminance red saturation"equality""queries" isBitmapFill isBlack isGray isSolidFill isTranslucent isTranslucentColor"transformations" alpha: dansDarker darker lighter mixed:with: muchLighter slightlyDarker slightlyLighter veryMuchLighter alphaMixed:with:"groups of shades" darkShades: lightShades: mix:shades: wheel:"printing" shortPrintString"other" colorForInsets rgbTriplet"conversions" asB3DColor asColor balancedPatternForDepth: bitPatternForDepth: closestPixelValue1 closestPixelValue2 closestPixelValue4 closestPixelValue8 dominantColor halfTonePattern1 halfTonePattern2 indexInMap: pixelValueForDepth: pixelWordFor:filledWith: pixelWordForDepth: scaledPixelValue32"private" privateAlpha privateBlue privateGreen privateRGB privateRed "copying"	) do: [:sel | Approved add: sel]."	For each selector that requires a block argument, add (selector argNum) 		to the set Blocks.""ourClasses _ #(Object Boolean True False UndefinedObject Behavior ClassDescription Class Metaclass MethodContext BlockContext Message Magnitude Date Time Number Integer SmallInteger LargeNegativeInteger LargePositiveInteger Float Fraction Random Collection SequenceableCollection ArrayedCollection Bag Set Dictionary IdentityDictionary IdentitySet LinkedList Interval MappedCollection OrderedCollection SortedCollection Character String Symbol Array Array2D ByteArray FloatArray IntegerArray WordArray RunArray Stream PositionableStream ReadWriteStream WriteStream LookupKey Association Link Point Rectangle Color).ourClasses do: [:clsName | cls _ Smalltalk at: clsName.	(cls selectors) do: [:aSel |		((Approved includes: aSel) or: [AddAndRemove includes: aSel]) ifTrue: [			(cls formalParametersAt: aSel) withIndexDo: [:tName :ind |				(tName endsWith: 'Block') ifTrue: [					Blocks add: (Array with: aSel with: ind)]]]]]."#((timesRepeat: 1 ) (indexOf:ifAbsent: 2 ) (pairsCollect: 1 ) (mergeSortFrom:to:by: 3 ) (ifNotNil:ifNil: 1 ) (ifNotNil:ifNil: 2 ) (ifNil: 1 ) (at:ifAbsent: 2 ) (ifNil:ifNotNil: 1 ) (ifNil:ifNotNil: 2 ) (ifNotNil: 1 ) (at:modify: 2 ) (identityIndexOf:ifAbsent: 2 ) (sort: 1 ) (sortBlock: 1 ) (detectMax: 1 ) (repeatLastIfEmpty: 1 ) (allSubclassesWithLevelDo:startingLevel: 1 ) (keyAtValue:ifAbsent: 2 ) (in: 1 ) (ifTrue: 1 ) (or: 1 ) (select: 1 ) (inject:into: 2 ) (ifKindOf:thenDo: 2 ) (forPoint:closestSideDistLen: 2 ) (value:ifError: 2 ) (selectorsDo: 1 ) (removeAllSuchThat: 1 ) (keyAtIdentityValue:ifAbsent: 2 ) (detectMin: 1 ) (detect:ifNone: 1 ) (ifTrue:ifFalse: 1 ) (ifTrue:ifFalse: 2 ) (detect:ifNone: 2 ) (hasLiteralSuchThat: 1 ) (indexOfAnyOf:ifAbsent: 2 ) (reject: 1 ) (newRectFrom: 1 ) (removeKey:ifAbsent: 2 ) (at:ifPresent: 2 ) (associationAt:ifAbsent: 2 ) (withIndexCollect: 1 ) (repeatLast:ifEmpty: 2 ) (findLast: 1 ) (indexOf:startingAt:ifAbsent: 3 ) (remove:ifAbsent: 2 ) (ifFalse:ifTrue: 1 ) (ifFalse:ifTrue: 2 ) (caseOf:otherwise: 2 ) (count: 1 ) (collect: 1 ) (sortBy: 1 ) (and: 1 ) (asSortedCollection: 1 ) (with:collect: 2 ) (sourceCodeAt:ifAbsent: 2 ) (detect: 1 ) (scopeHas:ifTrue: 2 ) (collectWithIndex: 1 ) (compiledMethodAt:ifAbsent: 2 ) (bindWithTemp: 1 ) (detectSum: 1 ) (indexOfSubCollection:startingAt:ifAbsent: 3 ) (findFirst: 1 ) (sourceMethodAt:ifAbsent: 2 ) (collect:thenSelect: 1 ) (collect:thenSelect: 2 ) (select:thenCollect: 1 ) (select:thenCollect: 2 ) (ifFalse: 1 ) (indexOfAnyOf:startingAt:ifAbsent: 3 ) (indentationIfBlank: 1 ) ) do: [:anArray |	Blocks add: anArray].self initialize3."MethodFinder new initialize.MethodFinder new organizationFiltered: TranslucentColor class ""Do not forget class messages for each of these classes"! !!HandMorph methodsFor: 'event handling' stamp: 'jmv 4/6/2009 17:24'!processEvents	"Process user input events from the local input devices."	| evt evtBuf type hadAny |	ActiveEvent ifNotNil: 			["Meaning that we were invoked from within an event response.		Make sure z-order is up to date"			self mouseOverHandler processMouseOver: lastMouseEvent].	hadAny := false.	[(evtBuf := Sensor nextEvent) isNil] whileFalse: 			[evt := nil.	"for unknown event types"			type := evtBuf first.			type = EventTypeMouse ifTrue: [evt := self generateMouseEvent: evtBuf].			type = EventTypeKeyboard 				ifTrue: [evt := self generateKeyboardEvent: evtBuf].			"All other events are ignored"			(evt isNil) ifTrue: [^self].			evt isNil 				ifFalse: 					["Finally, handle it"					self handleEvent: evt.					hadAny := true.					"For better user feedback, return immediately after a mouse event has been processed."					evt isMouse ifTrue: [^self]]].	"note: if we come here we didn't have any mouse events"	mouseClickState notNil 		ifTrue: 			["No mouse events during this cycle. Make sure click states time out accordingly"			mouseClickState handleEvent: lastMouseEvent asMouseMove from: self].	hadAny 		ifFalse: 			["No pending events. Make sure z-order is up to date"			"JMV			Try to understand why this was ever needed.			It is very expensive in slow hardware, for example in Cytec's STB.			And in any case, why would this be needed if no event was processed?			I believe that this is a bad solution for some problem.			When we encounter it, we must think of a better one!!			"			"			self mouseOverHandler processMouseOver: lastMouseEvent			"			]! !!MenuMorph methodsFor: 'menu' stamp: 'jmv 4/6/2009 15:33'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu addLine.	aCustomMenu add: 'add title...' translated action: #addTitle.	aCustomMenu add: 'set target...' translated action: #setTarget:.	defaultTarget ifNotNil: [		aCustomMenu add: 'add item...' translated action: #addItem].	aCustomMenu add: 'add line' translated action: #addLine! !!Paragraph methodsFor: 'selecting' stamp: 'jmv 4/6/2009 18:27'!clickAt: clickPoint for: model controller: aController	"Give sensitive text a chance to fire.  Display flash: (100@100 extent: 100@100)."	| startBlock action range box boxes |	action _ false.	startBlock _ self characterBlockAtPoint: clickPoint.	(text attributesAt: startBlock stringIndex forStyle: textStyle) 		do: [:att | att mayActOnClick ifTrue:				[range _ text rangeOf: att startingAt: startBlock stringIndex.				boxes _ self selectionRectsFrom: (self characterBlockForIndex: range first) 							to: (self characterBlockForIndex: range last+1).				box _ boxes detect: [:each | each containsPoint: clickPoint]							ifNone: [^ action].				Utilities awaitMouseUpIn: box repeating: []					ifSucceed: [(att actOnClickFor: model in: self at: clickPoint editor: aController) ifTrue: [action _ true]]]].	^ action! !!Preferences class methodsFor: 'themes' stamp: 'jmv 4/6/2009 17:40'!paloAlto	"Similar to the brightSqueak theme, but with a number of idiosyncratic personal settings.   Note that caseSensitiveFinds is true"	self setPreferencesFrom:	#(		(abbreviatedBrowserButtons false)		(accessOnlineModuleRepositories noOpinion)		(alternativeBrowseIt noOpinion)		(alternativeWindowLook false)		(annotationPanes true)		(automaticFlapLayout true)		(automaticPlatformSettings noOpinion)		(balloonHelpEnabled true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(canRecordWhilePlaying noOpinion)		(caseSensitiveFinds true)		(changeSetVersionNumbers true)		(checkForSlips true)		(classicNewMorphMenu false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(colorWhenPrettyPrinting false)		(confirmFirstUseOfStyle true)		(conservativeModuleDeActivation noOpinion)		(conversionMethodsAtFileOut true)		(cpuWatcherEnabled noOpinion)		(debugHaloHandle true)		(debugPrintSpaceLog true)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose true)		(duplicateControlAndAltKeys false)		(extraDebuggerButtons true)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(hiddenScrollBars false)		(higherPerformance noOpinion)		(honorDesktopCmdKeys true)		(ignoreStyleIfOnlyBold true)		(inboardScrollbars false)		(logDebuggerStackToFile true)		(menuButtonInToolPane false)		(menuColorFromWorld false)		(menuKeyboardControl true)  		(modalColorPickers true)		(modularClassDefinitions noOpinion)		(noviceMode false)		(optionalButtons true)		(personalizedWorldMenu true)		(projectsSentToDisk noOpinion)		(propertySheetFromHalo false)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(scrollBarsNarrow false)		(scrollBarsWithoutMenuButton false)		(selectiveHalos false)		(showBoundsInHalo false)		(simpleMenus false)		(smartUpdating true)		(soundQuickStart noOpinion)		(soundsEnabled true)		(soundStopWhenDone noOpinion)		(strongModules noOpinion)		(swapControlAndAltKeys noOpinion)		(swapMouseButtons  noOpinion)		(systemWindowEmbedOK false)		(thoroughSenders true)		(twentyFourHourFileStamps false)		(uniqueNamesInHalos false)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))! !!ProcessBrowser class methodsFor: 'process control' stamp: 'jmv 4/6/2009 15:18'!nameAndRulesFor: aProcess 	"Answer a nickname and two flags: allow-stop, and allow-debug"	^ [aProcess caseOf: {		[] -> [{'no process'. false. false}].		[Smalltalk lowSpaceWatcherProcess] -> [{'the low space watcher'. false. false}].		[WeakArray runningFinalizationProcess] -> [{'the WeakArray finalization process'. false. false}].		[Processor activeProcess] -> [{'the UI process'. false. true}].		[Processor backgroundProcess] -> [{'the idle process'. false. false}].		[Sensor interruptWatcherProcess] -> [{'the user interrupt watcher'. false. false}].		[Sensor eventTicklerProcess] -> [{'the event tickler'. false. false}].		[ProjectX uiProcessX] -> [{'the inactive Morphic UI process'. false. false}].		[Smalltalk			at: #SoundPlayer			ifPresent: [:sp | sp playerProcess]] -> [{'the Sound Player'. false. false}].		[Smalltalk			at: #CPUWatcher			ifPresent: [:cw | cw currentWatcherProcess]] -> [{'the CPUWatcher'. false. false}]}		 otherwise: 			[(aProcess priority = Processor timingPriority					and: [aProcess suspendedContext receiver == Delay])				ifTrue: [{'the timer interrupt watcher'. false. false}]				ifFalse: [{aProcess suspendedContext asString. true. true}]]]		ifError: [:err :rcvr | {aProcess suspendedContext asString. true. true}]! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'jmv 4/6/2009 17:39'!assignCollapseFrameFor: aSystemWindow         "Offer up a location along the left edge of the screen for a collapsed SystemWindow. Make sure it doesn't overlap any other collapsed frames."        | grid otherFrames topLeft viewBox collapsedFrame extent newFrame verticalBorderDistance top |        grid _ 8.        verticalBorderDistance _ 8.	otherFrames _ (SystemWindow windowsIn: aSystemWindow world satisfying: [:w | w ~= aSystemWindow])		collect: [:w | w collapsedFrame]		thenSelect: [:rect | rect notNil].	viewBox _ aSystemWindow world viewBox.        collapsedFrame _ aSystemWindow collapsedFrame.        extent _ collapsedFrame notNil                                ifTrue: [collapsedFrame extent]                                ifFalse: [aSystemWindow getRawLabel width + aSystemWindow labelWidgetAllowance @ (aSystemWindow labelHeight + 2)                                ].        collapsedFrame notNil                ifTrue: [(otherFrames anySatisfy: [:f | collapsedFrame intersects: f])                                ifFalse: ["non overlapping"                                        ^ collapsedFrame]].        top _ viewBox top + verticalBorderDistance.        [topLeft _ viewBox left @ top.        newFrame _ topLeft extent: extent.        newFrame bottom <= (viewBox height - verticalBorderDistance)]                whileTrue:                         [(otherFrames anySatisfy: [:w | newFrame intersects: w])                                ifFalse: ["no overlap"                                        ^ newFrame].                        top _ top + grid].        "If all else fails... (really to many wins here)"        ^ 0 @ 0 extent: extent! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'jmv 4/6/2009 15:21'!assignCollapsePointFor: aSystemWindow        "Offer up a location along the left edge of the screen for a collapsed SystemWindow.        Make sure it doesn't overlap any other collapsed frames."        | grid otherFrames y free topLeft viewBox |        grid _ 24.  "should be mult of 8, since manual move is gridded by 8"        otherFrames _ (SystemWindow windowsIn: aSystemWindow world satisfying: [:w | true])		collect: [:w | w collapsedFrame]		thenSelect: [:rect | rect notNil].	viewBox _ aSystemWindow world viewBox.        y _ viewBox top.        [(y _ y + grid) <= (viewBox height - grid)]                whileTrue:                [topLeft _ viewBox left@y.                free _ true.                otherFrames do: [:w | free _ free & (topLeft ~= w topLeft)].                free ifTrue: [^ topLeft]].        "If all else fails..."        ^ 0 @ 0! !!ScorePlayer methodsFor: 'sound generation' stamp: 'jm 9/10/1998 19:07'!doControl	super doControl.	1 to: activeSounds size do: [:i | (activeSounds at: i) first doControl].	ticksSinceStart _ ticksSinceStart + ticksClockIncr.	self processAllAtTick: ticksSinceStart asInteger.! !!ScorePlayer methodsFor: 'sound generation' stamp: 'jmv 4/6/2009 17:14'!isDone	| track |	activeSounds size > 0 ifTrue: [^ false].	activeMIDINotes size > 0 ifTrue: [^ false].	1 to: score tracks size do: [:i |		track _ score tracks at: i.		(trackEventIndex at: i) <= track size ifTrue: [^ false]].	^ true! !!ScorePlayer methodsFor: 'sound generation' stamp: 'jmv 4/6/2009 17:14'!jumpToTick: startTick	| |	self reset.	self processTempoMapAtTick: startTick.	self skipNoteEventsThruTick: startTick.	ticksSinceStart _ startTick.! !!ScorePlayer methodsFor: 'sound generation' stamp: 'jmv 4/6/2009 17:10'!processAllAtTick: scoreTick	self processTempoMapAtTick: scoreTick.	midiPort		ifNil: [self processNoteEventsAtTick: scoreTick]		ifNotNil: [self processMIDIEventsAtTick: scoreTick].	self isDone ifTrue: [		repeat			ifTrue: [self reset]			ifFalse: [done _ true]].! !!ScorePlayer methodsFor: 'sound generation' stamp: 'jmv 4/6/2009 17:16'!reset	super reset.	tempo _ 120.0.	self tempoOrRateChanged.	done _ false.	ticksSinceStart _ 0.	"one index for each sound track, plus one for the ambient track..."	trackEventIndex _ Array new: score tracks size+1 withAll: 1.	tempoMapIndex _ 1.	activeSounds _ OrderedCollection new.	activeMIDINotes _ OrderedCollection new.	overallVolume ifNil: [overallVolume _ 0.5].! !!ScorePlayer methodsFor: 'operating' stamp: 'jmv 4/6/2009 17:16'!pause	"Pause this sound. It can be resumed from this point, or reset and resumed to start from the beginning."	super pause.	activeSounds _ activeSounds species new.	midiPort ifNotNil: [self stopMIDIPlaying].! !!ScorePlayer methodsFor: 'operating' stamp: 'jmv 4/6/2009 17:16'!resumePlaying	"Resume playing. Start over if done."	done ifTrue: [self reset].	self jumpToTick: ticksSinceStart.  "Play up to here in case we got scrolled to new position."	midiPort		ifNil: [super resumePlaying]  "let the sound player drive sound generation" 		ifNotNil: [self startMIDIPlaying].  "start a process to drive MIDI output"! !!SystemDictionary methodsFor: 'memory space' stamp: 'jmv 4/6/2009 17:33'!lowSpaceWatcher	"Wait until the low space semaphore is signalled, then take appropriate actions."	self garbageCollectMost <= self lowSpaceThreshold ifTrue: [		self garbageCollect <= self lowSpaceThreshold ifTrue: [			"free space must be above threshold before starting low space watcher"			^ self beep]].	LowSpaceSemaphore _ Semaphore new.	self primLowSpaceSemaphore: LowSpaceSemaphore.	self primSignalAtBytesLeft: self lowSpaceThreshold.  "enable low space interrupts"	LowSpaceSemaphore wait.  "wait for a low space condition..."	self primSignalAtBytesLeft: 0.  "disable low space interrupts"	self primLowSpaceSemaphore: nil.	LowSpaceProcess _ nil.	"Note: user now unprotected until the low space watcher is re-installed"	ProjectX currentInterruptNameX: 'Space is low'! !!SystemDictionary methodsFor: 'shrinking' stamp: 'jmv 4/6/2009 18:31'!discardOddsAndEnds	"This method throws out lots of classes that are not frequently used."	"Smalltalk discardOddsAndEnds"	SystemOrganization removeSystemCategory: 'System-Serial Port'.	SystemOrganization removeSystemCategory: 'ST80-Symbols'.	SystemOrganization removeSystemCategory: 'Tools-File Contents Browser'.	SystemOrganization removeSystemCategory: 'System-Compression'.	SystemOrganization removeSystemCategory: 'Tools-Explorer'.	SystemOrganization removeSystemCategory: 'System-Digital Signatures'.	Form removeSelector: #edit.	Smalltalk removeClassNamed: #FormEditorView.	Smalltalk removeClassNamed: #FormEditor.	SystemOrganization removeSystemCategory: 'ST80-Paths'.	"bit editor (remove Form editor first):"	Form removeSelector: #bitEdit.	Form removeSelector: #bitEditAt:scale:.	StrikeFont removeSelector: #edit:.	Smalltalk removeClassNamed: #FormButtonCache.	Smalltalk removeClassNamed: #FormMenuController.	Smalltalk removeClassNamed: #FormMenuView.	Smalltalk removeClassNamed: #BitEditor.	"inspector for Dictionaries of Forms"	Dictionary removeSelector: #inspectFormsWithLabel:.	Smalltalk removeClassNamed: #FormHolderView.	Smalltalk removeClassNamed: #FormInspectView.	"experimental updating object viewer:"	Object removeSelector: #evaluate:wheneverChangeIn:.	Smalltalk removeClassNamed: #ObjectViewer.	Smalltalk removeClassNamed: #ObjectTracer.	"miscellaneous classes:"	Smalltalk removeClassNamed: #Array2D.	Smalltalk removeClassNamed: #DriveACar.	Smalltalk removeClassNamed: #EventRecorder.	Smalltalk removeClassNamed: #FindTheLight.	Smalltalk removeClassNamed: #PluggableTest.	Smalltalk removeClassNamed: #SystemMonitor.	Smalltalk removeClassNamed: #DocLibrary.	Smalltalk removeClassNamed: #ProtocolBrowser.	Smalltalk removeClassNamed: #ObjectExplorerWrapper.	Smalltalk removeClassNamed: #HierarchyBrowser.	Smalltalk removeClassNamed: #LinkedMessageSet.	Smalltalk removeClassNamed: #ObjectExplorer.	Smalltalk removeClassNamed: #PackageBrowser.	Smalltalk removeClassNamed: #AbstractHierarchicalList.	Smalltalk removeClassNamed: #ChangeList.	Smalltalk removeClassNamed: #VersionsBrowser.	Smalltalk removeClassNamed: #ChangeRecord.	Smalltalk removeClassNamed: #SelectorBrowser.	Smalltalk removeClassNamed: #CrLfFileStream.	Smalltalk removeClassNamed: #FXGrafPort.	Smalltalk removeClassNamed: #FXBlt.	Smalltalk at: #SampledSound ifPresent: [:c |c initialize].	#(Helvetica Palatino Courier ComicBold ComicPlain) do:		[:k | TextConstants removeKey: k ifAbsent: []].Preferences setButtonFontTo:	(StrikeFont familyName: #NewYork size: 12).#(GZipConstants ZipConstants KlattResonatorIndices ) do:	[:k | Smalltalk removeKey: k ifAbsent: []].! !!SystemWindow methodsFor: 'label' stamp: 'jmv 4/6/2009 16:59'!labelHeight	"Answer the height for the window label."	^ label ifNil: [0] ifNotNil:		 [(label height + 1) max:			(collapseBox ifNotNil: [collapseBox height] ifNil: [10])]! !!TextEditor methodsFor: 'attributes' stamp: 'jmv 4/6/2009 18:13'!changeEmphasisOrAlignment	| aList reply  code align menuList startIndex |	self flag: #arNote. "Move this up once we get rid of MVC"	startIndex _ self startIndex.	aList _ #(normal bold italic narrow underlined struckOut leftFlush centered rightFlush justified).		align _ paragraph text alignmentAt: startIndex 		ifAbsent:[paragraph textStyle alignment].	code _ paragraph text emphasisAt: startIndex.	menuList _ WriteStream on: Array new.	menuList nextPut: (code isZero ifTrue:['<on>'] ifFalse:['<off>']), 'normal' translated.	menuList nextPutAll: (#(bold italic underlined struckOut) collect:[:emph|		(code anyMask: (TextEmphasis perform: emph) emphasisCode)			ifTrue:['<on>', emph asString translated]			ifFalse:['<off>',emph asString translated]]).	((paragraph text attributesAt: startIndex forStyle: paragraph textStyle)		anySatisfy:[:attr| attr isKern and:[attr kern < 0]]) 			ifTrue:[menuList nextPut:'<on>', 'narrow' translated]			ifFalse:[menuList nextPut:'<off>', 'narrow' translated].	menuList nextPutAll: (#(leftFlush centered rightFlush justified) collectWithIndex:[:type :i|		align = (i-1)			ifTrue:['<on>',type asString translated]			ifFalse:['<off>',type asString translated]]).	aList _ #(normal bold italic underlined struckOut narrow leftFlush centered rightFlush justified).	reply _ (SelectionMenu labelList: menuList contents lines: #(1 6) selections: aList) startUpWithoutKeyboard.	reply notNil ifTrue:		[(#(leftFlush centered rightFlush justified) includes: reply)			ifTrue:				[self setAlignment: reply.				paragraph composeAll.				self recomputeInterval]			ifFalse:				[self setEmphasis: reply.				paragraph composeAll.				self recomputeSelection]].	^ true! !!TextEditor methodsFor: 'current selection' stamp: 'jmv 4/6/2009 18:05'!recomputeSelection	"Redetermine the selection according to the start and stop block indices; 	do not highlight."	self deselect; recomputeInterval! !!TextEditor methodsFor: 'editing keys' stamp: 'jmv 4/6/2009 18:15'!changeEmphasis: characterStream 	"Change the emphasis of the current selection or prepare to accept characters with the change in emphasis. Emphasis change amounts to a font change.  Keeps typeahead."	"control 0..9 -> 0..9"	| keyCode attribute oldAttributes index thisSel colors extras |	keyCode := ('0123456789-=' indexOf: sensor keyboard ifAbsent: [1]) - 1.	oldAttributes := paragraph text attributesAt: self pointIndex				forStyle: paragraph textStyle.	thisSel := self selection.	"Decipher keyCodes for Command 0-9..."	(keyCode between: 1 and: 5) 		ifTrue: [attribute := TextFontChange fontNumber: keyCode].	keyCode = 6 		ifTrue: 			[colors := #(#black #magenta #red #yellow #green #blue #cyan #white).			extras := (self morph isKindOf: TextMorphForEditView)							ifFalse: 								["not a system window"								#()]							ifTrue: 								[#('Link to comment of class' 'Link to definition of class' 'Link to hierarchy of class' 'Link to method')].			index := (PopUpMenu 						labelArray: colors , #('choose color...' 'Do it' 'Print it') , extras 								, #('be a web URL link' 'Edit hidden info' 'Copy hidden info')						lines: (Array with: colors size + 1)) startUp.			index = 0 ifTrue: [^true].			index <= colors size 				ifTrue: [attribute := TextColor color: (Color perform: (colors at: index))]				ifFalse: 					[index := index - colors size - 1.	"Re-number!!!!!!"					index = 0 ifTrue: [attribute := self chooseColor].					index = 1 						ifTrue: 							[attribute := TextDoIt new.							thisSel := attribute analyze: self selection asString].					index = 2 						ifTrue: 							[attribute := TextPrintIt new.							thisSel := attribute analyze: self selection asString].					extras size = 0 & (index > 2) ifTrue: [index := index + 5].	"skip those"					index = 3 						ifTrue: 							[attribute := TextLink new.							thisSel := attribute analyze: self selection asString with: 'Comment'].					index = 4 						ifTrue: 							[attribute := TextLink new.							thisSel := attribute analyze: self selection asString with: 'Definition'].					index = 5 						ifTrue: 							[attribute := TextLink new.							thisSel := attribute analyze: self selection asString with: 'Hierarchy'].					index = 6 						ifTrue: 							[attribute := TextLink new.							thisSel := attribute analyze: self selection asString].					index = 7 						ifTrue: 							[attribute := TextURL new.							thisSel := attribute analyze: self selection asString].					index = 8 						ifTrue: 							["Edit hidden info"							thisSel := self hiddenInfo.	"includes selection"							attribute := TextEmphasis normal].					index = 9 						ifTrue: 							["Copy hidden info"							self copyHiddenInfo.							^true].	"no other action"					thisSel ifNil: [^true]	"Could not figure out what to link to"]].	(keyCode between: 7 and: 11) 		ifTrue: 			[sensor leftShiftDown 				ifTrue: 					[keyCode = 10 ifTrue: [attribute := TextKern kern: -1].					keyCode = 11 ifTrue: [attribute := TextKern kern: 1]]				ifFalse: 					[attribute := TextEmphasis 								perform: (#(#bold #italic #narrow #underlined #struckOut) at: keyCode - 6).					oldAttributes 						do: [:att | (att dominates: attribute) ifTrue: [attribute turnOff]]]].	keyCode = 0 ifTrue: [attribute := TextEmphasis normal].	beginTypeInBlock ~~ nil 		ifTrue: 			["only change emphasisHere while typing"			self insertTypeAhead: characterStream.			emphasisHere := Text addAttribute: attribute toArray: oldAttributes.			^true].	self replaceSelectionWith: (thisSel asText addAttribute: attribute).	^true! !!TextEditor methodsFor: 'editing keys' stamp: 'jmv 4/6/2009 18:15'!setEmphasis: emphasisSymbol	"Change the emphasis of the current selection."	| oldAttributes attribute |	oldAttributes _ paragraph text attributesAt: self selectionInterval first forStyle: paragraph textStyle.	attribute _ TextEmphasis perform: emphasisSymbol.	(emphasisSymbol == #normal) 		ifFalse:	[oldAttributes do:				[:att | (att dominates: attribute) ifTrue: [attribute turnOff]]].	self replaceSelectionWith: (self selection addAttribute: attribute)! !!TextEditor class methodsFor: 'class initialization' stamp: 'jmv 4/6/2009 18:24'!shiftedYellowButtonMenu	"Answer the menu to be presented when the yellow button is pressed while the shift key is down"	^ SelectionMenu fromArray: {		{'set font... (k)' translated.					#offerFontMenu}.		{'set style... (K)' translated.					#changeStyle}.		{'set alignment...' translated.				#chooseAlignment}.		#-.		{'explain' translated.						#explain}.		{'pretty print' translated.					#prettyPrint}.		{'pretty print with color' translated.			#prettyPrintWithColor}.		{'file it in (G)' translated.					#fileItIn}.		{'spawn (o)' translated.						#spawn}.		#-.		{'browse it (b)' translated.					#browseIt}.		{'senders of it (n)' translated.				#sendersOfIt}.		{'implementors of it (m)' translated.		#implementorsOfIt}.		{'references to it (N)' translated.			#referencesToIt}.		#-.		{'selectors containing it (W)' translated.	#methodNamesContainingIt}.		{'method strings with it (E)' translated.	#methodStringsContainingit}.		{'method source with it' translated.		#methodSourceContainingIt}.		{'class names containing it' translated.	#classNamesContainingIt}.		{'class comments with it' translated.		#classCommentsContainingIt}.		{'change sets with it' translated.			#browseChangeSetsWithSelector}.		#-.		{'save contents to file...' translated.		#saveContentsInFile}.		#-.		{'more...' translated.							#yellowButtonActivity}.	}! !!TheWorldMenu methodsFor: 'commands' stamp: 'jmv 4/6/2009 16:57'!newMorphOfClass: morphClass event: evt	"Attach a new morph of the given class to the invoking hand."	| m |	m _ morphClass new.	evt hand attachMorph: m.	myWorld startSteppingSubmorphsOf: m.! !TextEditor removeSelector: #controlInitialize!TextEditor removeSelector: #controlTerminate!TextEditor removeSelector: #mvcRedisplay!TextEditor removeSelector: #presentSpecialMenu!!TextEditor reorganize!('accessing' replace:with:and: replaceSelectionWith: setSearch: string text transformFrom:)('accessing-selection' hasCaret markBlock markBlock: markIndex markIndex: pointBlock pointBlock: pointIndex pointIndex: selection selectionAsStream startBlock startIndex stopBlock stopIndex unselect)('as yet unclassified' totalTextHeight visibleHeight)('attributes' changeEmphasisOrAlignment changeStyle changeTextFont offerFontMenu)('binding' bindingOf:)('current selection' recomputeInterval recomputeSelection reverseSelection selectAndScroll)('displaying' flash)('do-its' compileSelectionFor:in: debug:receiver:in: debugIt doIt evaluateSelection exploreIt inspectIt printIt)('editing keys' align: browseIt: browseItHere: cancel: changeEmphasis: changeLfToCr: chooseColor compareToClipboard: copyHiddenInfo doIt: duplicate: enclose: exchange: exploreIt: fileItIn: hiddenInfo implementorsOfIt: inOutdent:delta: indent: inspectIt: makeCapitalized: makeLowercase: makeUppercase: methodNamesContainingIt: methodStringsContainingIt: offerFontMenu: outdent: pasteInitials: printIt: referencesToIt: save: sendersOfIt: setEmphasis: shiftEnclose: spawnIt: swapChars: undo:)('events' mouseDown: mouseMove: mouseUp:)('explain' explainAnySel: explainChar: explainClass: explainCtxt: explainGlobal: explainInst: explainMySel: explainNumber: explainPartSel: explainScan: explainTemp:)('initialize-release' changeParagraph: resetState stateArray stateArrayPut:)('menu commands' offerMenuFromEsc:)('menu messages' accept again align browseChangeSetsWithSelector browseClassFromIt browseIt browseItHere cancel changeAlignment chooseAlignment classCommentsContainingIt classNamesContainingIt compareToClipboard copySelection cut exchange explain fileItIn find findAgain implementorsOfIt methodNamesContainingIt methodSourceContainingIt methodStringsContainingit pasteRecent prettyPrint prettyPrint: prettyPrintWithColor referencesToIt saveContentsInFile selectedSelector selectedSymbol sendersOfIt setAlignment: setSearchString spawn undo yellowButtonActivity)('model access' model:)('mvc compatibility' storeSelectionInParagraph zapSelectionWith:)('new selection' afterSelectionInsertAndSelect: correctFrom:to:with: encompassLine: insertAndSelect:at: nextTokenFrom:direction: notify:at:in: selectFrom:to: selectLine selectPrecedingIdentifier)('nonediting/nontyping keys' cursorDown: cursorEnd: cursorHome: raiseContextMenu: selectCurrentTypeIn: setSearchString:)('parenblinking' blinkParenAt: blinkPrevParen clearParens)('pluggable menus' pluggableYellowButtonActivity: shiftedTextPaneMenuRequest)('scrolling' scrollBy: updateMarker)('typing support' backTo: closeTypeIn dispatchOnCharacter:with: dispatchOnEnterWith: doneTyping insertTypeAhead: openTypeIn readKeyboard setEmphasisHere startOfTyping)('typing/selecting keys' argAdvance: changeStyle: crWithIndent: displayIfFalse: displayIfTrue: doAgainMany: doAgainOnce: find: findAgain: forwardDelete: querySymbol: search:)('undo support' isDoing isRedoing isUndoing noUndoer undoMessage:forRedo: undoer: undoer:with: undoer:with:with: undoer:with:with:with:)('undoers' undoAgain:andReselect:typedKey: undoAndReselect:redoAndReselect: undoCutCopy: undoQuery:lastOffering: undoReplace)('private' againOnce: againOrSame: againOrSame:many: completeSymbol:lastOffering: exchangeWith: getPluggableYellowButtonMenu: indent:fromStream:toStream: isDisjointFrom: nullText pageHeight sameColumn:newLine:forward:)!Text removeSelector: #asUrlRelativeTo:!SystemDictionary removeSelector: #discardFFI!SystemDictionary removeSelector: #discardFlash!SystemDictionary removeSelector: #discardMIDI!SystemDictionary removeSelector: #discardSpeech!SystemDictionary removeSelector: #discardTrueType!SystemDictionary removeSelector: #discardWonderland!SystemDictionary removeSelector: #memoryHogs!!classDefinition: #SystemDictionary category: #'System-Support'!IdentityDictionary subclass: #SystemDictionary	instanceVariableNames: 'cachedClassNames'	classVariableNames: 'LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore ShutDownList SourceFileVersionString SpecialSelectors StartUpList StartupStamp'	poolDictionaries: ''	category: 'System-Support'!String removeSelector: #asUnHtml!String removeSelector: #asUrlRelativeTo:!String removeSelector: #encodeForHTTP!Stream removeSelector: #printHtml:!StandardFileMenu class removeSelector: #newFile!StandardFileMenu class removeSelector: #newFileFrom:!StandardFileMenu class removeSelector: #newFileStream!StandardFileMenu class removeSelector: #newFileStreamFrom:!StandardFileMenu removeSelector: #newFileFrom:!SimpleHierarchicalListMorph removeSelector: #installModelIn:!SimpleButtonMorph removeSelector: #setPageSound:!SimpleButtonMorph removeSelector: #setPageVisual:!ScorePlayer removeSelector: #processAmbientEventsAtTick:!ScorePlayer removeSelector: #skipAmbientEventsThruTick:!Quadrangle removeSelector: #displayOn:transformation:clippingBox:!Quadrangle removeSelector: #displayTransformation:clippingBox:!PseudoClass removeSelector: #theMetaClass!Preferences class removeSelector: #setFlapsFontTo:!PolygonMorph removeSelector: #installModelIn:!PluggableTextMorph removeSelector: #installModelIn:!PluggableTextMorph removeSelector: #presentSpecialMenu!PluggableListMorph removeSelector: #installModelIn:!PasteUpMorph removeSelector: #dropFiles:!PasteUpMorph removeSelector: #wantsDropFiles:!Paragraph removeSelector: #displayOn:transformation:clippingBox:align:with:rule:fillColor:!PNGReadWriter class removeSelector: #insertMorph:named:into:!MorphicTransform removeSelector: #asMorphicTransform!MorphWithModel removeSelector: #duplicate:from:!MorphWithModel removeSelector: #installModelIn:!MenuMorph removeSelector: #detachSubMenu:!HandMorph removeSelector: #dropMorphs!HandMorph removeSelector: #generateDropFilesEvent:!Morph removeSelector: #abandon!Morph removeSelector: #dropFiles:!Morph removeSelector: #handleDropFiles:!Morph removeSelector: #installModelIn:!Morph removeSelector: #removeAlarm:at:!Morph removeSelector: #wantsDropFiles:!Morph removeSelector: #wantsToBeOpenedInWorld!MethodNode removeSelector: #asMorphicSyntaxUsing:!Metaclass removeSelector: #theMetaClass!MessageNode removeSelector: #asMorphicCaseOn:indent:!MessageNode removeSelector: #morphFromKeywords:arguments:on:indent:!MIDIScore removeSelector: #addAmbientEvent:!MIDIScore removeSelector: #ambientEventAfter:ticks:!MIDIScore removeSelector: #ambientTrack!MIDIScore removeSelector: #eventMorphsDo:!MIDIScore removeSelector: #eventMorphsWithTimeDo:!MIDIScore removeSelector: #pauseFrom:!MIDIScore removeSelector: #removeAmbientEventWithMorph:!MIDIScore removeSelector: #resetFrom:!MIDIScore removeSelector: #resumeFrom:!!classDefinition: #MIDIScore category: #'Sound-Scores'!Object subclass: #MIDIScore	instanceVariableNames: 'tracks trackInfo tempoMap ticksPerQuarterNote'	classVariableNames: ''	poolDictionaries: ''	category: 'Sound-Scores'!FormCanvas removeSelector: #setStencilColor:form:!ColorForm removeSelector: #printPostscript:!Form removeSelector: #displayOn:transformation:clippingBox:align:with:rule:fillColor:!Form removeSelector: #printPostscript:operator:!FillInTheBlank removeSelector: #show:!FileList2 class removeSelector: #blueButtonText:textColor:inWindow:balloonText:selector:recipient:!FileList2 class removeSelector: #blueRamp2!FileList2 class removeSelector: #endingSpecs!FileList2 class removeSelector: #hideSqueakletDirectoryBlock!FileList2 class removeSelector: #modalFileSelectorForSuffixes:!FileList2 class removeSelector: #projectOnlySelectionBlock!FileList2 class removeSelector: #selectionBlockForSuffixes:!FileList2 removeSelector: #blueButtonForService:textColor:inWindow:!FileList2 removeSelector: #changeDirectoryTo:!FileList2 removeSelector: #dirSelectionBlock:!FileList2 removeSelector: #directoryChangeBlock:!FileList2 removeSelector: #isDirectoryList:!FileList2 removeSelector: #listForPattern:!FileList2 removeSelector: #removeLinefeeds!FileList2 removeSelector: #saveLocalOnlyHit!FileList removeSelector: #acceptDroppingMorph:event:inMorph:!FileDirectory removeSelector: #writeProject:inFileNamed:fromDirectory:!DisplayText removeSelector: #displayOn:transformation:clippingBox:align:with:rule:fillColor:!DisplayObject removeSelector: #displayOn:transformation:clippingBox:!DisplayObject removeSelector: #displayOn:transformation:clippingBox:align:with:!DisplayObject removeSelector: #displayOn:transformation:clippingBox:align:with:rule:fillColor:!DisplayObject removeSelector: #displayOn:transformation:clippingBox:fixedPoint:!DisplayObject removeSelector: #displayOn:transformation:clippingBox:rule:fillColor:!Debugger removeSelector: #abandon!Debugger removeSelector: #abandon:!CompositeTransform removeSelector: #asMorphicTransform!ChangeList removeSelector: #acceptFrom:!ChangeList removeSelector: #perform:orSendTo:!Browser removeSelector: #acceptDroppingMorph:event:inMorph:!ClassDescription removeSelector: #theMetaClass!ChangeSetCategory removeSelector: #acceptsManualAdditions!BitBlt removeSelector: #isFXBlt!Behavior removeSelector: #fullyImplementsVocabulary:!Array removeSelector: #+*!Array removeSelector: #preMultiplyByArray:!Array removeSelector: #preMultiplyByMatrix:!!Array reorganize!('comparing' hashMappedBy: literalEqual:)('converting' asArray elementsExchangeIdentityWith: elementsForwardIdentityTo: elementsForwardIdentityTo:copyHash: evalStrings)('printing' isLiteral printOn: storeOn:)('private' hasLiteral: hasLiteralSuchThat: replaceFrom:to:with:startingAt:)('filter streaming' byteEncode: storeOnStream:)('file in/out' objectForDataStream:)('copying' copyWithDependent:)('accessing' atWrap: atWrap:put:)!Smalltalk removeClassNamed: #AmbientEvent!Smalltalk removeClassNamed: #DropFilesEvent!Smalltalk removeClassNamed: #ExternalDropHandler!Smalltalk removeClassNamed: #ExternalSettings!