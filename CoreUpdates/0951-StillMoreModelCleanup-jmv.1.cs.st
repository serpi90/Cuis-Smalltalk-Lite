'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 25 April 2011 at 10:39:23 pm'!!ChangeListWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 22:12'!browseCurrentVersionsOfSelections	"Opens a message-list browser on the current in-memory versions of all methods that are currently seleted"	| aList |	Cursor read showWhile: [aList _ model currentVersionsOfSelections].	aList size = 0 ifTrue: [^ self inform: 'no selected methods have in-memory counterparts'].	MessageSetWindow		openMessageList: aList 		label: 'Current versions of selected methods in ', model file localName! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'jmv 4/25/2011 22:05'!checkForConversionMethods	"See if any conversion methods are needed"	| tell choice list smart restore renamed listAdd listDrop msgSet |	Preferences conversionMethodsAtFileOut ifFalse: [^ self].	"Check preference"	structures ifNil: [^ self].	list _ OrderedCollection new.	renamed _ OrderedCollection new.	self changedClasses do: [ :class | | oldStruct newStruct need sel rec |		need _ (self atClass: class includes: #new) not.		need ifTrue: ["Renamed classes."			(self atClass: class includes: #rename) ifTrue: [				rec _ changeRecords at: class name.				rec priorName ifNotNil: [					(structures includesKey: rec priorName) ifTrue: [						renamed add: class.  need _ false]]]].		need ifTrue: [need _ (self atClass: class includes: #change)].		need ifTrue: [oldStruct _ structures at: class name 									ifAbsent: [need _ false.  #()]].		need ifTrue: [			newStruct _ (Array with: class classVersion), (class allInstVarNames).			need _ (oldStruct ~= newStruct)].		need ifTrue: [sel _ #convertToCurrentVersion:refStream:.			(#(add change) includes: (self atSelector: sel class: class)) ifFalse: [				list add: class]].		].	list isEmpty & renamed isEmpty ifTrue: [^ self].	"Ask user if want to do this"	tell _ 'If there might be instances of ', (list asArray, renamed asArray) printString,		'\in a project (.pr file) on someone''s disk, \please ask to write a conversion method.\'			withCRs,		'After you edit the conversion method, you''ll need to fileOut again.\' withCRs,		'The preference conversionMethodsAtFileOut in category "fileout" controls this feature.'.	choice _ (PopUpMenu labels: 'Write a conversion method by editing a prototypeThese classes are not used in any object file.  fileOut my changes now.I''m too busy.  fileOut my changes now.Don''t ever ask again.  fileOut my changes now.') startUpWithCaption: tell. 	choice = 4 ifTrue: [Preferences disable: #conversionMethodsAtFileOut].	choice = 2 ifTrue: ["Don't consider this class again in the changeSet"			list do: [:cls | structures removeKey: cls name ifAbsent: nil].			renamed do: [:cls | | nn |				nn _ (changeRecords at: cls name) priorName.				structures removeKey: nn ifAbsent: nil]].	choice ~= 1 ifTrue: [^ self].	"exit if choice 2,3,4"	listAdd _ self askAddedInstVars: list.	"Go through each inst var that was added"	listDrop _ self askRemovedInstVars: list.	"Go through each inst var that was removed"	list _ (listAdd, listDrop) asSet asArray.	smart _ SmartRefStream on: (RWBinaryOrTextStream on: '12345').	smart structures: structures.	smart superclasses: superclasses.	(restore _ self class current) == self ifFalse: [		self class  newChanges: self].	"if not current one"	msgSet _ smart conversionMethodsFor: list.		"each new method is added to self (a changeSet).  Then filed out with the rest."	self askRenames: renamed addTo: msgSet using: smart.	"renamed classes, add 2 methods"	restore == self ifFalse: [self class newChanges: restore].	msgSet messageList isEmpty ifTrue: [^ self].	self inform: 'Remember to fileOut again after modifying these methods.'.	MessageSetWindow open: msgSet label: 'Conversion methods for ', self name.! !!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 22:38'!browseFullProtocol	"Spawn a window showing full protocol for the receiver's selection"	MessageSetWindow openFullProtocolForClass: model selectedClassOrMetaClass! !!MessageSetWindow class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 22:37'!openFullProtocolForClass: aClass 	"Create and schedule a browser for the entire protocol of the class."	"ProtocolBrowser openFullProtocolForClass: ProtocolBrowser."	| aPBrowser label |	aPBrowser _ ProtocolBrowser new on: aClass.	label _ 'Entire protocol of: ', aClass name.	MessageSetWindow open: aPBrowser label: label! !!MessageSetWindow class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 22:12'!openMessageList: anArray label: aString 	"Create a standard system view for the message set on the list, anArray. 	The label of the view is aString."	MessageSetWindow open: (MessageSet messageList: anArray) label: aString! !!MessageSetWindow class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 22:12'!openMessageList: messageList label: labelString autoSelect: autoSelectString	"Open a system view for a MessageSet on messageList. 	 1/24/96 sw: the there-are-no msg now supplied by my sender"	| messageSet |	messageSet _ MessageSet messageList: messageList.	messageSet autoSelectString: autoSelectString.	^MessageSetWindow open: messageSet label: labelString ! !!MessageSetWindow class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 22:38'!openSubProtocolForClass: aClass 	"Create and schedule a browser for the entire protocol of the class."	"ProtocolBrowser openSubProtocolForClass: ProtocolBrowser."	| aPBrowser label |	aPBrowser _ ProtocolBrowser new onSubProtocolOf: aClass.	label _ 'Sub-protocol of: ', aClass name.	MessageSetWindow open: aPBrowser label: label! !!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 4/25/2011 22:38'!browseFullProtocol	"Spawn a window showing full protocol for the receiver's selection"	MessageSetWindow openFullProtocolForClass: model selectedClass! !!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 4/25/2011 22:25'!browseMessageList: messageList name: labelString autoSelect: autoSelectString	| title aSize |	"Create and schedule a MessageSet browser on the message list."	messageList size = 0 ifTrue: 		[^ (PopUpMenu labels: ' OK ')				startUpWithCaption: 'There are no' , labelString].	title _ (aSize _ messageList size) > 1		ifFalse:	[ labelString ]		ifTrue:	[ '[', aSize printString, '] ', labelString].	MessageSetWindow		openMessageList: messageList		label: title		autoSelect: autoSelectString! !!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 4/25/2011 22:32'!changesMenu        "Build the changes menu for the world."        | menu |        menu _ self menu: 'changes...'.        self fillIn: menu from: {                { 'file out current change set' . { ChangeSet current . #verboseFileOut}.                                'Write the current change set out to a file whose name reflects the change set name and the current date & time.'}.                { 'create new change set...' . { ChangeSorter . #newChangeSet}. 'Create a new change set and make it the current one.'}.                nil.                { 'simple change sorter' . {self. #openChangeSorter1}.  'Open a 3-paned changed-set viewing tool'}.                { 'dual change sorter' . {self. #openChangeSorter2}.                                'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'}.                nil.                { 'browse recent submissions' . { #myWorld . #openRecentSubmissionsBrowser:}.                                'Make an open recent-submissions browser be the front-window, expanding a collapsed one or creating a new one if necessary.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted, latest first.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions at the top of the browser.'}.                { 'recently logged changes...' . { ChangeList . #browseRecentLog}.'Open a change-list browser on the latter part of the changes log.  You can use this browser to recover logged changes which were not saved in your image, in the event of a crash or other interruption.'}.                nil.                { 'save world as morph file' . {self. #saveWorldInFile}. 'Save a file that, when reloaded, reconstitutes the current World.'}.        }.        ^ menu! !!TimeProfileBrowser class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 22:08'!onBlock: block	"Open a profile browser on the given block, thereby running the block and 	 collecting the message tally."	"TimeProfileBrowser onBlock: [20 timesRepeat: 			[Transcript show: 100 factorial printString]]"	| inst result |	inst _ self new.	result _ inst runBlock: block.	MessageSetWindow open: inst label: 'Time Profile'.	^ result! !!TimeProfileBrowser class methodsFor: 'instance creation' stamp: 'jmv 4/25/2011 22:09'!spyOnProcess: aProcess forMilliseconds: msecDuration 	"Run aProcess for msecDuration milliseconds, then open a TimeProfileBrowser on the results."	"| p |  	p _ [100000 timesRepeat: [3.14159 printString]] fork.  	(Delay forMilliseconds: 100) wait.  	TimeProfileBrowser spyOnProcess: p forMilliseconds: 1000"	| inst |	inst := self new.	inst runProcess: aProcess forMilliseconds: msecDuration pollingEvery: MessageTally defaultPollPeriod.	MessageSetWindow		open: inst		label: (String streamContents: [ :s | s nextPutAll: 'Time Profile for '; print: msecDuration; nextPutAll: ' msec' ]).	^ inst! !!Utilities class methodsFor: 'identification' stamp: 'jmv 4/25/2011 22:13'!browseUncommentedMethodsWithInitials: targetInitials	"Browse uncommented methods whose initials (in the time-stamp, as logged to disk) match the given initials.  Present them in chronological order.  CAUTION: It will take several minutes for this to complete."	"Time millisecondsToRun: [Utilities browseUncommentedMethodsWithInitials: 'jm']"	| initials timeStamp   methodReferences cm aMessageSet |	methodReferences _ OrderedCollection new.	Smalltalk allBehaviorsDo:		[:aClass | aClass selectors do: [:sel |			cm _ aClass compiledMethodAt: sel.			timeStamp _ Utilities timeStampForMethod: cm.			timeStamp isEmpty ifFalse:				[initials _ timeStamp substrings first.				initials first isDigit ifFalse:					[((initials = targetInitials) and: [(aClass firstPrecodeCommentFor: sel) isNil])						ifTrue:							[methodReferences add: (MethodReference new								setStandardClass: aClass 								methodSymbol: sel)]]]]].	aMessageSet _ MessageSet new initializeMessageList: methodReferences.	aMessageSet sortByDate.	MessageSetWindow		openMessageList: aMessageSet messageList		label: 'Uncommented methods with initials ', targetInitials! !Utilities class removeSelector: #browseRecentSubmissions!Utilities class removeSelector: #openRecentSubmissionsBrowser!RecentMessageSetWindow class removeSelector: #openMessageList:label:autoSelect:!RecentMessageSet class removeSelector: #open:name:!ProtocolBrowser class removeSelector: #openFullProtocolForClass:!ProtocolBrowser class removeSelector: #openSubProtocolForClass:!MessageSet class removeSelector: #open:name:!MessageSet class removeSelector: #openMessageList:name:!MessageSet class removeSelector: #openMessageList:name:autoSelect:!