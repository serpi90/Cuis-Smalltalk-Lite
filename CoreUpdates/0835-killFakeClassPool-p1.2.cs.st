'From Cuis 3.0 of 18 January 2011 [latest update: #768] on 2 March 2011 at 5:24:08 pm'!!Browser methodsFor: 'accessing' stamp: 'jmv 3/2/2011 17:24'!doItReceiver	"This class's classPool has been jimmied to be the classPool of the class 	being browsed. A doIt in the code pane will let the user see the value of 	the class variables."	^ self selectedClass! !!SmalltalkEditor methodsFor: 'do-its' stamp: 'jmv 3/2/2011 17:12'!debugIt	| provider method receiver context |	provider _ self codeProvider.	(provider respondsTo: #doItReceiver) 		ifTrue: [			receiver _ provider doItReceiver.			context _ provider doItContext]		ifFalse: [			receiver _ context _ nil].	self lineSelectAndEmptyCheck: [^self].	method _ self compileSelectionFor: receiver in: context.	method ifNotNil: [		self debug: method receiver: receiver in: context]! !!SmalltalkEditor methodsFor: 'do-its' stamp: 'jmv 3/2/2011 17:13'!evaluateSelection	"Treat the current selection as an expression; evaluate it and return the result"	| provider result rcvr ctxt |	self lineSelectAndEmptyCheck: [^ ''].	provider _ self codeProvider.	(provider respondsTo: #doItReceiver) 		ifTrue: [				rcvr _ provider doItReceiver.				ctxt _ provider doItContext]		ifFalse: [rcvr _ ctxt _ nil].	result _ [		rcvr class evaluatorClass new			sourceStreamGetter: #selectionAsStream;		"Cuis specific. Do not remove!!"			evaluate: self selectionAsStream			in: ctxt			to: rcvr			notifying: self			ifFail: [^ #failedDoit]			logged: true.	] 		on: OutOfScopeNotification 		do: [ :ex | ex resume: true].	^ result! !!SmalltalkEditor methodsFor: 'do-its' stamp: 'jmv 3/2/2011 17:21'!exploreIt	| result |	result _ self evaluateSelection.	(result == #failedDoit)			ifTrue: [morph flash]			ifFalse: [result explore]! !!SmalltalkEditor methodsFor: 'do-its' stamp: 'jmv 3/2/2011 17:22'!inspectIt	| result |	result _ self evaluateSelection.	(result == #failedDoit)			ifTrue: [morph flash]			ifFalse: [result inspect]! !!SmalltalkEditor methodsFor: 'do-its' stamp: 'jmv 3/2/2011 17:22'!printIt	"Treat the current text selection as an expression; evaluate it. Insert the 	description of the result of evaluation after the selection and then make 	this description the new text selection."	| result |	result _ self evaluateSelection.	(result == #failedDoit)			ifTrue: [morph flash]			ifFalse: [self afterSelectionInsertAndSelect: result printString]! !!TextModelMorph methodsFor: 'menu commands' stamp: 'jmv 3/2/2011 17:22'!exploreIt	| result |	self handleEdit: [		result _ self editor evaluateSelection.		(result == #failedDoit)			ifTrue: [ self flash ]			ifFalse:  [result explore ]]! !!TextModelMorph methodsFor: 'menu commands' stamp: 'jmv 3/2/2011 17:22'!inspectIt	| result |	self handleEdit: [		result _ self editor evaluateSelection.		(result == #failedDoit)			ifTrue: [ self flash ]			ifFalse: [ result inspect ]]! !!TextModelMorph methodsFor: 'menu commands' stamp: 'jmv 3/2/2011 17:23'!printIt	| result oldEditor |	self editor		selectFrom: selectionInterval first to: selectionInterval last;		model: model.  "For, eg, evaluateSelection"	textMorph handleEdit: [result _ (oldEditor _ textMorph editor) evaluateSelection].	(result == #failedDoit) ifTrue: [^self flash].	selectionInterval _ oldEditor selectionInterval.	textMorph installEditorToReplace: oldEditor.	textMorph handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].	selectionInterval _ oldEditor selectionInterval.		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.	self scrollSelectionIntoView.! !