'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 30 December 2011 at 2:36:25 pm'!!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 12/30/2011 12:12'!                             separation: aNumberOrPoint	separation _ aNumberOrPoint! !!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 12/30/2011 12:11'!xSeparation	^separation isNumber		ifTrue: [ separation ]		ifFalse: [ separation x ]! !!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 12/30/2011 12:11'! ySeparation	^separation isNumber		ifTrue: [ separation ]		ifFalse: [ separation y ]! !!LayoutMorph methodsFor: 'layout' stamp: 'jmv 12/30/2011 12:07'!    layoutSubmorphsHorizontallyIn: boundsForLayout	"Compute a new layout based on the given layout bounds."	| xSep ySep usableWidth sumOfFixed normalizationFactor availableForPropWidth widths l usableHeight boundsTop boundsRight r t b |	xSep _ self xSeparation.	ySep _ self ySeparation.	usableWidth _ boundsForLayout width - ((submorphs size + 1) * xSep).	sumOfFixed _ submorphs sum: [ :m | m layoutSpec fixedWidth ].	availableForPropWidth _ usableWidth - sumOfFixed.	padding ifNil: [	"shrink"		availableForPropWidth = 0 ifFalse: [			self width: self width - availableForPropWidth.			^ self layoutSubmorphsAndComputeFullBounds ]].	normalizationFactor _ self proportionalWidthNormalizationFactor.	availableForPropWidth _ availableForPropWidth * normalizationFactor.	widths _ submorphs collect: [ :m | m layoutSpec widthFor: availableForPropWidth ].	l _ ((usableWidth - widths sum) * (padding ifNil: [0]) + xSep max: 0) +  boundsForLayout left.	usableHeight _ boundsForLayout height - (2*ySep) max: 0.	boundsTop _ boundsForLayout top.		boundsRight _ boundsForLayout right.	submorphs size to: 1 by: -1 do: [ :index | | m w h ls |		m _ submorphs at: index.		w _ widths at: index.		"major direction"		r _ l + w min: boundsRight.		"minor direction"		ls _ m layoutSpec.		h _ (ls heightFor: usableHeight) min: usableHeight.		t _ (usableHeight - h) * ls minorDirectionPadding + ySep + boundsTop.		b _ t + h.		"Set bounds and adjust major direction for next step"		m bounds: (l rounded @ t rounded corner: r rounded @ b rounded).		w > 0 ifTrue: [			l _ r + xSep min: boundsRight ]]! !!LayoutMorph methodsFor: 'layout' stamp: 'jmv 12/30/2011 12:13'!                           layoutSubmorphsVerticallyIn: boundsForLayout	"Compute a new layout based on the given layout bounds."	| xSep ySep usableHeight sumOfFixed normalizationFactor availableForPropHeight heights t usableWidth boundsLeft boundsBottom b l r |	xSep _ self xSeparation.	ySep _ self ySeparation.	usableHeight _ boundsForLayout height - ((submorphs size + 1) * ySep).	sumOfFixed _ submorphs sum: [ :m | m layoutSpec fixedHeight ].	availableForPropHeight _ usableHeight - sumOfFixed.	padding ifNil: [	"shrink"		availableForPropHeight = 0 ifFalse: [			self height: self height - availableForPropHeight.			^ self layoutSubmorphsAndComputeFullBounds ]].	normalizationFactor _ self proportionalHeightNormalizationFactor.	availableForPropHeight _ availableForPropHeight * normalizationFactor.	heights _ submorphs collect: [ :m | m layoutSpec heightFor: availableForPropHeight ].	t _ ((usableHeight - heights sum) * (padding ifNil: [0]) + ySep max: 0) +  boundsForLayout top.	usableWidth _ boundsForLayout width - (2*xSep) max: 0.	boundsLeft _ boundsForLayout left.		boundsBottom _ boundsForLayout bottom.	submorphs size to: 1 by: -1 do: [ :index | | m h w ls |		m _ submorphs at: index.		h _ heights at: index.		"major direction"		b _ t + h min: boundsBottom.		"minor direction"		ls _ m layoutSpec.		w _ (ls widthFor: usableWidth) min: usableWidth.		l _ (usableWidth - w) * ls minorDirectionPadding + xSep + boundsLeft.		r _ l + w.		"Set bounds and adjust major direction for next step"		m bounds: (l rounded @ t rounded corner: r rounded @ b rounded).		h > 0 ifTrue: [			t _ b + ySep min: boundsBottom ]]! !!LayoutSpec class methodsFor: 'instance creation' stamp: 'jmv 12/30/2011 11:59'!                      morphHeightFixedWidth: aNumber	^self new		fixedWidth: aNumber;		useMorphHeight! !!LayoutSpec class methodsFor: 'instance creation' stamp: 'jmv 12/30/2011 12:00'!                        morphWidthFixedHeight: aNumber	^self new		useMorphWidth;		fixedHeight: aNumber! !