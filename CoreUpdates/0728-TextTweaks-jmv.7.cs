'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 23 December 2010 at 11:36:33 pm'!!classDefinition: #RunArray category: #'Collections-Arrayed'!ArrayedCollection subclass: #RunArray	instanceVariableNames: 'runs values lastIndex lastRun lastOffset canJoinBlock canJoinMessage '	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Arrayed'!!classDefinition: #Text category: #'System-Text'!ArrayedCollection subclass: #Text	instanceVariableNames: 'string runs initialStyle '	classVariableNames: 'CanJoinBlock '	poolDictionaries: ''	category: 'System-Text'!!RunArray methodsFor: 'accessing' stamp: 'jmv 12/23/2010 14:47'!canJoinMessage: aMessageSet	canJoinMessage _ aMessageSet! !!RunArray methodsFor: 'copying' stamp: 'jmv 12/23/2010 14:51'!, aRunArray 	"Answer a new RunArray that is a concatenation of the receiver and	aRunArray."	| new newRuns answer |	(aRunArray isMemberOf: RunArray)		ifFalse: [			new _ self copy.			"attempt to be sociable"			aRunArray do: [:each | new addLast: each].			^new].	runs size = 0 ifTrue: [^aRunArray copy].	aRunArray runs size = 0 ifTrue: [^self copy].	(self canJoin: (values at: values size) and: (aRunArray values at: 1))		ifFalse: [ 			answer _ RunArray				runs: runs , aRunArray runs				values: values , aRunArray values.			answer canJoinMessage: canJoinMessage.			^answer ].	newRuns _ runs					copyReplaceFrom: runs size					to: runs size					with: aRunArray runs.	newRuns at: runs size put: (runs at: runs size) + (aRunArray runs at: 1).	answer _ RunArray		runs: newRuns		values: 			(values				copyReplaceFrom: values size				to: values size				with: aRunArray values).	answer canJoinMessage: canJoinMessage.	^answer! !!RunArray methodsFor: 'copying' stamp: 'jmv 12/23/2010 14:51'!copyFrom: start to: stop	| newRuns run1 run2 offset1 offset2 answer | 	stop < start ifTrue: [		answer _ RunArray new.		answer canJoinMessage: canJoinMessage.		^answer ].	self at: start setRunOffsetAndValue: [ :r :o :value1 |		run1 _ r.		offset1_ o. 		value1 ].	self at: stop setRunOffsetAndValue: [ :r :o :value2 |		run2 _ r.		offset2_ o.		value2].	run1 = run2		ifTrue: [			newRuns _ Array with: offset2 - offset1 + 1]		ifFalse: [			newRuns _ runs copyFrom: run1 to: run2.			newRuns at: 1 put: (newRuns at: 1) - offset1.			newRuns at: newRuns size put: offset2 + 1 ].	answer _ RunArray runs: newRuns values: (values copyFrom: run1 to: run2).	answer canJoinMessage: canJoinMessage.	^answer! !!RunArray methodsFor: 'private' stamp: 'jmv 12/23/2010 14:51'!canJoin: aValue and: anotherValue	^ canJoinMessage		ifNil: [ aValue = anotherValue ]		ifNotNil: [			canJoinMessage valueWithArguments: {aValue. anotherValue} ]! !!Text methodsFor: 'private' stamp: 'jmv 12/23/2010 14:51'!privateSetRuns: anArray	"Warning. No attempt is done to ensure the invariant that TextAttributes that answer true to	 #isParagraphAttribute are only applied to whole paragraphs.	Use with care. Currently only used for Shout, that seems to know what it does.	Also used for private use, replacing asignment to the ivar, to ensure that the RunArray is set to properly compare TextAttributes"	runs _ anArray.	runs canJoinMessage: (MessageSend receiver: self selector: #canJoin:and:)! !!Text methodsFor: 'attributes' stamp: 'jmv 12/23/2010 14:49'!canJoin: attributes1 and: attributes2	| s |	s _ attributes1 size.	^s = attributes2 size and: [		(1 to: s) allSatisfy: [ :i |			(attributes1 at: i) canBeJoinedWith: (attributes2 at: i) ]]! !!TextEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 12/23/2010 13:33'!initializeBasicCmdKeyShortcuts	"Initialize the (unshifted) command-key (or alt-key) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor test"	"TextEditor initialize"	| cmdMap cmds |	cmdMap := Array new: 256 withAll: #noop:.		"use temp in case of a crash"	cmdMap at: 32 + 1 put: #selectWord:.			"space bar key"			'([{''"<' do: [:char | cmdMap at: char asciiValue + 1 put: #enclose:].		"arranged in QWERTY keyboard order"	cmds _ #(		$w #backWord:		$e #exchange:		$y #swapChars:		$a #selectAll:		$f #find:		$g #findAgain:		$h #setSearchString:		$z #undo:		$x #cut:		$c #copySelection:		$v #paste:		$R	#indent:		$Y	#makeUppercase:		$U	#changeLfToCr:		$S	#search:		$D	#duplicate:		$H	#cursorTopHome:		$J	#doAgainMany:		$K	#changeStyle:		$L	#outdent:		$Z	#makeCapitalized:		$X	#makeLowercase:		$C	#compareToClipboard:		$M	#selectCurrentTypeIn:	).	1 to: cmds size		by: 2		do: [ :i | cmdMap at: (cmds at: i) asciiValue + 1 put: (cmds at: i + 1)].			cmdActions _ cmdMap! !!TextEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 12/23/2010 13:39'!initializeCmdKeyShortcuts	"Initialize the (unshifted) command-key (or alt-key if not on Mac) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor test"	"	Editor initialize	"	| cmds |	self initializeBasicCmdKeyShortcuts.				'01234567' 		do: [ :char | cmdActions at: char asciiValue + 1 put: #changeEmphasis:].		cmds := #(		$8	#offerColorMenu:		$k	#offerFontMenu:		$u	#align:		$K	#changeStyle:	).	1 to: cmds size		by: 2		do: [ :i | cmdActions at: (cmds at: i) asciiValue + 1 put: (cmds at: i + 1)]! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 12/23/2010 13:40'!initializeCmdKeyShortcuts	"Initialize the (unshifted) command-key (or alt-key if not on Mac) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor test"	"SmalltalkEditor initialize"	| cmds |	self initializeBasicCmdKeyShortcuts.		cmds := #(		$q	#querySymbol:		$i	#inspectIt:		$p	#printIt:		$s	#save:		$d	#doIt:		$j	#doAgainOnce:		$l	#cancel:		$b	#browseIt:		$n	#sendersOfIt:		$m	#implementorsOfIt:		$T	#displayIfTrue:		$I	#exploreIt:		$A	#argAdvance:		$F	#displayIfFalse:		$G	#fileItIn:		$V	#pasteInitials:		$B	#browseItHere:		$N	#referencesToIt:	).	1 to: cmds size		by: 2		do: [ :i | cmdActions at: (cmds at: i) asciiValue + 1 put: (cmds at: i + 1)]! !Text class removeSelector: #initialize!!classDefinition: #Text category: #'System-Text'!ArrayedCollection subclass: #Text	instanceVariableNames: 'string runs initialStyle'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Text'!RunArray removeSelector: #canJoinBlock:!!classDefinition: #RunArray category: #'Collections-Arrayed'!ArrayedCollection subclass: #RunArray	instanceVariableNames: 'runs values lastIndex lastRun lastOffset canJoinMessage'	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Arrayed'!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."Utilities initialize.Clipboard default clipboardText: ''!