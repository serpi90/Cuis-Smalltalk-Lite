'From Cuis 1.0 of 26 March 2009 [latest update: #158] on 29 March 2009 at 4:22:01 pm'!!MethodReference methodsFor: 'services' stamp: 'jmv 3/29/2009 16:00'!updateReferencesTo: oldClassName toBe: newClassName	| src ts cm |	src := self actualClass sourceCodeAt: methodSymbol.	src := src copyReplaceAll: oldClassName with: newClassName.	cm := self actualClass compiledMethodAt: methodSymbol.	ts := cm timeStamp.	ts = '' ifTrue: [ts := nil].	self actualClass 		compile: src		classified: ClassOrganizer default		withStamp: ts 		notifying: nil.	^true! !!SystemDictionary methodsFor: 'class names' stamp: 'jmv 3/29/2009 16:15'!renameAndUpdateReferences: oldName as: newName	"Dangerous. Simple search and replace could break stuff.	Use only to generate change sets to later checked with care	OldMorph withAllSubclasses do: [ :c |	n _ c name.	(n beginsWith: 'Old') ifTrue: [		Smalltalk renameAndUpdateReferences: n as: (n copyFrom: 4 to: n size) asSymbol ]]OldBorderStyle withAllSubclasses do: [ :c |	n _ c name.	(n beginsWith: 'Old') ifTrue: [		Smalltalk renameAndUpdateReferences: n as: (n copyFrom: 4 to: n size) asSymbol ]]#(#OldKeyboardBuffer #OldLayoutCell #OldLayoutFrame #OldLayoutPolicy #OldLayoutProperties #OldMorphExtension #OldMouseClickState #OldProportionalLayout #OldTableLayout #OldTableLayoutProperties #OldTextAnchor #OldTextComposer #OldTextContainer #OldTextLine #OldTheWorldMenu #OldWorldState #OldWorldTest) do: [ :n |	Smalltalk renameAndUpdateReferences: n as: (n copyFrom: 4 to: n size) asSymbol ]	"	self renameClassNamed: oldName as: newName.	(Smalltalk allCallsOn: (Smalltalk associationAt: newName)) do: [ :methodRef |		methodRef updateReferencesTo: oldName toBe: newName ]! !!SystemDictionary methodsFor: 'class names' stamp: 'jmv 3/29/2009 15:51'!renameClassNamed: oldName as: newName	"Invoked from fileouts:  if there is currently a class in the system named oldName, then rename it to newName.  If anything untoward happens, report it in the Transcript."	| oldClass |	(oldClass _ self at: oldName asSymbol ifAbsent: [nil]) == nil		ifTrue:			[Transcript cr; show: 'Class-rename for ', oldName, ' ignored because ', oldName, ' does not exist.'.			^ self].	oldClass rename: newName! !!MethodReference reorganize!('queries' actualClass asStringOrText classIsMeta classSymbol isValid methodSymbol printOn:)('setting' setClass:methodSymbol:stringVersion: setClassAndSelectorIn: setClassSymbol:classIsMeta:methodSymbol:stringVersion: setStandardClass:methodSymbol:)('string version' stringVersion stringVersion:)('comparisons' <= = hash)('*packageinfo-base' category sourceCode)('services' updateReferencesTo:toBe:)!