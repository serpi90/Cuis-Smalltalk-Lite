'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 2 May 2011 at 11:36:40 am'!!Editor methodsFor: 'new selection' stamp: 'jmv 5/2/2011 11:36'!selectWordLeftDelimiters: leftDelimiters rightDelimiters: rightDelimiters	"Select delimited text or word--the result of double-clicking."	| openDelimiter closeDelimiter direction match level	string here hereChar start stop |	string _ self string.	here _ self pointIndex min: string size.	openDelimiter _ string at: here - 1.	match _ leftDelimiters indexOf: openDelimiter.	match > 0		ifTrue: 			["delimiter is on left -- match to the right"			start _ here.			direction _ 1.			here _ here - 1.			closeDelimiter _ rightDelimiters at: match]		ifFalse: 			[openDelimiter _ string at: here.			match _ rightDelimiters indexOf: openDelimiter.			match > 0				ifTrue: 					["delimiter is on right -- match to the left"					stop _ here - 1.					direction _ -1.					closeDelimiter _ leftDelimiters at: match]				ifFalse: ["no delimiters -- select a token"					direction _ -1]].	level _ 1.	[level > 0 and: [direction > 0			ifTrue: [here < string size]			ifFalse: [here > 1]]]		whileTrue: 			[hereChar _ string at: (here _ here + direction).			match = 0				ifTrue: ["token scan goes left, then right"					hereChar tokenish						ifTrue: [here = 1								ifTrue: 									[start _ 1.									"go right if hit string start"									direction _ 1]]						ifFalse: [direction < 0								ifTrue: 									[start _ here + 1.									"go right if hit non-token"									direction _ 1]								ifFalse: [level _ 0]]]				ifFalse: ["bracket match just counts nesting level"					hereChar = closeDelimiter						ifTrue: [level _ level - 1"leaving nest"]						ifFalse: [hereChar = openDelimiter 									ifTrue: [level _ level + 1"entering deeper nest"]]]].	level > 0 ifTrue: ["in case ran off string end"	here _ here + direction].	direction > 0		ifTrue: [self selectFrom: start to: here - 1]		ifFalse: [self selectFrom: here + 1 to: stop]! !!PasteUpMorph methodsFor: 'change reporting' stamp: 'jmv 4/28/2011 14:19'!redrawNeeded	"Report that the area occupied by this morph should be redrawn."        self == self outermostWorldMorph                 ifTrue: [worldState doFullRepaint]                ifFalse: [super redrawNeeded]! !!Set methodsFor: 'testing' stamp: 'jmv 4/28/2011 14:00'!includes: anObject 	^ (array at: (self findElementOrNil: anObject)) ~~ nil! !!TextEditor methodsFor: 'events' stamp: 'jmv 5/2/2011 11:30'!doubleClick: evt	| here string |	string _ self string.	here _ self pointIndex.	(here between: 2 and: string size)		ifTrue: [ self selectWord ]		ifFalse: [			"if at beginning or end, select entire string"			^self selectAll ].! !!TextEditor methodsFor: 'events' stamp: 'jmv 5/2/2011 11:33'!mouseUp: evt	| cursorBlock cursorIndex startBlock startIndex stopBlock stopIndex |	oldInterval ifNil: [^ self].  "Patched during clickAt: repair"	oldInterval = self selectionInterval		ifTrue: [			evt shiftPressed				ifFalse: [					"Not a real double-click, but the second click in the same place, without shift.					Act as if double click (classic Squeak behavior)"					self doubleClick: evt ]				ifTrue: [					"Squeak classic behavior for click, move, shift-click sequence "					"self pointBlock: (paragraph characterBlockAtPoint: (evt position))."					"Mac behavior"					cursorBlock _ paragraph characterBlockAtPoint: evt position.					cursorIndex _ cursorBlock stringIndex.					startBlock _ self startBlock min: cursorBlock.					startIndex _ startBlock stringIndex.					stopBlock _ self stopBlock max: cursorBlock.					stopIndex _ stopBlock stringIndex.					(stopIndex - cursorIndex) < (cursorIndex - startIndex)						ifTrue: [							self markBlock: startBlock.							self pointBlock: cursorBlock ]						ifFalse: [							self markBlock: stopBlock.							self pointBlock: cursorBlock ]]].	self setEmphasisHereFromText.	(self isDisjointFrom: oldInterval) ifTrue: [		otherInterval _ oldInterval].	self storeSelectionInParagraph	"store selection , done in this method, (shift click) or perhaps in #mouseDown: (click)"! !!TextEditor methodsFor: 'new selection' stamp: 'jmv 4/1/2011 10:21'!selectLine	"Make the receiver's selection, if it currently consists of an insertion point only, encompass the current line."	self hasSelection ifTrue:[^self].	self selectInterval: (self text encompassLine: self selectionInterval)! !!SmalltalkEditor methodsFor: 'new selection' stamp: 'jmv 5/2/2011 11:24'!selectWord	"Select delimited text or word--the result of double-clicking."	| leftDelimiters rightDelimiters |	leftDelimiters _ '([{<''"'.	rightDelimiters _ ')]}>''"'.	^self selectWordLeftDelimiters: leftDelimiters rightDelimiters: rightDelimiters! !!WorldState methodsFor: 'canvas' stamp: 'jmv 5/2/2011 11:20'!recordDamagedRect: damageRect	damageRecorder ifNotNil: [damageRecorder recordInvalidRect: damageRect]! !