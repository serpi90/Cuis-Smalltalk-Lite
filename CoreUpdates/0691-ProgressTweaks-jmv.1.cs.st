'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 5 December 2010 at 11:32:03 pm'!!ProgressInitiationException methodsFor: 'as yet unclassified' stamp: 'jmv 12/5/2010 23:31'!defaultAction	| delta textFrame barFrame outerFrame result range lastW width w1 f h textWidth |	f _ StrikeFont default.	h _ f height * 3//2.	textWidth _ (f widthOfString: progressTitle) + h.	width _ 150 max: textWidth.	barFrame _ Rectangle center: aPoint extent: width@h.	textFrame _ 0@0 extent: width@h.	textFrame _ textFrame align: textFrame bottomCenter					with: barFrame topCenter + (0@2).	outerFrame _ barFrame merge: textFrame.	delta _ outerFrame amountToTranslateWithin: Display boundingBox.	barFrame _ barFrame translateBy: delta.	textFrame _ textFrame translateBy: delta.	outerFrame _ outerFrame translateBy: delta.	range _ maxVal = minVal ifTrue: [1] ifFalse: [maxVal - minVal].  "Avoid div by 0"	lastW _ 0.	result _ workBlock value:  "Supply the bar-update block for evaluation in the work block"		[ :barVal |		barVal 			ifNotNil: [ currentVal _ barVal ]			ifNil: [						currentVal _ currentVal + 1.				currentVal >= maxVal					ifTrue: [ currentVal _ minVal ]].		w1 _ ((barFrame width-4) asFloat * ((currentVal-minVal) asFloat / range min: 1.0)) asInteger.		w1 < lastW | true ifTrue: [			Display fillBlack: barFrame; fillWhite: (barFrame insetBy: 2).			Display fillBlack: textFrame; fillWhite: (textFrame insetBy: 2).			progressTitle displayOn: Display at: textFrame topLeft + (width-textWidth+h//2@4).			Display fillWhite: (barFrame insetBy: 2)].		w1 ~= lastW ifTrue: [			Display fillGray: (barFrame topLeft + (2@2) extent: w1@16).			lastW _ w1]].	World fullRepaintNeeded.	self resume: result! !!ProgressMorph class methodsFor: 'example' stamp: 'jmv 12/5/2010 23:17'!example	"ProgressMorph example"	| progress |	progress _ ProgressMorph label: 'Test progress' subLabel: 'this is the subheading'.	progress openInWorld.	[100 timesRepeat:		[(Delay forMilliseconds: 100) wait.		progress incrDone: 0.01].	progress delete] fork! !!String methodsFor: 'displaying' stamp: 'jmv 12/5/2010 23:30'!displayProgressAt: aPoint from: minVal to: maxVal during: workBlock 	"Display this string as a caption over a progress bar while workBlock is evaluated.EXAMPLE (Select next 6 lines and Do It)['Now here''s some Real Progress'	displayProgressAt: Sensor cursorPoint	from: 0 to: 100	during: [:bar |	1 to: 100 do: [:x | bar value: x.			(Delay forMilliseconds: 100) wait]].] fork	['Now here''s some Real Progress'	displayProgressAt: Sensor cursorPoint	from: 0 to: 10	during: [:bar |	1 to: 30 do: [:x | bar value: x \\ 11.			(Delay forMilliseconds: 100) wait]]] fork'Now here''s some Real Progress'	displayProgressAt: Sensor cursorPoint	from: 0 to: 10	during: [:bar |	1 to: 30 do: [:x | bar value: nil.			(Delay forMilliseconds: 200) wait]].HOW IT WORKS (Try this in any other language :-)Since your code (the last 2 lines in the above example) is in a block,this method gets control to display its heading before, and clean up the screen after, its execution.The key, though, is that the block is supplied with an argument,named 'bar' in the example, which will update the bar image every it is sent the message value: x, where x is in the from:to: range.The use of ProgressInitiationException allows for avoiding actualprogress display, by catching the exception."	^ProgressInitiationException 		display: self		at: aPoint 		from: minVal 		to: maxVal 		during: workBlock! !!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 12/5/2010 23:14'!browseMessageList: messageList name: labelString autoSelect: autoSelectString	| title aSize |	"Create and schedule a MessageSet browser on the message list."	messageList size = 0 ifTrue: 		[^ (PopUpMenu labels: ' OK ')				startUpWithCaption: 'There are no' , labelString].	title _ (aSize _ messageList size) > 1		ifFalse:	[ labelString ]		ifTrue:	[ '[', aSize printString, '] ', labelString].	MessageSet openMessageList: messageList name: title autoSelect: autoSelectString! !