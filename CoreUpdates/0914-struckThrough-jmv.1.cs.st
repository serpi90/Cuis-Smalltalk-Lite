'From Cuis 3.1 of 4 March 2011 [latest update: #850] on 12 April 2011 at 10:15:51 am'!!StringMorph commentStamp: 'jmv 4/12/2011 10:08' prior: 0!StringMorph is a "lightweight" Morph to display a String. It supports only a single font, color, and emphasis combination. For multiple text styles, use TextMorph.Structure:instance var    	Type              Description font 			StrikeFont 		(normally nil; then the accessor #font gives back  a Font or nil #defaultFont) emphasis 		SmallInteger	bitmask determining character attributes (underline, bold, 	italics, struckThrough) contents 		String 			The text that will be displayed. hasFocus 		Boolean 		Do I have the keyboard focus or not? If you shift-click on a StringMorph you can edit its string. This is accomplished the following way: StringMorph can launch a StringMorphEditor if it receives a #mouseDown event.A StringMorph may also be used like a SimpleButtonMorph to do an action when clicked. Use the menu 'extras' / 'add mouseUpAction'.The following propery will be defined:aStringMorph valueOfProperty: #mouseUpCodeToRun!!AbstractFont class methodsFor: 'constants' stamp: 'jmv 4/12/2011 09:51'!outlineCode	"Not used yet..."	^16! !!AbstractFont class methodsFor: 'constants' stamp: 'jmv 4/12/2011 09:51'!struckThroughCode	^8! !!EmphasizedMenu class methodsFor: 'instance creation' stamp: 'jmv 4/12/2011 10:06'!selections: selList emphases: emphList	"Answer an instance of the receiver with the given selections and emphases.  "	^ (self selections: selList) emphases: emphList"(EmphasizedMenu selections: #('how' 'well' 'does' 'this' 'work?') emphases: #(bold normal italic struckThrough normal)) startUp"! !!EmphasizedMenu class methodsFor: 'examples' stamp: 'jmv 4/12/2011 10:00'!example1	"EmphasizedMenu example1"	^ (self		selections: #('how' 'well' 'does' 'this' 'work?' ) 		emphases: #(#bold #normal #italic #struckThrough #normal ))			startUpWithCaption: 'A Menu with Emphases'! !!EmphasizedMenu class methodsFor: 'examples' stamp: 'jmv 4/12/2011 10:00'!example3	"EmphasizedMenu example3"	^ (self		selectionAndEmphasisPairs: #('how' #bold 'well' #normal 'does' #italic 'this' #struckThrough 'work' #normal))		startUpWithCaption: 'A Menu with Emphases'! !!SequenceDifference methodsFor: 'printing' stamp: 'jmv 4/12/2011 10:00'!attributesFor: condition 	condition == #unchanged		ifTrue: [ 			^ {TextEmphasis normal} ].	condition == #removed		ifTrue: [ 			^ {TextEmphasis struckThrough. TextColor blue} ].	condition == #inserted		ifTrue: [ 			^ {TextColor red} ]! !!StrikeFont methodsFor: 'testing' stamp: 'jmv 4/12/2011 10:07'!isStruckThrough	^emphasis allMask: 8! !!StrikeFont methodsFor: 'emphasis' stamp: 'jmv 4/12/2011 10:09'!emphasized: code	"Answer a copy of the receiver with emphasis set to include code."	| derivative addedEmphasis derivedFrom safeCode |	self isBaseFont ifFalse: [ ^self baseFont emphasized: (code bitOr: emphasis) ].	code = 0 ifTrue: [ ^ self ].		derivativeFonts ifNil: [derivativeFonts := Array new: 16].	derivative _ derivativeFonts at: (safeCode _ code min: derivativeFonts size).	derivative ifNotNil: [^ derivative].  "Already have this style"	"Dont have it -- derive from another with one with less emphasis"	addedEmphasis _ 1 bitShift: safeCode highBit - 1.	derivedFrom _ self emphasized: safeCode - addedEmphasis.  "Order is Bold, Italic, Underlined"	derivative _ derivedFrom copy.	addedEmphasis = 1 ifTrue: [   "Compute synthetic bold version of the font"		derivative			ensureCleanBold;			name: derivedFrom name , 'B';			makeBoldGlyphs ].	addedEmphasis = 2 ifTrue: [   "Compute synthetic italic version of the font"		derivative			name: derivedFrom name , 'I';			makeItalicGlyphs ].	addedEmphasis = 4 ifTrue: [   "Compute underlined version of the font"		derivative			name: derivedFrom name , 'U';			makeUnderlinedGlyphs ].	addedEmphasis = 8 ifTrue: [   "Compute struckThrough version of the font"		derivative			name: derivedFrom name , 'X';			makeStruckThroughGlyphs ].	derivative baseFont: self.	derivative emphasis: safeCode.	derivativeFonts at: safeCode put: derivative.	^ derivative! !!StrikeFont methodsFor: 'emphasis' stamp: 'jmv 4/12/2011 10:09'!makeStruckThroughGlyphs	"Make a struckThrough set of glyphs with same widths"	| g |	g _ glyphs deepCopy.	g fillBlack: (0 @ (self ascent - (self ascent//3)) extent: g width @ 1).	glyphs _ g.	self isSynthetic: true! !!StrikeFont methodsFor: 'derivatives - emphasis' stamp: 'jmv 4/12/2011 10:01'!struckThrough	^self emphasized: 8! !!StrikeFontTest methodsFor: 'testing' stamp: 'jmv 4/12/2011 10:01'!testBaseAndDerivedFont	"	StrikeFontTest new testBaseAndDerivedFont	"	| base italic italicItalic boldItalic italicBold boldItalic2 underlined underlinedItalic italicUnderlined struckThrough1 struckThrough2 |	base _ AbstractFont familyName: 'DejaVu' pointSize: 14.	self assert: base isBaseFont.	italic _ base italic.	self deny: italic isBaseFont.	italicItalic _ italic italic.	self assert: italicItalic == italic.	boldItalic _ base bold italic.	self deny: boldItalic isBaseFont.	boldItalic2 _ base boldItalic.	italicBold _ italic bold.	self assert: boldItalic == italicBold.	self assert: boldItalic == boldItalic2.	underlined _ base underlined.	self deny: underlined isBaseFont.	underlinedItalic _ underlined italic.	italicUnderlined _ italic underlined.	self assert: underlinedItalic == italicUnderlined.	struckThrough1 _ base italic underlined bold struckThrough.	struckThrough2 _ base bold underlined italic struckThrough.	self assert: struckThrough1 == struckThrough2! !!StringMorph methodsFor: 'font' stamp: 'jmv 4/12/2011 10:08'!emphasis: aNumber	"Set the receiver's emphasis as indicated. aNumber is a bitmask with the following format:	bit	attribute	1	bold	2	italic	4	underlined	8	struckThrough	16	outline"	"examples: 0 -> plain.  	1 -> bold.  2 -> italic.  3 -> bold italic.  4 -> underlined  	5 -> bold underlined.  6 -> italic underlined.   7 -> bold italic underlined   	etc..."	emphasis _ aNumber.	^ self font: font emphasis: emphasis! !!StringMorph methodsFor: 'menu' stamp: 'jmv 4/12/2011 10:01'!changeEmphasis	| reply aList |	aList _ #(normal bold italic underlined struckThrough).	reply _ (SelectionMenu labelList: aList selections: aList) startUp.	reply ifNotNil:[		self emphasis: (TextEmphasis perform: reply) emphasisCode.	].! !!TextEditor methodsFor: 'attributes' stamp: 'jmv 4/12/2011 10:02'!changeEmphasisOrAlignment	| menuStrings aList reply  code align menuList startIndex attribute t |	startIndex _ self startIndex.	aList _ #(normal bold italic underlined struckThrough leftFlush centered rightFlush justified).		t _ self text.	align _ t alignmentAt: startIndex.	code _ t emphasisAt: startIndex.	menuList _ WriteStream on: Array new.	menuList nextPut: (code isZero ifTrue:['<on>'] ifFalse:['<off>']), 'normal'.	menuList nextPutAll: (#(bold italic underlined struckThrough) collect:[:emph|		(code anyMask: (TextEmphasis perform: emph) emphasisCode)			ifTrue: [ '<on>', emph asString ]			ifFalse: [ '<off>', emph asString ]]).	menuList nextPutAll: (#(leftFlush centered rightFlush justified) collectWithIndex: [ :type :i |		align = (i-1)			ifTrue: [ '<on>', type asString ]			ifFalse: [ '<off>', type asString ]]).	menuStrings _ menuList contents.	aList _ #(normal bold italic underlined struckThrough leftFlush centered rightFlush justified).	reply _ (SelectionMenu labelList: menuStrings lines: #(1 5) selections: aList) startUpWithoutKeyboard.	reply ifNotNil: [		(#(leftFlush centered rightFlush justified) includes: reply)			ifTrue: [				attribute _TextAlignment perform: reply]			ifFalse: [				attribute _ TextEmphasis perform: reply].		((menuStrings at: (aList indexOf: reply)) beginsWith: '<on>')			ifTrue: [ self unapplyAttribute: attribute ]			ifFalse: [ self applyAttribute:  attribute ]].	^ true! !!TextEditor methodsFor: 'editing keys' stamp: 'jmv 4/12/2011 10:01'!changeEmphasis: aKeyboardEvent	"Change the emphasis of the current selection or prepare to accept characters with the change in emphasis."	"control 0..9 -> 0..9"	| keyCode attributeToAdd attributeToRemove oldAttributes |	keyCode _ ('0123456'		indexOf: aKeyboardEvent keyCharacter		ifAbsent: [ 1 ]) - 1.	oldAttributes _ emphasisHere.	keyCode = 0 ifTrue: [ attributeToAdd _ TextEmphasis normal ].	(keyCode between: 1 and: 4) ifTrue: [		attributeToAdd _ TextEmphasis perform: (#(#bold #italic #underlined #struckThrough ) at: keyCode).		oldAttributes do: [ :oldAtt |			oldAtt = attributeToAdd ifTrue: [				attributeToAdd _ nil.				attributeToRemove _ oldAtt ]]].	keyCode = 5 ifTrue: [ attributeToAdd _ TextKern kern: -1 ].	keyCode = 6 ifTrue: [ attributeToAdd _ TextKern kern: 1 ].	attributeToAdd ifNotNil: [ self applyAttribute: attributeToAdd ].	attributeToRemove ifNotNil: [ self unapplyAttribute: attributeToRemove ].	^ true.! !!TextEmphasis class methodsFor: 'instance creation' stamp: 'jmv 4/12/2011 09:59'!outline	^ self new emphasisCode: AbstractFont outlineCode! !!TextEmphasis class methodsFor: 'instance creation' stamp: 'jmv 4/12/2011 09:59'!struckThrough	^ self new emphasisCode: AbstractFont struckThroughCode! !TextEmphasis class removeSelector: #struckOut!StrikeFont removeSelector: #isStruckOut!StrikeFont removeSelector: #makeStruckOutGlyphs!StrikeFont removeSelector: #struckOut!AbstractFont class removeSelector: #struckOutCode!