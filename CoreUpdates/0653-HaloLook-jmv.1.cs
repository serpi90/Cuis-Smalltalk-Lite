'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 18 November 2010 at 9:46:14 am'!!classDefinition: #HaloHandleMorph category: #'Morphic-Widgets'!Morph subclass: #HaloHandleMorph	instanceVariableNames: ''	classVariableNames: 'CircleForm'	poolDictionaries: ''	category: 'Morphic-Widgets'!!HaloHandleMorph methodsFor: 'drawing' stamp: 'jmv 11/18/2010 09:45'!drawOn: aCanvas	aCanvas		image: (self class circleForm: self extent)		multipliedBy: color		at: bounds topLeft.! !!HaloHandleMorph class methodsFor: 'accessing' stamp: 'jmv 11/18/2010 09:44'!circleForm: extent	"	CircleForm _ nil	"	| r d l bw center |	(CircleForm isNil or: [ CircleForm extent ~= extent ]) ifTrue: [		center _ extent -1 * 0.5.		r _ center r * 0.75.		bw _ 1.3.		CircleForm _ Form extent: extent depth: 32.		0 to: extent y - 1 do: [ :y |			0 to: extent x - 1 do: [ :x |				d _ (x@y - center) r.				l _ (r - d max: 0.0) min: bw.				CircleForm					colorAt: x @ y					put: (Color white alpha: (l / bw))					]].		].	^CircleForm! !!HaloMorph methodsFor: 'private' stamp: 'jmv 11/17/2010 15:11'!addHandle: handleSpec on: eventName send: selector to: recipient 	"Add a handle within the halo box as per the haloSpec, and set it up to respond to the given event by sending the given selector to the given recipient.  Return the handle."	| handle aPoint iconName colorToUse |	aPoint := self 				positionIn: haloBox				horizontalPlacement: handleSpec horizontalPlacement				verticalPlacement: handleSpec verticalPlacement.	handle := HaloHandleMorph 				newBounds: (Rectangle center: aPoint extent: HandleSize asPoint)				color: (colorToUse := Color colorFrom: handleSpec color).	self addMorph: handle.	(iconName := handleSpec iconSymbol) ifNotNil: [			| form |			form := Icons at: iconName ifAbsent: [self class perform: iconName].			form ifNotNil: [					handle addMorphCentered: (ImageMorph new								image: form;								color: colorToUse makeForegroundColor;								lock)]].	handle 		on: #mouseUp		send: #endInteraction		to: self.	handle 		on: eventName		send: selector		to: recipient.	handle 		setBalloonText: (target balloonHelpTextForHandle: handle) translated.	^handle! !!HaloHandleMorph class reorganize!('accessing' circleForm:)!