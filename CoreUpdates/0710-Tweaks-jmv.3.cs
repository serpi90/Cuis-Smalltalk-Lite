'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 15 December 2010 at 3:07:45 pm'!!FileContentsEditor class methodsFor: 'menu' stamp: 'jmv 12/14/2010 22:43'!paneMenu: aMenu shifted: shifted	"Construct aMenu to have items appropriate for the file browser's code pane, given the shift state provided"	| shiftMenu services maybeLine extraLines brevityState fileName theModel |	shifted ifTrue: [		shiftMenu _ self shiftedYellowButtonMenu.		^ aMenu 			labels: shiftMenu labelString 			lines: shiftMenu lineArray			selections: shiftMenu selections].	theModel _ aMenu defaultTarget textProvider.	fileName _ theModel fileName.	fileName ifNotNil: [		brevityState _ theModel brevityState.		services _ OrderedCollection new.		(#(briefHex briefFile needToGetBriefHex needToGetBrief) includes: brevityState) ifTrue: [			services add: theModel serviceGet].		(#(fullHex briefHex needToGetFullHex needToGetBriefHex) includes: brevityState) ifFalse: [			services add: theModel serviceGetHex].		maybeLine _ services size.		(#('st' 'cs') includes: theModel suffixOfSelectedFile) ifTrue: [			services addAll:				(theModel servicesFromSelectorSpecs:					#(fileIntoNewChangeSet: fileIn: browseChangesFile: browseFile:))].		extraLines _ OrderedCollection new.		maybeLine > 0 ifTrue: [extraLines add: maybeLine].		services size > maybeLine ifTrue: [extraLines add: services size].		aMenu 			addServices: services			for: theModel fullName			extraLines: extraLines].	aMenu addList: {			{'find...(f)' translated.				#find}.			{'find again (g)' translated.			#findAgain}.			{'set search string (h)' translated.	#setSearchString}.			#-.			{'do again (j)' translated.			#again}.			{'undo (z)' translated.				#undo}.			#-.			{'copy (c)' translated.				#copySelection}.			{'cut (x)' translated.					#cut}.			{'paste (v)' translated.				#paste}.			{'paste...' translated.					#pasteRecent}.			#-.			{'do it (d)' translated.				#doIt}.			{'print it (p)' translated.				#printIt}.			{'inspect it (i)' translated.			#inspectIt}.			{'fileIn selection (G)' translated.		#fileItIn}.			#-.			{'accept (s)' translated.				#accept}.			{'cancel (l)' translated.				#cancel}.			#-.			{'more...' translated.					#shiftedYellowButtonActivity}}.	^ aMenu! !!TextModelMorph methodsFor: 'updating' stamp: 'jmv 12/15/2010 15:05'!update: aSymbol 	aSymbol ifNil: [^self].	aSymbol == #flash ifTrue: [^self flash].	aSymbol == #acceptedContents 		ifTrue: [			model refetch.			self maybeStyle.			"Some day, it would be nice to keep objects and update them			instead of throwing them away all the time for no good reason..."			textMorph releaseParagraph.			^self setSelection: model getSelection].	aSymbol == #initialSelection 		ifTrue: [^self setSelection: model getSelection].	aSymbol == #autoSelect 		ifTrue: [			self handleEdit: [					TextEditor abandonChangeText.	"no replacement!!"					self editor						setSearch: model autoSelectString;						againOrSame: true ]].	aSymbol == #clearUserEdits ifTrue: [^self hasUnacceptedEdits: false].	aSymbol == #wantToChange 		ifTrue: [			self canDiscardEdits ifFalse: [^self promptForCancel].			^self].	aSymbol == #appendEntry 		ifTrue: [			self handleEdit: [self appendEntry].			^self refreshWorld ].	aSymbol == #clearText 		ifTrue: [			self handleEdit: [self changeText: Text new].			textMorph releaseParagraph.			^self refreshWorld ].	aSymbol == #codeChangedElsewhere 		ifTrue: [			self hasEditingConflicts: true.			^self changed ]! !TextEditor removeSelector: #getPluggableYellowButtonMenu:!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."Utilities initialize.World removeProperty: #borderStyle!