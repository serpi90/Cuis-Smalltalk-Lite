'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 4 December 2011 at 3:57:14 pm'!!InnerTextMorph methodsFor: 'accessing' stamp: 'jmv 12/4/2011 15:43'!                            model: aTextModel	model _ aTextModel.	styler ifNotNil: [ styler textModel: model ].	self releaseEditorAndParagraph.	"So the model is properly set on the editor and the paragraph"! !!InnerTextMorph methodsFor: 'accessing' stamp: 'jmv 12/4/2011 15:46'!wrapFlag: aBoolean	"Change whether contents are wrapped to the container."	aBoolean == wrapFlag ifTrue: [^ self].	wrapFlag _ aBoolean.	"Compose my text to fit my bounds.	If any text lies outside my bounds, it will be clipped,."	self releaseEditorAndParagraph! !!InnerTextMorph methodsFor: 'caching' stamp: 'jmv 12/4/2011 15:43'!             releaseCachedState	super releaseCachedState.	self releaseEditorAndParagraph.! !!InnerTextMorph methodsFor: 'editing' stamp: 'jmv 12/4/2011 15:43'!       cancelEdits	"The message is sent when the user hits enter or Cmd-L.	Cancel the current contents and end editing."	self releaseEditorAndParagraph.	owner cancel! !!InnerTextMorph methodsFor: 'editing' stamp: 'jmv 12/4/2011 15:42'!                     handleInteraction: interactionBlock	"Perform the changes in interactionBlock, noting any change in selection	and possibly a change in the size of the paragraph (ar 9/22/2001 - added for TextPrintIts)"	"Also couple ParagraphEditor to Morphic keyboard events"	| oldSize |	oldSize _ model textSize.	self selectionChanged.  "Note old selection"	interactionBlock value.	self selectionChanged.  "Note new selection"	oldSize = model textSize		ifFalse: [ self updateFromParagraph ]! !!InnerTextMorph methodsFor: 'geometry' stamp: 'jmv 12/4/2011 15:48'!                 extent: aPoint	| newExtent priorEditor |	priorEditor _ editor.	"Resist changing the extent if no wordwrap.. this should be checked."	wrapFlag ifFalse: [ ^ self ].	newExtent _ aPoint truncated max: self minimumExtent.		"No change of wrap width"	newExtent x = bounds extent x ifTrue: [ ^ self ].	"invalidate the paragraph cache"	self releaseEditorAndParagraph.	super extent: newExtent.	priorEditor		ifNil: [			"since the width has changed..." 			self fit ]		ifNotNil: [ self installEditorToReplace: priorEditor ]! !!InnerTextMorph methodsFor: 'private' stamp: 'jmv 12/4/2011 15:25'!       fit	"Adjust my bounds to fit the text.	Required after the text changes,	or if wrapFlag is true and the user attempts to change the extent."	| newExtent |	newExtent _ (self paragraph extent max: 9 @ StrikeFont default height) + (0 @ 2).	newExtent ~= bounds extent 		ifTrue: [			self basicExtent: newExtent ].	"These statements should be pushed back into senders"	self redrawNeeded.	"Too conservative: only paragraph composition							should cause invalidation."	owner innerHeight: newExtent y! !!InnerTextMorph methodsFor: 'private' stamp: 'jmv 12/4/2011 15:54'!                             installEditorToReplace: priorEditor	"Install an editor for my paragraph. Install also the paragraph if not there.	If priorEditor is not nil, then initialize the new editor from its state.	We may want to rework this so it actually uses the prior editor."	| stateArray |	priorEditor ifNotNil: [ stateArray _ priorEditor stateArray] .	editor _ model editorClass new morph: self.	editor model: model.	"...Code here to recreate the paragraph... We positively know it is nil."	paragraph _ Paragraph new.	paragraph focused: self hasKeyboardFocus.	paragraph setModel: model extentForComposing: self extentForComposing.	editor changeParagraph: paragraph.	editor setEmphasisHereFromText.	paragraph composeAll.	self fit.	editor resetState.	stateArray ifNotNil: [ editor stateArrayPut: stateArray ].	self selectionChanged.	^editor! !!InnerTextMorph methodsFor: 'private' stamp: 'jmv 12/4/2011 15:55'!                releaseEditorAndParagraph	"Editor and Paragraph instantiation is lazy -- it will be created only when needed"	editor ifNotNil: [		self selectionChanged.		editor _ nil].	paragraph ifNotNil: [		paragraph selectionStartBlocks: #() selectionStopBlocks: #().	"most likely not needed"		paragraph _ nil]! !!InnerTextMorph methodsFor: 'private' stamp: 'jmv 12/4/2011 15:40'!        updateFromParagraph	"A change has taken place in my paragraph, as a result of editing and I must be updated.  If a line break causes recomposition of the current paragraph, or it the selection has entered a different paragraph, then the current editor will be released, and must be reinstalled with the resulting new paragraph, while retaining any editor state, such as selection, and current typing emphasis."	paragraph ifNotNil: [		editor storeSelectionInParagraph.		self fit.		self layoutChanged.	].	owner setScrollDeltas! !!Paragraph methodsFor: 'display' stamp: 'jmv 12/4/2011 15:51'!      selectionColor	"matar la ridicula ivar focused!!!!!!!!!!"	^Theme current textHighlightFocused: self focused! !!TextModelMorph methodsFor: 'updating' stamp: 'jmv 12/4/2011 15:43'!        update: aSymbol	super update: aSymbol.	aSymbol ifNil: [^self].	aSymbol == #flash ifTrue: [^self flash].	aSymbol == #actualContents ifTrue: [		"Some day, it would be nice to keep objects and update them		instead of throwing them away all the time for no good reason..."		self textMorph releaseEditorAndParagraph.		self textMorph formatAndStyleIfNeeded.		^self ].	aSymbol == #acceptedContents ifTrue: [		self textMorph hasUnacceptedEdits ifTrue: [			self textMorph hasEditingConflicts: true.			^self redrawNeeded ].		model refetch.		self setScrollDeltas.		^self ].	aSymbol == #refetched ifTrue: [		self setSelection: model getSelection.		self hasUnacceptedEdits: false.		^self ].	aSymbol == #initialSelection ifTrue: [		^self setSelection: model getSelection; redrawNeeded ].	aSymbol == #autoSelect ifTrue: [		TextEditor abandonChangeText.	"no replacement!!"		self editor			setSearch: model autoSelectString;			findAndReplaceMany: true.		self textMorph updateFromParagraph ].	"Quite ugly"	aSymbol == #clearUserEdits ifTrue: [^self hasUnacceptedEdits: false].	aSymbol == #shoutStyle ifTrue: [		self textMorph stylerStyled.		^self redrawNeeded ].! !InnerTextMorph removeSelector: #composeToBounds!InnerTextMorph removeSelector: #releaseParagraph!