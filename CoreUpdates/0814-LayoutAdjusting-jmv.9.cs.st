'From Cuis 3.0 of 31 January 2011 [latest update: #790] on 23 February 2011 at 10:40:45 pm'!!classDefinition: #LayoutAdjustingMorph category: #'Morphic-Layouts'!Morph subclass: #LayoutAdjustingMorph	instanceVariableNames: 'hand'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Layouts'!!LayoutAdjustingMorph methodsFor: 'event handling' stamp: 'jmv 2/23/2011 11:39'!handlesMouseDown: evt	^ true! !!LayoutAdjustingMorph methodsFor: 'event handling' stamp: 'jmv 2/23/2011 11:39'!handlesMouseOver: evt	^ true! !!LayoutAdjustingMorph methodsFor: 'event handling' stamp: 'jmv 2/23/2011 16:42'!mouseEnter: anEvent	super mouseEnter: anEvent.	owner direction == #horizontal		ifTrue: [ Cursor resizeLeft show ]		ifFalse: [ Cursor resizeTop show ].	hand _ anEvent hand.	self startStepping! !!LayoutAdjustingMorph methodsFor: 'event handling' stamp: 'jmv 2/23/2011 11:31'!mouseLeave: anEvent	super mouseLeave: anEvent.	hand _ nil! !!LayoutAdjustingMorph methodsFor: 'accessing' stamp: 'jmv 2/23/2011 11:45'!adoptWidgetsColor: paneColor"revisar"	super adoptWidgetsColor: paneColor.	paneColor ifNotNil: [ self color: paneColor ]! !!LayoutAdjustingMorph methodsFor: 'drawing' stamp: 'jmv 2/23/2011 11:10'!drawOn: aCanvas	aCanvas fillRectangle: bounds fillStyle: self fillStyle borderWidth: 2 borderStyleSymbol: #raised! !!LayoutAdjustingMorph methodsFor: 'stepping' stamp: 'jmv 2/23/2011 16:40'!step	"got the #mouseLeave: message"	hand ifNil: [		Cursor normal show.		^self stopStepping ].	"hasn't got the #mouseLeave: message (yet)"	hand lastEvent anyButtonPressed		ifTrue: [			owner				adjustBy: self				at: hand cursorPoint ]		ifFalse: [			"If the button was unpressed outside the morph (can happen if you try to go outside container),			we might not get the #mouseLeav: message"			(self containsPoint: hand position) ifFalse: [				Cursor normal show.				self stopStepping ]]! !!LayoutAdjustingMorph methodsFor: 'stepping' stamp: 'jmv 2/23/2011 15:14'!stepTime	"Update every hundredth of a second."	^ 10! !!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 2/23/2011 16:55'!direction	^direction! !!LayoutMorph methodsFor: 'submorphs-add/remove' stamp: 'jmv 2/23/2011 17:11'!addAdjustingMorph	"So the user can adjust layout"	"twekear para ui grande..."	self addMorph: LayoutAdjustingMorph new layoutSpec: (LayoutSpec fixedWidth: 4+2)! !!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 2/23/2011 16:31'!adjustBy: aLayoutAdjustMorph at: aPoint	direction == #horizontal ifTrue: [		self adjustHorizontallyBy: aLayoutAdjustMorph at: aPoint ].	direction == #vertical ifTrue: [		self adjustVerticallyBy: aLayoutAdjustMorph at: aPoint ].! !!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 2/23/2011 16:30'!adjustHorizontallyBy: aLayoutAdjustMorph at: aPoint	| delta l ls r rs newWidth i lCurrentWidth rCurrentWidth doNotResizeBelow |	doNotResizeBelow _ 2.	i _ submorphs indexOf: aLayoutAdjustMorph.	l _ self submorphs at: i +1.	ls _ l layoutSpec.	lCurrentWidth _ l width.	r _ self submorphs at: i - 1.	rs _ r layoutSpec.	rCurrentWidth _ r width.	delta _ aPoint x - aLayoutAdjustMorph center x.	delta _ delta max: doNotResizeBelow - lCurrentWidth.	delta _ delta min: rCurrentWidth - doNotResizeBelow.		lCurrentWidth > 0 ifTrue: [		newWidth _ lCurrentWidth + delta.		ls maybeProportionalWidth: (newWidth / lCurrentWidth * ls proportionalWidth) fixedOrMinimum: newWidth ].	rCurrentWidth > 0 ifTrue: [		newWidth _ rCurrentWidth - delta.		rs maybeProportionalWidth: (newWidth / rCurrentWidth * rs proportionalWidth) fixedOrMinimum: newWidth ].	"self doLayoutIfNeeded"	self layoutSubmorphsIn: self layoutBounds! !!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 2/23/2011 16:30'!adjustVerticallyBy: aLayoutAdjustMorph at: aPoint	| delta l ls r rs newHeight i lCurrentHeight rCurrentHeight doNotResizeBelow |	doNotResizeBelow _ 2.	i _ submorphs indexOf: aLayoutAdjustMorph.	l _ self submorphs at: i +1.	ls _ l layoutSpec.	lCurrentHeight _ l height.	r _ self submorphs at: i - 1.	rs _ r layoutSpec.	rCurrentHeight _ r height.	delta _ aPoint y - aLayoutAdjustMorph center y.	delta _ delta max: doNotResizeBelow - lCurrentHeight.	delta _ delta min: rCurrentHeight - doNotResizeBelow.		lCurrentHeight > 0 ifTrue: [		newHeight _ lCurrentHeight + delta.		ls maybeProportionalHeight: (newHeight / lCurrentHeight * ls proportionalHeight) fixedOrMinimum: newHeight ].	rCurrentHeight > 0 ifTrue: [		newHeight _ rCurrentHeight - delta.		rs maybeProportionalHeight: (newHeight / rCurrentHeight * rs proportionalHeight) fixedOrMinimum: newHeight ].	"self doLayoutIfNeeded"	self layoutSubmorphsIn: self layoutBounds! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 2/23/2011 16:45'!example11"	self example11"| pane row |pane _ LayoutMorph newColumn.pane color: Color red.row _ LayoutMorph newRow.row	color: Color red;	addMorph: (RectangleMorph new color: (Color h: 60 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 10);	addAdjustingMorph; 	addMorph: (RectangleMorph new color: (Color blue))		layoutSpec: (LayoutSpec proportionalWidth: 0.8);	addAdjustingMorph; 	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.4);	addAdjustingMorph; 	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.15);	addAdjustingMorph; 	addMorph: (RectangleMorph new color: (Color h: 60 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).pane addMorph: row layoutSpec: LayoutSpec useAll.row _ LayoutMorph newRow.row	color: Color red;	addMorph: (RectangleMorph new color: (Color blue))		layoutSpec: (LayoutSpec proportionalWidth: 0.8);	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.4);	addMorph: (RectangleMorph new color: (Color h: 30 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec proportionalWidth: 0.2).pane addMorph: row layoutSpec: LayoutSpec useAll.row _ LayoutMorph newRow.row	color: Color red;	addMorph: (RectangleMorph new color: (Color h: 120 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);	addMorph: (RectangleMorph new color: (Color h: 90 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);	addMorph: (RectangleMorph new color: (Color h: 150 s: 0.6 v: 0.6))		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).pane openInWorld! !!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 2/23/2011 16:32'!example13	"	self example13	"	| pane row innerRow |	pane _ LayoutMorph newColumn.	pane color: Color red.	row _ LayoutMorph newRow.	innerRow _ LayoutMorph newRow color: Color red.	innerRow		addMorph: RectangleMorph new layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);		addMorph: RectangleMorph new layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);		addMorph: RectangleMorph new layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 10).	row		color: (Color h: 270 s: 0.2 v: 0.6);		addMorph: innerRow			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 30 minorDirectionPadding: #center);addMorph: LayoutAdjustingMorph new layoutSpec: (LayoutSpec fixedWidth: 5); 		addMorph: (RectangleMorph new color: (Color h: 90 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 40 minorDirectionPadding: #top);addMorph: LayoutAdjustingMorph new layoutSpec: (LayoutSpec fixedWidth: 5); 		addMorph: (RectangleMorph new color: (Color h: 150 s: 0.6 v: 0.6))			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).	pane openInWorld! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 2/23/2011 16:28'!maybeProportionalHeight: aNumber fixedOrMinimum: otherNumber	"Alternatives: same as in #maybeProportionalWidth:fixedOrMinimum:, see comment there"			"If proportional, adopt new fraction, and maybe new minimum (only if smaller than current)"	proportionalHeight		ifNotNil: [			proportionalHeight _ aNumber.			fixedHeight _ fixedHeight min: otherNumber  ]		ifNil: [			fixedHeight				ifNotNil: [ fixedHeight _ otherNumber ]				ifNil: [ morph height: otherNumber ]]! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 2/23/2011 15:43'!maybeProportionalWidth: aNumber fixedOrMinimum: otherNumber	"Used to reframe. Set new values, but without changing layout policy"	"Alternatives:		- proportionalWidth notNil, fixedWidth notNil	->		Use fraction of available space, take fixedWidth as minimum desired width		- proportionalWidth isNil, fixedWidth isNil		->		Use current morph width		- proportionalWidth isNil, fixedWidth notNil	->		Use fixedWidth		- proportionalWidth notNil, fixedWidth isNil	->		NOT VALID"			"If proportional, adopt new fraction, and maybe new minimum (only if smaller than current)"	proportionalWidth		ifNotNil: [			proportionalWidth _ aNumber.			fixedWidth _ fixedWidth min: otherNumber  ]		ifNil: [			fixedWidth				ifNotNil: [ fixedWidth _ otherNumber ]				ifNil: [ morph width: otherNumber ]]! !