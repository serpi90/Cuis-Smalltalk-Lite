'From Cuis 2.9 of 5 November 2010 [latest update: #634] on 24 November 2010 at 9:20:29 am'!!CodeHolder methodsFor: '*Shout-Styling' stamp: 'jmv 11/24/2010 08:45'!shoutAboutToStyle: aSHTextStyler	"This is a notification that aSHTextStyler is about to re-style its text.	Answer false if showing difs, to veto the styling."		^self showingAnyKindOfDiffs not! !!Browser methodsFor: 'class comment pane' stamp: 'jmv 11/24/2010 09:15'!buildMorphicCommentPane	"Construct the pane that shows the class comment.	Respect the Preference for standardCodeFont."	| commentPane |	commentPane := BrowserCommentTextMorph				noShoutModel: self				editorClass: self editorClass				textGetter: #classCommentText				textSetter: #classComment:notifying:				selectionGetter: nil				menuGetter: #paneMenu:shifted:editorClass:.	commentPane styler: nil.	^ commentPane! !!ChangeList methodsFor: 'menu actions' stamp: 'jmv 11/24/2010 09:04'!buildMorphicCodePaneWith: editString	| codePane |	codePane _ PluggableTextMorph		model: self		editorClass: self editorClass		textGetter: #contents 		textSetter: nil		selectionGetter: nil		menuGetter: #paneMenu:shifted:editorClass:.	editString ifNotNil: [		codePane editString: editString.		codePane hasUnacceptedEdits: true	].	^codePane! !!ChangeList methodsFor: '*Shout-Styling' stamp: 'jmv 11/24/2010 08:46'!shoutAboutToStyle: aSHTextStyler	"As our 'methods' are not actual methods in the system, we can not style them."	^false! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'jmv 11/24/2010 08:55'!accept	"Inform the model of text to be accepted, and return true if OK."	"sps 8/13/2001 22:41: save selection and scroll info"	| textToAccept ok saveSelection saveScrollerOffset |	saveSelection := self selectionInterval copy.	saveScrollerOffset := scroller offset copy.	(self canDiscardEdits and: [(self hasProperty: #alwaysAccept) not]) 		ifTrue: [^self flash].	self hasEditingConflicts 		ifTrue: [			(self 				confirm: 'Caution!! This method may have beenchanged elsewhere since you startedediting it here.  Accept anyway?' 						translated) 					ifFalse: [^self flash]].	textToAccept := textMorph asText.	ok := setTextSelector isNil or: [					setTextSelector numArgs = 2 						ifTrue: [							model 								perform: setTextSelector								with: textToAccept								with: self]						ifFalse: [ model perform: setTextSelector with: textToAccept]].	ok == true 		ifTrue: [			self setText: self getText.			self hasUnacceptedEdits: false.			(model dependents				detect: [ :dep | 					(dep isKindOf: PluggableTextMorph) 						and: [ dep getTextSelector == #annotation ]]				ifNone: nil) ifNotNil: [ :aPane | model changed: #annotation ]].	"sps 8/13/2001 22:41: restore selection and scroll info"		["During the step for the browser, updateCodePaneIfNeeded is called, and 		invariably resets the contents of the codeholding PluggableTextMorph		at that time, resetting the cursor position and scroller in the process.		The following line forces that update without waiting for the step, 		then restores the cursor and scrollbar"	ok 		ifTrue: [			"(don't bother if there was an error during compile)"			(model isKindOf: CodeHolder) ifTrue: [model updateCodePaneIfNeeded].			"jmv - moved this outside the deferred message.			See 'Re: [squeak-dev] scrambled input fields'			from Gary Chambers on Nov 14, 2008."			self selectFrom: saveSelection first to: saveSelection last.			WorldState addDeferredUIMessage: [					self currentHand newKeyboardFocus: textMorph.					scroller offset: saveScrollerOffset.					self setScrollDeltas.					"self selectFrom: saveSelection first to: saveSelection last"]]] 			on: Error			do: nil! !!PluggableTextMorph class methodsFor: 'as yet unclassified' stamp: 'jmv 11/24/2010 09:14'!noShoutModel: anObject editorClass: anEditorClass textGetter: getTextSel textSetter: setTextSel selectionGetter: getSelectionSel menuGetter: getMenuSel"on: anObject editorClass: anEditorClass text: getTextSel accept: setTextSel readSelection: getSelectionSel menu: getMenuSel"	| answer |	answer _ self new.	answer		model: anObject		editorClass: anEditorClass		textGetter: getTextSel		textSetter: setTextSel		selectionGetter: getSelectionSel		menuGetter: getMenuSel.	^answer! !!Preferences class methodsFor: 'themes' stamp: 'jmv 11/23/2010 15:37'!juans	self setPreferencesFrom:	#(		(annotationPanes true)		(balloonHelpEnabled false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips true)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(fastDragWindowForMorphic true)		(honorDesktopCmdKeys false)		(menuKeyboardControl true)		(optionalButtons true)		(extraDebuggerButtons true)		(personalizedWorldMenu false)		(restartAlsoProceeds false)		(simpleMenus false)		(smartUpdating true)		(subPixelRenderFonts true)		(thoroughSenders true)	)! !BrowserCommentTextMorph removeSelector: #okToStyle!!BrowserCommentTextMorph reorganize!('displaying' hideOrShowPane hidePane showPane)('updating' noteNewOwner: update:)('accessing' lowerPane lowerPane: window)!ChangeList removeSelector: #contents:!ChangeList removeSelector: #restoreDeletedMethod!!ChangeList reorganize!('initialization-release' addItem:text: buttonSpecs initialize openAsMorphName:multiSelect: wantsPrettyDiffOption)('scanning' scanCategory scanCategory:class:meta:stamp: scanFile:from:to:)('menu actions' browseAllVersionsOfSelections browseCurrentVersionsOfSelections browseVersions buildMorphicCodePaneWith: changeListKey:from: changeListMenu: compareToCurrentVersion deselectAll destroyCurrentCodeOfSelections fileInSelections fileOutSelections invertSelections optionalButtonRow removeDoIts removeEmptyClassComments removeExistingMethodVersions removeNonSelections removeOlderMethodVersions removeSelections selectAll selectAllConflicts selectConflicts selectConflicts: selectConflictsWith selectEquivalentMethods selectMethodsForAbsentClasses selectMethodsForThisClass selectNewMethods selectRemovalsOfSent selectSuchThat selectSuchThat: selectUnchangedMethods)('viewing access' annotation contentsDiffedFromCurrent contentsSymbolQuints diffedVersionContents list listIndex listSelectionAt: listSelectionAt:put: selectedClass selectedClassOrMetaClass selectedMessageName stringContents toggleListIndex: undiffedContents)('accessing' changeList currentChange file setLostMethodPointer: showsVersions)('*Shout-Styling' shoutAboutToStyle:)!Smalltalk removeClassNamed: #AcceptableCleanTextMorph!