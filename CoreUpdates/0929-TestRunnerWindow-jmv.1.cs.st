'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 18 April 2011 at 3:19:47 pm'!!classDefinition: #TestRunner category: #'SUnit-UI'!Model subclass: #TestRunner	instanceVariableNames: 'result details passFail failures errors tests passFailText detailsText lastPass selectedFailureTest selectedErrorTest selectedSuite filter selectedSuites running runSemaphore completedTests totalTests progress '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-UI'!!classDefinition: #TestRunnerWindow category: #'Morphic-Tools'!SystemWindow subclass: #TestRunnerWindow	instanceVariableNames: 'passFailText detailsText'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Tools'!!FileList methodsFor: 'initialization' stamp: 'jmv 4/16/2011 14:21'!initialize	showDirsInFileList _ false.	fileSelectionBlock _ [ :entry :myPattern |		entry isDirectory ifTrue: [			showDirsInFileList		] ifFalse: [			(myPattern = '*' or: [ myPattern match: entry name ]) and: [				"Hide Mac resurce forks and folder service stores"				(entry name = '.DS_Store') not and: [					('._*' match: entry name) not ]]		]	].	dirSelectionBlock _ [ :dirName | true].! !!SystemWindow methodsFor: 'panes' stamp: 'jmv 4/16/2011 14:24'!widgetsColor	| cc |	widgetsColor ifNotNil: [ ^ widgetsColor ].	cc _ Color white.	Display depth > 2 ifTrue: [		model ifNotNil: [			model isInMemory ifTrue: [ cc _ self windowColor ]]].	self widgetsColor: cc.	^ cc.! !!DualChangeSorterWindow methodsFor: 'updating' stamp: 'jmv 4/16/2011 14:24'!decorateForInheritance! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 4/16/2011 14:19'!removeProgressWatcherself flag: #ojo.	"mover a la ventana"	progress ifNil: [ ^self ].	progress delete.	progress _ nil! !!TestRunner methodsFor: 'interface opening' stamp: 'jmv 4/16/2011 14:19'!updateProgressWatcher: textself flag: #ojo.	"mover a la ventana"	progress subLabel:  text.	progress done: (completedTests / totalTests) asFloat.! !!TestRunner methodsFor: 'menus' stamp: 'jmv 4/16/2011 14:29'!installProgressWatcherself flag: #ojo.	"mover a la ventana"	progress _ ProgressMorph label: 'Test progress'.	progress openInWorld! !!TestRunner methodsFor: 'processing' stamp: 'jmv 4/16/2011 14:06'!refreshTests	| preselected |	selectedSuite _ 0.	selectedFailureTest _ 0.	selectedErrorTest _ 0.	preselected _ Set new.	tests		with: selectedSuites		do: [ :t :f |			f ifTrue: [ preselected add: t ]].	tests _ self gatherTestNames.	selectedSuites _ tests collect: [ :ea |		preselected includes: ea ].	self changed: #tests.	self changed: #selectedFailureTest.		"added rew"	self changed: #selectedErrorTest.			"added rew"	self changed: #selectedSuite.! !!TestRunner methodsFor: 'updating' stamp: 'jmv 4/16/2011 14:08'!refreshTR	self updateErrors: TestResult new.	self updateFailures: TestResult new.	self displayPassFail: 'N/A'.	self displayDetails: '...'! !!TestRunner methodsFor: 'updating' stamp: 'jmv 4/16/2011 14:28'!runWindow		self updateErrors: TestResult new.	self updateFailures: TestResult new.	self displayPassFail: 'Running...'.	self displayDetails: '...'! !!TestRunner methodsFor: 'updating' stamp: 'jmv 4/16/2011 14:17'!updateWindow: aTestResult	self updatePassFail: aTestResult.	self updateDetails: aTestResult.	self updateFailures: aTestResult.	self updateErrors: aTestResult! !!TestRunner class methodsFor: 'instance creation' stamp: 'jmv 4/16/2011 14:04'!open	"TestRunner open"	^TestRunnerWindow open: self new label: nil! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:55'!buildDetailsText	detailsText _ TextModelMorph		textProvider: model		textGetter: #details.	detailsText hideScrollBarsIndefinitely.	^detailsText! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:55'!buildErrorsList	^ PluggableListMorph		model: model		listGetter: #errorsList		indexGetter: #selectedErrorTest		indexSetter: #debugErrorTest:! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:56'!buildFailuresList	^ PluggableListMorph		model: model		listGetter: #failuresList		indexGetter: #selectedFailureTest		indexSetter: #debugFailureTest:! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:56'!buildFilterButton	| filterButton |	filterButton := PluggableButtonMorph 				model: model				stateGetter: nil				action: #setFilter				label: 'Filter'.	filterButton color: self runButtonColor.	^filterButton! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:54'!buildLowerPanes	| failuresList errorsList column |	self buildPassFailText.	self buildDetailsText.	failuresList _ self buildFailuresList.	errorsList _ self buildErrorsList.	column _ LayoutMorph newColumn.	column		addMorph: passFailText fixedHeight: 26;		addAdjusterAndMorph: detailsText fixedHeight: 26;		addAdjusterAndMorph: failuresList proportionalHeight: 0.6;		addAdjusterAndMorph: errorsList proportionalHeight: 0.6.	^ column! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:52'!buildMorphicWindow	"TestRunner new openAsMorph"	self layoutMorph		addMorph: self buildUpperControls proportionalHeight: 0.25;		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.75.	self setLabel: 'SUnit Test Runner'.	self refreshWindow.	self extent: 460 @ 400! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:56'!buildPassFailText	passFailText _ TextModelMorph		textProvider: model		textGetter: #passFail.	passFailText hideScrollBarsIndefinitely.	^ passFailText! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 14:05'!buildRefreshButton	| refreshButton |	refreshButton := PluggableButtonMorph 				model: self				stateGetter: nil				action: #refreshTests				label: 'Refresh'.	refreshButton		color: self runButtonColor.	^refreshButton! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:58'!buildRunButton	| runButton |	runButton := PluggableButtonMorph 				model: model				stateGetter: #runButtonState				action: #runTests				label: 'Run all selected'.	runButton		color: self runButtonColor.	^runButton! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:58'!buildRunOneButton	| runOneButton |	runOneButton := PluggableButtonMorph 				model: model				stateGetter: #runButtonState				action: #runOneTest				label: 'Run last selected'.	runOneButton		color: self runButtonColor.	^runOneButton! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:58'!buildStopButton	| stopButton |	stopButton := PluggableButtonMorph 				model: model				stateGetter: #stopButtonState				action: #terminateRun				label: 'Stop'.	stopButton		color: self runButtonColor.	^stopButton! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:53'!buildUpperControls	| refreshButton filterButton stopButton runOneButton runButton row column1 column2 column3 theTestsList |	refreshButton _ self buildRefreshButton.	filterButton _ self buildFilterButton.	stopButton _ self buildStopButton.	column1 _ LayoutMorph newColumn.	column1 addMorphs: { refreshButton . filterButton . stopButton }.	theTestsList _ PluggableListMorphOfMany				model: model				listGetter: #tests				primarySelectionGetter: #selectedSuite				primarySelectionSetter: #selectedSuite:				listSelectionGetter: #listSelectionAt:				listSelectionSetter: #listSelectionAt:put:				menuGetter: #listMenu.	theTestsList autoDeselect: false.	theTestsList color: Color veryVeryLightGray.	column2 _ LayoutMorph newColumn.	column2		addMorph: theTestsList proportionalHeight: 1;		addMorph: self optionalButtonRow fixedHeight: self defaultButtonPaneHeight.	runOneButton _ self buildRunOneButton.	runButton _ self buildRunButton.		column3 _ LayoutMorph newColumn.	column3 addMorphs: { runOneButton . runButton }.		row _ LayoutMorph newRow.	row		addMorph: column1 fixedWidth: 80;		addMorph: column2 proportionalWidth: 1;		addMorph: column3 fixedWidth: 120.	^row! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 13:59'!optionalButtonRow	| row button buttons widths buttonColor |	buttons _ OrderedCollection new.	widths _ OrderedCollection new.	buttonColor _ Theme current buttonColorFrom: self windowColor.	self optionalButtonTuples do: [ :tuple | 		widths add: tuple first.		button _ PluggableButtonMorph 			model: model			stateGetter: nil			action: tuple third.		button color: buttonColor.		button			label: tuple second.		buttons add: button].	row _ LayoutMorph newRow.	row color: buttonColor.	row addMorphs: buttons widthProportionalTo: widths.	^row! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 14:00'!optionalButtonTuples	^#(		#(20	'select all' 				#selectAll) 		#(20	'deselect all' 			#deselectAll) 		#(20	'toggle selections' 		#toggleSelections)	)! !!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 4/16/2011 14:01'!windowColor	^ Theme current testRunner! !!TestRunnerWindow methodsFor: 'constants' stamp: 'jmv 4/16/2011 13:57'!runButtonColor	^ Color green lighter duller! !!TestRunnerWindow methodsFor: 'updating' stamp: 'jmv 4/16/2011 14:06'!refreshTests	model refreshTests.	self refreshWindow! !!TestRunnerWindow methodsFor: 'updating' stamp: 'jmv 4/16/2011 14:12'!refreshWindow	| pc |	pc _ self windowColor.	passFailText color: pc.	detailsText color: pc.	model refreshTR! !!TestRunnerWindow methodsFor: 'updating' stamp: 'jmv 4/16/2011 14:17'!update: aSymbol	super update: aSymbol.	aSymbol == #runTests ifTrue: [		self updateColors ]! !!TestRunnerWindow methodsFor: 'updating' stamp: 'jmv 4/16/2011 14:27'!updateColors	| aTestResult theColor |	theColor _ self windowColor.	model runButtonState ifFalse: [		aTestResult _ model result.		theColor _ aTestResult errors size + aTestResult failures size = 0			ifTrue: [ Color green lighter ]			ifFalse: [				aTestResult errors size > 0					ifTrue: [ Color red lighter ]					ifFalse: [ Color yellow lighter ]]].	self updatePartColors: theColor! !!TestRunnerWindow methodsFor: 'updating' stamp: 'jmv 4/16/2011 14:18'!updatePartColors: aColor	passFailText color: aColor.	 detailsText color: aColor! !TestRunner class removeSelector: #new!TestRunner class removeSelector: #windowColor!TestRunner removeSelector: #buildDetailsText!TestRunner removeSelector: #buildErrorsList!TestRunner removeSelector: #buildFailuresList!TestRunner removeSelector: #buildFilterButton!TestRunner removeSelector: #buildLowerPanes!TestRunner removeSelector: #buildMorphicWindow!TestRunner removeSelector: #buildPassFailText!TestRunner removeSelector: #buildRefreshButton!TestRunner removeSelector: #buildRunButton!TestRunner removeSelector: #buildRunOneButton!TestRunner removeSelector: #buildStopButton!TestRunner removeSelector: #buildUpperControls!TestRunner removeSelector: #defaultButtonPaneHeight!TestRunner removeSelector: #openAsMorph!TestRunner removeSelector: #optionalButtonRow!TestRunner removeSelector: #optionalButtonTuples!TestRunner removeSelector: #refreshWindow!TestRunner removeSelector: #runButtonColor!TestRunner removeSelector: #updatePartColors:!!classDefinition: #TestRunner category: #'SUnit-UI'!Model subclass: #TestRunner	instanceVariableNames: 'result details passFail failures errors tests lastPass selectedFailureTest selectedErrorTest selectedSuite filter selectedSuites running runSemaphore completedTests totalTests progress'	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-UI'!DualChangeSorter class removeSelector: #windowColor!