'From Cuis 3.2 of 12 April 2011 [latest update: #914] on 26 May 2011 at 8:41:43 am'!!classDefinition: #RemoteString category: #'System-Files'!Object subclass: #RemoteString	instanceVariableNames: 'sourceFileNumber filePositionHi '	classVariableNames: 'CurrentTextAttStructure CurrentTextAttVersion TextAttributeStructureVersions '	poolDictionaries: ''	category: 'System-Files'!!classDefinition: #CuisSourceFileArray category: #'System-Files'!SourceFileArray subclass: #CuisSourceFileArray	instanceVariableNames: 'files pointerScale'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Files'!!CuisSourceFileArray commentStamp: '<historical>' prior: 0!Uses the range for sourcePointer (16r1000000 to 16r4FFFFFF) quite differently than StandardSourceFileArray. First half is for Sources, second half is for Changes. The actual offset in the file is the sourcePointer -16r1000000 ( -16r3000000) multiplied by a scaling factor. This scaling factor can be, for example, 32, raising the limit to 1Gb.See the class comment at MigratingSourceFileArray to see how to activate this.!!classDefinition: #MigratingSourceFileArray category: #'System-Files'!SourceFileArray subclass: #MigratingSourceFileArray	instanceVariableNames: 'reader writer'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Files'!!MigratingSourceFileArray commentStamp: '<historical>' prior: 0!To aid in migrating from one kind of SourceFileArray to another one. For example:1) Check (and adjust if needed) the value for pointerScale in CuisSourceFileArray>>initialize2) Correct (if needed) SystemDictionary>>openSourceFiles, to create an instance of CuisSourceFileArray3) Evaluate:	| migrating |	migrating _ MigratingSourceFileArray.	migrating reader: SourceFiles writer: CuisSourceFileArray new.	SourceFiles _ migrating.	Smalltalk condenseSourcesAfter this, the new Sources file will be saved according to CuisSourceFileArray. After saving the image, when the image starts it will set up a new CuisSourceFileArray, and it is possible to remove any other subclass of SourceFileArray (such as MigratingSourceFileArray and StandardSourceFileArray) if desired.!!StandardSourceFileArray commentStamp: 'jmv 5/22/2011 19:13' prior: 0!This class implements the source file management behavior of traditional Squeak, with a sources file and a changes file. File positions are mapped such that those files can be up to 32MBytes in size.Structure: files		Array -- storing the actual source filesThe available address space for source pointers in a traditional CompiledMethod is 16r1000000 through 16r4FFFFFF. StandardSourceFileArray maps positions in the sources file to address range 16r1000000 through 16r1FFFFFF and 16r3000000 through 16r3FFFFFF, and positions in the changes file to address range 16r2000000 through 16r2FFFFFF and 16r4000000 through 16r4FFFFFF. This permits a maximum file size of 16r2000000 (32MB) for both the sources file and the changes file. !!classDefinition: #StandardSourceFileArrayTest category: #'Tests-Files'!TestCase subclass: #StandardSourceFileArrayTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tests-Files'!!StandardSourceFileArrayTest commentStamp: 'dtl 12/13/2009 23:42' prior: 0!This test documents the source pointer address conversion methods for StandardSourceFileArray.The available address space for source pointers in CompiledMethod is 16r1000000 through 16r4FFFFFF. StandardSourceFileArray maps positions in the sources file to address range 16r1000000 through 16r1FFFFFF and 16r3000000 through 16r3FFFFFF, and positions in the changes file to address range 16r2000000 through 16r2FFFFFF and 16r4000000 through 16r4FFFFFF. This permits a maximum file size of 16r2000000 (32MB) for both the sources file and the changes file. !!CompiledMethod methodsFor: 'printing' stamp: 'jmv 5/22/2011 21:36'!timeStamp	"Answer the authoring time-stamp for the given method, retrieved from the sources or changes file. Answer the empty string if no time stamp is available."	"(CompiledMethod compiledMethodAt: #timeStamp) timeStamp"	| file preamble stamp tokens tokenCount |	self fileIndex = 0 ifTrue: [^ String new].  "no source pointer for this method"	file := SourceFiles at: self fileIndex.	file ifNil: [^ String new].  "sources file not available"	"file does not exist happens in secure mode"	file := [file readOnlyCopy] on: FileDoesNotExistException do: [ :ex| nil ].	file ifNil: [^ String new].	preamble := self getPreambleFrom: file at: (0 max: self filePosition).	stamp := String new.	tokens := (preamble findString: 'methodsFor:' startingAt: 1) > 0		ifTrue: [Scanner new scanTokens: preamble]		ifFalse: [Array new  "ie cant be back ref"].	(((tokenCount := tokens size) between: 7 and: 8) and: [(tokens at: tokenCount - 5) = #methodsFor:])		ifTrue:			[(tokens at: tokenCount - 3) = #stamp:				ifTrue: ["New format gives change stamp and unified prior pointer"						stamp := tokens at: tokenCount - 2]].	((tokenCount between: 5 and: 6) and: [(tokens at: tokenCount - 3) = #methodsFor:])		ifTrue:			[(tokens at: tokenCount  - 1) = #stamp:				ifTrue: ["New format gives change stamp and unified prior pointer"					stamp := tokens at: tokenCount]].	file close.	^ stamp! !!CompiledMethod methodsFor: 'source code management' stamp: 'jmv 5/22/2011 21:58'!checkOKToAdd: size at: filePosition in: fileIndex	"Issue several warnings if the end of the changes file is approaching	a fixed size limit, and finally halt with an error if the limit is reached."	^ SourceFiles checkOKToAdd: size at: filePosition in: fileIndex! !!CompiledMethod methodsFor: 'source code management' stamp: 'jmv 5/22/2011 21:36'!getPreambleFrom: aFileStream at: position	|  writeStream c p |	writeStream _ String new writeStream.	p _ position.	c _ nil.	[ p >= 0 and: [ c ~~ $!! ]] whileTrue: [		aFileStream position: p.		c _ aFileStream basicNext.		p _ p - 1 ].	[ p >= 0] whileTrue: [		aFileStream position: p.		c _ aFileStream basicNext.		c == $!!			ifTrue: [^ writeStream contents reverse ]			ifFalse: [ writeStream nextPut: c ].		p _ p - 1 ]! !!FileContentsBrowserWindow methodsFor: 'menu building' stamp: 'jmv 5/22/2011 19:11'!messageListMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addList:#(			('fileIn'							fileInMessage				''		model)			('fileOut'						fileOutMessage				''		model)			-			('senders (n)'					browseSenders)			('implementors (m)'				browseImplementors)			('method inheritance (h)'		methodHierarchy)			('versions (v)'					browseVersions)			-			('remove method (x)'			removeMessage				''		model)).	^ aMenu! !!RemoteString class methodsFor: 'as yet unclassified' stamp: 'jmv 5/22/2011 19:43'!initialize	"Derive the current TextAttributes classes object structure"! !!SourceFileArray methodsFor: 'sourcePointer conversion' stamp: 'jmv 5/22/2011 21:57'!checkOKToAdd: size at: filePosition in: fileIndex	"Issue several warnings as the end of the changes file approaches its limit,	and finally halt with an error when the end is reached."	^ self subclassResponsibility! !!CuisSourceFileArray methodsFor: 'sourcePointer conversion' stamp: 'jmv 5/22/2011 23:35'!checkOKToAdd: size at: filePosition in: fileIndex	"Issue several warnings as the end of the changes file approaches its limit,	and finally halt with an error when the end is reached."	| fileSizeLimit margin |	fileSizeLimit _ 16r2000000 * pointerScale.	3 to: 1 by: -1 do:		[:i | margin := i*100000.		(filePosition + size + margin) > fileSizeLimit			ifTrue: [(filePosition + margin) > fileSizeLimit ifFalse:						[self inform: 'WARNING: your changes file is within' , margin printString , ' characters of its size limit.You should take action soon to reduce its size.You may proceed.']]			ifFalse: [^ self]].	(filePosition + size > fileSizeLimit) ifFalse: [^ self].	self error: 'You have reached the size limit of the changes file.You must take action now to reduce it.Close this error.  Do not attempt to proceed.'! !!CuisSourceFileArray methodsFor: 'sourcePointer conversion' stamp: 'jmv 5/22/2011 23:33'!fileIndexFromSourcePointer: anInteger	"Return the index of the source file which contains the source chunk addressed by anInteger"	^(anInteger - 16r1000000 anyMask: 16r2000000)		ifTrue: [2]		ifFalse: [1]! !!CuisSourceFileArray methodsFor: 'sourcePointer conversion' stamp: 'jmv 5/22/2011 23:50'!filePositionFromSourcePointer: anInteger	"Return the position of the source chunk addressed by anInteger"	| unscaledPosition |	unscaledPosition _ (anInteger - 16r1000000) bitAnd: 16r1FFFFFF.	^unscaledPosition * pointerScale! !!CuisSourceFileArray methodsFor: 'sourcePointer conversion' stamp: 'jmv 5/22/2011 23:51'!sourcePointerFromFileIndex: index andPosition: position	"Return a sourcePointer encoding the given file index and position"	| answer changesFlag |	changesFlag _ index = 2 ifTrue: [ 16r2000000 ] ifFalse: [ 0 ].	answer _ (position // pointerScale bitOr: changesFlag) + 16r1000000.	^answer! !!CuisSourceFileArray methodsFor: 'initialize-release' stamp: 'jmv 5/26/2011 08:37'!initialize	files _ Array new: 2.	files at: 1 put: (SourceFiles at: 1).	files at: 2 put: (SourceFiles at: 2).	pointerScale _ 32	"To change the pointerScale (and therefore the size limit for Sources and Changes, change this value, and use a MigratingSourceFileArray to create the new Sources and Changes files. See class comment there."! !!CuisSourceFileArray methodsFor: 'initialize-release' stamp: 'jmv 5/22/2011 23:34'!initialize: nFiles	files _ Array new: nFiles.	pointerScale _ 32! !!CuisSourceFileArray methodsFor: 'accessing' stamp: 'jmv 5/22/2011 21:47'!at: index	^files at: index! !!CuisSourceFileArray methodsFor: 'accessing' stamp: 'jmv 5/22/2011 21:47'!at: index put: aFile	files at: index put: aFile! !!CuisSourceFileArray methodsFor: 'accessing' stamp: 'jmv 5/22/2011 23:36'!pointerScaleForWriting	^pointerScale! !!CuisSourceFileArray methodsFor: 'accessing' stamp: 'jmv 5/22/2011 21:47'!size	^files size! !!CuisSourceFileArray class methodsFor: 'instance creation' stamp: 'jmv 5/22/2011 23:32'!install	"Replace SourceFiles by an instance of me with the standard sources and changes files.	If migrating, use MigratingSourceFileArray, see that class' comment"	"CuisSourceFileArray install"	SourceFiles _ self new! !!CuisSourceFileArray class methodsFor: 'instance creation' stamp: 'jmv 5/22/2011 22:25'!new: nFiles	^self new initialize: nFiles.! !!MigratingSourceFileArray methodsFor: 'accessing' stamp: 'jmv 5/22/2011 23:48'!at: index	^reader at: index! !!MigratingSourceFileArray methodsFor: 'accessing' stamp: 'jmv 5/22/2011 23:48'!at: index put: aFile	^reader at: index put: aFile! !!MigratingSourceFileArray methodsFor: 'accessing' stamp: 'jmv 5/22/2011 23:49'!pointerScaleForWriting	^writer pointerScaleForWriting! !!MigratingSourceFileArray methodsFor: 'accessing' stamp: 'jmv 5/22/2011 23:28'!reader: aSourceFileArray writer: anotherSourceFileArray	reader _ aSourceFileArray.	writer _ anotherSourceFileArray! !!MigratingSourceFileArray methodsFor: 'accessing' stamp: 'jmv 5/22/2011 23:49'!size	^reader size! !!MigratingSourceFileArray methodsFor: 'sourcePointer conversion' stamp: 'jmv 5/22/2011 23:49'!checkOKToAdd: size at: filePosition in: fileIndex	writer checkOKToAdd: size at: filePosition in: fileIndex! !!MigratingSourceFileArray methodsFor: 'sourcePointer conversion' stamp: 'jmv 5/22/2011 23:50'!fileIndexFromSourcePointer: anInteger	^reader fileIndexFromSourcePointer: anInteger! !!MigratingSourceFileArray methodsFor: 'sourcePointer conversion' stamp: 'jmv 5/22/2011 23:50'!filePositionFromSourcePointer: anInteger	^reader filePositionFromSourcePointer: anInteger! !!MigratingSourceFileArray methodsFor: 'sourcePointer conversion' stamp: 'jmv 5/22/2011 23:50'!sourcePointerFromFileIndex: index andPosition: position	^writer sourcePointerFromFileIndex: index andPosition: position! !!StandardSourceFileArray methodsFor: 'accessing' stamp: 'jmv 5/22/2011 22:41'!pointerScaleForWriting	^1! !!StandardSourceFileArray methodsFor: 'sourcePointer conversion' stamp: 'jmv 5/22/2011 21:57'!checkOKToAdd: size at: filePosition in: fileIndex	"Issue several warnings as the end of the changes file approaches its limit,	and finally halt with an error when the end is reached."	| fileSizeLimit margin |	fileSizeLimit := 16r2000000.	3 to: 1 by: -1 do:		[:i | margin := i*100000.		(filePosition + size + margin) > fileSizeLimit			ifTrue: [(filePosition + margin) > fileSizeLimit ifFalse:						[self inform: 'WARNING: your changes file is within' , margin printString , ' characters of its size limit.You should take action soon to reduce its size.You may proceed.']]			ifFalse: [^ self]].	(filePosition + size > fileSizeLimit) ifFalse: [^ self].	self error: 'You have reached the size limit of the changes file.You must take action now to reduce it.Close this error.  Do not attempt to proceed.'! !!StandardSourceFileArrayTest methodsFor: 'testing' stamp: 'nice 12/27/2009 03:11'!testAddressRange	"Test source pointer to file position address translation across the full address range"		| sf |	sf := StandardSourceFileArray new.	(16r1000000 to: 16r4FFFFFF by: 811) do: [:e | | i a p |		i := sf fileIndexFromSourcePointer: e.		p := sf filePositionFromSourcePointer: e.		a := sf sourcePointerFromFileIndex: i andPosition: p.		self assert: a = e]! !!StandardSourceFileArrayTest methodsFor: 'testing' stamp: 'ul 11/15/2010 12:05'!testChangesFileAddressRange	"Test file position to source pointer address translation for the changes file"		| sf a |	sf := StandardSourceFileArray new.	(0 to: 16r1FFFFFF by: 811) do: [:e | | a2 i p |		a := sf sourcePointerFromFileIndex: 2 andPosition: e.		i := sf fileIndexFromSourcePointer: a.		self assert: i = 2.		p := sf filePositionFromSourcePointer: a.		self assert: p = e.		a2 := sf sourcePointerFromFileIndex: 2 andPosition: p.		self assert: a2 = a].	(0 to: 16rFFFFFF by: 811) do: [:e |		a := sf sourcePointerFromFileIndex: 2 andPosition: e.		self assert: (a between: 16r2000000 and: 16r2FFFFFF)].	(16r1000000 to: 16r1FFFFFF by: 811) do: [:e |		a := sf sourcePointerFromFileIndex: 2 andPosition: e.		self assert: (a between: 16r4000000 and: 16r4FFFFFF)]! !!StandardSourceFileArrayTest methodsFor: 'testing' stamp: 'jmv 5/22/2011 19:02'!testFileIndexFromSourcePointer	"Test derivation of file index for sources or changes file from source pointers"	| sf |	sf := StandardSourceFileArray new.	"sources file mapping"	self assert: 1 = (sf fileIndexFromSourcePointer: 16r1000000).	self assert: 1 = (sf fileIndexFromSourcePointer: 16r1000013).	self assert: 1 = (sf fileIndexFromSourcePointer: 16r1FFFFFF).	self assert: 1 = (sf fileIndexFromSourcePointer: 16r3000000).	self assert: 1 = (sf fileIndexFromSourcePointer: 16r3000013).	self assert: 1 = (sf fileIndexFromSourcePointer: 16r3FFFFFF).	(16r1000000 to: 16r1FFFFFF by: 811) do: [:e | self assert: 1 = (sf fileIndexFromSourcePointer: e)].	(16r3000000 to: 16r3FFFFFF by: 811) do: [:e | self assert: 1 = (sf fileIndexFromSourcePointer: e)].	"changes file mapping"	self assert: 2 = (sf fileIndexFromSourcePointer: 16r2000000).	self assert: 2 = (sf fileIndexFromSourcePointer: 16r2000013).	self assert: 2 = (sf fileIndexFromSourcePointer: 16r2FFFFFF).	self assert: 2 = (sf fileIndexFromSourcePointer: 16r4000000).	self assert: 2 = (sf fileIndexFromSourcePointer: 16r4000013).	self assert: 2 = (sf fileIndexFromSourcePointer: 16r4FFFFFF).	(16r2000000 to: 16r2FFFFFF by: 811) do: [:e | self assert: 2 = (sf fileIndexFromSourcePointer: e)].	(16r4000000 to: 16r4FFFFFF by: 811) do: [:e | self assert: 2 = (sf fileIndexFromSourcePointer: e)]! !!StandardSourceFileArrayTest methodsFor: 'testing' stamp: 'dtl 12/14/2009 00:10'!testFilePositionFromSourcePointer	"Test derivation of file position for sources or changes file from source pointers"	| sf |	sf := StandardSourceFileArray new.	"sources file"	self assert: 0 = (sf filePositionFromSourcePointer: 16r1000000).	self assert: 16r13 = (sf filePositionFromSourcePointer: 16r1000013).	self assert: 16rFFFFFF = (sf filePositionFromSourcePointer: 16r1FFFFFF).	self assert: 16r1000000 = (sf filePositionFromSourcePointer: 16r3000000).	self assert: 16r1000013 = (sf filePositionFromSourcePointer: 16r3000013).	self assert: 16r1FFFFFF = (sf filePositionFromSourcePointer: 16r3FFFFFF).	"changes file"	self assert: 0 = (sf filePositionFromSourcePointer: 16r2000000).	self assert: 16r13 = (sf filePositionFromSourcePointer: 16r2000013).	self assert: 16rFFFFFF = (sf filePositionFromSourcePointer: 16r2FFFFFF).	self assert: 16r1000000 = (sf filePositionFromSourcePointer: 16r4000000).	self assert: 16r1000013 = (sf filePositionFromSourcePointer: 16r4000013).	self assert: 16r1FFFFFF = (sf filePositionFromSourcePointer: 16r4FFFFFF).	"the following numeric ranges are unused but currently produces results as follows"	self assert: 0 = (sf filePositionFromSourcePointer: 16r0000000).	self assert: 16r13 = (sf filePositionFromSourcePointer: 16r0000013).	self assert: 16rFFFFFF = (sf filePositionFromSourcePointer: 16r0FFFFFF)! !!StandardSourceFileArrayTest methodsFor: 'testing' stamp: 'dtl 12/14/2009 00:09'!testSourcePointerFromFileIndexAndPosition	"Test valid input ranges"	| sf |	sf := StandardSourceFileArray new.	self should: [sf sourcePointerFromFileIndex: 0 andPosition: 0] raise: Error.	self shouldnt: [sf sourcePointerFromFileIndex: 1 andPosition: 0] raise: Error.	self shouldnt: [sf sourcePointerFromFileIndex: 2 andPosition: 0] raise: Error.	self should: [sf sourcePointerFromFileIndex: 0 andPosition: 3] raise: Error.	self should: [sf sourcePointerFromFileIndex: 1 andPosition: -1] raise: Error.	self shouldnt: [sf sourcePointerFromFileIndex: 1 andPosition: 16r1FFFFFF] raise: Error.	self should: [sf sourcePointerFromFileIndex: 1 andPosition: 16r2000000] raise: Error.	self should: [sf sourcePointerFromFileIndex: 3 andPosition: 0] raise: Error.	self should: [sf sourcePointerFromFileIndex: 4 andPosition: 0] raise: Error.		self assert: 16r1000000 = (sf sourcePointerFromFileIndex: 1 andPosition: 0).	self assert: 16r1000013 = (sf sourcePointerFromFileIndex: 1 andPosition: 16r13).	self assert: 16r1FFFFFF = (sf sourcePointerFromFileIndex: 1 andPosition: 16rFFFFFF).	self assert: 16r2000000 = (sf sourcePointerFromFileIndex: 2 andPosition: 0).	self assert: 16r2000013 = (sf sourcePointerFromFileIndex: 2 andPosition: 16r13).	self assert: 16r2FFFFFF = (sf sourcePointerFromFileIndex: 2 andPosition: 16rFFFFFF).	self assert: 16r3000000 = (sf sourcePointerFromFileIndex: 1 andPosition: 16r1000000).	self assert: 16r3000013 = (sf sourcePointerFromFileIndex: 1 andPosition: 16r1000013).	self assert: 16r3FFFFFF = (sf sourcePointerFromFileIndex: 1 andPosition: 16r1FFFFFF).	self assert: 16r4000000 = (sf sourcePointerFromFileIndex: 2 andPosition: 16r1000000).	self assert: 16r4000013 = (sf sourcePointerFromFileIndex: 2 andPosition: 16r1000013).	self assert: 16r4FFFFFF = (sf sourcePointerFromFileIndex: 2 andPosition: 16r1FFFFFF)! !!StandardSourceFileArrayTest methodsFor: 'testing' stamp: 'ul 11/15/2010 12:05'!testSourcesFileAddressRange	"Test file position to source pointer address translation for the sources file"		| sf a |	sf := StandardSourceFileArray new.	(0 to: 16r1FFFFFF by: 811) do: [:e | | a2 p i |		a := sf sourcePointerFromFileIndex: 1 andPosition: e.		i := sf fileIndexFromSourcePointer: a.		self assert: i = 1.		p := sf filePositionFromSourcePointer: a.		self assert: p = e.		a2 := sf sourcePointerFromFileIndex: 1 andPosition: p.		self assert: a2 = a].	(0 to: 16rFFFFFF by: 811) do: [:e |		a := sf sourcePointerFromFileIndex: 1 andPosition: e.		self assert: (a between: 16r1000000 and: 16r1FFFFFF)].	(16r1000000 to: 16r1FFFFFF by: 811) do: [:e |		a := sf sourcePointerFromFileIndex: 1 andPosition: e.		self assert: (a between: 16r3000000 and: 16r3FFFFFF)]! !!VersionsBrowser methodsFor: 'init & update' stamp: 'jmv 5/22/2011 21:28'!scanVersionsOf: method class: class meta: meta category: category selector: selector	| position prevPos prevFileIndex preamble tokens sourceFilesCopy stamp |	selectorOfMethod _ selector.	currentCompiledMethod _ method.	classOfMethod _ meta ifTrue: [class class] ifFalse: [class].	changeList _ OrderedCollection new.	list _ OrderedCollection new.	self addedChangeRecord ifNotNil: [ :change |		self addItem: change text: ('{1} (in {2})' format: { change stamp. change fileName }) ].	listIndex _ 0.	position _ method filePosition.	sourceFilesCopy _ SourceFiles collect:		[:x | x ifNotNil: [ x readOnlyCopy]].	method fileIndex = 0 ifTrue: [^ nil].	file _ sourceFilesCopy at: method fileIndex.	[position notNil & file notNil]		whileTrue:		[file position: (0 max: position-150).  "Skip back to before the preamble"		[file position < (position-1)]  "then pick it up from the front"			whileTrue: [				preamble _ file nextChunk.				file skipSeparators			"Skip any padding"				].		"Preamble is likely a linked method preamble, if we're in			a changes file (not the sources file).  Try to parse it			for prior source position and file index"		prevPos _ nil.		stamp _ ''.		(preamble findString: 'methodsFor:' startingAt: 1) > 0			ifTrue: [tokens _ Smalltalk actualScannerClass new scanTokens: preamble]			ifFalse: [tokens _ Array new  "ie cant be back ref"].		((tokens size between: 7 and: 8)			and: [(tokens at: tokens size-5) = #methodsFor:])			ifTrue: [				(tokens at: tokens size-3) = #stamp:				ifTrue: ["New format gives change stamp and unified prior pointer"						stamp _ tokens at: tokens size-2.						prevPos _ tokens last.						prevFileIndex _ sourceFilesCopy fileIndexFromSourcePointer: prevPos.						prevPos _ sourceFilesCopy filePositionFromSourcePointer: prevPos]				ifFalse: ["Old format gives no stamp; prior pointer in two parts"						prevPos _ tokens at: tokens size-2.						prevFileIndex _ tokens last].				(prevPos = 0 or: [prevFileIndex = 0]) ifTrue: [prevPos _ nil]].		((tokens size between: 5 and: 6)			and: [(tokens at: tokens size-3) = #methodsFor:])			ifTrue: [				(tokens at: tokens size-1) = #stamp:				ifTrue: ["New format gives change stamp and unified prior pointer"						stamp _ tokens at: tokens size]]. 		self addItem:				(ChangeRecord new file: file position: position type: #method						class: class name category: category meta: meta stamp: stamp)			text: stamp , ' ' , class name , (meta ifTrue: [' class '] ifFalse: [' ']) , selector.		position _ prevPos.		prevPos notNil ifTrue: [			file _ sourceFilesCopy at: prevFileIndex]].	sourceFilesCopy do: [:x | x notNil ifTrue: [x close]].	listSelections _ Array new: list size withAll: false! !!ClassCommentVersionsBrowser methodsFor: 'basic function' stamp: 'jmv 5/22/2011 21:39'!scanVersionsOf: class	"Scan for all past versions of the class comment of the given class"	| oldCommentRemoteStr sourceFilesCopy position prevPos stamp preamble tokens prevFileIndex |	classOfMethod _ class.	oldCommentRemoteStr _ class  organization commentRemoteStr.	currentCompiledMethod _ oldCommentRemoteStr.	selectorOfMethod _ #Comment.	changeList _ OrderedCollection new.	list _ OrderedCollection new.	listIndex _ 0.	oldCommentRemoteStr ifNil:[^ nil] ifNotNil: [oldCommentRemoteStr sourcePointer].	sourceFilesCopy _ SourceFiles collect:		[:x | x ifNotNil: [x readOnlyCopy]].	position _ oldCommentRemoteStr position.	file _ sourceFilesCopy at: oldCommentRemoteStr sourceFileNumber.	[position notNil & file notNil]		whileTrue:		[file position: (0 max: position-150).  " Skip back to before the preamble"		[file position < (position-1)]  "then pick it up from the front"			whileTrue: [				preamble _ file nextChunk.				file skipSeparators			"Skip any padding"				].		prevPos _ nil.		stamp _ ''.		(preamble findString: 'commentStamp:' startingAt: 1) > 0			ifTrue: [tokens _ Smalltalk actualScannerClass new scanTokens: preamble.				(tokens at: tokens size-3) = #commentStamp:				ifTrue: ["New format gives change stamp and unified prior pointer"						stamp _ tokens at: tokens size-2.						prevPos _ tokens last.						prevFileIndex _ sourceFilesCopy fileIndexFromSourcePointer: prevPos.						prevPos _ sourceFilesCopy filePositionFromSourcePointer: prevPos]]			ifFalse: ["The stamp get lost, maybe after a condenseChanges"					stamp _ '<historical>']. 		self addItem:				(ChangeRecord new file: file position: position type: #classComment						class: class name category: nil meta: class stamp: stamp)			text: stamp , ' ' , class name , ' class comment'. 		prevPos = 0 ifTrue:[prevPos _ nil].		position _ prevPos.		prevPos notNil 					ifTrue:[file _ sourceFilesCopy at: prevFileIndex]].	sourceFilesCopy do: [:x | x notNil ifTrue: [x close]].	listSelections _ Array new: list size withAll: false! !RemoteString class removeSelector: #currentTextAttVersion!RemoteString initialize!RemoteString class removeSelector: #structureAt:!RemoteString removeSelector: #makeNewTextAttVersion!!classDefinition: #RemoteString category: #'System-Files'!Object subclass: #RemoteString	instanceVariableNames: 'sourceFileNumber filePositionHi'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Files'!PositionableStream removeSelector: #decodeStyle:version:!