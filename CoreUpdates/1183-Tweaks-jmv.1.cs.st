'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 29 December 2011 at 9:53:57 am'!!ChangeSorter methodsFor: 'code pane' stamp: 'jmv 12/29/2011 09:48'!                            acceptedStringOrText	"return the source code that shows in the bottom pane"	| sel class strm changeType answer |	self changed: #clearUserEdits.	currentClassName ifNil: [^ myChangeSet preambleString ifNil: ['']].	class _ self selectedClassOrMetaClass.	(sel _ currentSelector)		ifNotNil: [			changeType _ (myChangeSet atSelector: (sel _ sel asSymbol) class: class).			changeType == #remove				ifTrue: [^'Method has been removed (see versions)'].			changeType == #addedThenRemoved				ifTrue: [^'Added then removed (see versions)'].			class ifNil: [^'Method was added, but cannot be found!!'].			(class includesSelector: sel)				ifFalse: [^'Method was added, but cannot be found!!'].			answer _  (class sourceCodeAt: sel).			(#(prettyPrint prettyLineDiffs prettyWordDiffs) includes: contentsSymbol) ifTrue: [				answer _ (class compilerClass new						format: answer						in: class 						notifying: nil)].			self showingAnyKindOfDiffs				ifTrue: [ answer _ (self diffFromPriorSourceFor: answer) ].			^ answer asText makeSelectorBoldIn: class ]		ifNil: [			strm _ WriteStream on: (String new: 100).			(myChangeSet classChangeAt: currentClassName) do: [ :each |				each == #remove ifTrue: [strm nextPutAll: 'Entire class was removed.'; cr].				each == #addedThenRemoved ifTrue: [strm nextPutAll: 'Class was added then removed.'].				each == #rename ifTrue: [strm nextPutAll: 'Class name was changed.'; cr].				each == #add ifTrue: [strm nextPutAll: 'Class definition was added.'; cr].				each == #change ifTrue: [strm nextPutAll: 'Class definition was changed.'; cr].				each == #reorganize ifTrue: [strm nextPutAll: 'Class organization was changed.'; cr].				each == #comment ifTrue: [strm nextPutAll: 'New class comment.'; cr.				]].			^ strm contents].! !!ClassChangeRecord methodsFor: 'all changes' stamp: 'jmv 12/29/2011 09:48'!                     noteChangeType: changeSymbol fromClass: class	(changeSymbol == #new or: [changeSymbol == #add]) ifTrue: [		changeTypes add: #add.		changeTypes remove: #change ifAbsent: nil.		^ self].	changeSymbol == #change ifTrue: [		(changeTypes includes: #add) ifTrue: [^ self].		^ changeTypes add: changeSymbol].	changeSymbol == #addedThenRemoved ifTrue:		[^ self].  "An entire class was added but then removed"	changeSymbol == #comment ifTrue:		[^ changeTypes add: changeSymbol].	changeSymbol == #reorganize ifTrue:		[^ changeTypes add: changeSymbol].	changeSymbol == #rename ifTrue:		[^ changeTypes add: changeSymbol].	(changeSymbol beginsWith: 'oldName: ') ifTrue: [		"Must only be used when assimilating other changeSets"		(changeTypes includes: #add) ifTrue: [^ self].		priorName _ changeSymbol copyFrom: 'oldName: ' size + 1 to: changeSymbol size.		^ changeTypes add: #rename].	changeSymbol == #remove ifTrue: [		(changeTypes includes: #add)			ifTrue: [changeTypes add: #addedThenRemoved]			ifFalse: [changeTypes add: #remove].		^ changeTypes removeAllFoundIn: #(add change comment reorganize)].	self error: 'Unrecognized changeType'! !