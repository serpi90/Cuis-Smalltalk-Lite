'From Cuis 2.7 of 3 September 2010 [latest update: #600] on 8 September 2010 at 10:30:58 am'!!FixedLayoutSpec methodsFor: 'initialization' stamp: 'jmv 9/3/2010 22:52'!initialize	"Just some reasonable defaults"	fixedWidth _ nil.	fixedHeight _ nil.	minorDirectionPadding _ 0.5! !!FixedLayoutSpec methodsFor: 'accessing' stamp: 'jmv 9/3/2010 23:05'!fixedHeightFor: aMorph	"If nil, store whatever the initial size of aMorph is."	^fixedHeight ifNil: [ fixedHeight _ aMorph height ]! !!FixedLayoutSpec methodsFor: 'accessing' stamp: 'jmv 9/3/2010 23:05'!fixedWidthFor: aMorph	"If nil, store whatever the initial size of aMorph is."	^fixedWidth ifNil: [ fixedWidth _ aMorph width ]! !!FixedLayoutSpec methodsFor: 'accessing' stamp: 'jmv 9/3/2010 23:15'!useMorphHeight	"Do not attempt to layout height. Use current morph height if possible."	fixedHeight _ nil! !!FixedLayoutSpec methodsFor: 'layout' stamp: 'jmv 9/3/2010 23:05'!heightOf: aMorph for: availableSpace	"If nil, store whatever the initial size of aMorph is."	^fixedHeight ifNil: [ fixedHeight _ aMorph height ]! !!FixedLayoutSpec methodsFor: 'layout' stamp: 'jmv 9/3/2010 23:05'!widthOf: aMorph for: availableSpace	"If nil, store whatever the initial size of aMorph is."	^fixedWidth ifNil: [ fixedWidth _ aMorph width ]! !!LayoutSpec methodsFor: 'initialization' stamp: 'jmv 9/3/2010 22:53'!initialize	"Just some reasonable defaults"	super initialize.	fixedWidth _ 0.	fixedHeight _ 0.	proportionalWidth _ 1.0.	proportionalHeight _ 1.0! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 9/3/2010 23:06'!fixedHeightFor: aMorph	"If proportional is zero, behave as a FixedLayoutSpec (at least in this direction).	Otherwise, we do proportional layout, we don't have a fixed size."	proportionalHeight = 0.0		ifTrue: [ ^super fixedHeightFor: aMorph ].	^0! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 9/3/2010 23:02'!fixedWidthFor: aMorph	"If proportional is zero, behave as a FixedLayoutSpec (at least in this direction).	Otherwise, we do proportional layout, we don't have a fixed size."	proportionalWidth = 0.0		ifTrue: [ ^super fixedWidthFor: aMorph ].	^0! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 9/3/2010 23:15'!useMorphHeight	"Do not attempt to layout height. Use current morph height if possible."	super useMorphHeight.	proportionalHeight _ 0.0! !!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 9/3/2010 23:15'!useMorphWidth	"Do not attempt to layout width. Use current morph width if possible."	super useMorphWidth.	proportionalWidth _ 0.0! !!LayoutSpec methodsFor: 'layout' stamp: 'jmv 9/3/2010 23:06'!heightOf: aMorph for: availableSpace	"If proportional is zero, behave as a FixedLayoutSpec (at least in this direction).	Otherwise, we do proportional layout, and the stored fixed size is a minimum size."	| fixed |	fixed _ super heightOf: aMorph for: availableSpace.	proportionalHeight = 0.0		ifTrue: [ ^fixed ].	^fixed max: proportionalHeight * availableSpace! !!LayoutSpec methodsFor: 'layout' stamp: 'jmv 9/3/2010 23:04'!widthOf: aMorph for: availableSpace	"If proportional is zero, behave as a FixedLayoutSpec (at least in this direction).	Otherwise, we do proportional layout, and the stored fixed size is a minimum size."	| fixed |	fixed _ super widthOf: aMorph for: availableSpace.	proportionalWidth = 0.0		ifTrue: [ ^fixed ].	^fixed max: proportionalWidth * availableSpace! !!LayoutSpec class methodsFor: 'nil' stamp: 'jmv 9/3/2010 23:19'!keepMorphExtent	^self new		useMorphWidth;		useMorphHeight! !!StringHolder class methodsFor: 'instance creation' stamp: 'jmv 9/7/2010 12:44'!normal	| model |	model _ self new.	model contents: (Text initialStyle: (TextStyle named: 'Normal') string: '').	^model! !