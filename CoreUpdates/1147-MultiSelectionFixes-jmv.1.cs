'From Cuis 4.0 of 16 November 2011 [latest update: #1144] on 18 November 2011 at 2:12:18 pm'!!Editor methodsFor: 'accessing-selection' stamp: 'jmv 11/18/2011 09:13'!                        selectionIntervalsDo: aBlock	"Evaluate over all selections. For editors with a single selection, just evaluate over it.	Subclasses with multi-selection redefine this method."	aBlock value: self selectionInterval! !!TextEditor methodsFor: 'accessing-selection' stamp: 'jmv 11/18/2011 09:14'!                      selectionIntervalsDo: aBlock	"Evaluate over all selections. For editors with a single selection, just evaluate over it.	Subclasses with multi-selection redefine this method."	"multi-selection"	selectionStartBlocks with: selectionStopBlocks do: [ :startBlock :stopBlock |		aBlock value: (startBlock stringIndex to: stopBlock stringIndex - 1) ].	"Simple (i.e. last) selection"	aBlock value: self selectionInterval! !!TextEditor methodsFor: 'current selection' stamp: 'jmv 11/18/2011 09:28'!            recomputeSelection	"The same characters are selected but their coordinates may have changed."	selectionStartBlocks _ selectionStartBlocks collect: [ :block | (paragraph characterBlockForIndex: block stringIndex) ].	selectionStopBlocks _ selectionStopBlocks collect: [ :block | (paragraph characterBlockForIndex: block stringIndex) ].	self markIndex: self markIndex pointIndex: self pointIndex! !!TextEditor methodsFor: 'private' stamp: 'jmv 11/18/2011 09:29'!             applyAttribute: aTextAttribute	"The user selected aTextAttribute via shortcut, menu or other means.	If there is a selection, apply the attribute to the selection.	In any case use the attribute for the user input (emphasisHere)"	"This generates undo"	| anythingDone |	anythingDone _ false.	emphasisHere _ Text addAttribute: aTextAttribute toArray: emphasisHere.	self selectionIntervalsDo: [ :interval |		(interval notEmpty or: [ aTextAttribute isParagraphAttribute ])			ifTrue: [				anythingDone _ true.				model logUndoAndAddAttribute: aTextAttribute from: interval first to: interval last.				paragraph recomposeFrom: interval first to: interval last delta: 0 ]].	anythingDone ifTrue: [		self recomputeSelection.	"Needed so visible selection is updated to reflect new visual extent of selection"		self userHasEdited.		morph possiblyChanged ]! !